[{"source_Lan": "java###ANDequalOR_Test.java", "source_code": "    public static long ANDequalOR(int n, int[] arr) {\n        long ans = 0;\n        int pre = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == arr[pre]) {\n                count++;\n            } else {\n                ans += (count * (count + 1)) / 2;\n                pre = i;\n                count = 1;\n            }\n        }\n        ans += (count * (count + 1)) / 2;\n        return ans;\n    }", "trans_code": "def ANDequalOR ( n , arr ) :\n    ans = 0\n    pre = 0\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] == arr [ pre ] :\n            count += 1\n        else :\n            ans += ( count * ( count + 1 ) ) / 2\n            pre = i\n            count = 1\n    ans += ( count * ( count + 1 ) ) / 2\n    return ans\n", "reference_code": "def ANDequalOR( n: int, arr: List[int]) -> int:\n    ans = 0\n    pre = 0\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[pre]:\n            count += 1\n        else:\n            ans += (count * (count + 1)) // 2\n            pre = i\n            count = 1\n    ans += (count * (count + 1)) // 2\n    return ans", "target_Lan": "python###ANDequalOR.py", "target_code_shell": "from typing import List\n\n# TOFILL\nif __name__ == \"__main__\":\n    print(ANDequalOR(5, [1,2,3,4,5]))\n    print(ANDequalOR(3, [1,1,1]))\n    print(ANDequalOR(2, [1,2]))\n    print(ANDequalOR(4, [1,1,2,2]))\n    print(ANDequalOR(6, [1,2,1,2,1,2]))"}, {"source_Lan": "java###findGoodPairs_Test.java", "source_code": "    static long findGoodPairs(int a[], int n, int k){\n        \n        long ans = 0;\n        Map<Integer, Integer> hm = new HashMap<>();\n        for(int i = k; i < n; i++){\n            hm.put(a[i - k], hm.getOrDefault(a[i - k], 0) + 1);\n            ans += hm.getOrDefault(a[i], 0);\n        }\n        return ans;\n    }", "trans_code": "def find_good_pairs ( a , n , k ) :\n    ans = 0\n    hm = { }\n    for i in range ( k , n ) :\n        hm [ a [ i - k ] ] = hm.get ( a [ i - k ] , 0 ) + 1\n        ans += hm.get ( a [ i ] , 0 )\n    return ans\n", "reference_code": "def findGoodPairs( a, n, k):\n    mp=dict()\n    for i in range(n):\n        if (a[i] in mp):\n            mp[a[i]].append(i)\n        else:\n            mp[a[i]]=[i]\n    c=0\n    for i in mp:\n        li=mp[i]\n        le=len(li)\n        i=0\n        j=0\n        while(j<le):\n            if (li[j]-li[i])>=k:\n                c+=(le-j)\n                i+=1\n            else:\n                j+=1\n    return c", "target_Lan": "python###findGoodPairs.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(findGoodPairs([1,2,3,4,5,6,7,8,9,10], 10, 1))\n    print(findGoodPairs([10,20,30,40,50,60,70,80,90,100], 10, 2))\n    print(findGoodPairs([100,200,300,400,500,600,700,800,900,1000], 10, 3))\n    print(findGoodPairs([1,1,1,1,1,1,1,1,1,1], 10, 4))\n    print(findGoodPairs([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10], 10, 5))"}, {"source_Lan": "java###HeightTower_Test.java", "source_code": "    public static int HeightTower(int n, int k, int[] arr) {\n        \n        Stack<Integer> st = new Stack<>();\n        \n        int totalHeight = 0;\n        \n        int i = 0;\n        \n        for (int j = 0; j < n; j++) {\n            totalHeight += arr[j];\n            st.push(arr[j]);\n            \n            if (totalHeight > k) {\n                int removeBoxes = i + 1;\n                \n                while (removeBoxes > 0 && !st.empty()) {\n                    totalHeight -= st.pop();\n                    removeBoxes--;\n                }\n                i++;\n            }\n        }\n        \n        return totalHeight;\n    }", "trans_code": "def HeightTower ( n , k , arr ) :\n    st = Stack ( )\n    total_height = 0\n    i = 0\n    for j in range ( n ) :\n        total_height += arr [ j ]\n        st.push ( arr [ j ] )\n        if total_height > k :\n            remove_boxes = i + 1\n            while remove_boxes > 0 and not st.empty ( ) :\n                total_height -= st.pop ( )\n                remove_boxes -= 1\n            i += 1\n    return total_height\n", "reference_code": "def Towerheight( n: int, k: int, arr: List[int]) -> int:\n    # Initializing variables and stack.\n    st = []\n    total_height = 0\n    i = 0\n    # Iterating over the boxes.\n    for j in range(n):\n        total_height += arr[j]\n        st.append(arr[j])\n        # Checking if total height exceeds the limit.\n        if total_height > k:\n            # Removing boxes to reduce height.\n            remove_boxes = i + 1\n            while remove_boxes > 0 and st:\n                total_height -= st.pop()\n                remove_boxes -= 1\n            i += 1\n    # Returning the final total height.\n    return total_height", "target_Lan": "python###Towerheight.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(Towerheight(0, 0, []))\n    print(Towerheight(1, 10, [10]))\n    print(Towerheight(2, 15, [10, 5]))\n    print(Towerheight(3, 20, [10, 5, 15]))\n    print(Towerheight(4, 25, [10, 5, 15, 20]))"}, {"source_Lan": "java###timeTravel_Test.java", "source_code": "    public static int timeTravel(int n, int[] arr) {\n        int ans = 0;\n        for(int i = 1; i < n; i++)\n            ans += (arr[i] > arr[i - 1] ? 1 : (arr[i] < arr[i - 1] ? 2 : 0));\n        return ans;\n    }", "trans_code": "def time_travel ( n , arr ) :\n    ans = 0\n    for i in range ( 1 , n ) :\n        ans += ( arr [ i ] > arr [ i - 1 ] )\n    return ans\n", "reference_code": "def timeTravel( n, arr):\n    ans=0\n    for i in range(1,n):\n        if (arr[i]>arr[i-1]):\n            ans+=1\n        elif (arr[i]<arr[i-1]):\n            ans+=2\n    return ans", "target_Lan": "python###timeTravel.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(timeTravel(4, [1, 2, 3, 4]))\n    print(timeTravel(5, [5, 5, 5, 5, 5]))\n    print(timeTravel(3, [3, 2, 1]))\n    print(timeTravel(2, [10, 10]))\n    print(timeTravel(6, [1, 5, 6, 7, 2, 1]))"}, {"source_Lan": "java###lastFairyStanding_Test.java", "source_code": "    public static int lastFairyStanding(int n, int k) {\n        int i = 1, ans = 0;\n        while (i <= n)\n            ans = (ans + k) % i++;\n        return ans + 1;\n    }", "trans_code": "def lastFairyStanding ( n , k ) :\n    i , ans = 1 , 0\n    while i <= n :\n        ans = ( ans + k ) % i\n    return ans + 1\n", "reference_code": "def lastFairyStanding( n : int, k : int) -> int:\n    ans = 0\n    for x in range(2, n+1): \n        ans = (ans + k) % x\n    return ans + 1", "target_Lan": "python###lastFairyStanding.py", "target_code_shell": "import math\n# TOFILL\nif __name__ == \"__main__\":\n    print(lastFairyStanding(5, 3))\n    print(lastFairyStanding(10, 2))\n    print(lastFairyStanding(100, 5))\n    print(lastFairyStanding(0, 0))\n    print(lastFairyStanding(-1, -1))"}, {"source_Lan": "java###collectingCoins_Test.java", "source_code": "    public static int collectingCoins(int N, int[][] Coins) {\n        Map<Integer, Integer> hor = new HashMap<>(); \n        Map<Integer, Integer> ver = new HashMap<>(); \n        Map<Integer, Integer> diaa = new HashMap<>(); \n        Map<Integer, Integer> diab = new HashMap<>(); \n        int m = 0; \n            \n            for (int[] el : Coins) {\n                int a = el[0], b = el[1];\n                hor.put(a, hor.getOrDefault(a, 0) + 1); \n                ver.put(b, ver.getOrDefault(b, 0) + 1); \n                diaa.put(a + b, diaa.getOrDefault(a + b, 0) + 1); \n                diab.put(a - b, diab.getOrDefault(a - b, 0) + 1); \n                \n                m = Math.max(m, hor.get(a));\n                m = Math.max(m, ver.get(b));\n                m = Math.max(m, diaa.get(a + b));\n                m = Math.max(m, diab.get(a - b));\n            }\n            return m; \n    }", "trans_code": "def collectingCoins ( N , Coins ) :\n    hor = { }\n    ver = { }\n    diaa = { }\n    diab = { }\n    m = 0\n    for el in Coins :\n        a , b = el\n        hor [ a ] = hor.get ( a , 0 ) + 1\n        ver [ b ] = ver.get ( b , 0 ) + 1\n        diaa [ a + b ] = diaa.get ( a + b , 0 ) + 1\n        diab [ a - b ] = diab.get ( a - b , 0 ) + 1\n        m = max ( m , hor [ a ] )\n        m = max ( m , ver [ b ] )\n        m = max ( m , diaa [ a + b ] )\n        m = max ( m , diab [ a - b ] )\n    return m\n", "reference_code": "def collectingCoins( N: int, Coins: List[List[int]]) -> int:\n    # Create defaultdicts to store the count of coins in each row, column, diagonal slope, and diagonal difference\n    hor = defaultdict(int)\n    ver = defaultdict(int)\n    diaa = defaultdict(int)\n    diab = defaultdict(int)\n    # Initialize a variable to store the maximum count of coins\n    m = 0\n    # Iterate through each coin\n    for el in Coins:\n        a, b = el[0], el[1]\n        # Update the count of coins in the corresponding row, column, diagonal slope, and diagonal difference\n        hor[a] += 1\n        ver[b] += 1\n        diaa[a + b] += 1\n        diab[a - b] += 1\n        # Update the maximum count of coins\n        m = max(m, hor[a], ver[b], diaa[a + b], diab[a - b])\n    # Return the maximum count of coins that can be collected\n    return m", "target_Lan": "python###collectingCoins.py", "target_code_shell": "from typing import List\nfrom collections import defaultdict\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(collectingCoins(3, [[0, 0], [1, 1], [2, 2]]))\n    print(collectingCoins(5, [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]))\n    print(collectingCoins(0, []))\n    print(collectingCoins(1, [[0, 0]]))\n    print(collectingCoins(2, [[0, 0], [1, 1]]))"}, {"source_Lan": "java###trafficLights_Test.java", "source_code": "    public static String trafficLights(int n, int q, int[][] queries) {\n        int[] darr = new int[n + 1];\n        for (int[] Q : queries) {\n            int a = Q[0];\n            int b = Q[1];\n            darr[a - 1]++;\n            darr[b]--;\n        }\n        Arrays.parallelPrefix(darr, (A, B) -> A + B);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int X = darr[i] % 3;\n            if (X == 0)\n                sb.append(\"R\");\n            else if (X == 1)\n                sb.append(\"Y\");\n            else if (X == 2)\n                sb.append(\"G\");\n        }\n        return sb.toString();\n    }", "trans_code": "def trafficLights ( n , q , queries ) :\n    darr = [ 0 ] * ( n + 1 )\n    for Q in queries :\n        a = Q [ 0 ]\n        b = Q [ 1 ]\n        darr [ a - 1 ] += 1\n        darr [ b ] -= 1\n    map ( lambda A , B : A + B , darr )\n    result = [ ]\n    for i in range ( n ) :\n        X = darr [ i ] % 3\n        if X == 0 :\n            result.append ( \"R\" )\n        elif X == 1 :\n            result.append ( \"Y\" )\n        elif X == 2 :\n            result.append ( \"G\" )\n    return result\n", "reference_code": "def trafficLights( n: int, q: int, queries: List[List[int]]) -> str:\n    sweap = [0] * (n + 1)\n    for l, r in queries:\n        sweap[l - 1] += 1\n        sweap[r] -= 1\n    curr = 0\n    ans = \"\"\n    for i in range(n):\n        curr = (curr + sweap[i]) % 3\n        if curr == 0:\n            ans += 'R'\n        elif curr == 1:\n            ans += 'Y'\n        else:\n            ans += 'G'\n    return ans", "target_Lan": "python###trafficLights.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(trafficLights(3, 2, [[1, 2], [2, 3]]))\n    print(trafficLights(5, 3, [[1, 2], [3, 5], [2, 4]]))\n    print(trafficLights(1, 1, [[1, 1]]))\n    print(trafficLights(0, 0, []))\n    print(trafficLights(10, 10, [[1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9], [8, 10], [9, 10], [10, 10]]))"}, {"source_Lan": "java###ForYou_Test.java", "source_code": "    public static long ForYou(int n, int[] arr, int m, int[][] order) {\n        \n        int[] diff = new int[n + 1];\n        \n        for (int[] it : order) {\n            diff[it[0] - 1]++;\n            diff[it[1]]--;\n        }\n        \n        for (int i = 1; i <= n; i++) {\n            diff[i] += diff[i - 1];\n        }\n        \n        diff = Arrays.copyOf(diff, n);\n        Arrays.sort(diff);\n        \n        Arrays.sort(arr);\n        long ans = 0;\n        int mod = (int)1e9 + 7;\n        \n        for (int i = 0; i < n; i++) {\n            ans += ((long)diff[i]) * ((long)arr[i]);\n            ans %= mod;\n        }\n        return ans;\n    }", "trans_code": "def ForYou ( n , arr , m , order ) :\n    diff = [ ]\n    for it in order :\n        diff.append ( it [ 0 ] - 1 )\n        diff.append ( it [ 1 ] )\n    for i in range ( 1 , n + 1 ) :\n        diff [ i ] += diff [ i - 1 ]\n    diff = np.array ( diff )\n    diff.sort ( )\n    arr = np.array ( arr )\n    ans = 0\n    mod = int ( 1e9 ) + 7\n    for i in range ( n ) :\n        ans += ( float ( diff [ i ] ) * float ( arr [ i ] ) )\n        ans %= mod\n    return ans\n", "reference_code": "def ForYou( n : int, arr : List[int], m : int, order : List[List[int]]) -> int:\n    diff = [0] * (n + 1)\n    for it in order:\n        diff[it[0] - 1] += 1\n        diff[it[1]] -= 1\n    for i in range(1, n):\n        diff[i] += diff[i - 1]\n    diff.pop()\n    diff.sort()\n    arr.sort()\n    ans = 0\n    mod = int(1e9) + 7\n    for i in range(n):\n        ans += diff[i] * arr[i]\n        ans %= mod\n    return ans", "target_Lan": "python###ForYou.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(ForYou(3, [1, 2, 3], 2, [[1, 2], [2, 3]]))\n    print(ForYou(4, [5, 3, 1, 2], 3, [[1, 2], [2, 3], [3, 4]]))\n    print(ForYou(5, [10, 9, 8, 7, 6], 2, [[1, 2], [3, 4]]))\n    print(ForYou(2, [100, 200], 1, [[1, 2]]))\n    print(ForYou(1, [1000], 0, []))"}, {"source_Lan": "java###maxSumII_Test.java", "source_code": "    public static ArrayList<Long> maxSumII(int n, int[] arr, int[] brr) {\n        long[] ans = new long[n];     \n        long ma = 0;                  \n        int[] v = new int[n];         \n        long[][] vp = new long[n][2]; \n        ArrayList<Long> fans = new ArrayList<>(); \n        \n        for (int i = brr.length - 1; i >= 0; --i) {\n            fans.add(ma);            \n            long b = brr[i] - 1;     \n            long temp = arr[(int)b]; \n            long left = b;           \n            long right = b;          \n            \n            if (b - 1 >= 0 && v[(int)(b - 1)] != 0) {\n                temp += ans[(int)(b - 1)];\n                left = Math.min(left, vp[(int)(b - 1)][0]);\n            }\n            \n            if (b + 1 < n && v[(int)(b + 1)] != 0) {\n                temp += ans[(int)(b + 1)];\n                right = Math.max(right, vp[(int)(b + 1)][1]);\n            }\n            v[(int)b] = arr[(int)b];                  \n            ans[(int)left] = temp;                    \n            ans[(int)right] = temp;                   \n            vp[(int)left] = new long[] {left, right}; \n            vp[(int)right] = new long[] {left, right}; \n            ma = Math.max(temp, ma);                   \n        }\n        Collections.reverse(fans); \n        return fans;               \n    }", "trans_code": "def max_sum_ii ( n , arr , brr ) :\n    ans = [ ]\n    ma = 0\n    v = [ ]\n    vp = [ ]\n    fans = [ ]\n    for i in range ( len ( brr ) - 1 , - 1 , - 1 ) :\n        fans.append ( ma )\n        b = brr [ i ] - 1\n        temp = arr [ int ( b ) ]\n        left = b\n        right = b\n        if b - 1 >= 0 and v [ int ( b - 1 ) ] != 0 :\n            temp += ans [ int ( b - 1 ) ]\n            left = min ( left , vp [ int ( b - 1 ) ] [ 0 ] )\n        if b + 1 < n and v [ int ( b + 1 ) ] != 0 :\n            temp += ans [ int ( b + 1 ) ]\n            right = max ( right , vp [ int ( b + 1 ) ] [ 1 ] )\n        v.append ( arr [ int ( b ) ] )\n        ans.append ( temp )\n        ans.append ( temp )\n        vp.append ( [ left , right ] )\n        vp.append ( [ left , right ] )\n        ma = max ( temp , ma )\n    del fans\n    return fans\n", "reference_code": "def maxSumII( n, arr, brr):\n    ans = [0] * n\n    ma = 0\n    brr.reverse()\n    v = [0] * n\n    vp = [0,0] * n\n    fans = []\n    for i in brr:\n        fans.append(ma)\n        b = i - 1\n        temp = arr[b]\n        left = b\n        right = b\n        if b - 1 >= 0 and v[b - 1] != 0:\n            temp += ans[b - 1]\n            left = min(left, vp[b - 1][0])\n        if b + 1 < n and v[b + 1] != 0:\n            temp += ans[b + 1]\n            right = max(right, vp[b + 1][1])\n        v[b] = arr[b]\n        ans[left] = temp\n        ans[right] = temp\n        vp[left] = (left, right)\n        vp[right] = (left, right)\n        ma = max(temp, ma)\n    fans.reverse()\n    return fans", "target_Lan": "python###maxSumII.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(maxSumII(0, [], []))\n    print(maxSumII(5, [1,2,3,4,5], [5,4,3,2,1]))\n    print(maxSumII(3, [10,20,30], [3,2,1]))\n    print(maxSumII(1, [100], [1]))\n    print(maxSumII(2, [20,30], [2,1]))"}, {"source_Lan": "java###isMagicArray_Test.java", "source_code": "    public static boolean isMagicArray(int n, int[] arr) {\n        \n        for (int i = 1; i < n; i++) {\n            \n            if ((arr[i] % 2 == 0 && arr[i - 1] % 2 == 0) || (arr[i] % 2 != 0 && arr[i - 1] % 2 != 0)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }", "trans_code": "def isMagicArray ( n , arr ) :\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] % 2 == 0 and arr [ i - 1 ] % 2 == 0 ) :\n            return False\n    return True\n", "reference_code": "def isMagicArray( n : int, arr : List[int]) -> bool:\n    for i in range(n-1):\n        if (arr[i]&1)==(arr[i+1]&1):\n            return 0\n    return 1", "target_Lan": "python###isMagicArray.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(isMagicArray(0, []))\n    print(isMagicArray(1, [2]))\n    print(isMagicArray(2, [2, 3]))\n    print(isMagicArray(3, [2, 3, 4]))\n    print(isMagicArray(5, [2, 3, 4, 5, 6]))"}, {"source_Lan": "java###smallestString_Test.java", "source_code": "    public static String smallestString(int n, String s) {\n        \n        StringBuilder answer = new StringBuilder(s);\n        int odd = n % 2; \n        if (n == 1) {\n            return \"-1\"; \n        }\n        for (int i = 0; i < n / 2; i++) {\n            if (s.charAt(i) != 'a') {\n                answer.setCharAt(i, 'a'); \n                return answer.toString(); \n            }\n        }\n        answer.setCharAt(answer.length() - 1, 'b'); \n        return answer.toString(); \n    }", "trans_code": "def smallest_string ( n , s ) :\n    answer = s\n    odd = n % 2\n    if n == 1 :\n        return '-1'\n    for i in range ( n // 2 ) :\n        if s [ i ] != 'a' :\n            answer [ i ] = 'a'\n            return answer [ i ]\n    answer [ - 1 ] = 'b'\n    return answer\n", "reference_code": "def smallestString( n : int, s : str) -> str:\n    #return -1 if n is 1\n    if n == 1:\n        return \"-1\"\n    answer = list(s)\n    #iterate only till half of the string\n    for i in range(n // 2):\n        #if character is not 'a', replace it with 'a' and return\n        if s[i] != 'a':\n            answer[i] = 'a'\n            return ''.join(answer)\n    #if all characters are 'a', change the last character to 'b'\n    answer[-1] = 'b'\n    return ''.join(answer)", "target_Lan": "python###smallestString.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(smallestString(1, \"a\"))\n    print(smallestString(2, \"aa\"))\n    print(smallestString(3, \"aaa\"))\n    print(smallestString(4, \"aaaa\"))"}, {"source_Lan": "java###minimumDis_Test.java", "source_code": "    public static int minimumDis(int N, int[] X) {\n        Arrays.sort(X);\n        return X[(N - 1) / 2];\n    }", "trans_code": "def minimum_dis ( N , X ) :\n    X.sort ( )\n    return X [ ( N - 1 ) / 2 ]\n", "reference_code": "def minimumDis( N: int, X: List[int]) -> int:\n    X.sort()\n    return X[(N - 1) // 2]", "target_Lan": "python###minimumDis.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumDis(3, [1, 2, 3]))\n    print(minimumDis(4, [4, 5, 6, 7]))\n    print(minimumDis(2, [-1, -2]))\n    print(minimumDis(5, [0, 1, 2, 3, 4]))\n    print(minimumDis(1, [100]))"}, {"source_Lan": "java###AreEqual_Test.java", "source_code": "    public static boolean AreEqual(String a, String b) {\n        int n = a.length();\n        boolean flag = false;\n        for (int i = 0; i < n - 1; i++) {\n            if (a.charAt(i) == '0' && b.charAt(i + 1) == '1') {\n                if (a.charAt(i) == b.charAt(i) && a.charAt(i + 1) == b.charAt(i + 1)) {\n                    flag = true;\n                }\n            }\n        }\n        return flag;\n    }", "trans_code": "def AreEqual ( a , b ) :\n    n = len ( a )\n    flag = False\n    for i in range ( n - 1 ) :\n        if a [ i ] == '0' and b [ i + 1 ] == '1' :\n            if a [ i ] == b [ i ] and a [ i + 1 ] == b [ i + 1 ] :\n                flag = True\n    return flag\n", "reference_code": "def AreEqual( a: str, b: str) -> bool:\n    for i in range(len(a) - 1):\n        if (a[i] == b[i] and a[i] == '0' and a[i + 1] == b[i + 1]\n                and a[i + 1] == '1'):\n            return True\n    return False", "target_Lan": "python###AreEqual.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(AreEqual(\"01\", \"01\"))\n    print(AreEqual(\"00\", \"11\"))\n    print(AreEqual(\"11\", \"00\"))\n    print(AreEqual(\"10\", \"01\"))\n    print(AreEqual(\"01\", \"10\"))"}, {"source_Lan": "java###matrixConundrum_Test.java", "source_code": "    public static boolean matrixConundrum(int n, int m, List<String> mat) {\n        String play = \"play\";\n        int fnd = 0;\n        for (int i = 0; i < m; ++i) {\n            boolean check = false;\n            for (int j = 0; j < n; ++j) {\n                if (mat.get(j).charAt(i) == play.charAt(fnd)) {\n                    check = true;\n                }\n            }\n            if (check) {\n                ++fnd;\n                if (fnd == 4) {\n                    break;\n                }\n            }\n        }\n        return fnd == 4;\n    }", "trans_code": "def matrix_conundrum ( n , m , mat ) :\n    play = 'play'\n    fnd = 0\n    for i in range ( m ) :\n        check = False\n        for j in range ( n ) :\n            if mat [ j ] [ i ] == play [ fnd ] :\n                check = True\n        if check :\n            fnd += 1\n            if fnd == 4 :\n                break\n    return fnd == 4\n", "reference_code": "def matrixConundrum( n: int, m: int, mat: List[str]) -> bool:\n    check = ['p', 'l', 'a', 'y']\n    idx = 0\n    for j in range(m):\n        for i in range(n):\n            if mat[i][j] == check[idx]:\n                idx += 1\n                if idx == 4:\n                    return True\n                break\n    return False", "target_Lan": "python###matrixConundrum.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(matrixConundrum(0, 0, []))\n    print(matrixConundrum(1, 1, [\"play\"]))\n    print(matrixConundrum(1, 2, [\"pl\", \"ay\"]))\n    print(matrixConundrum(2, 1, [\"p\", \"l\", \"a\", \"y\"]))\n    print(matrixConundrum(2, 2, [\"pl\", \"ay\", \"ap\", \"ly\"]))"}, {"source_Lan": "java###matchingCnt_Test.java", "source_code": "    public static int[] matchingCnt(int n, String[] X) {\n        Map<Integer, int[]> map = new HashMap<>();\n        int[] ans = new int[n];\n        for (int i = n - 1; i >= 0; i--) {\n            String x = X[i];\n            int cans = 0;\n            for (int j = 0; j < x.length(); j++) {\n                if (!map.containsKey(j)) {\n                    map.put(j, new int[26]);\n                }\n                cans = cans + map.get(j)[x.charAt(j) - 'a'];\n                map.get(j)[x.charAt(j) - 'a']++;\n            }\n            ans[i] = cans;\n        }\n        return ans;\n    }", "trans_code": "def matching_cnt ( n , X ) :\n    d = { }\n    ans = [ ]\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        x = X [ i ]\n        cans = 0\n        for j in range ( len ( x ) ) :\n            if not d.has_key ( j ) :\n                d [ j ] = { }\n            cans = cans + d [ j ] [ x [ j ] - 'a' ]\n            d [ j ] [ x [ j ] - 'a' ] ] += 1\n        ans.append ( cans )\n    return ans\n", "reference_code": "def matchingCnt( n: int, X: List[str]) -> List[int]:\n    mp = []\n    ans = [0] * n\n    for i in range(n - 1, -1, -1):\n        s = X[i]\n        for j in range(len(s)):\n            #if the length of mp is equal to current index, add a new row.\n            if len(mp) == j:\n                mp.append([0] * 26)\n            #update the answer with the count of matching characters.\n            ans[i] += mp[j][ord(s[j]) - 97]\n            mp[j][ord(s[j]) - 97] += 1\n    return ans", "target_Lan": "python###matchingCnt.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(matchingCnt(3, [\"abc\", \"def\", \"ghi\"]))\n    print(matchingCnt(2, [\"jkl\", \"mno\"]))\n    print(matchingCnt(1, [\"pqr\"]))\n    print(matchingCnt(0, []))\n    print(matchingCnt(4, [\"stu\", \"vwx\", \"yza\", \"bcd\"]))"}, {"source_Lan": "java###isPossible_Test.java", "source_code": "    public static String isPossible(int a, int b, int c) {\n        \n        if ((a + b) > c && (a + c) > b && (b + c) > a)\n            return \"YES\";\n        else\n            return \"NO\";\n    }", "trans_code": "def is_possible ( a , b , c ) :\n    if ( a + b ) > c and ( a + c ) > b and ( b + c ) > a :\n        return \"YES\"\n    else :\n        return \"NO\"\n", "reference_code": "def isPossible( a: int, b: int, c: int) -> str:\n    # sum of any two sides should be strictly greater than third side\n    if (a + b) > c and (a + c) > b and (b + c) > a:\n        return \"YES\"\n    else:\n        return \"NO\"", "target_Lan": "python###isPossible.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(isPossible(3, 4, 5))\n    print(isPossible(1, 1, 2))\n    print(isPossible(10, 10, 20))\n    print(isPossible(1, 2, 3))\n    print(isPossible(10, 20, 15))"}, {"source_Lan": "java###countSuperPalindrome_Test.java", "source_code": "    public static int countSuperPalindrome(int l, int r) {\n        int count = 0;\n        \n        int start = (int)Math.ceil(Math.sqrt(l));\n        \n        while (start * start <= r) {\n            \n            int square = start * start;\n            String s = Integer.toString(square);\n            \n            if (s.equals(new StringBuilder(s).reverse().toString())) {\n                count++;\n            }\n            start++;\n        }\n        return count;\n    }", "trans_code": "def countSuperPalindrome ( l , r ) :\n    count = 0\n    start = int ( math.ceil ( math.sqrt ( l ) ) )\n    while start * start <= r :\n        square = start * start\n        s = str ( square )\n        if s == [ s ].reverse ( ).reverse ( ) :\n            count += 1\n        start += 1\n    return count\n", "reference_code": "def countSuperPalindrome( l: int, r: int) -> int:\n    count = 0\n    start = ceil(sqrt(l))\n    while start * start <= r:\n        s = str(start * start)\n        #Checking if the square of start is a palindrome.\n        if s == s[::-1]:\n            count += 1\n        start += 1\n    return count", "target_Lan": "python###countSuperPalindrome.py", "target_code_shell": "from math import sqrt, ceil\nimport math\n# TOFILL\nif __name__ == \"__main__\":\n    print(countSuperPalindrome(1, 100))\n    print(countSuperPalindrome(100, 1000))\n    print(countSuperPalindrome(1000, 10000))\n    print(countSuperPalindrome(10000, 100000))\n    print(countSuperPalindrome(100000, 1000000))"}, {"source_Lan": "java###maximumStrongIndices_Test.java", "source_code": "    public static int maximumStrongIndices(int n, int x, int y, int[] a, int[] b) {\n        int j = 0, ans = 0;\n        for (int i = 0; i < n; i++) {\n            while (j < n && b[j] < a[i] - x) {\n                j++;\n            }\n            if (j < n && b[j] <= a[i] + y) {\n                ans++;\n                j++;\n            }\n        }\n        return ans;\n    }", "trans_code": "def maximum_strong_indices ( n , x , y , a , b ) :\n    j , ans = 0 , 0\n    for i in range ( n ) :\n        while j < n and b [ j ] < a [ i ] - x :\n            j += 1\n        if j < n and b [ j ] <= a [ i ] + y :\n            ans += 1\n            j += 1\n    return ans\n", "reference_code": "def maximumStrongIndices( n: int, x: int, y: int, a: List[int],\n                         b: List[int]) -> int:\n    j = 0\n    ans = 0\n    for i in range(n):\n        while j < n and b[j] < a[i] - x:\n            j += 1\n        if j < n and b[j] <= a[i] + y:\n            ans += 1\n            j += 1\n    return ans", "target_Lan": "python###maximumStrongIndices.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumStrongIndices(5, 1, 2, [1,2,3,4,5], [3,4,5,6,7]))\n    print(maximumStrongIndices(5, 2, 1, [1,2,3,4,5], [3,4,5,6,7]))\n    print(maximumStrongIndices(5, 1, 1, [1,2,3,4,5], [2,3,4,5,6]))\n    print(maximumStrongIndices(5, 0, 0, [1,2,3,4,5], [1,2,3,4,5]))\n    print(maximumStrongIndices(5, 0, 1, [1,2,3,4,5], [2,3,4,5,6]))"}, {"source_Lan": "java###geeklandElections_Test.java", "source_code": "    public static boolean geeklandElections(int n, int k, String s) {\n        int votes = 0;\n        for (int i = 0; i < n; i++)\n            if (s.charAt(i) == '1') votes++;\n        return (votes + k) > (n - (votes + k));\n    }", "trans_code": "def geekland_elections ( n , k , s ) :\n    votes = 0\n    for i in range ( n ) :\n        if s [ i ] == '1' :\n            votes += 1\n    return ( votes + k ) > ( n - ( votes + k ) )\n", "reference_code": "def geeklandElections( n: int, k: int, s: str) -> bool:\n    ans = s.count(\"1\") + min(k, s.count(\"0\"))\n    return ans > n - ans", "target_Lan": "python###geeklandElections.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(geeklandElections(0, 0, \"\"))\n    print(geeklandElections(1, 1, \"1\"))\n    print(geeklandElections(2, 0, \"01\"))\n    print(geeklandElections(3, 1, \"101\"))\n    print(geeklandElections(4, 0, \"0101\"))"}, {"source_Lan": "java###candyShop2_Test.java", "source_code": "    public static int candyShop2(int n, int[] candies) {\n        int ans = 0;\n        Set<Integer> hs = new HashSet<>();\n        for(int x : candies)\n            if(hs.add(x))\n                ans += x;\n        return ans;\n    }", "trans_code": "def candy_shop2 ( n , candies ) :\n    ans = 0\n    hs = set ( )\n    for x in candies :\n        if hs.add ( x ) :\n            ans += x\n    return ans\n", "reference_code": "def candyShop2( n : int, candies : List[int]) -> int:\n    s=set(el for el in candies)\n    return sum(s)", "target_Lan": "python###candyShop2.py", "target_code_shell": "from typing import List\nfrom collections import Counter\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(candyShop2(0, []))\n    print(candyShop2(5, [1, 2, 3, 4, 5]))\n    print(candyShop2(3, [5, 5, 5]))\n    print(candyShop2(2, [-1, -2]))\n    print(candyShop2(4, [1000, 2000, 3000, 4000]))"}, {"source_Lan": "java###candyShop_Test.java", "source_code": "    public static int candyShop(int n, int candies[]) {\n        int ans = Integer.MAX_VALUE;\n        int sum = 0;\n        int low = 0, high = 0;\n        Set<Integer> hs = new HashSet<>();\n        for(int x : candies)\n            hs.add(x);\n        Map<Integer, Integer> hm = new HashMap<>();\n        while(high < n){\n            hm.put(candies[high], hm.getOrDefault(candies[high], 0) + 1);\n            sum += candies[high++];\n            while(low < high && hm.get(candies[low]) > 1){\n                hm.put(candies[low], hm.get(candies[low]) - 1);\n                sum -= candies[low++];\n            }\n            if(hm.size() == hs.size())\n                ans = Math.min(ans, sum);\n        }\n        return ans;\n    }", "trans_code": "def candy_shop ( n , candies ) :\n    ans = sys.maxsize\n    sum = 0\n    low , high = 0 , 0\n    hs = set ( )\n    for x in candies :\n        hs.add ( x )\n    hm = { }\n    while high < n :\n        hm [ candies [ high ] ] = hm.get ( candies [ high ] , 0 ) + 1\n        sum += candies [ high ]\n        while low < high and hm [ candies [ low ] ] > 1 :\n            hm [ candies [ low ] ] = hm [ candies [ low ] ] - 1\n            sum -= candies [ low ]\n        if len ( hm ) == len ( hs ) :\n            ans = min ( ans , sum )\n    return ans\n", "reference_code": "def candyShop( n : int, candies : List[int]) -> int:\n    s=set(el for el in candies)\n    t=Counter()\n    l=0\n    p=0\n    ans=float(\"inf\")\n    for el in candies:\n        p+=el\n        t[el]+=1\n        while len(t)==len(s):\n            ans=min(ans,p)\n            t[candies[l]]-=1\n            p-=candies[l]\n            if t[candies[l]]==0:\n                del t[candies[l]]\n            l+=1\n    return ans", "target_Lan": "python###candyShop.py", "target_code_shell": "from typing import List\nfrom collections import Counter\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(candyShop(6, [1, 2, 3, 2, 3, 1]))\n    print(candyShop(5, [1, 2, 3, 4, 5]))\n    print(candyShop(10, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(candyShop(5, [1, 1, 2, 2, 3]))\n    print(candyShop(1, [1]))"}, {"source_Lan": "java###isFriend_Test.java", "source_code": "    public static String isFriend(int n, int x, int y, int[] arr) {\n        for(int e : arr)\n            if(x + e == y)\n                return \"yes\";\n        return \"no\";\n    }", "trans_code": "def isFriend ( n , x , y , arr ) :\n    for e in arr :\n        if x + e == y :\n            return \"yes\"\n    return \"no\"\n", "reference_code": "def isFriend( n : int, x : int, y : int, arr : List[int]) -> str:\n    if y-x in arr:\n        return \"yes\"\n    else:\n        return \"no\"", "target_Lan": "python###isFriend.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(isFriend(0, 0, 0, []))\n    print(isFriend(1, 10, 10, [0]))\n    print(isFriend(2, -5, 5, [10, -20]))\n    print(isFriend(3, 5, 10, [5, 0, 5]))\n    print(isFriend(4, 0, 0, [0, 0, 0, 0]))"}, {"source_Lan": "java###minimizeArr_Test.java", "source_code": "    public static int minimizeArr(int n, int[] arr) {\n        \n        int mi = Arrays.stream(arr).min().getAsInt();\n        int ct = 0;\n        \n        for (int j : arr) {\n            if (j == mi) ct++;\n        }\n        \n        if (ct == 1) return 1;\n        \n        for (int j : arr) {\n            if (j % mi != 0) return 1;\n        }\n        \n        return (int)Math.ceil((float)ct / 2);\n    }", "trans_code": "def minimize_arr ( n , arr ) :\n    mi = sum ( arr )\n    ct = 0\n    for j in arr :\n        if j == mi :\n            ct += 1\n    if ct == 1 :\n        return 1\n    for j in arr :\n        if j % mi != 0 :\n            return 1\n    return int ( math.ceil ( float ( ct ) / 2 ) )\n", "reference_code": "def minimizeArr( n: int, arr: List[int]) -> int:\n    min_element = min(arr)\n    if arr.count(min_element) == 1:\n        return 1\n    else:\n        count = arr.count(min_element)\n        for el in arr:\n            if el % min_element != 0:\n                return 1\n        return (count + 1) // 2", "target_Lan": "python###minimizeArr.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimizeArr(5, [1, 2, 3, 4, 5]))\n    print(minimizeArr(6, [2, 4, 6, 8, 10, 12]))\n    print(minimizeArr(3, [3, 6, 9]))\n    print(minimizeArr(4, [4, 8, 12, 16]))\n    print(minimizeArr(5, [5, 10, 15, 20, 25]))"}, {"source_Lan": "java###consecutiveVal_Test.java", "source_code": "    public static String consecutiveVal(int n, List<Integer> a) {\n        StringBuilder result = new StringBuilder();\n        Map<Integer, Boolean> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            mp.put(a.get(i), true);\n        }\n        for (int i = 0; i < n; i++) {\n            if (Boolean.TRUE.equals(mp.get(a.get(i) - 1)) ||\n                Boolean.TRUE.equals(mp.get(a.get(i) + 1))) {\n                result.append('1');\n            } else {\n                result.append('0');\n            }\n        }\n        return result.toString();\n    }", "trans_code": "def consecutive_val ( n , a ) :\n    result = [ ]\n    mp = { }\n    for i in range ( n ) :\n        mp [ a [ i ] ] = True\n    for i in range ( n ) :\n        if bool ( mp [ a [ i ] - 1 ] ) or bool ( mp [ a [ i ] + 1 ] ) :\n            result.append ( '1' )\n        else :\n            result.append ( '0' )\n    return ''.join ( result )\n", "reference_code": "def consecutiveVal( n: int, a: List[int]) -> str:\n    #Creating a set from the list for faster lookup\n    Set = set(a)\n    ans = \"\"\n    #Iterating through the list\n    for e in a:\n        #Checking if consecutive values are present in the set\n        if e - 1 in Set or e + 1 in Set:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans", "target_Lan": "python###consecutiveVal.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(consecutiveVal(5, [1, 2, 3, 4, 5]))\n    print(consecutiveVal(3, [10, 5, 15]))\n    print(consecutiveVal(2, [-1, 1]))\n    print(consecutiveVal(4, [0, -1, 1, 2]))\n    print(consecutiveVal(1, [100]))"}, {"source_Lan": "java###chocolateDistribution_Test.java", "source_code": "    public static int chocolateDistribution(int N, int M, int[] arr, int[] brr) {\n        Arrays.sort(arr);\n        Arrays.sort(brr);\n        int ans = 0;\n        int i = 0, j = 0;\n        while (i < N && j < M) {\n            if (arr[i] <= brr[j]) {\n                ans++;\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        return ans;\n    }", "trans_code": "def chocolate_distribution ( N , M , arr , brr ) :\n    arr.sort ( )\n    brr.sort ( )\n    ans = 0\n    i , j = 0 , 0\n    while i < N and j < M :\n        if arr [ i ] <= brr [ j ] :\n            ans += 1\n            i += 1\n            j += 1\n        else :\n            j += 1\n    return ans\n", "reference_code": "def chocolateDistribution( N, M, arr, brr):\n    arr.sort()\n    brr.sort()\n    ans = 0\n    i, j = 0, 0\n    while i < N and j < M:\n        if arr[i] <= brr[j]:\n            ans += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return ans", "target_Lan": "python###chocolateDistribution.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(chocolateDistribution(3, 4, [10, 20, 30], [15, 25, 35, 40]))\n    print(chocolateDistribution(0, 0, [], []))\n    print(chocolateDistribution(5, 5, [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(chocolateDistribution(5, 5, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]))\n    print(chocolateDistribution(3, 5, [10, 20, 30], [5, 15, 25, 35, 40]))"}, {"source_Lan": "java###minJumps2_Test.java", "source_code": "    public static int minJumps2(int n, int[] arr) {\n        int[] rightGreater = new int[n];\n        int[] rightLesser = new int[n];\n        Arrays.fill(rightGreater, n);\n        Arrays.fill(rightLesser, n);\n        \n        Deque<Integer> stack = new ArrayDeque<>();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && arr[stack.peek()] < arr[i]) {\n                rightGreater[stack.peek()] = i;\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        \n        stack.clear();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {\n                rightLesser[stack.peek()] = i;\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        Deque<int[]> queue = new ArrayDeque<>();\n        queue.offer(new int[]{0, 0});\n        boolean[] visited = new boolean[n];\n        while (!queue.isEmpty()) {\n            int[] p = queue.poll();\n            int idx = p[0];\n            int d = p[1];\n            if (visited[idx]) {\n                continue;\n            }\n            visited[idx] = true;\n            if (idx == n - 1) {\n                return d;\n            }\n            int temp = idx + 1;\n            if (arr[temp] > arr[idx]) {\n                while (temp < n && arr[temp] > arr[idx]) {\n                    queue.offer(new int[]{temp, d + 1});\n                    temp = rightLesser[temp];\n                }\n                if (temp < n) {\n                    queue.offer(new int[]{temp, d + 1});\n                }\n            } else {\n                while (temp < n && arr[temp] < arr[idx]) {\n                    queue.offer(new int[]{temp, d + 1});\n                    temp = rightGreater[temp];\n                }\n                if (temp < n) {\n                    queue.offer(new int[]{temp, d + 1});\n                }\n            }\n        }\n        return -1;\n    }", "trans_code": "def min_jumps2 ( n , arr ) :\n    right_greater = [ ]\n    right_lesser = [ ]\n    stack = deque ( )\n    for i in range ( n ) :\n        while not stack.empty ( ) and arr [ stack.pop ( ) ] < arr [ i ] :\n            right_greater.append ( i )\n            stack.pop ( )\n        stack.append ( i )\n    stack.clear ( )\n    for i in range ( n ) :\n        while not stack.empty ( ) and arr [ stack.pop ( ) ] > arr [ i ] :\n            right_lesser.append ( i )\n            stack.pop ( )\n        stack.append ( i )\n    queue = deque ( )\n    queue.append ( [ 0 , 0 ] )\n    visited = [ ]\n    while not queue.empty ( ) :\n        p = queue.popleft ( )\n        idx = p [ 0 ]\n        d = p [ 1 ]\n        if visited [ idx ] :\n            continue\n        visited.append ( True )\n        if idx == n - 1 :\n            return d\n        temp = idx + 1\n        if arr [ temp ] > arr [ idx ] :\n            while temp < n and arr [ temp ] > arr [ idx ] :\n                queue.append ( [ temp , d + 1 ] )\n                temp = right_lesser [ temp ]\n            if temp < n :\n                queue.append ( [ temp , d + 1 ] )\n        else :\n            while temp < n and arr [ temp ] < arr [ idx ] :\n                queue.append ( [ temp , d + 1 ] )\n                temp = right_greater [ temp ]\n            if temp < n :\n                queue.append ( [ temp , d + 1 ] )\n    return - 1\n", "reference_code": "def minJumps2( n, arr):\n    right_greater = [n] * n\n    right_lesser = [n] * n\n    stack = []\n    for i in range(n):\n        while stack and arr[stack[-1]] < arr[i]:\n            right_greater[stack[-1]] = i\n            stack.pop()\n        stack.append(i)\n    stack.clear()\n    for i in range(n):\n        while stack and arr[stack[-1]] > arr[i]:\n            right_lesser[stack[-1]] = i\n            stack.pop()\n        stack.append(i)\n    queue = deque([(0, 0)])\n    visited = [0] * n\n    while queue:\n        p, d = queue.popleft()\n        if visited[p] == 1:\n            continue\n        visited[p] = 1\n        if p == n - 1:\n            return d\n        temp = p + 1\n        # max(arr[i], arr[j]) < min(arr[i+1], arr[i+2], ......, arr[j-2], arr[j-1])\n        if arr[temp] > arr[p]:\n            while temp != n and arr[temp] > arr[p]:\n                queue.append((temp, d + 1))\n                temp = right_lesser[temp]\n            if temp != n:\n                queue.append((temp, d + 1))\n        # min(arr[i], arr[j]) < max(arr[i+1], arr[i+2], ......, arr[j-2], arr[j-1])\n        else:\n            while temp != n and arr[temp] < arr[p]:\n                queue.append((temp, d + 1))\n                temp = right_greater[temp]\n            if temp != n:\n                queue.append((temp, d + 1))\n    return -1", "target_Lan": "python###minJumps2.py", "target_code_shell": "from collections import deque\n\n# TOFILL\nif __name__ == \"__main__\":\n    print(minJumps2(4, [1,2,3,4]))\n    print(minJumps2(5, [4,3,2,1,0]))\n    print(minJumps2(3, [10,20,30]))\n    print(minJumps2(2, [10,10]))\n    print(minJumps2(6, [1,2,3,2,1,0]))"}, {"source_Lan": "java###minElements_Test.java", "source_code": "    public static int minElements(int n, int m, int[] arr1, int[] arr2) {\n        long sum = 0;\n        \n        for (int num : arr1) {\n            sum += num;\n        }\n        Arrays.sort(arr2); \n        long currentSum = 0;\n        int count = 0;\n        \n        for (int i = m - 1; i >= 0; i--) {\n            currentSum += arr2[i];\n            count++;\n            \n            if (currentSum >= sum) {\n                break;\n            }\n        }\n        \n        return currentSum >= sum ? count : -1;\n    }", "trans_code": "def min_elements ( n , m , arr1 , arr2 ) :\n    sum = 0\n    for num in arr1 :\n        sum += num\n    arr2.sort ( )\n    current_sum = 0\n    count = 0\n    for i in range ( m - 1 , - 1 , - 1 ) :\n        current_sum += arr2 [ i ]\n        count += 1\n        if current_sum >= sum :\n            break\n    return current_sum >= sum , count\n", "reference_code": "def minElements( n : int, m : int, arr1 : List[int], arr2 : List[int]) -> int:\n    s=sum(arr1)\n    arr2.sort(reverse=True)\n    ind=0\n    curr=0\n    for el in arr2:\n        curr+=el\n        if curr>=s:\n            return ind+1\n        ind+=1\n    return -1", "target_Lan": "python###minElements.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minElements(5, 5, [1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))\n    print(minElements(5, 5, [5, 5, 5, 5, 5], [5, 5, 5, 5, 5]))\n    print(minElements(5, 5, [-1, -2, -3, -4, -5], [-5, -4, -3, -2, -1]))\n    print(minElements(5, 5, [10, 20, 30, 40, 50], [50, 40, 30, 20, 10]))\n    print(minElements(5, 5, [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]))"}, {"source_Lan": "java###maxScoreSubseq_Test.java", "source_code": "    public static int maxScoreSubseq(int n, int[] arr) {\n        \n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        int ma = Integer.MIN_VALUE;\n        \n        for(int i = 0; i < n; i++) {\n            \n            if(arr[i] >= 0) \n                map.put(arr[i] - i, map.getOrDefault(arr[i] - i, 0) + arr[i]);\n            \n            ma = Math.max(ma, arr[i]);\n        }\n        \n        int ele = Integer.MIN_VALUE;\n        \n        for(int j : map.values()){ \n            ele = Math.max(ele, j);\n}\n        \n        return Math.max(ele, ma);\n    }", "trans_code": "def maxScoreSubseq ( n , arr ) :\n    d = { }\n    ma = int ( 0 )\n    for i in range ( n ) :\n        if arr [ i ] >= 0 :\n            d [ arr [ i ] - i ] = d.get ( arr [ i ] - i , 0 ) + arr [ i ]\n        ma = max ( ma , arr [ i ] )\n    ele = int ( 0 )\n    for j in d.values ( ) :\n        ele = max ( ele , j )\n    return max ( ele , ma )\n", "reference_code": "def maxScoreSubseq( n : int, arr : List[int]) -> int:\n    d=defaultdict(int)\n    v=max(arr)\n    for i in range(n):\n        d[arr[i]-i]+=max(0,arr[i])\n    c=(1 if 0 in arr else 0)\n    for el in d:\n        if d[el]>0:\n            v=max(v,d[el])\n        elif d[el]==0 and c:\n            v=max(0,v)\n    return v", "target_Lan": "python###maxScoreSubseq.py", "target_code_shell": "from typing import List\nfrom collections import defaultdict\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxScoreSubseq(5, [1, 2, 3, 4, 5]))\n    print(maxScoreSubseq(3, [-1, -2, -3]))\n    print(maxScoreSubseq(4, [1, 0, 0, 0]))\n    print(maxScoreSubseq(5, [5, 4, 3, 2, 1]))\n    print(maxScoreSubseq(5, [1, -2, 3, -4, 5]))"}, {"source_Lan": "java###geekTasks_Test.java", "source_code": "    public static long geekTasks(int n, int m, int q, int[][] tasks) {\n        long total = 0;\n        long minA = Long.MAX_VALUE, minB = Long.MAX_VALUE;\n        \n        for (int i = 0; i < q; i++) {\n            int a = tasks[i][0] + 1;\n            int b = tasks[i][1] + 1;\n            minA = Math.min(minA, a);\n            minB = Math.min(minB, b);\n        }\n        int[] col = new int[n]; \n        \n        for (int[] task : tasks) {\n            int x = task[1] + 1;\n            col[task[0]] = Math.max(col[task[0]], x);\n        }\n        long maxColValue = 0;\n        \n        for (int i = n - 1; i >= 0; i--) {\n            maxColValue = Math.max(maxColValue, col[i]);\n            total += maxColValue;\n        }\n        long cellsWithMaxValue = minA * minB;\n        \n        return total - cellsWithMaxValue;\n    }", "trans_code": "def geekTasks ( n , m , q , tasks ) :\n    total = 0\n    minA , minB = float ( 'inf' ) , float ( 'inf' )\n    for i in range ( q ) :\n        a , b = tasks [ i ] [ 0 ] + 1 , tasks [ i ] [ 1 ] + 1\n        minA = min ( minA , a )\n        minB = min ( minB , b )\n    col = [ ]\n    for task in tasks :\n        x = task [ 1 ] + 1\n        col.append ( max ( col [ task [ 0 ] ] , x ) )\n    maxColValue = 0\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        maxColValue = max ( maxColValue , col [ i ] )\n        total += maxColValue\n    cellsWithMaxValue = minA * minB\n    return total - cellsWithMaxValue\n", "reference_code": "def geekTasks( n : int, m : int, q : int, tasks : List[List[int]]) -> int:\n    minA=0\n    minB=0\n    for i in range(q):\n        a,b=tasks[i][0],tasks[i][1]\n        a+=1\n        b+=1\n        if i==0:\n            minA=a\n            minB=b\n        else:\n            if minA>a:\n                minA=a\n            if minB>b:\n                minB=b\n    total=0\n    maxi=0\n    col=[0]*(n)\n    for i in range(q):\n        col[tasks[i][0]]=max(col[tasks[i][0]],tasks[i][1]+1)\n    for i in range(n-1,-1,-1):\n        maxi=max(maxi,col[i])\n        total+=maxi\n    total-=minA*minB\n    return total", "target_Lan": "python###geekTasks.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(geekTasks(3, 3, 3, [[0,0], [1,1], [2,2]]))\n    print(geekTasks(2, 2, 2, [[0,0], [1,1]]))\n    print(geekTasks(4, 4, 4, [[0,0], [1,1], [2,2], [3,3]]))\n    print(geekTasks(5, 5, 5, [[0,0], [1,1], [2,2], [3,3], [4,4]]))\n    print(geekTasks(6, 6, 6, [[0,0], [1,1], [2,2], [3,3], [4,4], [5,5]]))"}, {"source_Lan": "java###majorityWins_Test.java", "source_code": "    public static int majorityWins(int arr[], int n, int x, int y) {\n        int count_x = 0;\n        int count_y = 0;\n        \n        \n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) count_x++;\n            if (arr[i] == y) count_y++;\n        }\n        \n        if (count_x > count_y)\n            \n            return x;\n        else if (count_y > count_x)\n            \n            return y;\n        \n        else if (x < y)\n            return x;\n        else\n            return y;\n    }", "trans_code": "def majorityWins ( arr , n , x , y ) :\n    count_x = 0\n    count_y = 0\n    for i in range ( n ) :\n        if arr [ i ] == x :\n            count_x += 1\n        if arr [ i ] == y :\n            count_y += 1\n    if count_x > count_y :\n        return x\n    elif count_y > count_x :\n        return y\n    elif x < y :\n        return x\n    else :\n        return y\n", "reference_code": "def majorityWins( arr, n, x, y):\n    count_x=0;\n    count_y=0;\n    for i in range(0,n):\n        #Iterating through the array elements.\n        #Incrementing the counter variables accordingly.\n        if(arr[i]==x):\n            count_x+=1\n        if(arr[i]==y):\n            count_y+=1\n    #Comparing the two counters.\n    #If both appear same number of times, returning the smaller number.\n    if(count_x>count_y or (count_x==count_y and x<y)):\n        #Returning the number with more appearances in the array.\n        return x\n    else:\n        #Returning the number with more appearances in the array.\n        return y", "target_Lan": "python###majorityWins.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(majorityWins([1,2,3,4,5,6,7,8,9,10], 10, 5, 10))\n    print(majorityWins([1,2,3,4,5,6,7,8,9,10], 10, 10, 5))\n    print(majorityWins([1,1,1,1,1,1,1,1,1,1], 10, 1, 2))\n    print(majorityWins([1,2,3,4,5,6,7,8,9,10], 10, 1, 1))\n    print(majorityWins([1,2,3,4,5,6,7,8,9,10], 10, 10, 10))"}, {"source_Lan": "java###minimumDifference_Test.java", "source_code": "    public static int minimumDifference(int N, int M, int[][] toys) {\n        List<int[]> list = new ArrayList<>();\n        for(int i = 0; i < N; i++){\n            for(int y : toys[i]){\n                list.add(new int[]{y, i});\n}\n        }\n        Collections.sort(list,\n            new Comparator<int[]>(){\n                public int compare(int x[], int y[]){\n                    return x[0] - y[0];\n                }\n            }\n        );\n        Map<Integer, Integer> hm = new HashMap<>();\n        int ans = Integer.MAX_VALUE;\n        int high = 0, low = 0;\n        while(high < list.size()){\n            hm.put(list.get(high)[1], hm.getOrDefault(list.get(high)[1], 0) + 1);\n            while(hm.size() == N){\n                ans = Math.min(ans, list.get(high)[0] - list.get(low)[0]);\n                hm.put(list.get(low)[1], hm.get(list.get(low)[1]) - 1);\n                if(hm.get(list.get(low)[1]) == 0)\n                    hm.remove(list.get(low)[1]);\n                low++;\n            }\n            high++;\n        }\n        return ans;\n    }", "trans_code": "def minimum_difference ( N , M , toys ) :\n    list = [ ]\n    for i in range ( N ) :\n        for y in toys :\n            list.append ( [ y , i ] )\n    list.sort ( key = lambda x : x [ 0 ] - x [ 1 ] )\n    hm = { }\n    ans = sys.maxint\n    high , low = 0 , 0\n    while high < len ( list ) :\n        hm [ list [ high ] [ 1 ] ] = hm.get ( list [ high ] [ 1 ] , 0 ) + 1\n        while len ( hm ) == N :\n            ans = min ( ans , list [ high ] [ 0 ] - list [ low ] [ 0 ] )\n            hm [ list [ low ] [ 1 ] ] = hm [ list [ low ] [ 1 ] ] - 1\n            if hm [ list [ low ] [ 1 ] ] == 0 :\n                hm.pop ( list [ low ] [ 1 ] )\n            low += 1\n        high += 1\n    return ans\n", "reference_code": "def minimumDifference( N : int, M : int, toys : List[List[int]]) -> int:\n    ans=float(\"inf\")\n    for el in toys:\n        el.sort()\n    q=[]\n    q1=[]\n    for i in range(N):\n        q.append((toys[i][0],i,1))\n        q1.append((-toys[i][0],i,1))\n    heapify(q)\n    heapify(q1)\n    while True:\n        ans=min(ans,-q1[0][0]-q[0][0])\n        el,ind,j=heappop(q)\n        if j==M:\n            break\n        heappush(q,(toys[ind][j],ind,j+1))\n        heappush(q1,(-toys[ind][j],ind,j+1))\n    return ans", "target_Lan": "python###minimumDifference.py", "target_code_shell": "from typing import List\nfrom heapq import *\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumDifference(2, 3, [[1, 2, 3], [2, 3, 4]]))\n    print(minimumDifference(3, 3, [[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(minimumDifference(1, 3, [[1, 2, 3]]))\n    print(minimumDifference(3, 1, [[1], [2], [3]]))\n    print(minimumDifference(3, 3, [[1, 2, 3], [1, 2, 3], [1, 2, 3]]))"}, {"source_Lan": "java###minJumps_Test.java", "source_code": "    public static int minJumps(int n, int[] arr) {\n        \n        \n        HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n        \n        int ans = n - 1;\n        \n        for (int i = n - 1; i >= 0; i--) {\n            \n            if (m.containsKey(arr[i])) {\n                \n                \n                ans = Math.min(ans, n - (m.get(arr[i]) - i));\n            } else {\n                \n                m.put(arr[i], i);\n            }\n        }\n        \n        return ans;\n    }", "trans_code": "def minJumps ( n , arr ) :\n    m = { }\n    ans = n - 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if m.has_key ( arr [ i ] ) :\n            ans = min ( ans , n - ( m [ arr [ i ] ] - i ) )\n        else :\n            m [ arr [ i ] ] = i\n    return ans\n", "reference_code": "def minJumps( n: int, arr: List[int]) -> int:\n    occ = {}\n    ans = float('inf')\n    for i in range(n):\n        if arr[i] not in occ:\n            ans = min(ans, n - 1)\n            occ[arr[i]] = i\n        else:\n            ans = min(occ[arr[i]] + n - i, ans)\n    return ans", "target_Lan": "python###minJumps.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minJumps(5, [1,2,3,4,5]))\n    print(minJumps(3, [1,1,1]))\n    print(minJumps(1, [1]))\n    print(minJumps(6, [1,2,3,2,1,5]))\n    print(minJumps(4, [1,2,2,1]))"}, {"source_Lan": "java###canTrade_Test.java", "source_code": "    public static int[] canTrade(int n, int[] beautifulness, int q, int[][] queries) {\n        int prev = beautifulness[0];\n        beautifulness[0] = 0;\n        for (int i = 1; i < n; i++) {\n            int curr = beautifulness[i];\n            if (beautifulness[i] == prev) {\n                beautifulness[i] = beautifulness[i - 1];\n            } else {\n                beautifulness[i] = i;\n            }\n            prev = curr;\n        }\n        int[] ans = new int[q];\n        for (int i = 0; i < q; i++) {\n            int u = queries[i][0] - 1, v = queries[i][1] - 1;\n            ans[i] = beautifulness[v] <= u ? 1 : 0;\n        }\n        return ans;\n    }", "trans_code": "def can_trade ( n , beautifulness , q , queries ) :\n    prev = beautifulness [ 0 ]\n    beautifulness [ 0 ] = 0\n    for i in range ( 1 , n ) :\n        curr = beautifulness [ i ]\n        if beautifulness [ i ] == prev :\n            beautifulness [ i ] = beautifulness [ i - 1 ]\n        else :\n            beautifulness [ i ] = i\n        prev = curr\n    ans = [ ]\n    for i in range ( q ) :\n        u , v = queries [ i ] [ 0 ] - 1 , queries [ i ] [ 1 ] - 1\n        ans.append ( beautifulness [ v ] <= u )\n    return ans\n", "reference_code": "def canTrade( n: int, beautifulness: List[int], q: int,\n             queries: List[List[int]]) -> List[int]:\n    par = [i for i in range(n)]\n    for i in range(1, n):\n        if beautifulness[i] == beautifulness[i - 1]:\n            par[i] = par[i - 1]\n        else:\n            pass\n    ans = []\n    for el in queries:\n        a, b = el[0] - 1, el[1] - 1\n        if par[a] == par[b]:\n            ans.append(1)\n        else:\n            ans.append(0)\n    return ans", "target_Lan": "python###canTrade.py", "target_code_shell": "from typing import List\nfrom typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(canTrade(1, [1], 1, [[1,1]]))\n    print(canTrade(2, [1,1], 1, [[1,2]]))\n    print(canTrade(2, [1,2], 1, [[1,2]]))\n    print(canTrade(3, [1,2,1], 2, [[1,3],[2,3]]))"}, {"source_Lan": "java###areaOfMaxDiagonal_Test.java", "source_code": "    public static int areaOfMaxDiagonal(int[][] dimensions) {\n        int ans = 0, maxL = 0;\n        for (int[] d : dimensions) {\n            int x = d[0], y = d[1];\n            int l = x * x + y * y;\n            if (l > maxL || (l == maxL && x * y > ans)) {\n                maxL = l;\n                ans = x * y;\n            }\n        }\n        return ans;\n    }", "trans_code": "def area_of_max_diagonal ( dimensions ) :\n    ans , max_l = 0 , 0\n    for d in dimensions :\n        x , y = d\n        l = x ** 2 + y ** 2\n        if l > max_l or ( l == max_l and x * y > ans ) :\n            max_l = l\n            ans = x * y\n    return ans\n", "reference_code": "def areaOfMaxDiagonal( dimensions: List[List[int]]) -> int:\n    return max((x * x + y * y, x * y) for x, y in dimensions)[1]", "target_Lan": "python###areaOfMaxDiagonal.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(areaOfMaxDiagonal([[1,2],[2,3],[3,4]]))\n    print(areaOfMaxDiagonal([[1,2],[2,3],[3,10]]))\n    print(areaOfMaxDiagonal([[1,1],[2,2],[3,3]]))\n    print(areaOfMaxDiagonal([[10,20],[20,30],[30,40]]))\n    print(areaOfMaxDiagonal([[5,10],[10,15],[15,20]]))"}, {"source_Lan": "java###maximumSetSize_Test.java", "source_code": "    public static int maximumSetSize(int[] nums1, int[] nums2) {\n        Set<Integer> set1 = new HashSet<>();\n        for (int x : nums1) {\n            set1.add(x);\n        }\n        Set<Integer> set2 = new HashSet<>();\n        for (int x : nums2) {\n            set2.add(x);\n        }\n        int common = 0;\n        for (int x : set1) {\n            if (set2.contains(x)) {\n                common++;\n            }\n        }\n        int n1 = set1.size();\n        int n2 = set2.size();\n        int ans = n1 + n2 - common;\n        int m = nums1.length / 2;\n        if (n1 > m) {\n            int mn = Math.min(n1 - m, common);\n            ans -= n1 - mn - m;\n            common -= mn;\n        }\n        if (n2 > m) {\n            n2 -= Math.min(n2 - m, common);\n            ans -= n2 - m;\n        }\n        return ans;\n    }", "trans_code": "def maximumSetSize ( nums1 , nums2 ) :\n    set1 = set ( )\n    for x in nums1 :\n        set1.add ( x )\n    set2 = set ( )\n    for x in nums2 :\n        set2.add ( x )\n    common = 0\n    for x in set1 :\n        if set2.intersection ( x ) : common += 1\n    n1 = len ( set1 )\n    n2 = len ( set2 )\n    ans = n1 + n2 - common\n    m = len ( nums1 ) / 2\n    if n1 > m :\n        mn = min ( n1 - m , common )\n        ans -= n1 - mn - m\n        common -= mn\n    if n2 > m :\n        n2 -= min ( n2 - m , common )\n        ans -= n2 - m\n    return ans\n", "reference_code": "def maximumSetSize( nums1: List[int], nums2: List[int]) -> int:\n    set1 = set(nums1)\n    set2 = set(nums2)\n    common = len(set1 & set2)\n    n1 = len(set1)\n    n2 = len(set2)\n    ans = n1 + n2 - common\n    m = len(nums1) // 2\n    if n1 > m:\n        mn = min(n1 - m, common)\n        ans -= n1 - mn - m\n        common -= mn\n    if n2 > m:\n        n2 -= min(n2 - m, common)\n        ans -= n2 - m\n    return ans", "target_Lan": "python###maximumSetSize.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumSetSize([1,2,2,3], [2,3,4]))\n    print(maximumSetSize([1,1,1,1,2,2,2,3,3,3], [2,2,2,3,3,3]))\n    print(maximumSetSize([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5]))\n    print(maximumSetSize([1,1,1,1,1,2,2,2,2,2], [3,3,3,3,3,4,4,4,4,4]))\n    print(maximumSetSize([1,2,3,4,5,6,7,8,9,10], [11,12,13,14,15]))"}, {"source_Lan": "java###minimumPushes_Test.java", "source_code": "    public static int minimumPushes(String word) {\n        int n = word.length();\n        int k = n / 8;\n        return (k * 4 + n % 8) * (k + 1);\n    }", "trans_code": "def minimumPushes ( word ) :\n    n = len ( word )\n    k = n // 8\n    return ( k * 4 + n % 8 ) * ( k + 1 )\n", "reference_code": "def minimumPushes( word: str) -> int:\n    k, rem = divmod(len(word), 8)\n    return (k * 4 + rem) * (k + 1)", "target_Lan": "python###minimumPushes.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(minimumPushes(\"a\"))\n    print(minimumPushes(\"abcdefghijklmnop\"))\n    print(minimumPushes(\"abcdefgh\"))\n    print(minimumPushes(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(minimumPushes(\"abcdefghijklmnopqrstuvwxyz1234567890\"))"}, {"source_Lan": "java###longestCommonPrefix_Test.java", "source_code": "    public static int longestCommonPrefix(int[] arr1, int[] arr2) {\n        Set<String> st = new HashSet<>();\n        for (int x : arr1) {\n            String s = Integer.toString(x);\n            for (int i = 1; i <= s.length(); i++) {\n                st.add(s.substring(0, i));\n            }\n        }\n        int ans = 0;\n        for (int x : arr2) {\n            String s = Integer.toString(x);\n            for (int i = 1; i <= s.length(); i++) {\n                if (!st.contains(s.substring(0, i))) {\n                    break;\n                }\n                ans = Math.max(ans, i);\n            }\n        }\n        return ans;\n    }", "trans_code": "def longest_common_prefix ( arr1 , arr2 ) :\n    st = set ( )\n    for x in arr1 :\n        s = str ( x )\n        for i in range ( 1 , len ( s ) ) :\n            st.add ( s [ : i ] )\n    ans = 0\n    for x in arr2 :\n        s = str ( x )\n        for i in range ( 1 , len ( s ) ) :\n            if not st.intersection ( s [ : i ] ) :\n                break\n            ans = max ( ans , i )\n    return ans\n", "reference_code": "def longestCommonPrefix( arr1: List[int], arr2: List[int]) -> int:\n    st = set()\n    for s in map(str, arr1):\n        for i in range(1, len(s) + 1):\n            st.add(s[:i])\n    ans = 0\n    for s in map(str, arr2):\n        for i in range(1, len(s) + 1):\n            if s[:i] not in st:\n                break\n            ans = max(ans, i)\n    return ans", "target_Lan": "python###longestCommonPrefix.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(longestCommonPrefix([123, 234, 12345], [123, 234, 12345]))\n    print(longestCommonPrefix([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(longestCommonPrefix([123, 234, 12345], [1, 2, 3, 4, 5]))\n    print(longestCommonPrefix([123, 234, 12345], [12, 23, 34, 45, 56]))\n    print(longestCommonPrefix([123, 234, 12345], [12345]))"}, {"source_Lan": "java###countSubmatrices_Test.java", "source_code": "    public static int countSubmatrices(int[][] grid, int k) {\n        int ans = 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][] sum = new int[m + 1][n + 1];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1] = sum[i + 1][j] + sum[i][j + 1] - sum[i][j] + grid[i][j];\n                if (sum[i + 1][j + 1] <= k) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def count_submatrices ( grid , k ) :\n    ans = 0\n    m = len ( grid )\n    n = len ( grid [ 0 ] )\n    sum = [ 0 for i in range ( m + 1 ) ]\n    for i in range ( m ) :\n        for j in range ( n ) :\n            sum [ i + 1 ] [ j + 1 ] = sum [ i + 1 ] [ j ] + sum [ i ] [ j + 1 ] - sum [ i ] [ j ] + grid [ i ] [ j ]\n            if sum [ i + 1 ] [ j + 1 ] <= k :\n                ans += 1\n    return ans\n", "reference_code": "def countSubmatrices( grid: List[List[int]], k: int) -> int:\n    ans = 0\n    m, n = len(grid), len(grid[0])\n    s = [[0] * (n + 1) for _ in range(m + 1)]\n    for i, row in enumerate(grid):\n        for j, x in enumerate(row):\n            s[i + 1][j + 1] = s[i + 1][j] + s[i][j + 1] - s[i][j] + x\n            if s[i + 1][j + 1] <= k:\n                ans += 1\n    return ans", "target_Lan": "python###countSubmatrices.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(countSubmatrices([[1,0,1],[0,1,0],[1,0,1]], 1))\n    print(countSubmatrices([[1,1,1],[1,1,1],[1,1,1]], 2))\n    print(countSubmatrices([[1,0,1],[1,0,0],[0,1,0]], 1))\n    print(countSubmatrices([[1,1,1,1],[1,1,1,1],[1,1,1,1]], 3))\n    print(countSubmatrices([[1,1,1,1],[1,1,1,1],[1,1,1,1]], 4))"}, {"source_Lan": "java###maxBottlesDrunk_Test.java", "source_code": "    public static int maxBottlesDrunk(int numBottles, int numExchange) {\n        int ans = numBottles; \n        while (numBottles >= numExchange) { \n            ans++; \n            numBottles += 1 - numExchange++;\n        }\n        return ans;\n    }", "trans_code": "def maxBottlesDrunk ( numBottles , numExchange ) :\n    ans = numBottles\n    while numBottles >= numExchange :\n        ans += 1\n        numBottles += 1 - numExchange\n    return ans\n", "reference_code": "def maxBottlesDrunk( numBottles: int, numExchange: int) -> int:\n    ans = numBottles  # \u4e00\u5f00\u59cb\u5c31\u5168\u90e8\u559d\u5b8c\n    while numBottles >= numExchange:  # \u6709\u8db3\u591f\u7684\u7a7a\u74f6\n        ans += 1  # \u7528 numExchange \u4e2a\u7a7a\u74f6\u4ea4\u6362\uff0c\u7136\u540e\u559d\u6389\uff0c\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u7a7a\u74f6\n        numBottles += 1 - numExchange\n        numExchange += 1\n    return ans", "target_Lan": "python###maxBottlesDrunk.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(maxBottlesDrunk(0, 1))\n    print(maxBottlesDrunk(100, 0))\n    print(maxBottlesDrunk(100, 100))\n    print(maxBottlesDrunk(100, 101))\n    print(maxBottlesDrunk(100, -1))"}, {"source_Lan": "java###longestMonotonicSubarray_Test.java", "source_code": "    public static int longestMonotonicSubarray(int[] a) {\n        int ans = 1;\n        int i = 0, n = a.length;\n        while (i < n - 1) {\n            if (a[i + 1] == a[i]) {\n                i++; \n                continue;\n            }\n            int i0 = i; \n            boolean inc = a[i + 1] > a[i]; \n            i += 2; \n            while (i < n && a[i] != a[i - 1] && (a[i] > a[i - 1]) == inc) {\n                i++;\n            }\n            \n            ans = Math.max(ans, i - i0);\n            i--;\n        }\n        return ans;\n    }", "trans_code": "def longestMonotonicSubarray ( a ) :\n    ans = 1\n    i , n = 0 , len ( a )\n    while i < n - 1 :\n        if a [ i + 1 ] == a [ i ] :\n            i += 1\n            continue\n        i0 = i\n        inc = a [ i + 1 ] > a [ i ]\n        i += 2\n        while i < n and a [ i ] != a [ i - 1 ] and ( a [ i ] > a [ i - 1 ] ) == inc :\n            i += 1\n        ans = max ( ans , i - i0 )\n        i -= 1\n    return ans\n", "reference_code": "def longestMonotonicSubarray( a: List[int]) -> int:\n    ans = 1\n    i, n = 0, len(a)\n    while i < n - 1:\n        if a[i + 1] == a[i]:\n            i += 1  # \u76f4\u63a5\u8df3\u8fc7\n            continue\n        i0 = i  # \u8bb0\u5f55\u8fd9\u4e00\u7ec4\u7684\u5f00\u59cb\u4f4d\u7f6e\n        inc = a[i + 1] > a[i]  # \u5b9a\u4e0b\u57fa\u8c03\uff1a\u662f\u4e25\u683c\u9012\u589e\u8fd8\u662f\u4e25\u683c\u9012\u51cf\n        i += 2  # i \u548c i+1 \u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\uff0c\u4ece i+2 \u5f00\u59cb\u5224\u65ad\n        while i < n and a[i] != a[i - 1] and (a[i] > a[i - 1]) == inc:\n            i += 1\n        # \u4ece i0 \u5230 i-1 \u662f\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\uff08\u5e76\u4e14\u65e0\u6cd5\u518d\u5ef6\u957f\u7684\uff09\u5b50\u6570\u7ec4\n        ans = max(ans, i - i0)\n        i -= 1\n    return ans", "target_Lan": "python###longestMonotonicSubarray.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(longestMonotonicSubarray([1,2,3,4,5,6,7,8,9,10]))\n    print(longestMonotonicSubarray([10,9,8,7,6,5,4,3,2,1]))\n    print(longestMonotonicSubarray([1,1,1,1,1,1,1,1,1,1]))\n    print(longestMonotonicSubarray([1,2,3,2,1,2,3,2,1,2]))\n    print(longestMonotonicSubarray([1,2,3,2,3,4,5,4,3,2,1]))"}, {"source_Lan": "java###getSmallestString_Test.java", "source_code": "    public static String getSmallestString(String s, int k) {\n        char[] t = s.toCharArray();\n        for (int i = 0; i < t.length; i++) {\n            int dis = Math.min(t[i] - 'a', 'z' - t[i] + 1);\n            if (dis > k) {\n                t[i] -= k;\n                break;\n            }\n            t[i] = 'a';\n            k -= dis;\n        }\n        return new String(t);\n    }", "trans_code": "def get_smallest_string ( s , k ) :\n    t = s.split ( )\n    for i in range ( len ( t ) ) :\n        dis = min ( t [ i ] - 'a' , 'z' - t [ i ] + 1 )\n        if dis > k :\n            t [ i ] -= k\n            break\n        t [ i ] = 'a'\n        k -= dis\n    return ''.join ( t )\n", "reference_code": "def getSmallestString( s: str, k: int) -> str:\n    s = list(s)\n    for i, c in enumerate(map(ord, s)):\n        dis = min(c - ord('a'), ord('z') - c + 1)\n        if dis > k:\n            s[i] = chr(c - k)\n            break\n        s[i] = 'a'\n        k -= dis\n    return ''.join(s)", "target_Lan": "python###getSmallestString.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(getSmallestString(\"abc\", 3))\n    print(getSmallestString(\"xyz\", 3))\n    print(getSmallestString(\"aaa\", 1))\n    print(getSmallestString(\"zzz\", 1))\n    print(getSmallestString(\"abc\", 5))"}, {"source_Lan": "java###minOperationsToMakeMedianK_Test.java", "source_code": "    public static long minOperationsToMakeMedianK(int[] nums, int k) {\n        Arrays.sort(nums);\n        long ans = 0;\n        int m = nums.length / 2;\n        if (nums[m] > k) {\n            for (int i = m; i >= 0 && nums[i] > k; i--) {\n                ans += nums[i] - k;\n            }\n        } else {\n            for (int i = m; i < nums.length && nums[i] < k; i++) {\n                ans += k - nums[i];\n            }\n        }\n        return ans;\n    }", "trans_code": "def min_operations_to_make_median_k ( nums , k ) :\n    nums.sort ( )\n    ans = 0\n    m = len ( nums ) / 2\n    if nums [ m ] > k :\n        for i in range ( m , - 1 , - 1 ) :\n            ans += nums [ i ] - k\n    else :\n        for i in range ( m , len ( nums ) and nums [ i ] < k ) :\n            ans += k - nums [ i ]\n    return ans\n", "reference_code": "def minOperationsToMakeMedianK( nums: List[int], k: int) -> int:\n    nums.sort()\n    m = len(nums) // 2\n    ans = 0\n    if nums[m] > k:\n        for i in range(m, -1, -1):\n            if nums[i] <= k:\n                break\n            ans += nums[i] - k\n    else:\n        for i in range(m, len(nums)):\n            if nums[i] >= k:\n                break\n            ans += k - nums[i]\n    return ans", "target_Lan": "python###minOperationsToMakeMedianK.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minOperationsToMakeMedianK([1, 2, 3, 4, 5], 3))\n    print(minOperationsToMakeMedianK([1, 1, 1, 1, 1], 1))\n    print(minOperationsToMakeMedianK([-1, -2, -3, -4, -5], -3))\n    print(minOperationsToMakeMedianK([10, 20, 30, 40, 50], 30))\n    print(minOperationsToMakeMedianK([5, 10, 15, 20, 25], 15))"}, {"source_Lan": "java###sumDigitDifferences_Test.java", "source_code": "    public static long sumDigitDifferences(int[] nums) {\n        long ans = 0;\n        int[][] cnt = new int[Integer.toString(nums[0]).length()][10];\n        for (int k = 0; k < nums.length; k++) {\n            int x = nums[k];\n            for (int i = 0; x > 0; x /= 10, i++) {\n                int d = x % 10;\n                ans += k - cnt[i][d]++;\n            }\n        }\n        return ans;\n    }", "trans_code": "def sum_digit_differences ( nums ) :\n    ans = 0\n    cnt = np.zeros ( [ len ( nums ) , 10 ] )\n    for k in range ( len ( nums ) ) :\n        x = nums [ k ]\n        for i in range ( 0 , x > 0 , 10 ) :\n            d = x % 10\n            ans += k - cnt [ i ] [ d ]\n    return ans\n", "reference_code": "def sumDigitDifferences( nums: List[int]) -> int:\n    ans = 0\n    cnt = [[0] * 10 for _ in str(nums[0])]\n    for k, x in enumerate(nums):\n        i = 0\n        while x:\n            x, d = divmod(x, 10)\n            ans += k - cnt[i][d]\n            cnt[i][d] += 1\n            i += 1\n    return ans", "target_Lan": "python###sumDigitDifferences.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(sumDigitDifferences([1]))\n    print(sumDigitDifferences([1, 2, 3, 4, 5]))\n    print(sumDigitDifferences([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))\n    print(sumDigitDifferences([123, 456, 789]))\n    print(sumDigitDifferences([100, 200, 300, 400, 500]))"}, {"source_Lan": "java###compressedString_Test.java", "source_code": "    public static String compressedString(String word) {\n        StringBuilder t = new StringBuilder();\n        char[] s = word.toCharArray();\n        int i0 = -1;\n        for (int i = 0; i < s.length; i++) {\n            char c = s[i];\n            if (i + 1 == s.length || c != s[i + 1]) {\n                int k = i - i0;\n                for (int j = 0; j < k / 9; j++) {\n                    t.append('9').append(c);\n                }\n                if (k % 9 > 0) {\n                    t.append((char) ('0' + (k % 9))).append(c);\n                }\n                i0 = i;\n            }\n        }\n        return t.toString();\n    }", "trans_code": "def compressed_string ( word ) :\n    t = [ ]\n    s = word\n    i0 = - 1\n    for i in range ( len ( s ) ) :\n        c = s [ i ]\n        if i + 1 == len ( s ) or c != s [ i + 1 ] :\n            k = i - i0\n            for j in range ( k / 9 ) :\n                t.append ( '9' * ( k % 9 ) + c )\n            if k % 9 :\n                t.append ( chr ( ord ( '0' ) + ( k % 9 ) ) + c )\n            i0 = i\n    return ''.join ( t )\n", "reference_code": "def compressedString( word: str) -> str:\n    t = []\n    i0 = -1\n    for i, c in enumerate(word):\n        if i + 1 == len(word) or c != word[i + 1]:\n            k, rem = divmod(i - i0, 9)\n            t.append((\"9\" + c) * k)\n            if rem:\n                t.append(str(rem))\n                t.append(c)\n            i0 = i\n    return ''.join(t)", "target_Lan": "python###compressedString.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(compressedString(\"a\"))\n    print(compressedString(\"aaaaaaaaaa\"))\n    print(compressedString(\"abc\"))\n    print(compressedString(\"aaabbbccc\"))\n    print(compressedString(\"aabbcc\"))"}, {"source_Lan": "java###maxTotalReward_Test.java", "source_code": "    public static int maxTotalReward(int[] rewardValues) {\n        BigInteger f = BigInteger.ONE;\n        for (int v : Arrays.stream(rewardValues).distinct().sorted().toArray()) {\n            BigInteger mask = BigInteger.ONE.shiftLeft(v).subtract(BigInteger.ONE);\n            f = f.or(f.and(mask).shiftLeft(v));\n        }\n        return f.bitLength() - 1;\n    }", "trans_code": "def max_total_reward ( reward_values ) :\n    f = np.ones ( len ( reward_values ) )\n    for v in list ( reward_values ).distinct ( ).sorted ( ) :\n        mask = np.ones ( len ( v ) ) - v\n        f = f [ mask ]\n    return f.sum ( ) - 1\n", "reference_code": "def maxTotalReward( rewardValues: List[int]) -> int:\n    f = 1\n    for v in sorted(set(rewardValues)):\n        f |= (f & ((1 << v) - 1)) << v\n    return f.bit_length() - 1", "target_Lan": "python###maxTotalReward.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxTotalReward([1, 2, 3, 4, 5]))\n    print(maxTotalReward([10, 20, 30, 40, 50]))\n    print(maxTotalReward([1, 2, 4, 8, 16]))\n    print(maxTotalReward([1, 1, 1, 1, 1]))\n    print(maxTotalReward([0, 0, 0, 0, 0]))"}, {"source_Lan": "java###countCompleteDayPairs_Test.java", "source_code": "    public static long countCompleteDayPairs(int[] hours) {\n        long ans = 0;\n        int[] cnt = new int[24];\n        for (int t : hours) {\n            \n            \n            ans += cnt[(24 - t % 24) % 24];\n            cnt[t % 24]++;\n        }\n        return ans;\n    }", "trans_code": "def count_complete_day_pairs ( hours ) :\n    ans = 0\n    cnt = [ ]\n    for t in hours :\n        ans += cnt [ ( 24 - t % 24 ) % 24 ]\n        cnt.append ( t % 24 )\n    return ans\n", "reference_code": "def countCompleteDayPairs( hours: List[int]) -> int:\n    ans = 0\n    cnt = [0] * 24\n    for t in hours:\n        # \u5148\u67e5\u8be2 cnt\uff0c\u518d\u66f4\u65b0 cnt\uff0c\u56e0\u4e3a\u9898\u76ee\u8981\u6c42 i<j\n        # \u5982\u679c\u5148\u66f4\u65b0\uff0c\u518d\u67e5\u8be2\uff0c\u5c31\u628a i=j \u7684\u60c5\u51b5\u4e5f\u8003\u8651\u8fdb\u53bb\u4e86\n        ans += cnt[(24 - t % 24) % 24]\n        cnt[t % 24] += 1\n    return ans", "target_Lan": "python###countCompleteDayPairs.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(countCompleteDayPairs([0]))\n    print(countCompleteDayPairs([0, 23]))\n    print(countCompleteDayPairs([0, 23, 0, 23]))\n    print(countCompleteDayPairs([0, 23, 23, 0, 0, 23, 23]))\n    print(countCompleteDayPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))"}, {"source_Lan": "java###minimumAverage_Test.java", "source_code": "    public static double minimumAverage(int[] nums) {\n        Arrays.sort(nums);\n        int ans = Integer.MAX_VALUE;\n        int n = nums.length;\n        for (int i = 0; i < n / 2; i++) {\n            ans = Math.min(ans, nums[i] + nums[n - 1 - i]);\n        }\n        return ans / 2.0;\n    }", "trans_code": "def minimum_average ( nums ) :\n    nums.sort ( )\n    ans = sys.maxsize\n    n = len ( nums )\n    for i in range ( n // 2 ) :\n        ans = min ( ans , nums [ i ] + nums [ n - 1 - i ] )\n    return ans / 2.0\n", "reference_code": "def minimumAverage( nums: List[int]) -> float:\n    nums.sort()\n    return min(nums[i] + nums[-1 - i] for i in range(len(nums) // 2)) / 2", "target_Lan": "python###minimumAverage.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumAverage([1, 2, 3, 4, 5]))\n    print(minimumAverage([5, 5, 5, 5, 5]))\n    print(minimumAverage([10, 20, 30, 40, 50]))\n    print(minimumAverage([1, 1, 1, 1, 1]))\n    print(minimumAverage([-1, -2, -3, -4, -5]))"}, {"source_Lan": "java###maximumLength_Test.java", "source_code": "    public static int maximumLength(int[] nums, int k) {\n        int ans = 0;\n        int[][] f = new int[k][k];\n        for (int x : nums) {\n            x %= k;\n            for (int y = 0; y < k; y++) {\n                f[y][x] = f[x][y] + 1;\n                ans = Math.max(ans, f[y][x]);\n            }\n        }\n        return ans;\n    }", "trans_code": "def maximum_length ( nums , k ) :\n    ans = 0\n    f = { }\n    for x in nums :\n        x %= k\n        for y in range ( k ) :\n            f [ y ] [ x ] = f [ x ] [ y ] + 1\n            ans = max ( ans , f [ y ] [ x ] )\n    return ans\n", "reference_code": "def maximumLength( nums: List[int], k: int) -> int:\n    f = [[0] * k for _ in range(k)]\n    for x in nums:\n        x %= k\n        for y, fxy in enumerate(f[x]):\n            f[y][x] = fxy + 1\n    return max(map(max, f))", "target_Lan": "python###maximumLength.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumLength([1,2,3,4,5], 2))\n    print(maximumLength([1,2,3,4,5], 1))\n    print(maximumLength([1,2,3,4,5], 3))\n    print(maximumLength([1,2,3,4,5], 4))\n    print(maximumLength([1,2,3,4,5], 5))"}, {"source_Lan": "java###minimumCost_Test.java", "source_code": "    public static int minimumCost(int[] nums) {\n        Arrays.sort(nums, 1, nums.length);\n        return nums[0] + nums[1] + nums[2];\n    }", "trans_code": "def minimum_cost ( nums ) :\n    nums.sort ( )\n    return nums [ 0 ] + nums [ 1 ] + nums [ 2 ]\n", "reference_code": "def minimumCost( nums: List[int]) -> int:\n    return nums[0] + sum(sorted(nums[1:])[:2])", "target_Lan": "python###minimumCost.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumCost([1,2,3,4,5]))\n    print(minimumCost([5,4,3,2,1]))\n    print(minimumCost([-1,-2,-3,-4,-5]))\n    print(minimumCost([10,20,30,40,50]))\n    print(minimumCost([5,5,5,5,5]))"}, {"source_Lan": "java###minimumArrayLength_Test.java", "source_code": "    public static int minimumArrayLength(int[] nums) {\n        int m = Integer.MAX_VALUE;\n        for (int x : nums) {\n            m = Math.min(m, x);\n        }\n        for (int x : nums) {\n            if (x % m > 0) {\n                return 1;\n            }\n        }\n        int cnt = 0;\n        for (int x : nums) {\n            if (x == m) {\n                cnt++;\n            }\n        }\n        return (cnt + 1) / 2;\n    }", "trans_code": "def minimum_array_length ( nums ) :\n    m = sys.maxint\n    for x in nums :\n        m = min ( m , x )\n    for x in nums :\n        if x % m > 0 :\n            return 1\n    cnt = 0\n    for x in nums :\n        if x == m :\n            cnt += 1\n    return ( cnt + 1 ) // 2\n", "reference_code": "def minimumArrayLength( nums: List[int]) -> int:\n    m = min(nums)\n    for x in nums:\n        if x % m:\n            return 1\n    return (nums.count(m) + 1) // 2", "target_Lan": "python###minimumArrayLength.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumArrayLength([1, 2, 3, 4, 5]))\n    print(minimumArrayLength([2, 4, 6, 8, 10]))\n    print(minimumArrayLength([1, 1, 1, 1, 1]))\n    print(minimumArrayLength([10, 20, 30, 40, 50]))"}, {"source_Lan": "java###triangleType_Test.java", "source_code": "    public static String triangleType(int[] nums) {\n        Arrays.sort(nums);\n        int x = nums[0];\n        int y = nums[1];\n        int z = nums[2];\n        if (x + y <= z) { \n            return \"none\";\n        }\n        if (x == z) { \n            return \"equilateral\";\n        }\n        if (x == y || y == z) {\n            return \"isosceles\";\n        }\n        return \"scalene\";\n    }", "trans_code": "def triangleType ( nums ) :\n    nums.sort ( )\n    x = nums [ 0 ]\n    y = nums [ 1 ]\n    z = nums [ 2 ]\n    if x + y <= z :\n        return \"none\"\n    if x == z :\n        return \"equilateral\"\n    if x == y or y == z :\n        return \"isosceles\"\n    return \"scalene\"\n", "reference_code": "def triangleType( nums: List[int]) -> str:\n    nums.sort()\n    x, y, z = nums\n    if x + y <= z:  # \u6392\u5e8f\u540e\uff0c\u53ea\u9700\u6bd4\u8f83 x+y \u548c z\n        return \"none\"\n    if x == z:  # \u6392\u5e8f\u4e86\uff0c\u8bf4\u660e y \u4e5f\u548c x z \u76f8\u7b49\n        return \"equilateral\"\n    if x == y or y == z:\n        return \"isosceles\"\n    return \"scalene\"", "target_Lan": "python###triangleType.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(triangleType([1,1,1]))\n    print(triangleType([3,4,5]))\n    print(triangleType([2,2,1]))\n    print(triangleType([5,7,8]))\n    print(triangleType([4,4,5]))"}, {"source_Lan": "java###minimumLevels_Test.java", "source_code": "    public static int minimumLevels(int[] possible) {\n        \n        int n = possible.length;\n        int s = 0;\n        for (int x : possible) {\n            s += x;\n        }\n        s = s * 2 - n;\n        int pre = 0;\n        for (int i = 0; i < n - 1; i++) {\n            pre += possible[i] == 1 ? 2 : -2;\n            if (pre > s) {\n                return i + 1;\n            }\n        }\n        return -1;\n    }", "trans_code": "def minimum_levels ( possible ) :\n    n = len ( possible )\n    s = 0\n    for x in possible :\n        s += x\n    s = s * 2 - n\n    pre = 0\n    for i in range ( n - 1 ) :\n        pre += possible [ i ] == 1\n        if pre > s :\n            return i + 1\n", "reference_code": "def minimumLevels( possible: List[int]) -> int:\n    # cnt1 - cnt0 = cnt1 - (n - cnt1) = cnt1 * 2 - n\n    s = sum(possible) * 2 - len(possible)\n    pre = 0\n    for i, x in enumerate(possible[:-1]):\n        pre += 2 if x else -2\n        if pre > s:\n            return i + 1\n    return -1", "target_Lan": "python###minimumLevels.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumLevels([1, 1, 1, 1, 1, 1]))\n    print(minimumLevels([0, 0, 0, 0, 0, 0]))\n    print(minimumLevels([1, 0, 1, 0, 1, 0]))\n    print(minimumLevels([1, 1, 1, 1, 1, 0]))\n    print(minimumLevels([0, 1, 0, 1, 0, 1]))"}, {"source_Lan": "java###minRectanglesToCoverPoints_Test.java", "source_code": "    public static int minRectanglesToCoverPoints(int[][] points, int w) {\n        Arrays.sort(points, (p, q) -> p[0] - q[0]);\n        int ans = 0;\n        int x2 = -1;\n        for (int[] p : points) {\n            if (p[0] > x2) {\n                ans++;\n                x2 = p[0] + w;\n            }\n        }\n        return ans;\n    }", "trans_code": "def minRectanglesToCoverPoints ( points , w ) :\n    points.sort ( )\n    ans = 0\n    x2 = - 1\n    for p in points :\n        if p [ 0 ] > x2 :\n            ans += 1\n            x2 = p [ 0 ] + w\n    return ans\n", "reference_code": "def minRectanglesToCoverPoints( points: List[List[int]], w: int) -> int:\n    points.sort(key=lambda p: p[0])\n    ans = 0\n    x2 = -1\n    for x, _ in points:\n        if x > x2:\n            ans += 1\n            x2 = x + w\n    return ans", "target_Lan": "python###minRectanglesToCoverPoints.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minRectanglesToCoverPoints([[1,2],[3,4],[5,6]], 1))\n    print(minRectanglesToCoverPoints([[1,1],[2,2],[3,3]], 2))\n    print(minRectanglesToCoverPoints([[-1,-2],[-3,-4],[-5,-6]], 3))\n    print(minRectanglesToCoverPoints([[10,20],[30,40],[50,60]], 4))\n    print(minRectanglesToCoverPoints([[0,0],[1,1],[2,2]], 5))"}, {"source_Lan": "java###satisfiesConditions_Test.java", "source_code": "    public static boolean satisfiesConditions(int[][] grid) {\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (j > 0 && grid[i][j] == grid[i][j - 1] || i > 0 && grid[i][j] != grid[i - 1][j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "trans_code": "def satisfies_conditions ( grid ) :\n    for i in range ( len ( grid ) ) :\n        for j in range ( len ( grid [ i ] ) ) :\n            if j > 0 and grid [ i ] [ j ] == grid [ i ] [ j - 1 ] or i > 0 and grid [ i ] [ j ] != grid [ i - 1 ] [ j ] :\n                return False\n    return True\n", "reference_code": "def satisfiesConditions( grid: List[List[int]]) -> bool:\n    for i, row in enumerate(grid):\n        for j, x in enumerate(row):\n            if j and x == row[j - 1] or i and x != grid[i - 1][j]:\n                return False\n    return True", "target_Lan": "python###satisfiesConditions.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(satisfiesConditions([[1,2,3],[4,5,6],[7,8,9]]))\n    print(satisfiesConditions([[1,1,1],[2,2,2],[3,3,3]]))\n    print(satisfiesConditions([[1,2,3],[1,2,3],[1,2,3]]))\n    print(satisfiesConditions([[1,1,2],[1,1,2],[3,3,3]]))\n    print(satisfiesConditions([[1,2,3,4],[5,6,7,8],[9,10,11,12]]))"}, {"source_Lan": "java###occurrencesOfElement_Test.java", "source_code": "    public static int[] occurrencesOfElement(int[] nums, int[] queries, int x) {\n        List<Integer> pos = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == x) {\n                pos.add(i);\n            }\n        }\n        for (int i = 0; i < queries.length; i++) {\n            if (queries[i] > pos.size()) {\n                queries[i] = -1;\n            } else {\n                queries[i] = pos.get(queries[i] - 1);\n            }\n        }\n        return queries;\n    }", "trans_code": "def occurrencesOfElement ( nums , queries , x ) :\n    pos = [ ]\n    for i in nums :\n        if i == x :\n            pos.append ( i )\n    for i in queries :\n        if queries [ i ] > len ( pos ) :\n            queries [ i ] = - 1\n        else :\n            queries [ i ] = pos [ queries [ i ] - 1 ]\n    return queries\n", "reference_code": "def occurrencesOfElement( nums: List[int], queries: List[int], x: int) -> List[int]:\n    pos = [i for i, v in enumerate(nums) if v == x]\n    return [-1 if q > len(pos) else pos[q - 1] for q in queries]", "target_Lan": "python###occurrencesOfElement.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(occurrencesOfElement([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3))\n    print(occurrencesOfElement([3, 2, 1, 3, 2, 1], [1, 2, 3, 4, 5], 3))\n    print(occurrencesOfElement([], [1, 2, 3, 4, 5], 1))\n    print(occurrencesOfElement([1, 2, 3, 4, 5], [], 1))\n    print(occurrencesOfElement([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 6))"}, {"source_Lan": "java###numberGame_Test.java", "source_code": "    public static int[] numberGame(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i += 2) {\n            int tmp = nums[i];\n            nums[i] = nums[i + 1];\n            nums[i + 1] = tmp;\n        }\n        return nums;\n    }", "trans_code": "def number_game ( nums ) :\n    nums.sort ( )\n    for i in range ( 0 , len ( nums ) , 2 ) :\n        tmp = nums [ i ]\n        nums [ i ] = nums [ i + 1 ]\n        nums [ i + 1 ] = tmp\n    return nums\n", "reference_code": "def numberGame( nums: List[int]) -> List[int]:\n    nums.sort()\n    for i in range(0, len(nums), 2):\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums", "target_Lan": "python###numberGame.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(numberGame([0, 1, 2, 3, 4, 5]))\n    print(numberGame([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))"}, {"source_Lan": "java###modifiedMatrix_Test.java", "source_code": "    public static int[][] modifiedMatrix(int[][] matrix) {\n        int n = matrix.length; \n        int m = matrix[0].length; \n        for (int j = 0; j < m; j++) {\n            int zd = -1; \n            for (int i = 0; i < n; i++) {\n                zd = Math.max(zd, matrix[i][j]); \n            }\n            for (int i = 0; i < n; i++) {\n                if (matrix[i][j] == -1) {\n                    matrix[i][j] = zd; \n                }\n            }\n        }\n        return matrix; \n    }", "trans_code": "def modified_matrix ( matrix ) :\n    n = len ( matrix )\n    m = len ( matrix [ 0 ] )\n    for j in range ( m ) :\n        zd = - 1\n        for i in range ( n ) :\n            zd = max ( zd , matrix [ i ] [ j ] )\n        for i in range ( n ) :\n            if matrix [ i ] [ j ] == - 1 :\n                matrix [ i ] [ j ] = zd\n    return matrix\n", "reference_code": "def modifiedMatrix( matrix: List[List[int]]) -> List[List[int]]:\n    n, m = len(matrix), len(matrix[0])\n    for j in range(m):\n        zd = -1\n        for i in range(n):\n            zd = max(zd, matrix[i][j])\n        for i in range(n):\n            if matrix[i][j] == -1:\n                matrix[i][j] = zd\n    return matrix", "target_Lan": "python###modifiedMatrix.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    matrix1=[[1,2,3],[4,5,6],[7,8,9]]\n    matrix2=[[10,0,0],[0,10,0],[0,0,10]]\n    matrix3=[[-1,-1,-1],[-1,-1,-1],[-1,-1,-1]]\n    matrix4=[[1,0,1],[0,1,0],[1,0,1]]\n    matrix5=[[0,0,0],[0,0,0],[0,0,0]]\n    print(modifiedMatrix(matrix1))\n    print(modifiedMatrix(matrix2))\n    print(modifiedMatrix(matrix3))\n    print(modifiedMatrix(matrix4))\n    print(modifiedMatrix(matrix5))"}, {"source_Lan": "java###maximumPrimeDifference_Test.java", "source_code": "    public static int maximumPrimeDifference(int[] nums) {\n        Set<Integer> primes = new HashSet<>(Arrays.asList(\n            2, 3, 5, 7, 11,\n            13, 17, 19, 23, 29,\n            31, 37, 41, 43, 47,\n            53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97\n        ));\n        int n = nums.length;\n        int first = -1, ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (primes.contains(nums[i])) {\n                if (first != -1) {\n                    ans = Math.max(ans, i - first);\n                } else {\n                    first = i;\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def maximum_prime_difference ( nums ) :\n    primes = set ( [ 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , 59 , 61 , 67 , 71 , 73 , 79 , 83 , 89 , 97 ] )\n    n = len ( nums )\n    first , ans = - 1 , 0\n    for i in range ( n ) :\n        if primes.intersection ( nums [ i ] ) :\n            if first != - 1 :\n                ans = max ( ans , i - first )\n            else :\n                first = i\n    return ans\n", "reference_code": "def maximumPrimeDifference( nums: List[int]) -> int:\n    primes = {\n        2, 3, 5, 7, 11,\n        13, 17, 19, 23, 29,\n        31, 37, 41, 43, 47,\n        53, 59, 61, 67, 71,\n        73, 79, 83, 89, 97\n    }\n    first, ans = -1, 0\n    for i, num in enumerate(nums):\n        if num in primes:\n            if first != -1:\n                ans = max(ans, i - first)\n            else:\n                first = i\n    return ans", "target_Lan": "python###maximumPrimeDifference.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumPrimeDifference([2,3,5,7,11]))\n    print(maximumPrimeDifference([10,19,23,29,31,37,41]))\n    print(maximumPrimeDifference([43,47,53,59,61,67,71]))\n    print(maximumPrimeDifference([73,79,83,89,97]))\n    print(maximumPrimeDifference([1,2,3,5,7,11,13,17,19,23]))"}, {"source_Lan": "java###findMaximumElegance_Test.java", "source_code": "    public static long findMaximumElegance(int[][] items, int k) {\n        Arrays.sort(items, (item0, item1) -> item1[0] - item0[0]);\n        var categorySet = new HashSet<Integer>();\n        long profit = 0, res = 0;\n        var st = new ArrayDeque<Integer>();\n        for (int i = 0; i < items.length; i++) {\n            if (i < k) {\n                profit += items[i][0];\n                if (!categorySet.add(items[i][1])) {\n                    st.push(items[i][0]);\n                }\n            } else if (!st.isEmpty() && categorySet.add(items[i][1])) {\n                profit += items[i][0] - st.pop();\n            }\n            res = Math.max(res, profit + (long)categorySet.size() * categorySet.size());\n        }\n        return res;\n    }", "trans_code": "def find_maximum_elegance ( items , k ) :\n    items = sorted ( items , key = lambda ( item0 , item1 ) : item1 [ 0 ] - item0 [ 0 ] )\n    category_set = set ( )\n    profit , res = 0 , 0\n    st = [ ]\n    for i in range ( len ( items ) ) :\n        if i < k :\n            profit += items [ i ] [ 0 ]\n            if not category_set.add ( items [ i ] [ 1 ] ) :\n                st.append ( items [ i ] [ 0 ] )\n        elif not st and category_set.add ( items [ i ] [ 1 ] ) :\n            profit += items [ i ] [ 0 ] - st.pop ( )\n        res = max ( res , profit + int ( len ( category_set ) * len ( items ) ) )\n    return res\n", "reference_code": "def findMaximumElegance( items: List[List[int]], k: int) -> int:\n    items.sort(key = lambda item: -item[0])\n    categorySet = set()\n    res, profit = 0, 0\n    st = []\n    for i, item in enumerate(items):\n        if i < k:\n            profit += item[0]\n            if item[1] in categorySet:\n                st.append(item[0])\n            else:\n                categorySet.add(item[1])\n        elif item[1] not in categorySet and len(st) > 0:\n            profit += item[0] - st.pop()\n            categorySet.add(item[1])\n        res = max(res, profit + len(categorySet) * len(categorySet))\n    return res", "target_Lan": "python###findMaximumElegance.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findMaximumElegance([[10, 2], [5, 3], [7, 1], [8, 4], [6, 5], [9, 2]], 4))\n    print(findMaximumElegance([[20, 3], [15, 2], [18, 4], [16, 5], [19, 1], [21, 2]], 5))\n    print(findMaximumElegance([[50, 1], [45, 2], [48, 3], [46, 4], [49, 5], [51, 1]], 6))\n    print(findMaximumElegance([[100, 5], [95, 4], [98, 3], [96, 2], [99, 1], [101, 5]], 7))\n    print(findMaximumElegance([[70, 3], [65, 2], [68, 1], [66, 4], [69, 5], [71, 3]], 8))"}, {"source_Lan": "java###maximumBeauty_Test.java", "source_code": "    public static int maximumBeauty(int[] nums, int k) {\n        int res = 0, n = nums.length;\n        Arrays.sort(nums);\n        for (int i = 0, j = 0; i < n; i++) {\n            while (nums[i] - 2 * k > nums[j]) {\n                j++;\n            }\n            res = Math.max(res, i - j + 1);\n        }\n        return res;\n    }", "trans_code": "def maximum_beauty ( nums , k ) :\n    res , n = 0 , len ( nums )\n    nums.sort ( )\n    for i , j in enumerate ( nums ) :\n        while nums [ i ] - 2 * k > nums [ j ] :\n            j += 1\n        res = max ( res , i - j + 1 )\n    return res\n", "reference_code": "def maximumBeauty( nums: List[int], k: int) -> int:\n    res, j, n = 0, 0, len(nums)\n    nums.sort()\n    for i in range(n):\n        while nums[i] - 2 * k > nums[j]:\n            j += 1\n        res = max(res, i - j + 1)\n    return res", "target_Lan": "python###maximumBeauty.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumBeauty([1,2,3], 1))\n    print(maximumBeauty([4,5,6,7,8,9], 2))\n    print(maximumBeauty([10,20,30,40,50,60,70,80,90], 3))\n    print(maximumBeauty([100,200,300,400,500,600,700,800,900], 4))\n    print(maximumBeauty([1000,2000,3000,4000,5000,6000,7000,8000,9000], 5))"}, {"source_Lan": "java###accountBalanceAfterPurchase_Test.java", "source_code": "    public static int accountBalanceAfterPurchase(int purchaseAmount) {\n        int r = purchaseAmount % 10;\n        if (r < 5) {\n            purchaseAmount -= r;\n        } else {\n            purchaseAmount += 10 - r;\n        }\n        return 100 - purchaseAmount;\n    }", "trans_code": "def account_balance_after_purchased_amount ( purchased_amount ) :\n    r = purchased_amount % 10\n    if r < 5 :\n        purchased_amount -= r\n    else :\n        purchased_amount += 10 - r\n    return 100 - purchased_amount\n", "reference_code": "def accountBalanceAfterPurchase( purchaseAmount: int) -> int:\n    r = purchaseAmount % 10\n    purchaseAmount = purchaseAmount - r if r < 5 else purchaseAmount + 10 - r\n    return 100 - purchaseAmount", "target_Lan": "python###accountBalanceAfterPurchase.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(accountBalanceAfterPurchase(0))\n    print(accountBalanceAfterPurchase(10))\n    print(accountBalanceAfterPurchase(15))\n    print(accountBalanceAfterPurchase(20))\n    print(accountBalanceAfterPurchase(50))"}, {"source_Lan": "java###maxOperations_Test.java", "source_code": "    public static int maxOperations(int[] nums) {\n        int n = nums.length, t = 0;\n        for (int i = 1; i < n; i += 2) {\n            if (nums[i] + nums[i - 1] != nums[1] + nums[0]) {\n                break;\n            }\n            t++;\n        }\n        return t;\n    }", "trans_code": "def max_operations ( nums ) :\n    n , t = len ( nums ) , 0\n    for i in range ( 1 , n , 2 ) :\n        if nums [ i ] + nums [ i - 1 ] != nums [ 1 ] + nums [ 0 ] :\n            break\n        t += 1\n    return t\n", "reference_code": "def maxOperations( nums: List[int]) -> int:\n    n, t = len(nums), 0\n    for i in range(1, n, 2):\n        if nums[i] + nums[i - 1] != nums[1] + nums[0]:\n            break\n        t += 1\n    return t", "target_Lan": "python###maxOperations.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    from typing import List\n    print(maxOperations([1, 2, 3, 4, 5]))\n    print(maxOperations([1, 1, 2, 2, 3, 3]))\n    print(maxOperations([1, 1, 1, 1, 1, 1]))\n    print(maxOperations([10, 20, 30, 40, 50, 60]))\n    print(maxOperations([1, 2, 3, 4, 5, 6]))"}, {"source_Lan": "java###minimumSteps_Test.java", "source_code": "    public static long minimumSteps(String s) {\n        long ans = 0;\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                sum++;\n            } else {\n                ans += sum;\n            }\n        }\n        return ans;\n    }", "trans_code": "def minimum_steps ( s ) :\n    ans = 0\n    sum = 0\n    for c in s :\n        if c == '1' :\n            sum += 1\n        else :\n            ans += sum\n    return ans\n", "reference_code": "def minimumSteps( s):\n    ans, sum = 0, 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            sum += 1\n        else:\n            ans += sum\n    return ans", "target_Lan": "python###minimumSteps.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(minimumSteps(\"0\"))\n    print(minimumSteps(\"111\"))\n    print(minimumSteps(\"1001\"))\n    print(minimumSteps(\"00000\"))\n    print(minimumSteps(\"101010101010\"))"}, {"source_Lan": "java###distributeCandies2_Test.java", "source_code": "    public static long distributeCandies2(int n, int limit) {\n        long ans = 0;\n        for (int i = 0; i <= Math.min(limit, n); i++) {\n            if (n - i > 2 * limit) {\n                continue;\n            }\n            ans += Math.min(n - i, limit) - Math.max(0, n - i - limit) + 1;\n        }\n        return ans;\n    }", "trans_code": "def distribute_candies_2 ( n , limit ) :\n    ans = 0\n    for i in range ( 0 , min ( limit , n ) ) :\n        if n - i > 2 * limit :\n            continue\n        ans += min ( n - i , limit ) - max ( 0 , n - i - limit ) + 1\n    return ans\n", "reference_code": "def distributeCandies2( n: int, limit: int) -> int:\n    ans = 0\n    for i in range(min(limit, n) + 1):\n        if n - i > 2 * limit:\n            continue\n        ans += min(n - i, limit) - max(0, n - i - limit) + 1\n    return ans", "target_Lan": "python###distributeCandies2.py", "target_code_shell": "import sys\n# TOFILL\nif __name__ == \"__main__\":\n    print(distributeCandies2(0, 0))\n    print(distributeCandies2(10, 2))\n    print(distributeCandies2(15, 3))\n    print(distributeCandies2(20, 4))\n    print(distributeCandies2(25, 5))"}, {"source_Lan": "java###distributeCandies_Test.java", "source_code": "    public static int distributeCandies(int n, int limit) {\n        int ans = 0;\n        for (int i = 0; i <= limit; i++) {\n            for (int j = 0; j <= limit; j++) {\n                if (i + j > n) {\n                    break;\n                }\n                if (n - i - j <= limit) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def distribute_candies ( n , limit ) :\n    ans = 0\n    for i in range ( 0 , limit ) :\n        for j in range ( 0 , limit ) :\n            if i + j > n :\n                break\n            if n - i - j <= limit :\n                ans += 1\n    return ans\n", "reference_code": "def distributeCandies( n: int, limit: int) -> int:\n    ans = 0\n    for i in range(limit + 1):\n        for j in range(limit + 1):\n            if i + j > n:\n                break\n            if n - i - j <= limit:\n                ans += 1\n    return ans", "target_Lan": "python###distributeCandies.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(distributeCandies(0, 0))\n    print(distributeCandies(10, 5))\n    print(distributeCandies(15, 10))\n    print(distributeCandies(100, 10))\n    print(distributeCandies(200, 20))"}, {"source_Lan": "java###findIndices_Test.java", "source_code": "    public static int[] findIndices(int[] nums, int indexDifference, int valueDifference) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i; j < nums.length; j++) {\n                if (j - i >= indexDifference && Math.abs(nums[j] - nums[i]) >= valueDifference) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return new int[]{-1, -1};\n    }", "trans_code": "def find_indices ( nums , index_difference , value_difference ) :\n    for i in range ( len ( nums ) ) :\n        for j in range ( i , len ( nums ) ) :\n            if j - i >= index_difference and abs ( nums [ j ] - nums [ i ] ) >= value_difference :\n                return i , j\n    return - 1 , - 1\n", "reference_code": "def findIndices( nums: List[int], indexDifference: int, valueDifference: int) -> List[int]:\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if j - i >= indexDifference and abs(nums[j] - nums[i]) >= valueDifference:\n                return [i, j]\n    return [-1, -1]", "target_Lan": "python###findIndices.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findIndices([1, 2, 3, 4, 5], 2, 1))\n    print(findIndices([5, 4, 3, 2, 1], 1, 1))\n    print(findIndices([1, 3, 5, 7, 9], 0, 1))\n    print(findIndices([1, 2, 3, 4, 5], 2, 2))\n    print(findIndices([1, 2, 3, 4, 5], 2, 0))"}, {"source_Lan": "java###theMaximumAchievableX_Test.java", "source_code": "    public static int theMaximumAchievableX(int num, int t) {\n        return num + 2 * t;\n    }", "trans_code": "def the_maximum_achievable_x ( num , t ) :\n    return num + 2 * t\n", "reference_code": "def theMaximumAchievableX( num: int, t: int) -> int:\n    return num + 2 * t", "target_Lan": "python###theMaximumAchievableX.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(theMaximumAchievableX(0, 0))\n    print(theMaximumAchievableX(1000000, 1000000))\n    print(theMaximumAchievableX(-1000000, 1000000))\n    print(theMaximumAchievableX(1000000, -1000000))\n    print(theMaximumAchievableX(500000, 500000))"}, {"source_Lan": "java###findMinimumTime_Test.java", "source_code": "    public static int findMinimumTime(int[][] tasks) {\n        int n = tasks.length;\n        Arrays.sort(tasks, (a, b) -> a[1] - b[1]);\n        int[] run = new int[tasks[n - 1][1] + 1];\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            int start = tasks[i][0], end = tasks[i][1], duration = tasks[i][2];\n            for (int j = start; j <= end; j++) {\n                duration -= run[j];\n            }\n            res += Math.max(duration, 0);\n            for (int j = end; j >= 0 && duration > 0; j--) {\n                if (run[j] == 0) {\n                    duration--;\n                    run[j] = 1;\n                }\n            }\n        }\n        return res;\n    }", "trans_code": "def find_minimum_time ( tasks ) :\n    n = len ( tasks )\n    tasks.sort ( key = lambda ( a , b ) : a [ 1 ] - b [ 1 ] )\n    run = [ ]\n    res = 0\n    for i in range ( n ) :\n        start , end , duration = tasks [ i ]\n        for j in range ( start , end + 1 ) :\n            duration -= run [ j ]\n        res += max ( duration , 0 )\n        for j in range ( end , - 1 , - 1 ) :\n            if run [ j ] == 0 :\n                duration -= 1\n                run [ j ] = 1\n    return res\n", "reference_code": "def findMinimumTime( tasks: List[List[int]]) -> int:\n    tasks.sort(key = lambda task: task[1])\n    run, res = [False] * (tasks[-1][1] + 1), 0\n    for start, end, duration in tasks:\n        duration -= sum(run[start : end+1])\n        res += max(duration, 0)\n        for j in range(end, -1, -1):\n            if duration <= 0:\n                break\n            if not run[j]:\n                run[j], duration = True, duration - 1\n    return res", "target_Lan": "python###findMinimumTime.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findMinimumTime([[1,2,1],[2,3,1],[3,4,1]]))\n    print(findMinimumTime([[1,10,2],[2,11,3],[10,12,2]]))\n    print(findMinimumTime([[1,3,1],[2,4,2],[3,5,3]]))\n    print(findMinimumTime([[1,2,1],[2,3,2],[3,4,3]]))\n    print(findMinimumTime([[1,10,1],[5,10,2],[6,11,3]]))"}, {"source_Lan": "java###garbageCollection_Test.java", "source_code": "    public static int garbageCollection(String[] garbage, int[] travel) {\n        Map<Character, Integer> distance = new HashMap<>();\n        int res = 0, curDis = 0;\n        for (int i = 0; i < garbage.length; i++) {\n            res += garbage[i].length();\n            if (i > 0) {\n                curDis += travel[i - 1];\n            }\n            for (char c : garbage[i].toCharArray()) {\n                distance.put(c, curDis);\n            }\n        }\n        return res + distance.values().stream().reduce(0, Integer::sum);\n    }", "trans_code": "def garbageCollection ( garbage , travel ) :\n    distance = { }\n    res , cur_dis = 0 , 0\n    for i in range ( len ( garbage ) ) :\n        res += len ( garbage [ i ] )\n        if i > 0 :\n            cur_dis += travel [ i - 1 ]\n        for c in garbage [ i ] :\n            distance [ c ] = cur_dis\n    return res + distance.values ( )\n", "reference_code": "def garbageCollection( garbage: List[str], travel: List[int]) -> int:\n    distance = {}\n    res = 0\n    cur_dis = 0\n    for i in range(len(garbage)):\n        res += len(garbage[i])\n        if i > 0:\n            cur_dis += travel[i - 1]\n        for c in garbage[i]:\n            distance[c] = cur_dis\n    return res + sum(distance.values())", "target_Lan": "python###garbageCollection.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(garbageCollection([],[]))\n    print(garbageCollection([\"G\",\"P\",\"GP\",\"GG\"], [2,3,4]))\n    print(garbageCollection([\"MMM\",\"PG\",\"GP\",\"GG\"], [5,3,1,2]))\n    print(garbageCollection([\"G\",\"GP\",\"GP\",\"GG\",\"MMM\",\"GP\",\"GP\",\"GG\"], [2,3,4,1,2,3,4]))\n    print(garbageCollection([\"G\",\"P\",\"GP\",\"GG\",\"MMM\",\"PG\",\"GP\",\"GG\"], [2,3,4,1,2,3,4]))"}, {"source_Lan": "java###numberOfEmployeesWhoMetTarget_Test.java", "source_code": "    public static int numberOfEmployeesWhoMetTarget(int[] hours, int target) {\n        int ans = 0;\n        for (int i = 0; i < hours.length; i++) {\n            if (hours[i] >= target) {\n                ans++;\n            }\n        }\n        return ans;\n    }", "trans_code": "def number_of_employees ( hours , target ) :\n    ans = 0\n    for hour in hours :\n        if hour >= target :\n            ans += 1\n    return ans\n", "reference_code": "def numberOfEmployeesWhoMetTarget( hours, target):\n    ans = 0\n    for i in range(0, len(hours)):\n        if hours[i] >= target:\n            ans += 1\n    return ans", "target_Lan": "python###numberOfEmployeesWhoMetTarget.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(numberOfEmployeesWhoMetTarget([0], 0))\n    print(numberOfEmployeesWhoMetTarget([10, 20, 30, 40, 50], 30))\n    print(numberOfEmployeesWhoMetTarget([-1, -2, -3, -4, -5], -2))\n    print(numberOfEmployeesWhoMetTarget([1000000000, 1000000000, 1000000000], 1000000000))\n    print(numberOfEmployeesWhoMetTarget([5, 5, 5, 5, 5], 5))"}, {"source_Lan": "java###distanceTraveled_Test.java", "source_code": "    public static int distanceTraveled(int mainTank, int additionalTank) {\n        int ans = 0;\n        while (mainTank >= 5) {\n            mainTank -= 5;\n            ans += 50;\n            if (additionalTank > 0) {\n                additionalTank--;\n                mainTank++;\n            }\n        }\n        return ans + mainTank * 10;\n    }", "trans_code": "def distanceTraveled ( mainTank , additionalTank ) :\n    ans = 0\n    while mainTank >= 5 :\n        mainTank -= 5\n        ans += 50\n        if additionalTank :\n            additionalTank -= 1\n            mainTank += 1\n    return ans + mainTank * 10\n", "reference_code": "def distanceTraveled( mainTank: int, additionalTank: int) -> int:\n    ans = 0\n    while mainTank >= 5:\n        mainTank -= 5\n        ans += 50\n        if additionalTank > 0:\n            additionalTank -= 1\n            mainTank += 1\n    return ans + mainTank * 10", "target_Lan": "python###distanceTraveled.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(distanceTraveled(0, 0))  # Output: 0\n    print(distanceTraveled(10, 0))  # Output: 100\n    print(distanceTraveled(10, 1))  # Output: 110\n    print(distanceTraveled(10, 2))  # Output: 120\n    print(distanceTraveled(10, 3))  # Output: 130"}, {"source_Lan": "java###maximumBinaryString_Test.java", "source_code": "    public static String maximumBinaryString(String binary) {\n        int n = binary.length();\n        char[] s = binary.toCharArray();\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                while (j <= i || (j < n && s[j] == '1')) {\n                    j++;\n                }\n                if (j < n) {\n                    s[j] = '1';\n                    s[i] = '1';\n                    s[i + 1] = '0';\n                }\n            }\n        }\n        return new String(s);\n    }", "trans_code": "def maximum_binary_string ( binary ) :\n    n = len ( binary )\n    s = binary\n    j = 0\n    for i in range ( n ) :\n        if s [ i ] == '0' :\n            while j <= i or ( j < n and s [ j ] == '1' ) :\n                j += 1\n            if j < n :\n                s [ j ] = '1'\n                s [ i ] = '1'\n                s [ i + 1 ] = '0'\n    return ''.join ( s )\n", "reference_code": "def maximumBinaryString( binary: str) -> str:\n    n = len(binary)\n    s = list(binary)\n    j = 0\n    for i in range(n):\n        if s[i] == '0':\n            while j <= i or (j < n and s[j] == '1'):\n                j += 1\n            if j < n:\n                s[j] = '1'\n                s[i] = '1'\n                s[i + 1] = '0'\n    return ''.join(s)", "target_Lan": "python###maximumBinaryString.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(maximumBinaryString(\"100110\"))\n    print(maximumBinaryString(\"000000\"))\n    print(maximumBinaryString(\"111111\"))\n    print(maximumBinaryString(\"011010\"))\n    print(maximumBinaryString(\"101010\"))"}, {"source_Lan": "java###minOperations_Test.java", "source_code": "    public static int minOperations(int[] nums) {\n        int n = nums.length;\n        Set<Integer> set = new HashSet<Integer>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        List<Integer> sortedUniqueNums = new ArrayList<Integer>(set);\n        Collections.sort(sortedUniqueNums);\n        int res = n;\n        int j = 0;\n        for (int i = 0; i < sortedUniqueNums.size(); i++) {\n            int left = sortedUniqueNums.get(i);\n            int right = left + n - 1;\n            while (j < sortedUniqueNums.size() && sortedUniqueNums.get(j) <= right) {\n                res = Math.min(res, n - (j - i + 1));\n                j++;\n            }\n        }\n        return res;\n    }", "trans_code": "def min_operations ( nums ) :\n    n = len ( nums )\n    set = set ( )\n    for num in nums :\n        set.add ( num )\n    sorted_unique_nums = sorted ( set )\n    res = n\n    j = 0\n    for i in range ( len ( sorted_unique_nums ) ) :\n        left = sorted_unique_nums [ i ]\n        right = left + n - 1\n        while j < len ( sorted_unique_nums ) and sorted_unique_nums [ j ] <= right :\n            res = min ( res , n - ( j - i + 1 ) )\n            j += 1\n    return res\n", "reference_code": "def minOperations( nums: List[int]) -> int:\n    n = len(nums)\n    sortedUniqueNums = sorted((set(nums)))\n    res = n\n    j = 0\n    for i, left in enumerate(sortedUniqueNums):\n        right = left + n - 1\n        while j < len(sortedUniqueNums) and sortedUniqueNums[j] <= right:\n            res = min(res, n - (j - i + 1))\n            j += 1\n    return res", "target_Lan": "python###minOperations.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minOperations([1, 2, 3, 4, 5]))\n    print(minOperations([10, 20, 30, 40, 50]))\n    print(minOperations([-1, -2, -3, -4, -5]))\n    print(minOperations([0, 0, 0, 0, 0]))\n    print(minOperations([2147483647, 2147483646, 2147483645, 2147483644, 2147483643]))"}, {"source_Lan": "java###findChampion_Test.java", "source_code": "    public static int findChampion(int n, int[][] edges) {\n        int[] degree = new int[n];\n        for (int[] e : edges) {\n            degree[e[1]]++;\n        }\n        int champion = -1;\n        for (int i = 0; i < n; i++) {\n            if (degree[i] == 0) {\n                if (champion == -1) {\n                    champion = i;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        return champion;\n    }", "trans_code": "def find_champion ( n , edges ) :\n    degree = [ ]\n    for e in edges :\n        degree.append ( e [ 1 ] )\n    champion = - 1\n    for i in range ( n ) :\n        if degree [ i ] == 0 :\n            if champion == - 1 :\n                champion = i\n            else :\n                return - 1\n    return champion\n", "reference_code": "def findChampion( n: int, edges: List[List[int]]) -> int:\n    degree = [0] * n\n    for x, y in edges:\n        degree[y] += 1\n    champion = -1\n    for i, d in enumerate(degree):\n        if d == 0:\n            if champion == -1:\n                champion = i\n            else:\n                return -1\n    return champion", "target_Lan": "python###findChampion.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findChampion(3, [[0,1], [1,2], [2,0]]))\n    print(findChampion(2, [[0,1], [1,0]]))\n    print(findChampion(4, [[0,1], [1,2], [2,3], [3,0]]))\n    print(findChampion(5, [[0,1], [1,2], [2,3], [3,4], [4,0]]))\n    print(findChampion(2, [[0,1]]))"}, {"source_Lan": "java###firstDayBeenInAllRooms_Test.java", "source_code": "    public static int firstDayBeenInAllRooms(int[] nextVisit) {\n        int mod = 1000000007;\n        int len = nextVisit.length;\n        int[] dp = new int[len];\n        dp[0] = 2; \n        for (int i = 1; i < len; i++) {\n            int to = nextVisit[i];\n            dp[i] = 2 + dp[i - 1];\n            if (to != 0) {\n                dp[i] = (dp[i] - dp[to - 1] + mod) % mod; \n            }\n            dp[i] = (dp[i] + dp[i - 1]) % mod;\n        }\n        return dp[len - 2]; \n    }", "trans_code": "def first_day_been_in_all_rooms ( next_visit ) :\n    mod = 1000000007\n    len ( next_visit )\n    dp = [ 2 ]\n    for i in range ( 1 , len ( next_visit ) ) :\n        to = next_visit [ i ]\n        dp [ i ] = 2 + dp [ i - 1 ]\n        if to != 0 :\n            dp [ i ] = ( dp [ i ] - dp [ to - 1 ] + mod ) % mod\n        dp [ i ] = ( dp [ i ] + dp [ i - 1 ] ) % mod\n    return dp [ len ( next_visit ) - 2 ]\n", "reference_code": "def firstDayBeenInAllRooms( nextVisit: List[int]) -> int:\n    mod = 10**9 + 7\n    dp = [0] * (len(nextVisit))\n    #\u521d\u59cb\u5316\u539f\u5730\u5f85\u4e00\u5929+\u8bbf\u95ee\u4e0b\u4e00\u4e2a\u623f\u95f4\u4e00\u5929\n    dp[0] = 2 \n    for i in range(1, len(nextVisit)):\n        to = nextVisit[i]\n        dp[i] = 2 + dp[i - 1] \n        if to != 0:\n            dp[i] = (dp[i] - dp[to - 1]) % mod \n        dp[i] = (dp[i] + dp[i - 1]) % mod\n    return dp[len(nextVisit) - 2] # \u9898\u76ee\u4fdd\u8bc1n >= 2", "target_Lan": "python###firstDayBeenInAllRooms.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(firstDayBeenInAllRooms([0, 1, 2, 3, 4]))\n    print(firstDayBeenInAllRooms([4, 3, 2, 1, 0]))\n    print(firstDayBeenInAllRooms([0, 0, 0, 0, 0]))\n    print(firstDayBeenInAllRooms([1, 2, 3, 4, 0]))"}, {"source_Lan": "java###distinctIntegers_Test.java", "source_code": "    public static int distinctIntegers(int n) {\n        int[] nums = new int[n + 1];\n        nums[n] = 1;\n        for (int k = 0; k < n; k++) {\n            for (int x = 1; x <= n; x++) {\n                if (nums[x] == 0) {\n                    continue;\n                }\n                for (int i = 1; i <= n; i++) {\n                    if (x % i == 1) {\n                        nums[i] = 1;\n                    }\n                }\n            }\n        }\n        return Arrays.stream(nums).sum();\n    }", "trans_code": "def distinctIntegers ( n ) :\n    nums = [ 1 ] * ( n + 1 )\n    for k in range ( n ) :\n        for x in range ( 1 , n + 1 ) :\n            if nums [ x ] == 0 :\n                continue\n            for i in range ( 1 , n + 1 ) :\n                if x % i == 1 :\n                    nums [ i ] = 1\n    return sum ( nums )\n", "reference_code": "def distinctIntegers( n: int) -> int:\n    nums = [0] * (n + 1)\n    nums[n] = 1\n    for _ in range(0, n):\n        for x in range(1, n + 1):\n            if nums[x] == 0:\n                continue\n            for i in range(1, n + 1):\n                if x % i == 1:\n                    nums[i] = 1\n    return sum(nums)", "target_Lan": "python###distinctIntegers.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(distinctIntegers(0))\n    print(distinctIntegers(1))\n    print(distinctIntegers(2))\n    print(distinctIntegers(10))\n    print(distinctIntegers(100))"}, {"source_Lan": "java###maxArrayValue_Test.java", "source_code": "    public static long maxArrayValue(int[] nums) {\n        long sum = nums[nums.length - 1];\n        for (int i = nums.length - 2; i >= 0; i--) {\n            sum = nums[i] <= sum ? nums[i] + sum : nums[i];\n        }\n        return sum;\n    }", "trans_code": "def max_array_value ( nums ) :\n    sum = nums [ - 1 ]\n    for i in range ( len ( nums ) - 2 , - 1 , - 1 ) :\n        sum = nums [ i ] <= sum\n    return sum\n", "reference_code": "def maxArrayValue( nums: List[int]) -> int:\n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] <= nums[i + 1]:\n            nums[i] += nums[i + 1]\n    return nums[0]", "target_Lan": "python###maxArrayValue.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxArrayValue([1, 2, 3, 4, 5]))\n    print(maxArrayValue([10, 20, 30, 40, 50]))\n    print(maxArrayValue([-1, -2, -3, -4, -5]))\n    print(maxArrayValue([0, 0, 0, 0, 0]))\n    print(maxArrayValue([1000000000, 1000000000, 1000000000, 1000000000, 1000000000]))"}, {"source_Lan": "java###divisibilityArray_Test.java", "source_code": "    public static int[] divisibilityArray(String word, int m) {\n        int[] res = new int[word.length()];\n        long cur = 0;\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            cur = (cur * 10 + (c - '0')) % m;\n            res[i] = (cur == 0) ? 1 : 0;\n        }\n        return res;\n    }", "trans_code": "def divisibility_array ( word , m ) :\n    res = [ ]\n    cur = 0\n    for c in word :\n        cur = ( cur * 10 + ( c - '0' ) ) % m\n        res.append ( ( cur , cur ) )\n    return res\n", "reference_code": "def divisibilityArray( word, m):\n    cur = 0\n    res = []\n    for c in word:\n        cur = (cur * 10 + int(c)) % m\n        res.append(1 if cur == 0 else 0)\n    return res", "target_Lan": "python###divisibilityArray.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(divisibilityArray(\"1234567890\", 2))\n    print(divisibilityArray(\"9999999999999999999999999999999\", 1000000000))\n    print(divisibilityArray(\"1000000000000000000000000000000\", 1))\n    print(divisibilityArray(\"111111111111111111111111111111\", 1000000000))\n    print(divisibilityArray(\"000000000000000000000000000000\", 10))"}, {"source_Lan": "java###stoneGameVI_Test.java", "source_code": "    public static int stoneGameVI(int[] aliceValues, int[] bobValues) {\n        int n = aliceValues.length;\n        int[][] values = new int[n][3];\n        for (int i = 0; i < n; i++) {\n            values[i][0] = aliceValues[i] + bobValues[i];\n            values[i][1] = aliceValues[i];\n            values[i][2] = bobValues[i];\n        }\n        Arrays.sort(values, (a, b) -> b[0] - a[0]);\n        int aliceSum = 0, bobSum = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                aliceSum += values[i][1];\n            } else {\n                bobSum += values[i][2];\n            }\n        }\n        if (aliceSum > bobSum) {\n            return 1;\n        } else if (aliceSum == bobSum) {\n            return 0;\n        } else {\n            return -1;\n        }\n    }", "trans_code": "def stoneGameVI ( aliceValues , bobValues ) :\n    n = len ( aliceValues )\n    values = [ aliceValues [ i ] + bobValues [ i ] for i in range ( n ) ]\n    values.sort ( )\n    aliceSum , bobSum = 0 , 0\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            aliceSum += values [ i ]\n        else :\n            bobSum += values [ i ]\n    if aliceSum > bobSum :\n        return 1\n    elif aliceSum == bobSum :\n        return 0\n    else :\n        return - 1\n", "reference_code": "def stoneGameVI( aliceValues: List[int], bobValues: List[int]) -> int:\n    values = [[a+b, a, b] for a, b in zip(aliceValues, bobValues)]\n    values.sort(reverse=True)\n    aliceSum, bobSum = sum(value[1] for value in values[::2]), sum(value[2] for value in values[1::2])\n    if aliceSum > bobSum:\n        return 1\n    elif aliceSum == bobSum:\n        return 0\n    else:\n        return -1", "target_Lan": "python###stoneGameVI.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(stoneGameVI([1, 2, 3, 4], [2, 3, 4, 5]))\n    print(stoneGameVI([1, 1, 1, 1], [1, 1, 1, 1]))\n    print(stoneGameVI([0, 0, 0, 0], [0, 0, 0, 0]))\n    print(stoneGameVI([-1, -2, -3, -4], [-2, -3, -4, -5]))\n    print(stoneGameVI([100, 200, 300, 400], [200, 300, 400, 500]))"}, {"source_Lan": "java###maxNumberOfAlloys_Test.java", "source_code": "    public static int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {\n        int left = 1, right = 200000000, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            boolean valid = false;\n            for (int i = 0; i < k; ++i) {\n                long spend = 0;\n                for (int j = 0; j < n; ++j) {\n                    spend += Math.max((long) composition.get(i).get(j) * mid - stock.get(j), 0) * cost.get(j);\n                }\n                if (spend <= budget) {\n                    valid = true;\n                    break;\n                }\n            }\n            if (valid) {\n                ans = mid;\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }", "trans_code": "def max_number_of_alloys ( n , k , budget , composition , stock , cost ) :\n    left , right , ans = 1 , 200000000 , 0\n    while left <= right :\n        mid = ( left + right ) // 2\n        valid = False\n        for i in range ( k ) :\n            spend = 0\n            for j in range ( n ) :\n                spend += max ( float ( composition [ i ] [ j ] ) * mid - stock [ j ] , 0 ) * cost [ j ]\n            if spend <= budget :\n                valid = True\n                break\n        if valid :\n            ans = mid\n            left = mid + 1\n        else :\n            right = mid - 1\n    return ans\n", "reference_code": "def maxNumberOfAlloys( n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n    left, right, ans = 1, 2 * 10**8, 0\n    while left <= right:\n        mid = (left + right) // 2\n        valid = False\n        for i in range(k):\n            spend = 0\n            for j, (composition_j, stock_j, cost_j) in enumerate(zip(composition[i], stock, cost)):\n                spend += max(composition_j * mid - stock_j, 0) * cost_j\n            if spend <= budget:\n                valid = True\n                break\n        if valid:\n            ans = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return ans", "target_Lan": "python###maxNumberOfAlloys.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxNumberOfAlloys(0, 0, 0, [], [], []))\n    print(maxNumberOfAlloys(1, 1, 1000, [[1]], [0], [10]))\n    print(maxNumberOfAlloys(2, 2, 500, [[1,2],[2,1]], [1,1], [10,20]))\n    print(maxNumberOfAlloys(3, 3, 10000, [[1,2,3],[3,2,1],[2,1,3]], [1,1,1], [10,20,30]))\n    print(maxNumberOfAlloys(4, 4, 20000, [[1,2,3,4],[4,3,2,1],[2,1,3,4],[3,4,2,1]], [1,1,1,1], [10,20,30,40]))"}, {"source_Lan": "java###distinctDifferenceArray_Test.java", "source_code": "    public static int[] distinctDifferenceArray(int[] nums) {\n        int n = nums.length;\n        Set<Integer> set = new HashSet<Integer>();\n        int[] sufCnt = new int[n + 1];\n        for (int i = n - 1; i > 0; i--) {\n            set.add(nums[i]);\n            sufCnt[i] = set.size();\n        }\n        int[] res = new int[n];\n        set.clear();\n        for (int i = 0; i < n; i++) {\n            set.add(nums[i]);\n            res[i] = set.size() - sufCnt[i + 1];\n        }\n        return res;\n    }", "trans_code": "def distinctDifferenceArray ( nums ) :\n    n = len ( nums )\n    set = set ( )\n    sufCnt = [ ]\n    for i in range ( n + 1 , 0 , - 1 ) :\n        set.add ( nums [ i ] )\n        sufCnt.append ( len ( set ) )\n    res = [ ]\n    set = set ( )\n    for i in range ( n ) :\n        set.add ( nums [ i ] )\n        res.append ( len ( set ) - sufCnt [ i + 1 ] )\n    return res\n", "reference_code": "def distinctDifferenceArray( nums: List[int]) -> List[int]:\n    st = set()\n    sufCnt = [0] * (len(nums) + 1)\n    for i in range(len(nums) - 1, 0, -1):\n        st.add(nums[i])\n        sufCnt[i] = len(st)\n    res = []\n    st.clear()\n    for i in range(len(nums)):\n        st.add(nums[i])\n        res.append(len(st) - sufCnt[i + 1])\n    return res", "target_Lan": "python###distinctDifferenceArray.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(distinctDifferenceArray([1, 2, 3, 4, 5]))\n    print(distinctDifferenceArray([5, 4, 3, 2, 1]))\n    print(distinctDifferenceArray([1, 1, 1, 1, 1]))\n    print(distinctDifferenceArray([-1, -2, -3, -4, -5]))\n    print(distinctDifferenceArray([100, 200, 300, 400, 500]))"}, {"source_Lan": "java###maximumSumOfHeights_Test.java", "source_code": "    public static long maximumSumOfHeights(List<Integer> maxHeights) {\n        int n = maxHeights.size();\n        long res = 0;\n        for (int i = 0; i < n; i++) {\n            int pre = maxHeights.get(i);\n            long sum = pre;\n            for (int j = i - 1; j >= 0; j--) {\n                pre = Math.min(pre, maxHeights.get(j));\n                sum += pre;\n            }\n            int suf = maxHeights.get(i);\n            for (int j = i + 1; j < n; j++) {\n                suf = Math.min(suf, maxHeights.get(j));\n                sum += suf;\n            }\n            res = Math.max(res, sum);\n        }\n        return res;\n    }", "trans_code": "def maximum_sum_of_heights ( max_heights ) :\n    n = len ( max_heights )\n    res = 0\n    for i in range ( n ) :\n        pre = max_heights [ i ]\n        sum = pre\n        for j in range ( i - 1 , - 1 , - 1 ) :\n            pre = min ( pre , max_heights [ j ] )\n            sum += pre\n        suf = max_heights [ i ]\n        for j in range ( i + 1 , n ) :\n            suf = min ( suf , max_heights [ j ] )\n            sum += suf\n        res = max ( res , sum )\n    return res\n", "reference_code": "def maximumSumOfHeights( maxHeights: List[int]) -> int:\n    n = len(maxHeights)\n    res = 0\n    for i in range(n):\n        pre, psum = maxHeights[i], maxHeights[i]\n        for j in range(i - 1, -1, -1):\n            pre = min(pre, maxHeights[j])\n            psum += pre\n        suf = maxHeights[i]\n        for j in range(i + 1, n):\n            suf = min(suf, maxHeights[j])\n            psum += suf\n        res = max(res, psum)\n    return res", "target_Lan": "python###maximumSumOfHeights.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumSumOfHeights([1, 2, 3, 4, 5]))\n    print(maximumSumOfHeights([5, 4, 3, 2, 1]))\n    print(maximumSumOfHeights([1, 1, 1, 1, 1]))\n    print(maximumSumOfHeights([100, 200, 300, 400, 500]))\n    print(maximumSumOfHeights([10, 20, 30, 40, 50]))"}, {"source_Lan": "java###alternatingSubarray_Test.java", "source_code": "    public static int alternatingSubarray(int[] nums) {\n        int res = -1;\n        int n = nums.length;\n        for (int firstIndex = 0; firstIndex < n; firstIndex++) {\n            for (int i = firstIndex + 1; i < n; i++) {\n                int length = i - firstIndex + 1;\n                if (nums[i] - nums[firstIndex] == (length - 1) % 2) {\n                    res = Math.max(res, length);\n                } else {\n                    break;\n                }\n            }\n        }\n        return res;\n    }", "trans_code": "def alternating_subarray ( nums ) :\n    res = - 1\n    n = len ( nums )\n    for first_index in range ( n ) :\n        for i in range ( first_index + 1 , n ) :\n            length = i - first_index + 1\n            if nums [ i ] - nums [ first_index ] == ( length - 1 ) % 2 :\n                res = max ( res , length )\n            else :\n                break\n    return res\n", "reference_code": "def alternatingSubarray( nums: List[int]) -> int:\n    res = -1\n    n = len(nums)\n    for firstIndex in range(n):\n        for i in range(firstIndex + 1, n):\n            length = i - firstIndex + 1\n            if nums[i] - nums[firstIndex] == (length - 1) % 2:\n                res = max(res, length)\n            else:\n                break\n    return res", "target_Lan": "python###alternatingSubarray.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(alternatingSubarray([1,2,3,4,5]))\n    print(alternatingSubarray([1,1,1,1,1]))\n    print(alternatingSubarray([-1,-2,-3,-4,-5]))\n    print(alternatingSubarray([5,3,1,-1,-3]))\n    print(alternatingSubarray([10,20,30,40,50]))"}, {"source_Lan": "java###minLength_Test.java", "source_code": "    public static int minLength(String s) {\n        List<Character> stack = new ArrayList<Character>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            stack.add(c);\n            int m = stack.size();\n            if (m >= 2 &&\n                (stack.get(m - 2) == 'A' && stack.get(m - 1) == 'B' ||\n                stack.get(m - 2) == 'C' && stack.get(m - 1) == 'D')) {\n                stack.remove(m - 1);\n                stack.remove(m - 2);\n            }\n        }\n        return stack.size();\n    }", "trans_code": "def minLength ( s ) :\n    stack = [ ]\n    for c in s :\n        stack.append ( c )\n        m = len ( stack )\n        if m >= 2 and ( stack [ m - 2 ] == 'A' and stack [ m - 1 ] == 'B' or stack [ m - 2 ] == 'C' and stack [ m - 1 ] == 'D' ) :\n            stack.pop ( m - 1 )\n            stack.pop ( m - 2 )\n    return len ( stack )\n", "reference_code": "def minLength( s: str) -> int:\n    stack = []\n    for c in s:\n        stack.append(c)\n        if len(stack) >= 2 and ((stack[-2] == 'A' and stack[-1] == 'B') or (stack[-2] == 'C' and stack[-1] == 'D')):\n            stack.pop()\n            stack.pop()\n    return len(stack)", "target_Lan": "python###minLength.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(minLength(\"AB\"))\n    print(minLength(\"CD\"))\n    print(minLength(\"ABCD\"))\n    print(minLength(\"AA\"))\n    print(minLength(\"BB\"))"}, {"source_Lan": "java###addMinimum_Test.java", "source_code": "    public static int addMinimum(String word) {\n        int n = word.length();\n        int[] d = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            d[i] = d[i - 1] + 2;\n            if (i > 1 && word.charAt(i - 1) > word.charAt(i - 2)) {\n                d[i] = d[i - 1] - 1;\n            }\n        }\n        return d[n];\n    }", "trans_code": "def add_minimum ( word ) :\n    n = len ( word )\n    d = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        d [ i ] = d [ i - 1 ] + 2\n        if i > 1 and word [ i - 1 ] > word [ i - 2 ] :\n            d [ i ] = d [ i - 1 ] - 1\n    return d [ n ]\n", "reference_code": "def addMinimum( word: str) -> int:\n    n = len(word)\n    d = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = d[i - 1] + 2\n        if i > 1 and word[i - 1] > word[i - 2]:\n            d[i] = d[i - 1] - 1\n    return d[n]", "target_Lan": "python###addMinimum.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(addMinimum(\"\"))\n    print(addMinimum(\"abc\"))\n    print(addMinimum(\"cba\"))\n    print(addMinimum(\"aaa\"))\n    print(addMinimum(\"bbb\"))"}, {"source_Lan": "java###equality_Test.java", "source_code": "    public static int equality(int A, int B) {\n        \n        if (B < A) return 0;\n        \n        if (A == B) return 1;\n        \n        if (B % 2 == 0) return 1;\n        \n        return 0;\n    }", "trans_code": "def equality ( A , B ) :\n    if B < A :\n        return 0\n    if A == B :\n        return 1\n    if B % 2 == 0 :\n        return 1\n    return 0\n", "reference_code": "def equality( A, B):\n    if A > B:\n        return 0\n    if A == B:\n        return 1\n    if B % 2 == 0:\n        return 1\n    return 0", "target_Lan": "python###equality.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(equality(0, 0))\n    print(equality(1, 1))\n    print(equality(-1, -1))\n    print(equality(10, 10))\n    print(equality(5, 5))"}, {"source_Lan": "java###doesExists_Test.java", "source_code": "    public static String doesExists(String s) {\n        int n = s.length();\n        ArrayList<Integer> hsh = new ArrayList<>(26);\n        for (int i = 0; i < 26; i++) hsh.add(0);\n        for (Character c : s.toCharArray()) hsh.set(c - 'a', hsh.get(c - 'a') + 1);\n        int curr = 0;\n        for (int i = 0; i < 26; i++)\n            if (hsh.get(i) > 0) curr++;\n        if (curr == 1) return \"NO\";\n        return \"YES\";\n    }", "trans_code": "def doesExists ( s ) :\n    n = len ( s )\n    hsh = [ 0 ] * 26\n    for i in range ( 26 ) :\n        hsh [ i ] = hsh [ i - 1 ] + 1\n    for c in s :\n        hsh [ c - 'a' ] = hsh [ c - 'a' ] + 1\n    curr = 0\n    for i in range ( 26 ) :\n        if hsh [ i ] > 0 :\n            curr += 1\n    if curr == 1 :\n        return 'NO'\n    return 'YES'\n", "reference_code": "def doesExists( S: str) -> str:\n    hsh = [0] * 26\n    for c in S:\n        hsh[ord(c) - ord('a')] += 1\n    curr = [i for i in hsh if i != 0]\n    if len(curr) == 1:\n        return \"NO\"\n    return \"YES\"", "target_Lan": "python###doesExists.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(doesExists(\"abc\"))\n    print(doesExists(\"aabbcc\"))\n    print(doesExists(\"aaa\"))\n    print(doesExists(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(doesExists(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"))"}, {"source_Lan": "java###arrangingHorses_Test.java", "source_code": "    public static ArrayList<Integer> arrangingHorses(int n, int m, int[][] data) {\n        int[] inDegree = new int[n];\n        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();\n        for (int i = 0; i < n; i++) adjList.add(new ArrayList<>());\n        for (int[] edge : data) {\n            int a = edge[0], b = edge[1];\n            adjList.get(b).add(a); \n            ++inDegree[a];\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(); \n        for (int i = 0; i < n; ++i) {\n            if (inDegree[i] == 0) pq.add(i);\n        }\n        ArrayList<Integer> order = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            int horse = pq.poll();\n            order.add(horse);\n            for (int neigh : adjList.get(horse)) {\n                --inDegree[neigh];\n                if (inDegree[neigh] == 0) pq.add(neigh);\n            }\n        }\n        return order;\n    }", "trans_code": "def arranging_horses ( n , m , data ) :\n    in_degree = [ ]\n    adj_list = [ [ ] for _ in range ( n ) ]\n    for i in range ( n ) :\n        adj_list.append ( [ ] )\n    for edge in data :\n        a , b = edge\n        adj_list [ b ].append ( a )\n        in_degree.append ( a )\n    pq = PriorityQueue ( )\n    for i in range ( n ) :\n        if in_degree [ i ] == 0 :\n            pq.put ( i )\n    order = [ ]\n    while not pq.empty ( ) :\n        horse = pq.get ( )\n        order.append ( horse )\n        for neigh in adj_list [ horse ] :\n            del in_degree [ neigh ]\n            if in_degree [ neigh ] == 0 :\n                pq.put ( neigh )\n    return order\n", "reference_code": "def arrangingHorses( n: int, m: int,\n                    data: List[List[int]]) -> List[int]:\n    deg = [0] * (n)\n    g = [[] for _ in range(n)]\n    for el in data:\n        deg[el[0]] += 1\n        g[el[1]].append(el[0])\n    q = []\n    ans = []\n    for i in range(n):\n        if deg[i] == 0:\n            heappush(q, i)\n    while q:\n        node = heappop(q)\n        ans.append(node)\n        for el in g[node]:\n            deg[el] -= 1\n            if deg[el] == 0:\n                heappush(q, el)\n    return ans", "target_Lan": "python###arrangingHorses.py", "target_code_shell": "from typing import List\nfrom heapq import *\nfrom typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(arrangingHorses(5, 4, [[0,1],[1,2],[2,3],[3,4]]))\n    print(arrangingHorses(10, 9, [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]))\n    print(arrangingHorses(0, 0, []))\n    print(arrangingHorses(1, 0, []))\n    print(arrangingHorses(2, 1, [[0,1]]))"}, {"source_Lan": "java###maxPoints_Test.java", "source_code": "    public static long maxPoints(int n, int[][] arr) {\n        long[] dp = new long[200001];\n        for (int i = n - 1; i >= 0; --i)\n            dp[i] = Math.max(arr[i][0] + dp[arr[i][1] + i + 1], dp[i + 1]);\n        return dp[0];\n    }", "trans_code": "def max_points ( n , arr ) :\n    dp = [ 0 ] * 200001\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        dp [ i ] = max ( arr [ i ] [ 0 ] + dp [ arr [ i ] [ 1 ] + i + 1 ] , dp [ i + 1 ] )\n    return dp [ 0 ]\n", "reference_code": "def maxPoints( n: int, arr: List[List[int]]) -> int:\n    dp = [0] * (200000)\n    for i in range(n - 1, -1, -1):\n        dp[i] = max(arr[i][0] + dp[arr[i][1] + i + 1], dp[i + 1])\n    return dp[0]", "target_Lan": "python###maxPoints.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxPoints(3, [[1,2],[2,3],[3,4]]))\n    print(maxPoints(2, [[1,1],[2,2]]))\n    print(maxPoints(1, [[1,0]]))\n    print(maxPoints(0, []))\n    print(maxPoints(5, [[1,2],[2,3],[3,4],[4,5],[5,6]]))"}, {"source_Lan": "java###maxAlternatingSubstring_Test.java", "source_code": "    public static long maxAlternatingSubstring(int N, String S) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < N;) {\n            int j = i + 1;\n            while (j < N && S.charAt(j) != S.charAt(j - 1)) j++;\n            diff.add(j - i);\n            i = j;\n        }\n        diff.add(0);\n        long ans_before = 0;\n        for (int x : diff) {\n            ans_before += ((x * 1L * (x + 1)) / 2);\n        }\n        long ans = 0;\n        for (int i = 0; i < diff.size() - 1; i++) {\n            long a = diff.get(i);\n            long b = diff.get(i + 1);\n            long currAns = ans_before - ((a * (a + 1)) / 2) - ((b * (b + 1)) / 2) +\n                           ((a + b + 1) * (a + b + 2)) / 2;\n            ans = Math.max(ans, currAns);\n        }\n        return ans;\n    }", "trans_code": "def maxAlternatingSubstring ( N , S ) :\n    diff = [ ]\n    for i in range ( N ) :\n        j = i + 1\n        while j < N and S [ j ] != S [ j - 1 ] :\n            j += 1\n        diff.append ( j - i )\n        i = j\n    diff.append ( 0 )\n    ans_before = 0\n    for x in diff :\n        ans_before += ( ( x * 1 * ( x + 1 ) ) / 2 )\n    ans = 0\n    for i in range ( len ( diff ) - 1 ) :\n        a , b = diff [ i ]\n        curr_ans = ans_before - ( ( a * ( a + 1 ) ) / 2 ) - ( ( b * ( b + 1 ) ) / 2 ) + ( ( a + b + 1 ) * ( a + b + 2 ) ) / 2\n        ans = max ( ans , curr_ans )\n    return ans\n", "reference_code": "def maxAlternatingSubstring( N: int, S: str) -> int:\n    diff = []\n    i = 0\n    while i < N:\n        j = i + 1\n        while j < N and S[j] != S[j - 1]:\n            j += 1\n        diff.append(j - i)\n        i = j\n    diff.append(0)\n    ans_before = 0\n    for x in diff:\n        ans_before += ((x * (x + 1)) // 2)\n    ans = 0\n    for i in range(len(diff) - 1):\n        a = diff[i]\n        b = diff[i + 1]\n        currAns = (ans_before - ((a * (a + 1)) // 2) -\n                   ((b * (b + 1)) // 2) + ((a + b + 1) * (a + b + 2)) // 2)\n        ans = max(ans, currAns)\n    return ans", "target_Lan": "python###maxAlternatingSubstring.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(maxAlternatingSubstring(0, \"\"))\n    print(maxAlternatingSubstring(1, \"a\"))\n    print(maxAlternatingSubstring(2, \"aa\"))\n    print(maxAlternatingSubstring(3, \"aba\"))\n    print(maxAlternatingSubstring(4, \"abab\"))"}, {"source_Lan": "java###countOperations_Test.java", "source_code": "    public static int countOperations(String s) {\n        final int mod = 1000000007;\n        int ans = 0;\n        int count_b = 0;\n        for (int i = s.length() - 1; i >= 0; --i) {\n            if (s.charAt(i) == 'b') {\n                count_b = (count_b + 1) % mod;\n            } else {\n                ans = (ans + count_b) % mod;\n                count_b = (count_b + count_b) % mod;\n            }\n        }\n        return ans;\n    }", "trans_code": "def count_operations ( s ) :\n    mod = 1000000007\n    ans = 0\n    count_b = 0\n    for i in range ( len ( s ) - 1 , - 1 , - 1 ) :\n        if s [ i ] == 'b' :\n            count_b = ( count_b + 1 ) % mod\n        else :\n            ans = ( ans + count_b ) % mod\n            count_b = ( count_b + count_b ) % mod\n    return ans\n", "reference_code": "def countOperations( s: str) -> int:\n    mod = 10**9 + 7\n    ans = 0\n    count_b = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == 'b':\n            count_b = (count_b + 1) % mod\n        else:\n            ans = (ans + count_b) % mod\n            count_b = (count_b + count_b) % mod\n    return ans", "target_Lan": "python###countOperations.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(countOperations(\"ab\"))\n    print(countOperations(\"bbb\"))\n    print(countOperations(\"aaa\"))\n    print(countOperations(\"bab\"))\n    print(countOperations(\"bbaa\"))"}, {"source_Lan": "java###totalCount_Test.java", "source_code": "    public static int totalCount(int n, String s) {\n        int ans = 0, mod = (int)(1e9 + 7);\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == s.charAt(0))\n                ans = (ans + s.length() - i) % mod;\n        }\n        return ans;\n    }", "trans_code": "def totalCount ( n , s ) :\n    ans , mod = 0 , int ( 1e9 + 7 )\n    for i in range ( len ( s ) ) :\n        if s [ i ] == s [ 0 ] :\n            ans = ( ans + len ( s ) - i ) % mod\n    return ans\n", "reference_code": "def totalCount( n : int, s : str) -> int:\n    mod=10**9+7\n    ans=0\n    for i in range(n):\n        if s[i]==s[0]:\n            ans+=(n-i)\n            ans%=mod\n    return ans", "target_Lan": "python###totalCount.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(totalCount(0, \"\"))\n    print(totalCount(1, \"a\"))\n    print(totalCount(2, \"aa\"))\n    print(totalCount(3, \"abc\"))\n    print(totalCount(4, \"abcd\"))"}, {"source_Lan": "java###validPairs_Test.java", "source_code": "    public static long validPairs(int n, int[] val, int[][] edges) {\n        \n        long[][] lift = new long[n + 1][32];\n        long[] dis = new long[n + 1];\n        long[] dis2 = new long[n + 1];\n        List<List<long[]>> adj = new ArrayList<>();\n        \n        for(int i = 0; i <= n; i++){\n            adj.add(new ArrayList<>());\n        }\n        \n        for (int i = 0; i < edges.length; i++) {\n            adj.get(edges[i][0]).add(new long[]{ edges[i][1], edges[i][2] });\n            adj.get(edges[i][1]).add(new long[]{ edges[i][0], edges[i][2] });\n        }\n        dis[0] = (long)-1e15;\n        \n        Stack<long[]> st = new Stack<>();\n        st.push(new long[]{ 1, 0, 0, 0 }); \n        while (!st.isEmpty()) {\n            long[] top = st.pop();\n            long i = top[0], par = top[1], d = top[2], d2 = top[3];\n            lift[(int)i][0] = par;\n            dis[(int)i] = d;\n            dis2[(int)i] = d2;\n            for (long j = 1; j < 32; j++) {\n                lift[(int)i][(int)j] = lift[(int)lift[(int)i][(int)(j - 1)]][(int)j - 1];\n            }\n            for (long[] j : adj.get((int)i)) {\n                if (j[0] == par) continue;\n                st.push(new long[]{ j[0], i, d + j[1], d2 + 1 });\n            }\n        }\n        \n        long ans = 0;\n        for (long i = 1; i <= n; i++) {\n            long v = val[(int)i - 1];\n            long p = i;\n            for (long j = 31; j >= 0; j--) {\n                if (v >= dis[(int)p] - dis[(int)lift[(int)p][(int)j]]) {\n                    v -= (dis[(int)p] - dis[(int)lift[(int)p][(int)j]]);\n                    p = lift[(int)p][(int)j];\n                }\n            }\n            ans += dis2[(int)i] - dis2[(int)p];\n        }\n        return ans;\n    }", "trans_code": "def valid_pairs ( n , val , edges ) :\n    lift = [ [ ] for i in range ( n + 1 ) ]\n    dis = [ ]\n    dis2 = [ ]\n    adj = [ ]\n    for i in range ( 0 , n + 1 ) :\n        adj.append ( [ ] )\n    for i in range ( 0 , len ( edges ) ) :\n        adj [ edges [ i ] [ 0 ] ].append ( [ edges [ i ] [ 1 ] , edges [ i ] [ 2 ] ] )\n        adj [ edges [ i ] [ 1 ] ].append ( [ edges [ i ] [ 0 ] , edges [ i ] [ 2 ] ] )\n    dis [ 0 ] = int ( - 1e15 )\n    st = [ ]\n    st.append ( [ 1 , 0 , 0 , 0 ] )\n    while not st :\n        top = st.pop ( )\n        i , par , d , d2 = top [ 0 ] , top [ 1 ] , top [ 2 ] , top [ 3 ]\n        lift [ int ( i ) ] [ 0 ] = par\n        dis [ int ( i ) ] = d\n        dis2 [ int ( i ) ] = d2\n        for j in range ( 1 , 32 ) :\n            lift [ int ( i ) ] [ int ( j ) ] = lift [ int ( lift [ int ( i ) ] [ int ( j - 1 ) ] ] [ int ( j - 1 ) ] ]\n        for j in adj [ int ( i ) ] :\n            if j [ 0 ] == par : continue\n            st.append ( [ j [ 0 ] , i , d + j [ 1 ] , d2 + 1 ] )\n    ans = 0\n    for i in range ( 1 , n + 1 ) :\n        v = val [ int ( i - 1 ) ]\n        p = i\n        for j in range ( 31 , - 1 , - 1 ) :\n            lift [ int ( i ) ] [ int ( j ) ] = lift [ int ( lift [ int ( i ) ] [ int ( j - 1 ) ] ) ] [ int ( j - 1 ) ]\n    ans = ans + 1\n    for i in range ( 1 , n + 1 ) :\n        v = val [ int ( i - 1 ) ]\n        p = i\n        for j in range ( 31 , - 1 , - 1 ) :\n        ", "reference_code": "def validPairs( n: int, val: List[int], edges: List[List[int]]) -> int:\n    lift=[[0]*(32) for _ in range(n+1)]\n    dis=[0]*(n+1)\n    dis2=[0]*(n+1)\n    adj=[[] for _ in range(n+1)]\n    for i in edges:\n        adj[i[0]].append((i[1],i[2]))\n        adj[i[1]].append((i[0],i[2]))\n    dis[0]=-(10**15)\n    st=[[1,0,0,0]]\n    while st:\n        top=st.pop()\n        i,par,d,d2=top[0],top[1],top[2],top[3]\n        lift[i][0]=par\n        dis[i]=d\n        dis2[i]=d2\n        for j in range(1,32):\n            lift[i][j]=lift[lift[i][j-1]][j-1]\n        for j in adj[i]:\n            if j[0]==par:\n                continue\n            st.append([j[0],i,d+j[1],d2+1])\n    ans=0\n    for i in range(1,n+1):\n        v=val[i-1]\n        p=i\n        for j in range(31,-1,-1):\n            if v>=dis[p]-dis[lift[p][j]]:\n                v-=dis[p]-dis[lift[p][j]]\n                p=lift[p][j]\n        ans+=dis2[i]-dis2[p]\n    return ans", "target_Lan": "python###validPairs.py", "target_code_shell": "from typing import List\nfrom math import log\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(validPairs(5, [1, 2, 3, 4, 5], [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4]]))\n    print(validPairs(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4], [5, 6, 5], [6, 7, 6], [7, 8, 7], [8, 9, 8], [9, 10, 9]]))\n    print(validPairs(1, [1], []))\n    print(validPairs(2, [1, 2], [[1, 2, 1]]))"}, {"source_Lan": "java###prefixDistinct_Test.java", "source_code": "    public static int[] prefixDistinct(int n, int arr[]){\n        int ans[] = new int[n];\n        Set<Integer> hs = new HashSet<>();\n        for(int i = 0; i < n; i++){\n            hs.add(arr[i]);\n            ans[i] = hs.size();\n        }\n        return ans;\n    }", "trans_code": "def prefix_distinct ( n , arr ) :\n    ans = [ ]\n    hs = set ( )\n    for i in range ( n ) :\n        hs.add ( arr [ i ] )\n        ans.append ( len ( hs ) )\n    return ans\n", "reference_code": "def prefixDistinct(n,arr):\n    ans=[]\n    s=set()\n    for el in arr:\n        s.add(el)\n        ans.append(len(s))\n    return ans", "target_Lan": "python###prefixDistinct.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(prefixDistinct(0, []))\n    print(prefixDistinct(1, [1]))\n    print(prefixDistinct(2, [1, 2]))\n    print(prefixDistinct(5, [1, 2, 1, 3, 2]))\n    print(prefixDistinct(3, [1, 1, 1]))"}, {"source_Lan": "java###minOrAfterOperations_Test.java", "source_code": "    public static int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; \n            int and = -1; \n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; \n                } else {\n                    and = -1; \n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; \n                mask ^= 1 << b; \n            }\n        }\n        return ans;\n    }", "trans_code": "def min_or_after_operations ( nums , k ) :\n    ans = 0\n    mask = 0\n    for b in range ( 29 , - 1 , - 1 ) :\n        mask |= 1 << b\n        cnt = 0\n        and = - 1\n        for x in nums :\n            and &= x & mask\n            if and not cnt :\n                cnt += 1\n            else :\n                and = - 1\n        if cnt > k :\n            ans |= 1 << b\n            mask ^= 1 << b\n    return ans\n", "reference_code": "def minOrAfterOperations( nums: List[int], k: int) -> int:\n    ans = mask = 0\n    for b in range(max(nums).bit_length() - 1, -1, -1):\n        mask |= 1 << b\n        cnt = 0  # \u64cd\u4f5c\u6b21\u6570\n        and_res = -1  # -1 \u7684\u4e8c\u8fdb\u5236\u5168\u4e3a 1\n        for x in nums:\n            and_res &= x & mask\n            if and_res:\n                cnt += 1  # \u5408\u5e76 x\uff0c\u64cd\u4f5c\u6b21\u6570\u52a0\u4e00\n            else:\n                and_res = -1  # \u51c6\u5907\u5408\u5e76\u4e0b\u4e00\u6bb5\n        if cnt > k:\n            ans |= 1 << b  # \u7b54\u6848\u7684\u8fd9\u4e2a\u6bd4\u7279\u4f4d\u5fc5\u987b\u662f 1\n            mask ^= 1 << b  # \u540e\u9762\u4e0d\u8003\u8651\u8fd9\u4e2a\u6bd4\u7279\u4f4d\n    return ans", "target_Lan": "python###minOrAfterOperations.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minOrAfterOperations([1,2,3,4,5], 2))\n    print(minOrAfterOperations([10,20,30,40,50], 3))\n    print(minOrAfterOperations([100,200,300,400,500], 4))\n    print(minOrAfterOperations([1000,2000,3000,4000,5000], 5))\n    print(minOrAfterOperations([10000,20000,30000,40000,50000], 6))"}, {"source_Lan": "java###resultArray_Test.java", "source_code": "    public static int[] resultArray(int[] nums) {\n        int n = nums.length;\n        List<Integer> a = new ArrayList<>();\n        List<Integer> b = new ArrayList<>();\n        a.add(nums[0]);\n        b.add(nums[1]);\n        for (int i = 2; i < n; i++) {\n            if (a.get(a.size() - 1) > b.get(b.size() - 1)) {\n                a.add(nums[i]);\n            } else {\n                b.add(nums[i]);\n            }\n        }\n        a.addAll(b);\n        for (int i = 0; i < n; i++) {\n            nums[i] = a.get(i);\n        }\n        return nums;\n    }", "trans_code": "def resultArray ( nums ) :\n    n = len ( nums )\n    a = [ ]\n    b = [ ]\n    a.append ( nums [ 0 ] )\n    b.append ( nums [ 1 ] )\n    for i in range ( 2 , n ) :\n        if a [ - 1 ] > b [ - 1 ] :\n            a.append ( nums [ i ] )\n        else :\n            b.append ( nums [ i ] )\n    a.extend ( b )\n    for i in range ( n ) :\n        nums [ i ] = a [ i ]\n    return nums\n", "reference_code": "def resultArray( nums: List[int]) -> List[int]:\n    a = nums[:1]\n    b = nums[1:2]\n    for x in nums[2:]:\n        if a[-1] > b[-1]:\n            a.append(x)\n        else:\n            b.append(x)\n    return a + b", "target_Lan": "python###resultArray.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(resultArray([1, 2, 3, 4, 5]))\n    print(resultArray([5, 5, 5, 5, 5]))\n    print(resultArray([1, 3, 5, 7, 9]))\n    print(resultArray([2, 4, 6, 8, 10]))\n    print(resultArray([10, 9, 8, 7, 6]))"}, {"source_Lan": "java###minimumArea_Test.java", "source_code": "    public static int minimumArea(int[][] grid) {\n        int left = grid[0].length;\n        int right = 0;\n        int top = grid.length;\n        int bottom = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    left = Math.min(left, j);\n                    right = Math.max(right, j);\n                    top = Math.min(top, i);\n                    bottom = i;\n                }\n            }\n        }\n        return (right - left + 1) * (bottom - top + 1);\n    }", "trans_code": "def minimumArea ( grid ) :\n    left = len ( grid [ 0 ] )\n    right = 0\n    top = len ( grid )\n    bottom = 0\n    for i in range ( len ( grid ) ) :\n        for j in range ( len ( grid [ i ] ) ) :\n            if grid [ i ] [ j ] == 1 :\n                left = min ( left , j )\n                right = max ( right , j )\n                top = min ( top , i )\n                bottom = i\n    return ( right - left + 1 ) * ( bottom - top + 1 )\n", "reference_code": "def minimumArea( grid: List[List[int]]) -> int:\n    left, right = len(grid[0]), 0\n    top, bottom = len(grid), 0\n    for i, row in enumerate(grid):\n        for j, x in enumerate(row):\n            if x:\n                left = min(left, j)\n                right = max(right, j)\n                top = min(top, i)\n                bottom = i\n    return (right - left + 1) * (bottom - top + 1)", "target_Lan": "python###minimumArea.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumArea([[0,0,0],[0,0,0],[0,0,0]]))\n    print(minimumArea([[1,1,1],[1,1,1],[1,1,1]]))\n    print(minimumArea([[1,0,1],[0,1,0],[1,0,1]]))\n    print(minimumArea([[0,1,0],[1,0,1],[0,1,0]]))\n    print(minimumArea([[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]]))"}, {"source_Lan": "java###sumOfPower_Test.java", "source_code": "    public static int sumOfPower(int[] nums, int k) {\n        final int MOD = 1_000_000_007;\n        int n = nums.length;\n        int[][] f = new int[k + 1][n + 1];\n        f[0][0] = 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = k; j >= nums[i]; j--) {\n                for (int c = i + 1; c > 0; c--) {\n                    f[j][c] = (f[j][c] + f[j - nums[i]][c - 1]) % MOD;\n                }\n            }\n        }\n        long ans = 0;\n        int pow2 = 1;\n        for (int i = n; i > 0; i--) {\n            ans = (ans + (long) f[k][i] * pow2) % MOD;\n            pow2 = pow2 * 2 % MOD;\n        }\n        return (int) ans;\n    }", "trans_code": "def sum_of_power ( nums , k ) :\n    MOD = 1_000_000_007\n    n = len ( nums )\n    f = [ 1 ] * ( k + 1 )\n    for i in range ( n ) :\n        for j in range ( k , j >= nums [ i ] , - 1 ) :\n            for c in range ( i + 1 , 0 , - 1 ) :\n                f [ j ] [ c ] = ( f [ j ] [ c ] + f [ j - nums [ i ] ] [ c - 1 ] ) % MOD\n    ans = 0\n    pow2 = 1\n    for i in range ( n , 0 , - 1 ) :\n        ans = ( ans + int ( f [ k ] [ i ] * pow2 ) ) % MOD\n        pow2 = pow2 * 2 % MOD\n    return int ( ans )\n", "reference_code": "def sumOfPower( nums: List[int], k: int) -> int:\n    MOD = 1_000_000_007\n    n = len(nums)\n    f = [[0] * (n + 1) for _ in range(k + 1)]\n    f[0][0] = 1\n    for i, x in enumerate(nums):\n        for j in range(k, x - 1, -1):\n            for c in range(i + 1, 0, -1):\n                f[j][c] = (f[j][c] + f[j - x][c - 1]) % MOD\n    ans = 0\n    pow2 = 1\n    for i in range(n, 0, -1):\n        ans = (ans + f[k][i] * pow2) % MOD\n        pow2 = pow2 * 2 % MOD\n    return ans", "target_Lan": "python###sumOfPower.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(sumOfPower([1,2,3,4], 5))\n    print(sumOfPower([1,1,1,1], 2))\n    print(sumOfPower([1,2,3,4,5,6,7,8,9,10], 10))\n    print(sumOfPower([10,20,30,40,50], 50))\n    print(sumOfPower([1,1,1,1,1,1,1,1,1,1], 10))"}, {"source_Lan": "java###minimumDistance_Test.java", "source_code": "    public static int minimumDistance(int[][] points) {\n        TreeMap<Integer, Integer> sx = new TreeMap<Integer, Integer>();\n        TreeMap<Integer, Integer> sy = new TreeMap<Integer, Integer>();\n        for (int[] p : points) {\n            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);\n            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);\n        }\n        int res = Integer.MAX_VALUE;\n        for (int[] p : points) {\n            sx.put(p[0] - p[1], sx.get(p[0] - p[1]) - 1);\n            if (sx.get(p[0] - p[1]) == 0) {\n                sx.remove(p[0] - p[1]);\n            }\n            sy.put(p[0] + p[1], sy.get(p[0] + p[1]) - 1);\n            if (sy.get(p[0] + p[1]) == 0) {\n                sy.remove(p[0] + p[1]);\n            }\n            res = Math.min(res, Math.max(sx.lastKey() - sx.firstKey(), sy.lastKey() - sy.firstKey()));\n            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);\n            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);\n        }\n        return res;\n    }", "trans_code": "def minimumDistance ( points ) :\n    sx = defaultdict ( int )\n    sy = defaultdict ( int )\n    for p in points :\n        sx [ p [ 0 ] - p [ 1 ] ] = sx.get ( p [ 0 ] - p [ 1 ] , 0 ) + 1\n        sy [ p [ 0 ] + p [ 1 ] ] = sy.get ( p [ 0 ] + p [ 1 ] , 0 ) + 1\n    res = sys.maxsize\n    for p in points :\n        sx [ p [ 0 ] - p [ 1 ] ] = sx [ p [ 0 ] - p [ 1 ] ] - 1\n        if sx [ p [ 0 ] - p [ 1 ] ] == 0 :\n            sx.pop ( p [ 0 ] - p [ 1 ] )\n        sy [ p [ 0 ] + p [ 1 ] ] = sy [ p [ 0 ] + p [ 1 ] ] - 1\n        if sy [ p [ 0 ] + p [ 1 ] ] == 0 :\n            sy.pop ( p [ 0 ] + p [ 1 ] )\n        res = min ( res , max ( sx.lastkey ( ) - sx.firstkey ( ) , sy.lastkey ( ) - sy.firstkey ( ) ) )\n        sx [ p [ 0 ] - p [ 1 ] ] = sx [ p [ 0 ] - p [ 1 ] ] + 1\n        sy [ p [ 0 ] + p [ 1 ] ] = sy [ p [ 0 ] + p [ 1 ] ] + 1\n    return res\n", "reference_code": "def minimumDistance( points: List[List[int]]) -> int:\n    sx = SortedList(p[0] - p[1] for p in points)\n    sy = SortedList(p[0] + p[1] for p in points)\n    res = float('inf')\n    for p in points:\n        sx.remove(p[0] - p[1])\n        sy.remove(p[0] + p[1])\n        res = min(res, max(sx[-1] - sx[0], sy[-1] - sy[0]))\n        sx.add(p[0] - p[1])\n        sy.add(p[0] + p[1])\n    return res", "target_Lan": "python###minimumDistance.py", "target_code_shell": "from sortedcontainers import SortedList\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumDistance([[1,2],[3,4],[5,6],[7,8]]))\n    print(minimumDistance([[0,0],[1,1],[2,2],[3,3]]))\n    print(minimumDistance([[-1,-2],[-3,-4],[-5,-6],[-7,-8]]))\n    print(minimumDistance([[10,20],[30,40],[50,60],[70,80]]))\n    print(minimumDistance([[100,200],[300,400],[500,600],[700,800]]))"}, {"source_Lan": "java###countAlternatingSubarrays_Test.java", "source_code": "    public static long countAlternatingSubarrays(int[] nums) {\n        long res = 0, cur = 0;\n        int pre = -1;\n        for (int a : nums) {\n            cur = (pre != a) ? cur + 1 : 1;\n            pre = a;\n            res += cur;\n        }\n        return res;\n    }", "trans_code": "def count_alternating_subarrays ( nums ) :\n    res , cur = 0 , 0\n    pre = - 1\n    for a in nums :\n        cur = ( pre != a ) and cur + 1 or 1\n        pre = a\n        res += cur\n    return res\n", "reference_code": "def countAlternatingSubarrays( nums: List[int]) -> int:\n    res = cur = 0\n    pre = -1\n    for a in nums:\n        if pre != a:\n            cur += 1\n        else:\n            cur = 1\n        pre = a\n        res += cur\n    return res", "target_Lan": "python###countAlternatingSubarrays.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(countAlternatingSubarrays([1,2,3,4,5]))\n    print(countAlternatingSubarrays([1,1,1,1,1]))\n    print(countAlternatingSubarrays([1,2,1,2,1]))\n    print(countAlternatingSubarrays([1,3,5,7,9]))\n    print(countAlternatingSubarrays([2,4,6,8,10]))"}, {"source_Lan": "java###goodSubsetofBinaryMatrix_Test.java", "source_code": "    public static List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {\n        List<Integer> ans = new ArrayList<Integer>();\n        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();\n        int m = grid.length;\n        int n = grid[0].length;\n        for (int j = 0; j < m; j++) {\n            int st = 0;\n            for (int i = 0; i < n; i++) {\n                st |= (grid[j][i] << i);\n            }\n            mp.put(st, j);\n        }\n        if (mp.containsKey(0)) {\n            ans.add(mp.get(0));\n            return ans;\n        }\n        for (Map.Entry<Integer, Integer> entry1 : mp.entrySet()) {\n            int x = entry1.getKey(), i = entry1.getValue();\n            for (Map.Entry<Integer, Integer> entry2 : mp.entrySet()) {\n                int y = entry2.getKey(), j = entry2.getValue();\n                if ((x & y) == 0) {\n                    List<Integer> list = new ArrayList<Integer>();\n                    list.add(Math.min(i, j));\n                    list.add(Math.max(i, j));\n                    return list;\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def goodSubsetofBinaryMatrix ( grid ) :\n    ans = [ ]\n    mp = { }\n    m = len ( grid )\n    n = len ( grid [ 0 ] )\n    for j in range ( m ) :\n        st = 0\n        for i in range ( n ) :\n            st |= ( grid [ j ] [ i ] << i )\n        mp [ st ] = j\n    if mp.has_key ( 0 ) :\n        ans.append ( mp [ 0 ] )\n        return ans\n    for entry1 , entry2 in mp.items ( ) :\n        x , i = entry1\n        for entry2 in mp.items ( ) :\n            y , j = entry2\n            if ( x & y ) == 0 :\n                list = [ min ( i , j ) , max ( i , j ) ]\n                return list\n    return ans\n", "reference_code": "def goodSubsetofBinaryMatrix( grid: List[List[int]]) -> List[int]:\n    ans = []\n    mp = {}\n    m = len(grid)\n    n = len(grid[0])\n    for j in range(m):\n        st = 0\n        for i in range(n):\n            st |= (grid[j][i] << i)\n        mp[st] = j\n    if 0 in mp:\n        ans.append(mp[0])\n        return ans\n    for x, i in mp.items():\n        for y, j in mp.items():\n            if not (x & y):\n                return [min(i, j), max(i, j)]\n    return ans", "target_Lan": "python###goodSubsetofBinaryMatrix.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    grid1 = [[1,0,0],[0,1,0],[0,0,1]]\n    grid2 = [[1,1,1],[1,1,1],[1,1,1]]\n    grid3 = [[0,0,0],[0,0,0],[0,0,0]]\n    grid4 = [[1,0,1],[0,1,0],[1,0,1]]\n    grid5 = [[1,1,0],[0,0,1],[1,0,1]]\n    print(goodSubsetofBinaryMatrix(grid1))\n    print(goodSubsetofBinaryMatrix(grid2))\n    print(goodSubsetofBinaryMatrix(grid3))\n    print(goodSubsetofBinaryMatrix(grid4))\n    print(goodSubsetofBinaryMatrix(grid5))"}, {"source_Lan": "java###findKOr_Test.java", "source_code": "    public static int findKOr(int[] nums, int k) {\n        int ans = 0;\n        for (int i = 0; i < 31; ++i) {\n            int cnt = 0;\n            for (int num : nums) {\n                if (((num >> i) & 1) != 0) {\n                    ++cnt;\n                }\n            }\n            if (cnt >= k) {\n                ans |= 1 << i;\n            }\n        }\n        return ans;\n    }", "trans_code": "def find_k_or ( nums , k ) :\n    ans = 0\n    for i in range ( 31 ) :\n        cnt = 0\n        for num in nums :\n            if ( ( num >> i ) & 1 ) :\n                cnt += 1\n        if cnt >= k :\n            ans |= 1 << i\n    return ans\n", "reference_code": "def findKOr( nums: List[int], k: int) -> int:\n    ans = 0\n    for i in range(31):\n        cnt = sum(1 for num in nums if ((num >> i) & 1) > 0)\n        if cnt >= k:\n            ans |= 1 << i\n    return ans", "target_Lan": "python###findKOr.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findKOr([1, 2, 3, 4, 5], 3))\n    print(findKOr([10, 20, 30, 40, 50], 2))\n    print(findKOr([100, 200, 300, 400, 500], 1))\n    print(findKOr([1000, 2000, 3000, 4000, 5000], 4))\n    print(findKOr([10000, 20000, 30000, 40000, 50000], 5))"}, {"source_Lan": "java###minIncrements_Test.java", "source_code": "    public static int minIncrements(int n, int[] cost) {\n        int ans = 0;\n        for (int i = n - 2; i > 0; i -= 2) {\n            ans += Math.abs(cost[i] - cost[i + 1]);\n            \n            cost[i / 2] += Math.max(cost[i], cost[i + 1]);\n        }\n        return ans;\n    }", "trans_code": "def min_increments ( n , cost ) :\n    ans = 0\n    for i in range ( n - 2 , 0 , - 2 ) :\n        ans += abs ( cost [ i ] - cost [ i + 1 ] )\n        cost [ i / 2 ] += max ( cost [ i ] , cost [ i + 1 ] )\n    return ans\n", "reference_code": "def minIncrements( n: int, cost: List[int]) -> int:\n    ans = 0\n    for i in range(n - 2, 0, -2):\n        ans += abs(cost[i] - cost[i + 1])\n        # \u53f6\u8282\u70b9 i \u548c i+1 \u7684\u53cc\u4eb2\u8282\u70b9\u4e0b\u6807\u4e3a i/2\uff08\u6574\u6570\u9664\u6cd5\uff09\n        cost[i // 2] += max(cost[i], cost[i + 1])\n    return ans", "target_Lan": "python###minIncrements.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minIncrements(5, [1,2,3,4,5]))\n    print(minIncrements(3, [10,20,30]))\n    print(minIncrements(4, [5,10,15,20]))\n    print(minIncrements(2, [100,200]))\n    print(minIncrements(6, [1,1,1,1,1,1]))"}, {"source_Lan": "java###minimumTime_Test.java", "source_code": "    public static int minimumTime(List<Integer> nums1, List<Integer> nums2, int x) {\n        int n = nums1.size(), s1 = 0, s2 = 0;\n        int[][] dp = new int[n + 1][n + 1];\n        List<List<Integer>> nums = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int a = nums1.get(i), b = nums2.get(i);\n            nums.add(Arrays.asList(b, a));\n            s1 += a;\n            s2 += b;\n        }\n        Collections.sort(nums, (o1, o2) -> Integer.compare(o1.get(0), o2.get(0)));\n        for (int j = 1; j <= n; ++j) {\n            int b = nums.get(j - 1).get(0), a = nums.get(j - 1).get(1);\n            for (int i = j; i > 0; --i) {\n                dp[j][i] = Math.max(dp[j - 1][i], dp[j - 1][i - 1] + i * b + a);\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            if (s2 * i + s1 - dp[n][i] <= x) {\n                return i;\n            }\n        }\n        return -1;\n    }", "trans_code": "def minimum_time ( nums1 , nums2 , x ) :\n    n , s1 , s2 = len ( nums1 ) , 0 , 0\n    dp = [ [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n + [ 0 ] * n\n    for j in range ( 1 , n + 1 ) :\n        b , a = nums [ j - 1 ] [ 0 ] , nums [ j - 1 ] [ 1 ]\n        for i in range ( j , i > 0 ) :\n            dp [ j ] [ i ] = max ( dp [ j - 1 ] [ i ] , dp [ j - 1 ] [ i - 1 ] + i * b + a )\n    for i in range (", "reference_code": "def minimumTime( nums1: List[int], nums2: List[int], x: int) -> int:\n    n = len(nums1)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for j, (b, a) in enumerate(sorted(zip(nums2, nums1)), 1):\n        for i in range(j, 0, -1):\n            dp[j][i] = max(dp[j - 1][i], dp[j - 1][i - 1] + i * b + a)\n    sa, sb = sum(nums1), sum(nums2)\n    for i in range(0, n + 1):\n        if sb * i + sa - dp[n][i] <= x:\n            return i\n    return -1", "target_Lan": "python###minimumTime.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumTime([1,2,3], [1,2,3], 6))\n    print(minimumTime([1,2,3,4,5], [1,2,3,4,5], 25))\n    print(minimumTime([5,4,3,2,1], [1,2,3,4,5], 15))\n    print(minimumTime([10,20,30,40,50], [1,2,3,4,5], 100))\n    print(minimumTime([1,1,1,1,1], [1,1,1,1,1], 5))"}, {"source_Lan": "java###frequency_Test.java", "source_code": "    public static int[] frequency(int n,int a[]) {\n        HashMap<Integer,Integer> hm=new HashMap<>();\n        int ans[]=new int[n];\n        for(int i:a){\n            hm.put(i,hm.getOrDefault(i,0)+1);\n        }\n        for(int i=0;i<n;i++){\n            ans[i]=hm.get(a[i]);\n            hm.put(a[i],hm.get(a[i])-1);\n        }\n        return ans;\n    }", "trans_code": "def frequency ( n , a ) :\n    hm = { }\n    ans = [ ]\n    for i in a :\n        hm [ i ] = hm.get ( i , 0 ) + 1\n    for i in range ( n ) :\n        ans.append ( hm [ a [ i ] ] )\n        hm [ a [ i ] ] = hm [ a [ i ] ] - 1\n    return ans\n", "reference_code": "def frequency( n ,a):\n    mp=dict()\n    for i in range(n):\n        if a[i] in mp:\n            mp[a[i]]+=1\n        else:\n            mp[a[i]]=1\n    ans=[]\n    for i in range(n):\n        ans.append(mp[a[i]])\n        mp[a[i]]-=1\n    return ans", "target_Lan": "python###frequency.py", "target_code_shell": "from collections import Counter\n# TOFILL\nif __name__ == \"__main__\":\n    print(frequency(0, []))\n    print(frequency(1, [1]))\n    print(frequency(2, [1, 2]))\n    print(frequency(3, [1, 1, 2]))\n    print(frequency(4, [1, 2, 2, 3]))"}, {"source_Lan": "java###bobHappiness_Test.java", "source_code": "    public static int bobHappiness(int n, int k, int q, int[][] students,\n                                   int[][] queries) {\n        TreeSet<Integer> set1 = new TreeSet<>();\n        TreeSet<Integer> set2 = new TreeSet<>();\n        for (int[] a : students) {\n            set1.add(a[0]);\n            set2.add(a[1]);\n        }\n        Map<Integer, Integer> map1 = new HashMap<>();\n        Map<Integer, Integer> map2 = new HashMap<>();\n        int idx1 = 1, idx2 = 1;\n        while (!set1.isEmpty()) {\n            map1.put(set1.pollFirst(), idx1++);\n            map2.put(set2.pollFirst(), idx2++);\n        }\n        int[][] pre = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            pre[map1.get(students[i][0]) - 1][map2.get(students[i][1]) - 1]++;\n        }\n        int[][] Arr = new int[n + 1][n + 1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (pre[i - 1][j - 1] == 0) {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] - Arr[i - 1][j - 1];\n                } else {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] + 1 - Arr[i - 1][j - 1];\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < q; i++) {\n            int X = queries[i][0], Y = queries[i][1];\n            X--;\n            Y--;\n            int a = map1.get(students[Y][0]);\n            int b = map2.get(students[Y][1]);\n            int c = map1.get(students[X][0]), d = map2.get(students[X][1]);\n            int temp = a;\n            a = c;\n            c = temp;\n            int people = Arr[c][d] + Arr[a - 1][b - 1] - Arr[a - 1][d] - Arr[c][b - 1];\n            people -= 2;\n            if (people > k) {\n                \n            } else {\n                sum++;\n            }\n        }\n        return sum;\n    }", "trans_code": "def bobHappiness ( n , k , q , students , queries ) :\n    set1 = [ ]\n    set2 = [ ]\n    for a in students :\n        set1.append ( a [ 0 ] )\n        set2.append ( a [ 1 ] )\n    map1 = { }\n    map2 = { }\n    idx1 , idx2 = 1 , 1\n    while not set1.empty ( ) :\n        map1 [ set1.pop ( ) ] = idx1\n        map2 [ set2.pop ( ) ] = idx2\n    pre = [ ]\n    for i in range ( n ) :\n        pre.append ( map1 [ students [ i ] [ 0 ] ] - 1 )\n        pre.append ( map2 [ students [ i ] [ 1 ] ] - 1 )\n    Arr = [ ]\n    for i in range ( n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if pre [ i - 1 ] [ j - 1 ] == 0 :\n                Arr [ i ] [ j ] = Arr [ i - 1 ] [ j ] + Arr [ i ] [ j - 1 ] - Arr [ i - 1 ] [ j - 1 ]\n            else :\n                Arr [ i ] [ j ] = Arr [ i - 1 ] [ j ] + Arr [ i ] [ j - 1 ] + 1 - Arr [ i - 1 ] [ j - 1 ]\n    sum = 0\n    for i in range ( q ) :\n        X , Y = queries [ i ]\n        X -= 1\n        Y -= 1\n        a = map1 [ students [ Y ] [ 0 ] ]\n        b = map2 [ students [ Y ] [ 1 ] ]\n        c = map1 [ students [ X ] [ 0 ] ] , map2 [ students [ X ] [ 1 ] ]\n        temp = a\n        a = b\n        b = c\n        c = map1 [ students [ X ] [ 0 ] ]\n        d = map2 [ students [ X ] [ 1 ] ]\n        temp = a\n        a = c\n        c = map1 [ students [ X ] [ 0 ] ]\n        d = map2 [ students [ X ] [ 1 ] ]\n        temp = a\n        a = c\n        c = map1 [ students [ X ] [ 0 ] ]\n        d = map2 [ students [ X ] [ 1 ] ]\n        temp = b\n        b = c\n        temp = d\n    return temp\n", "reference_code": "def bobHappiness( n: int, k: int, q: int, students: List[List[int]],\n                 queries: List[List[int]]) -> int:\n    # Extract and sort the unique values\n    unique_x = sorted(set(a[0] for a in students))\n    unique_y = sorted(set(a[1] for a in students))\n    # Create mapping from value to index\n    map1 = {val: idx + 1 for idx, val in enumerate(unique_x)}\n    map2 = {val: idx + 1 for idx, val in enumerate(unique_y)}\n    # Create the prefix sum array\n    pre = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        x = map1[students[i][0]]\n        y = map2[students[i][1]]\n        pre[x][y] += 1\n    # Compute 2D prefix sums\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            pre[i][j] += pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1]\n    sum_happiness = 0\n    for X, Y in queries:\n        X -= 1\n        Y -= 1\n        c = map1[students[Y][0]]\n        d = map2[students[Y][1]]\n        a = map1[students[X][0]]\n        b = map2[students[X][1]]\n        # Ensure c <= a and d <= b for proper submatrix calculation\n        if a < c: c, a = a, c\n        if b < d: d, b = b, d\n        # Number of students in the submatrix\n        people = pre[a][b] - pre[c - 1][b] - pre[a][d - 1] + pre[c - 1][d -\n                                                                        1]\n        # Update happiness count based on the condition\n        if people - 2 <= k:\n            sum_happiness += 1\n    return sum_happiness", "target_Lan": "python###bobHappiness.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(bobHappiness(3, 2, 2, [[1,2],[2,3],[3,1]], [[1,2],[2,3]]))\n    print(bobHappiness(4, 2, 2, [[1,2],[2,3],[3,4],[4,1]], [[1,2],[2,3]]))\n    print(bobHappiness(3, 2, 2, [[1,2],[2,3],[3,1]], [[1,3],[2,3]]))\n    print(bobHappiness(3, 1, 2, [[1,2],[2,3],[3,1]], [[1,2],[2,3]]))\n    print(bobHappiness(3, 2, 2, [[1,2],[2,3],[3,1]], [[1,2],[1,3]]))"}, {"source_Lan": "java###BeautifulBits_Test.java", "source_code": "    public static ArrayList<Integer> BeautifulBits(int n, int[] arr, int q,\n                                                   int[][] queries) {\n        long[][] pref = new long[n + 1][32];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 32; j++) {\n                pref[i][j] = pref[i - 1][j] + ((arr[i - 1] >> j) & 1);\n            }\n        }\n        ArrayList<Integer> ans = new ArrayList<>(Collections.nCopies(q, 0));\n        for (int i = 0; i < q; i++) {\n            for (int j = 0; j < 32; j++) {\n                if (pref[queries[i][1]][j] - pref[queries[i][0] - 1][j] != 0) {\n                    ans.set(i, ans.get(i) + (1 << j));\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def BeautifulBits ( n , arr , q , queries ) :\n    pref = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 32 ) :\n            pref [ i ] [ j ] = pref [ i - 1 ] [ j ] + ( ( arr [ i - 1 ] >> j ) & 1 )\n    ans = [ 0 ] * ( q + 1 )\n    for i in range ( q ) :\n        for j in range ( 32 ) :\n            if pref [ queries [ i ] [ 1 ] ] [ j ] - pref [ queries [ i ] [ 0 ] - 1 ] [ j ] != 0 :\n                ans [ i ] = ans [ i ] + ( 1 << j )\n    return ans\n", "reference_code": "def BeautifulBits( n : int, arr : List[int], q : int, queries : List[List[int]]) -> List[int]:\n    pref = [[0] * 32 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(32):\n            pref[i][j] = pref[i - 1][j] + ((arr[i - 1] >> j) & 1)\n    ans = [0] * q\n    for i in range(q):\n        for j in range(32):\n            if pref[queries[i][1]][j] - pref[queries[i][0] - 1][j] != 0:\n                ans[i] += 1 << j\n    return ans", "target_Lan": "python###BeautifulBits.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(BeautifulBits(5, [1, 2, 3, 4, 5], 2, [[1, 3], [2, 5]]))\n    print(BeautifulBits(10, [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 3, [[1, 5], [6, 10], [3, 8]]))\n    print(BeautifulBits(0, [], 0, []))\n    print(BeautifulBits(1, [1], 1, [[1, 1]]))\n    print(BeautifulBits(2, [1, 3], 1, [[1, 2]]))"}, {"source_Lan": "java###findEnemies_Test.java", "source_code": "    public static ArrayList<ArrayList<Integer>> findEnemies(int n, int m, int k, int[] col, int[] count) {\n        ArrayList<ArrayList<Integer>> answer = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            ArrayList<Integer> row = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                row.add(-1);\n            }\n            answer.add(row);\n        }\n        int curr = 0;\n        int ind = 0;\n        while (curr < k && ind < n) {\n            int total = count[ind];\n            while (total-- > 0) {\n                answer.get(ind).set(col[curr], curr);\n                curr += 1;\n            }\n            ind += 1;\n        }\n        return answer;\n    }", "trans_code": "def find_enemies ( n , m , k , col , count ) :\n    answer = [ ]\n    for i in range ( n ) :\n        row = [ ]\n        for j in range ( m ) :\n            row.append ( - 1 )\n        answer.append ( row )\n    curr = 0\n    ind = 0\n    while curr < k and ind < n :\n        total = count [ ind ]\n        while total :\n            answer [ ind ] [ col [ curr ] ] = curr\n            curr += 1\n        ind += 1\n    return answer\n", "reference_code": "def findEnemies( n : int, m : int, k : int, col : List[int], count : List[int]) -> List[List[int]]:\n    arr=[[-1]*(m) for _ in range(n)]\n    ind=0\n    for i in range(n):\n        while count[i]>0:\n            arr[i][col[ind]]=ind\n            ind+=1\n            count[i]-=1\n    return arr", "target_Lan": "python###findEnemies.py", "target_code_shell": "from typing import List\nfrom typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findEnemies(0, 0, 0, [], []))\n    print(findEnemies(1, 1, 1, [0], [1]))\n    print(findEnemies(2, 2, 2, [0, 1], [1, 1]))\n    print(findEnemies(3, 3, 3, [0, 1, 2], [1, 1, 1]))\n    print(findEnemies(4, 4, 4, [0, 1, 2, 3], [1, 1, 1, 1]))"}, {"source_Lan": "java###validStrings_Test.java", "source_code": "    public static int validStrings(int n, int k, String[] arr) \n    {\n        int totalValid = 0;\n        for (String str : arr) {\n            int vowelCount = 0;\n            for (char ch : str.toCharArray()) {\n                if (\"aeiou\".indexOf(ch) >= 0) {\n                    vowelCount++;\n                }\n            }\n            if (vowelCount == k) {\n                totalValid++;\n            }\n        }\n        return totalValid;\n    }", "trans_code": "def valid_strings ( n , k , arr ) :\n    total_valid = 0\n    for str in arr :\n        vowel_count = 0\n        for ch in str :\n            if 'aeiou' in ch :\n                vowel_count += 1\n        if vowel_count == k :\n            total_valid += 1\n    return total_valid\n", "reference_code": "def validStrings( n : int, k : int, arr : List[str]) -> int:\n    ans=0\n    for el in arr:\n        C=0\n        for e in el:\n            if e in \"aeiou\":\n                C+=1\n        if C==k:\n            ans+=1\n    return ans", "target_Lan": "python###validStrings.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(validStrings(0, 0, {}))\n    print(validStrings(1, 1, {\"a\"}))\n    print(validStrings(2, 1, {\"a\", \"e\"}))\n    print(validStrings(3, 2, {\"ae\", \"i\", \"o\"}))\n    print(validStrings(4, 3, {\"aei\", \"o\", \"u\", \"aeiou\"}))"}, {"source_Lan": "java###maximumBattalions_Test.java", "source_code": "    public static int maximumBattalions(int N, String[] names) \n    {\n        Map<String, Integer> nameIndexMap = new HashMap<>();\n        for (int i = 0; i < N; i++) \n        {\n            nameIndexMap.put(names[i], i);\n        }\n        int answer = 0;\n        int maxi = 0;\n        int ind = 0;\n        for (String name : names) \n        {\n            maxi = Math.max(maxi, nameIndexMap.get(name));\n            if (maxi == ind) \n            {\n                answer++;\n            }\n            ind++;\n        }\n        return answer;\n    }", "trans_code": "def maximumBattalions ( N , names ) :\n    name_index_map = { }\n    for i in range ( N ) :\n        name_index_map [ names [ i ] ] = i\n    answer = 0\n    maxi = 0\n    ind = 0\n    for name in names :\n        maxi = max ( maxi , name_index_map [ name ] )\n        if maxi == ind :\n            answer += 1\n        ind += 1\n    return answer\n", "reference_code": "def maximumBattalions( N : int, names : List[str]) -> int:\n    d={}\n    for i in range(N):\n        if names[i] not in d:\n            d[names[i]]=[]\n        d[names[i]].append(i)\n    seen=set()\n    ans=0\n    for i in range(N):\n        if names[i] not in seen:\n            seen.add(names[i])\n        if d[names[i]][-1]==i:\n            seen.remove(names[i])\n        if len(seen)==0:\n            ans+=1\n    return ans", "target_Lan": "python###maximumBattalions.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumBattalions(0, []))\n    print(maximumBattalions(1, [\"John\"]))\n    print(maximumBattalions(2, [\"John\", \"John\"]))\n    print(maximumBattalions(3, [\"John\", \"John\", \"Doe\"]))\n    print(maximumBattalions(4, [\"John\", \"Doe\", \"John\", \"Doe\"]))"}, {"source_Lan": "java###findAnswer_Test.java", "source_code": "    public static ArrayList<Integer> findAnswer(int n, int[] A) \n    {\n        ArrayList<Long> pref = new ArrayList<>();\n        pref.add((long) A[0]);\n        \n        for (int i = 1; i < n; i++) {\n            pref.add(pref.get(i - 1) + A[i]);\n        }\n        Stack<Integer> s = new Stack<>();\n        ArrayList<Integer> res = new ArrayList<>();\n        for(int i=0;i<=n;i++)\n        {\n            res.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            if (pref.get(i) > 0) \n            {\n                res.set(0,i+1);\n                break;\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) \n        {\n            while (!s.isEmpty() && pref.get(s.peek()) <= pref.get(i)) {\n                s.pop();\n            }\n            if (s.isEmpty()) \n            {\n                res.set(i+1,0);\n            } \n            else if (i < n - 1) \n            {\n                res.set(i + 1, s.peek() - i);\n            }\n            s.push(i);\n        }\n        res.remove(res.size() - 1);\n        return res;\n    }", "trans_code": "def find_answer ( n , A ) :\n    pref = [ ( A [ 0 ] , A [ 1 ] ) ]\n    for i in range ( 1 , n ) :\n        pref.append ( pref [ i - 1 ] + A [ i ] )\n    s = Stack ( )\n    res = [ ]\n    for i in range ( 0 , n ) :\n        res.append ( 0 )\n    for i in range ( n ) :\n        if pref [ i ] > 0 :\n            res [ 0 ] = i + 1\n            break\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        while not s.empty ( ) and pref [ s.pop ( ) ] <= pref [ i ] :\n            s.pop ( )\n        if s.empty ( ) :\n            res [ i + 1 ] = 0\n        elif i < n - 1 :\n            res [ i + 1 ] = s.pop ( ) - i\n        s.push ( i )\n    res.pop ( )\n    return res\n", "reference_code": "def findAnswer( n : int, A : List[int]) -> List[int]:\n    pref=[A[0]]\n    for i in range(1,n):\n        pref.append(pref[-1]+A[i])\n    s=[]\n    res=[0]*(n+1)\n    for i in range(n):\n        if pref[i]>0:\n            res[0]=i+1\n            break\n    for i in range(n-1,-1,-1):\n        while s and pref[s[-1]]<=pref[i]:\n            s.pop()\n        if not s:\n            res[i+1]=0\n        elif i<n-1:\n            res[i+1]=s[-1]-i\n        s.append(i)\n    res.pop()\n    return res", "target_Lan": "python###findAnswer.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findAnswer(1, [1]))\n    print(findAnswer(2, [-1, 1]))\n    print(findAnswer(3, [1, -1, 1]))\n    print(findAnswer(5, [1, -2, 3, -4, 5]))"}, {"source_Lan": "java###minimumOperationsToWriteY_Test.java", "source_code": "    public static int minimumOperationsToWriteY(int[][] grid) {\n        int[] cnt1 = new int[3];\n        int[] cnt2 = new int[3];\n        int n = grid.length;\n        int m = n / 2;\n        for (int i = 0; i < m; i++) {\n            cnt1[grid[i][i]]++;\n            cnt1[grid[i][n - 1 - i]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != i && j != n - 1 - i) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        for (int i = m; i < n; i++) {\n            cnt1[grid[i][m]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != m) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        int maxNotChange = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (i != j) {\n                    maxNotChange = Math.max(maxNotChange, cnt1[i] + cnt2[j]);\n                }\n            }\n        }\n        return n * n - maxNotChange;\n    }", "trans_code": "def minimum_operations_to_write_y ( grid ) :\n    cnt1 = [ ]\n    cnt2 = [ ]\n    n = len ( grid )\n    m = n // 2\n    for i in range ( m ) :\n        cnt1.append ( grid [ i ] [ i ] )\n        cnt1.append ( grid [ i ] [ n - 1 - i ] )\n        for j in range ( n ) :\n            if j != i and j != n - 1 - i :\n                cnt2.append ( grid [ i ] [ j ] )\n    for i in range ( m , n ) :\n        cnt1.append ( grid [ i ] [ m ] )\n        for j in range ( n ) :\n            if j != m :\n                cnt2.append ( grid [ i ] [ j ] )\n    max_not_change = 0\n    for i in range ( 3 ) :\n        for j in range ( 3 ) :\n            if i != j :\n                max_not_change = max ( max_not_change , cnt1 [ i ] + cnt2 [ j ] )\n    return n * n - max_not_change\n", "reference_code": "def minimumOperationsToWriteY( grid: List[List[int]]) -> int:\n    cnt1 = [0] * 3\n    cnt2 = [0] * 3\n    n = len(grid)\n    m = n // 2\n    for i, row in enumerate(grid[:m]):\n        cnt1[row[i]] += 1\n        cnt1[row[-1 - i]] += 1\n        for j, x in enumerate(row):\n            if j != i and j != n - 1 - i:\n                cnt2[x] += 1\n    for row in grid[m:]:\n        cnt1[row[m]] += 1\n        for j, x in enumerate(row):\n            if j != m:\n                cnt2[x] += 1\n    max_not_change = 0\n    for i, c1 in enumerate(cnt1):\n        for j, c2 in enumerate(cnt2):\n            if i != j:\n                max_not_change = max(max_not_change, c1 + c2)\n    return n * n - max_not_change", "target_Lan": "python###minimumOperationsToWriteY.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumOperationsToWriteY([[1,1,1],[1,1,1],[1,1,1]]))\n    print(minimumOperationsToWriteY([[0,0,0],[0,0,0],[0,0,0]]))\n    print(minimumOperationsToWriteY([[2,2,2],[2,2,2],[2,2,2]]))"}, {"source_Lan": "java###sumOfEncryptedInt_Test.java", "source_code": "    public static int sumOfEncryptedInt(int[] nums) {\n        int ans = 0;\n        for (int x : nums) {\n            int mx = 0;\n            int base = 0;\n            for (; x > 0; x /= 10) {\n                mx = Math.max(mx, x % 10);\n                base = base * 10 + 1;\n            }\n            ans += mx * base;\n        }\n        return ans;\n    }", "trans_code": "def sum_of_encrypted_int ( nums ) :\n    ans = 0\n    for x in nums :\n        mx = 0\n        base = 0\n        for _ in range ( 10 ) :\n            mx = max ( mx , x % 10 )\n            base = base * 10 + 1\n        ans += mx * base\n    return ans\n", "reference_code": "def sumOfEncryptedInt( nums: List[int]) -> int:\n    ans = 0\n    for x in nums:\n        mx = base = 0\n        while x:\n            x, d = divmod(x, 10)\n            mx = max(mx, d)\n            base = base * 10 + 1\n        ans += mx * base\n    return ans", "target_Lan": "python###sumOfEncryptedInt.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(sumOfEncryptedInt([0]))\n    print(sumOfEncryptedInt([1, 2, 3, 4, 5]))\n    print(sumOfEncryptedInt([100, 200, 300, 400, 500]))\n    print(sumOfEncryptedInt([1000, 2000, 3000, 4000, 5000]))\n    print(sumOfEncryptedInt([10000, 20000, 30000, 40000, 50000]))"}, {"source_Lan": "java###minOPs_Test.java", "source_code": "    public static int minOPs(int n, int[] A) {\n        Map<Integer, Integer> m = new HashMap<>();\n        for (int it : A) {\n            m.put(it, m.getOrDefault(it, 0) + 1);\n        }\n        int[] v = new int[m.size()];\n        int index = 0;\n        for (int value : m.values()) {\n            v[index++] = value;\n        }\n        Arrays.sort(v);\n        int sum = 0;\n        for (int i = v.length - 1; i >= 0; i--) {\n            sum += v[i];\n            if (sum > (n / 2)) {\n                return v.length - 1 - i;\n            }\n        }\n        return 0; \n    }", "trans_code": "def minOPs ( n , A ) :\n    m = { }\n    for it in A :\n        m [ it ] = m.get ( it , 0 ) + 1\n    v = [ ]\n    index = 0\n    for value in m.values ( ) :\n        v.append ( value )\n    v.sort ( )\n    sum = 0\n    for i in range ( len ( v ) - 1 , - 1 , - 1 ) :\n        sum += v [ i ]\n        if sum > ( n / 2 ) :\n            return len ( v ) - 1 - i\n    return 0\n", "reference_code": "def minOPs( n : int, A : List[int]) -> int:\n    c=Counter(A)\n    t=[]\n    for el in c.values():\n        t.append(el)\n    t.sort()\n    s=0\n    ans=0\n    while s<=(n/2):\n        s+=t.pop()\n        ans+=1\n    return ans-1", "target_Lan": "python###minOPs.py", "target_code_shell": "from typing import List\nfrom collections import Counter\nfrom typing import List\nfrom collections import Counter\n# TOFILL\nif __name__ == \"__main__\":\n    print(minOPs(5, [1, 2, 3, 4, 5]))\n    print(minOPs(10, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(minOPs(15, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(minOPs(20, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(minOPs(25, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))"}, {"source_Lan": "java###maxFrequencyElements_Test.java", "source_code": "    public static int maxFrequencyElements(int[] nums) {\n        int ans = 0, maxCnt = 0;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        for (int x : nums) {\n            int c = cnt.merge(x, 1, Integer::sum);\n            if (c > maxCnt) {\n                maxCnt = ans = c;\n            } else if (c == maxCnt) {\n                ans += c;\n            }\n        }\n        return ans;\n    }", "trans_code": "def max_frequency_elements ( nums ) :\n    ans , max_cnt = 0 , 0\n    cnt = { }\n    for x in nums :\n        c = cnt.merge ( x , 1 , sum )\n        if c > max_cnt :\n            max_cnt = ans = c\n        elif c == max_cnt :\n            ans += c\n    return ans\n", "reference_code": "def maxFrequencyElements( nums: List[int]) -> int:\n    ans = max_cnt = 0\n    cnt = Counter()\n    for x in nums:\n        cnt[x] += 1\n        c = cnt[x]\n        if c > max_cnt:\n            max_cnt = ans = c\n        elif c == max_cnt:\n            ans += c\n    return ans", "target_Lan": "python###maxFrequencyElements.py", "target_code_shell": "from typing import List\nfrom collections import Counter\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxFrequencyElements([1, 2, 3, 4, 5]))\n    print(maxFrequencyElements([1, 1, 1, 1, 1]))\n    print(maxFrequencyElements([1, 2, 2, 3, 3]))\n    print(maxFrequencyElements([1, 2, 2, 2, 3, 3, 3]))\n    print(maxFrequencyElements([-1, -1, -1, 2, 2, 3]))"}, {"source_Lan": "java###maxPalindromesAfterOperations_Test.java", "source_code": "    public static int maxPalindromesAfterOperations(String[] words) {\n        int tot = 0;\n        int mask = 0; \n        for (String w : words) {\n            tot += w.length();\n            for (char c : w.toCharArray()) {\n                mask ^= 1 << (c - 'a');\n            }\n        }\n        tot -= Integer.bitCount(mask); \n        Arrays.sort(words, (a, b) -> a.length() - b.length());\n        int ans = 0;\n        for (String w : words) {\n            tot -= w.length() / 2 * 2; \n            if (tot < 0) break;\n            ans++;\n        }\n        return ans;\n    }", "trans_code": "def max_palindromes_after_operations ( words ) :\n    tot = 0\n    mask = 0\n    for w in words :\n        tot += len ( w )\n        for c in w :\n            mask ^= 1 << ( c - 'a' )\n    tot -= int ( mask )\n    words.sort ( )\n    words.reverse ( )\n    ans = 0\n    for w in words :\n        tot -= len ( w ) / 2 ** 2\n        if tot < 0 :\n            break\n        ans += 1\n    return ans\n", "reference_code": "def maxPalindromesAfterOperations( words: List[str]) -> int:\n    ans = tot = 0\n    cnt = Counter()\n    for w in words:\n        tot += len(w)\n        cnt += Counter(w)\n    tot -= sum(c % 2 for c in cnt.values())  # \u51cf\u53bb\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u7684\u5b57\u6bcd\n    words.sort(key=len)  # \u6309\u7167\u957f\u5ea6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n    for w in words:\n        tot -= len(w) // 2 * 2  # \u957f\u4e3a\u5947\u6570\u7684\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u8981\u51cf\u4e00\n        if tot < 0: break\n        ans += 1\n    return ans", "target_Lan": "python###maxPalindromesAfterOperations.py", "target_code_shell": "from typing import List\nfrom collections import Counter\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxPalindromesAfterOperations([\"abc\", \"cba\", \"xyz\"]))\n    print(maxPalindromesAfterOperations([\"abc\", \"xyz\", \"cba\"]))\n    print(maxPalindromesAfterOperations([\"abc\", \"cba\", \"xyz\", \"zyx\"]))\n    print(maxPalindromesAfterOperations([\"abc\", \"xyz\", \"cba\", \"zyx\"]))\n    print(maxPalindromesAfterOperations([\"abc\", \"cba\", \"xyz\", \"zyx\", \"yxz\"]))"}, {"source_Lan": "java###maximumLengthSubstring_Test.java", "source_code": "    public static int maximumLengthSubstring(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        int left = 0;\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length; i++) {\n            int b = s[i] - 'a';\n            cnt[b]++;\n            while (cnt[b] > 2) {\n                cnt[s[left++] - 'a']--;\n            }\n            ans = Math.max(ans, i - left + 1);\n        }\n        return ans;\n    }", "trans_code": "def maximumLengthSubstring ( S ) :\n    s = S.split ( )\n    ans = 0\n    left = 0\n    cnt = [ 0 ] * 26\n    for i in range ( len ( s ) ) :\n        b = s [ i ] - 'a'\n        cnt [ b ] += 1\n        while cnt [ b ] > 2 :\n            cnt [ s [ left ++ ] - 'a' ] -= 1\n        ans = max ( ans , i - left + 1 )\n    return ans\n", "reference_code": "def maximumLengthSubstring( s: str) -> int:\n    ans = left = 0\n    cnt = Counter()\n    for i, c in enumerate(s):\n        cnt[c] += 1\n        while cnt[c] > 2:\n            cnt[s[left]] -= 1\n            left += 1\n        ans = max(ans, i - left + 1)\n    return ans", "target_Lan": "python###maximumLengthSubstring.py", "target_code_shell": "from collections import Counter\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumLengthSubstring(\"abcabcbb\"))\n    print(maximumLengthSubstring(\"bbbbb\"))\n    print(maximumLengthSubstring(\"pwwkew\"))\n    print(maximumLengthSubstring(\"aab\"))\n    print(maximumLengthSubstring(\"dvdf\"))"}, {"source_Lan": "java###maxScore_Test.java", "source_code": "    public static int maxScore(List<List<Integer>> grid) {\n        int ans = Integer.MIN_VALUE;\n        int m = grid.size(), n = grid.get(0).size();\n        int[][] f = new int[m + 1][n + 1];\n        Arrays.fill(f[0], Integer.MAX_VALUE);\n        for (int i = 0; i < m; i++) {\n            f[i + 1][0] = Integer.MAX_VALUE;\n            List<Integer> row = grid.get(i);\n            for (int j = 0; j < n; j++) {\n                int mn = Math.min(f[i + 1][j], f[i][j + 1]);\n                int x = row.get(j);\n                ans = Math.max(ans, x - mn);\n                f[i + 1][j + 1] = Math.min(mn, x);\n            }\n        }\n        return ans;\n    }", "trans_code": "def max_score ( grid ) :\n    ans = np.inf\n    m , n = len ( grid ) , len ( grid [ 0 ] )\n    f = np.zeros ( ( m + 1 , n + 1 ) )\n    np.fill_diagonal ( f , np.inf )\n    for i in range ( m ) :\n        f [ i + 1 ] [ 0 ] = np.inf\n        row = grid [ i ]\n        for j in range ( n ) :\n            mn = min ( f [ i + 1 ] [ j ] , f [ i ] [ j + 1 ] )\n            x = row [ j ]\n            ans = max ( ans , x - mn )\n            f [ i + 1 ] [ j + 1 ] = min ( mn , x )\n    return ans\n", "reference_code": "def maxScore( grid: List[List[int]]) -> int:\n    ans = -inf\n    m, n = len(grid), len(grid[0])\n    f = [[inf] * (n + 1) for _ in range(m + 1)]\n    for i, row in enumerate(grid):\n        for j, x in enumerate(row):\n            mn = min(f[i + 1][j], f[i][j + 1])\n            ans = max(ans, x - mn)\n            f[i + 1][j + 1] = min(mn, x)\n    return ans", "target_Lan": "python###maxScore.py", "target_code_shell": "from typing import List\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxScore([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n    print(maxScore([[10, 20, 30], [40, 50, 60], [70, 80, 90]]))\n    print(maxScore([[100, 200, 300], [400, 500, 600], [700, 800, 900]]))\n    print(maxScore([[1, 1, 1], [1, 1, 1], [1, 1, 1]]))\n    print(maxScore([[0, 0, 0], [0, 0, 0], [0, 0, 0]]))"}, {"source_Lan": "java###numberOfChild_Test.java", "source_code": "    public static int numberOfChild(int n, int k) {\n        int ans=0;\n        for(int neg=-1;k!=0;k--){\n            if(ans==0||ans==n-1){neg*=-1;}\n            ans+=neg;\n        }\n        return ans;\n    }", "trans_code": "def number_of_child ( n , k ) :\n    ans = 0\n    for neg in range ( - 1 , k != 0 ) :\n        if ans == 0 or ans == n - 1 :\n            neg *= - 1\n        ans += neg\n    return ans\n", "reference_code": "def numberOfChild( n: int, k: int) -> int:\n    k, t = divmod(k, n - 1)\n    return n - t - 1 if k % 2 else t", "target_Lan": "python###numberOfChild.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(numberOfChild(10, 5))\n    print(numberOfChild(100, 10))\n    print(numberOfChild(50, 0))\n    print(numberOfChild(10, 10))\n    print(numberOfChild(5, 5))"}, {"source_Lan": "java###maximumSubarraySum_Test.java", "source_code": "    public static long maximumSubarraySum(int[] nums, int k) {\n        long ans = Long.MIN_VALUE;\n        long sum = 0;\n        Map<Integer, Long> minS = new HashMap<>();\n        for (int x : nums) {\n            long s1 = minS.getOrDefault(x - k, Long.MAX_VALUE / 2);\n            long s2 = minS.getOrDefault(x + k, Long.MAX_VALUE / 2);\n            ans = Math.max(ans, sum + x - Math.min(s1, s2));\n            minS.merge(x, sum, Math::min);\n            sum += x;\n        }\n        return ans > Long.MIN_VALUE / 4 ? ans : 0;\n    }", "trans_code": "def maximum_subarray_sum ( nums , k ) :\n    ans = float ( 'inf' )\n    sum = 0\n    min_s = { }\n    for x in nums :\n        s1 = min_s.get ( x - k , float ( 'inf' ) / 2 )\n        s2 = min_s.get ( x + k , float ( 'inf' ) / 2 )\n        ans = max ( ans , sum + x - min ( s1 , s2 ) )\n        min_s [ x ] = sum , min ( s1 , s2 )\n        sum += x\n    return ans > float ( 'inf' ) / 4 , ans\n", "reference_code": "def maximumSubarraySum( nums: List[int], k: int) -> int:\n    ans = -inf\n    min_s = defaultdict(lambda: inf)\n    s = 0\n    for x in nums:\n        ans = max(ans, s + x - min(min_s[x - k], min_s[x + k]))\n        min_s[x] = min(min_s[x], s)\n        s += x\n    return ans if ans > -inf else 0", "target_Lan": "python###maximumSubarraySum.py", "target_code_shell": "from typing import List\nfrom collections import defaultdict\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumSubarraySum([1,2,3,4,5], 1))\n    print(maximumSubarraySum([-1,-2,-3,-4,-5], 2))\n    print(maximumSubarraySum([10,20,30,40,50], 3))\n    print(maximumSubarraySum([0,0,0,0,0], 0))\n    print(maximumSubarraySum([100,200,300,400,500], 10))"}, {"source_Lan": "java###maxSelectedElements_Test.java", "source_code": "    public static int maxSelectedElements(int[] nums) {\n        Arrays.sort(nums);\n        Map<Integer, Integer> f = new HashMap<>();\n        for (int x : nums) {\n            f.put(x + 1, f.getOrDefault(x, 0) + 1);\n            f.put(x, f.getOrDefault(x - 1, 0) + 1);\n        }\n        int ans = 0;\n        for (int res : f.values()) {\n            ans = Math.max(ans, res);\n        }\n        return ans;\n    }", "trans_code": "def max_selected_elements ( nums ) :\n    nums = sorted ( nums )\n    f = { }\n    for x in nums :\n        f [ x + 1 ] = f.get ( x , 0 ) + 1\n        f [ x ] = f.get ( x - 1 , 0 ) + 1\n    ans = 0\n    for res in f.values ( ) :\n        ans = max ( ans , res )\n    return ans\n", "reference_code": "def maxSelectedElements( nums: List[int]) -> int:\n    nums.sort()\n    f = defaultdict(int)\n    for x in nums:\n        f[x + 1] = f[x] + 1\n        f[x] = f[x - 1] + 1\n    return max(f.values())", "target_Lan": "python###maxSelectedElements.py", "target_code_shell": "from typing import List\nfrom collections import defaultdict\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxSelectedElements([1, 2, 3, 4, 5]))\n    print(maxSelectedElements([5, 5, 5, 5, 5]))\n    print(maxSelectedElements([-1, -2, -3, -4, -5]))\n    print(maxSelectedElements([10, 20, 30, 40, 50]))\n    print(maxSelectedElements([0, 0, 0, 0, 0]))"}, {"source_Lan": "java###numberOfSubarrays_Test.java", "source_code": "    public static long numberOfSubarrays(int[] nums) {\n        long ans = nums.length;\n        Deque<int[]> st = new ArrayDeque<>();\n        st.push(new int[]{Integer.MAX_VALUE, 0}); \n        for (int x : nums) {\n            while (x > st.peek()[0]) {\n                st.pop();\n            }\n            if (x == st.peek()[0]) {\n                ans += st.peek()[1]++;\n            } else {\n                st.push(new int[]{x, 1});\n            }\n        }\n        return ans;\n    }", "trans_code": "def number_of_subarrays ( nums ) :\n    ans = len ( nums )\n    st = deque ( )\n    st.append ( [ int ( x ) for x in nums ] )\n    for x in nums :\n        while x > st.popleft ( ) [ 0 ] :\n            st.popleft ( )\n        if x == st.popleft ( ) [ 0 ] :\n            ans += st.popleft ( ) [ 1 ]\n        else :\n            st.append ( [ x , 1 ] )\n    return ans\n", "reference_code": "def numberOfSubarrays( nums: List[int]) -> int:\n    ans = len(nums)\n    st = [[inf, 0]]  # \u65e0\u7a77\u5927\u54e8\u5175\n    for x in nums:\n        while x > st[-1][0]:\n            st.pop()\n        if x == st[-1][0]:\n            ans += st[-1][1]\n            st[-1][1] += 1\n        else:\n            st.append([x, 1])\n    return ans", "target_Lan": "python###numberOfSubarrays.py", "target_code_shell": "from typing import List\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(numberOfSubarrays([1,2,3,4,5]))\n    print(numberOfSubarrays([5,4,3,2,1]))\n    print(numberOfSubarrays([1,1,1,1,1]))\n    print(numberOfSubarrays([10,20,30,40,50]))\n    print(numberOfSubarrays([5,5,5,5,5]))"}, {"source_Lan": "java###paintWalls_Test.java", "source_code": "    public static int paintWalls(int[] cost, int[] time) {\n        int n = cost.length;\n        int[] f = new int[n * 2 + 1];\n        Arrays.fill(f, Integer.MAX_VALUE / 2);\n        f[n] = 0;\n        for (int i = 0; i < n; ++i) {\n            int[] g = new int[n * 2 + 1];\n            Arrays.fill(g, Integer.MAX_VALUE / 2);\n            for (int j = 0; j <= n * 2; ++j) {\n                \n                g[Math.min(j + time[i], n * 2)] = Math.min(g[Math.min(j + time[i], n * 2)], f[j] + cost[i]);\n                \n                if (j > 0) {\n                    g[j - 1] = Math.min(g[j - 1], f[j]);\n                }\n            }\n            f = g;\n        }\n        int ans = f[n];\n        for (int i = n + 1; i <= n * 2; i++) {\n            ans = Math.min(ans, f[i]);\n        }\n        return ans;\n    }", "trans_code": "def paint_walls ( cost , time ) :\n    n = len ( cost )\n    f = [ 0 ] * ( n * 2 + 1 )\n    f [ n ] = 0\n    for i in range ( n ) :\n        g = [ 0 ] * ( n * 2 + 1 )\n        for j in range ( 0 , n * 2 + 1 ) :\n            g [ min ( j + time [ i ] , n * 2 ) ] = min ( g [ min ( j + time [ i ] , n * 2 ) ] , f [ j ] + cost [ i ] )\n            if j > 0 :\n                g [ j - 1 ] = min ( g [ j - 1 ] , f [ j ] )\n        f = g\n    ans = f [ n ]\n    for i in range ( n + 1 , n * 2 + 1 ) :\n        ans = min ( ans , f [ i ] )\n    return ans\n", "reference_code": "def paintWalls( cost: List[int], time: List[int]) -> int:\n    n = len(cost)\n    f = [inf] * (n * 2 + 1)\n    f[n] = 0\n    for (cost_i, time_i) in zip(cost, time):\n        g = [inf] * (n * 2 + 1)\n        for j in range(n * 2 + 1):\n            # \u4ed8\u8d39\n            g[min(j + time_i, n * 2)] = min(g[min(j + time_i, n * 2)], f[j] + cost_i)\n            # \u514d\u8d39\n            if j > 0:\n                g[j - 1] = min(g[j - 1], f[j])\n        f = g\n    return min(f[n:])", "target_Lan": "python###paintWalls.py", "target_code_shell": "from typing import List\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(paintWalls([1,2,3], [1,2,3]))\n    print(paintWalls([10,20,30], [2,3,4]))\n    print(paintWalls([100,200,300], [1,2,3]))\n    print(paintWalls([5,10,15], [3,2,1]))\n    print(paintWalls([1000,2000,3000], [4,3,2]))"}, {"source_Lan": "java###totalCost_Test.java", "source_code": "    public static long totalCost(int[] costs, int k, int candidates) {\n        int n = costs.length;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);\n        int left = candidates - 1, right = n - candidates;\n        if (left + 1 < right) {\n            for (int i = 0; i <= left; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n            for (int i = right; i < n; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n        } else {\n            for (int i = 0; i < n; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < k; ++i) {\n            int[] arr = pq.poll();\n            int cost = arr[0], id = arr[1];\n            ans += cost;\n            if (left + 1 < right) {\n                if (id <= left) {\n                    ++left;\n                    pq.offer(new int[]{costs[left], left});\n                } else {\n                    --right;\n                    pq.offer(new int[]{costs[right], right});\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def total_cost ( costs , k , candidates ) :\n    n = len ( costs )\n    pq = PriorityQueue ( ( a , b ) for a , b in zip ( costs , candidates ) )\n    left , right = candidates - 1 , n - candidates\n    if left + 1 < right :\n        for i in range ( 0 , left + 1 ) :\n            pq.put ( ( costs [ i ] , i ) )\n        for i in range ( right , n ) :\n            pq.put ( ( costs [ i ] , i ) )\n    else :\n        for i in range ( n ) :\n            pq.put ( ( costs [ i ] , i ) )\n    ans = 0\n    for i in range ( k ) :\n        arr = pq.get ( )\n        cost , id = arr [ 0 ] , arr [ 1 ]\n        ans += cost\n        if left + 1 < right :\n            if id <= left :\n                yield ( costs [ left ] , left )\n            else :\n                yield ( costs [ right ] , right )\n", "reference_code": "def totalCost( costs: List[int], k: int, candidates: int) -> int:\n    n = len(costs)\n    q = list()\n    left, right = candidates - 1, n - candidates\n    if left + 1 < right:\n        for i in range(left + 1):\n            heappush(q, (costs[i], i))\n        for i in range(right, n):\n            heappush(q, (costs[i], i))\n    else:\n        for i in range(n):\n            heappush(q, (costs[i], i))\n    ans = 0\n    for _ in range(k):\n        cost, idx = heappop(q)\n        ans += cost\n        if left + 1 < right:\n            if idx <= left:\n                left += 1\n                heappush(q, (costs[left], left))\n            else:\n                right -= 1\n                heappush(q, (costs[right], right))\n    return ans", "target_Lan": "python###totalCost.py", "target_code_shell": "from typing import List\nfrom heapq import heappush, heappop\n# TOFILL\nif __name__ == \"__main__\":\n    print(totalCost([1,2,3,4,5], 2, 2))\n    print(totalCost([5,4,3,2,1], 3, 1))\n    print(totalCost([10,20,30,40,50], 4, 3))\n    print(totalCost([100,200,300,400,500], 5, 4))\n    print(totalCost([1000,2000,3000,4000,5000], 1, 5))"}, {"source_Lan": "java###countTestedDevices_Test.java", "source_code": "    public static int countTestedDevices(int[] batteryPercentages) {\n        int n = batteryPercentages.length;\n        int need = 0;\n        for (int i = 0; i < n; i++) {\n            if (batteryPercentages[i] > 0) {\n                need++;\n                for (int j = i + 1; j < n; j++) {\n                    batteryPercentages[j] = Math.max(batteryPercentages[j] - 1, 0);\n                }\n            }\n        }\n        return need;\n    }", "trans_code": "def count_tested_devices ( battery_percentages ) :\n    n = len ( battery_percentages )\n    need = 0\n    for i in range ( n ) :\n        if battery_percentages [ i ] > 0 :\n            need += 1\n            for j in range ( i + 1 , n ) :\n                battery_percentages [ j ] = max ( battery_percentages [ j ] - 1 , 0 )\n    return need\n", "reference_code": "def countTestedDevices( batteryPercentages: List[int]) -> int:\n    n = len(batteryPercentages)\n    need = 0\n    for i in range(n):\n        if batteryPercentages[i] > 0:\n            need += 1\n            for j in range(i + 1, n):\n                batteryPercentages[j] = max(batteryPercentages[j] - 1, 0)\n    return need", "target_Lan": "python###countTestedDevices.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(countTestedDevices([100, 90, 80, 70, 60, 50]))\n    print(countTestedDevices([0, 0, 0, 0, 0, 0]))\n    print(countTestedDevices([100, 100, 100, 100, 100, 100]))\n    print(countTestedDevices([50, 50, 50, 50, 50, 50]))\n    print(countTestedDevices([10, 20, 30, 40, 50, 60]))"}, {"source_Lan": "java###kSum_Test.java", "source_code": "    public static long kSum(int[] nums, int k) {\n        int n = nums.length;\n        long total = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] >= 0) {\n                total += nums[i];\n            } else {\n                nums[i] = -nums[i];\n            }\n        }\n        Arrays.sort(nums);\n        long ret = 0;\n        PriorityQueue<long[]> pq = new PriorityQueue<long[]>((a, b) -> Long.compare(a[0], b[0]));\n        pq.offer(new long[]{nums[0], 0});\n        for (int j = 2; j <= k; j++) {\n            long[] arr = pq.poll();\n            long t = arr[0];\n            int i = (int) arr[1];\n            ret = t;\n            if (i == n - 1) {\n                continue;\n            }\n            pq.offer(new long[]{t + nums[i + 1], i + 1});\n            pq.offer(new long[]{t - nums[i] + nums[i + 1], i + 1});\n        }\n        return total - ret;\n    }", "trans_code": "def kSum ( nums , k ) :\n    n = len ( nums )\n    total = 0\n    for i in range ( n ) :\n        if nums [ i ] >= 0 :\n            total += nums [ i ]\n        else :\n            nums [ i ] = - nums [ i ]\n    nums.sort ( )\n    ret = 0\n    pq = PriorityQueue ( ( lambda a , b : cmp ( a [ 0 ] , b [ 0 ] ) ) )\n    pq.put ( [ nums [ 0 ] , 0 ] )\n    for j in range ( 2 , k + 1 ) :\n        arr = pq.get ( )\n        t = arr [ 0 ]\n        i = int ( arr [ 1 ] )\n        ret = t\n        if i == n - 1 :\n            continue\n        pq.put ( [ t + nums [ i + 1 ] , i + 1 ] )\n        pq.put ( [ t - nums [ i ] + nums [ i + 1 ] , i + 1 ] )\n    return total - ret\n", "reference_code": "def kSum( nums: List[int], k: int) -> int:\n    n = len(nums)\n    total = 0\n    for i in range(n):\n        if nums[i] >= 0:\n            total += nums[i]\n        else:\n            nums[i] = -nums[i]\n    nums.sort()\n    ret = 0\n    pq = [(nums[0], 0)]\n    for j in range(2, k + 1):\n        t, i = heappop(pq)\n        ret = t\n        if i == n - 1:\n            continue\n        heappush(pq, (t + nums[i + 1], i + 1))\n        heappush(pq, (t - nums[i] + nums[i + 1], i + 1))\n    return total - ret", "target_Lan": "python###kSum.py", "target_code_shell": "from typing import List\nfrom heapq import heappop, heappush\n# TOFILL\nif __name__ == \"__main__\":\n    print(kSum([1,2,3,4,5], 2))\n    print(kSum([-1,-2,-3,-4,-5], 3))\n    print(kSum([0,0,0,0,0], 1))\n    print(kSum([1000000000,1000000000,1000000000,1000000000,1000000000], 4))\n    print(kSum([-1000000000,-1000000000,-1000000000,-1000000000,-1000000000], 5))"}, {"source_Lan": "java###maxResult_Test.java", "source_code": "    public static int maxResult(int[] nums, int k) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        dp[0] = nums[0];\n        Deque<Integer> queue = new ArrayDeque<>();\n        queue.offerLast(0);\n        for (int i = 1; i < n; i++) {\n            while (queue.peekFirst() < i - k) {\n                queue.pollFirst();\n            }\n            dp[i] = dp[queue.peekFirst()] + nums[i];\n            while (!queue.isEmpty() && dp[queue.peekLast()] <= dp[i]) {\n                queue.pollLast();\n            }\n            queue.offerLast(i);\n        }\n        return dp[n - 1];\n    }", "trans_code": "def max_result ( nums , k ) :\n    n = len ( nums )\n    dp = [ 0 ] * n\n    queue = deque ( )\n    queue.append ( 0 )\n    for i in range ( 1 , n ) :\n        while queue.popleft ( ) < i - k :\n            queue.append ( 0 )\n        dp [ i ] = dp [ queue.popleft ( ) ] + nums [ i ]\n        while not queue.empty ( ) and dp [ queue.popleft ( ) ] <= dp [ i ] :\n            queue.pop ( )\n        queue.append ( i )\n    return dp [ n - 1 ]\n", "reference_code": "def maxResult( nums: List[int], k: int) -> int:\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    queue = deque([0])\n    for i in range(1, n):\n        while queue and queue[0] < i - k:\n            queue.popleft()\n        dp[i] = dp[queue[0]] + nums[i]\n        while queue and dp[queue[-1]] <= dp[i]:\n            queue.pop()\n        queue.append(i)\n    return dp[n - 1]", "target_Lan": "python###maxResult.py", "target_code_shell": "from typing import List\nfrom collections import deque\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxResult([10, -20, -5], 2))\n    print(maxResult([100, 100, 10, 10, 100, 100], 3))\n    print(maxResult([-10, -20, -30, -40], 2))\n    print(maxResult([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(maxResult([100, 90, 80, 70, 60, 50, 40, 30, 20, 10], 3))"}, {"source_Lan": "java###maximumStrength_Test.java", "source_code": "    public static long maximumStrength(int[] nums, int k) {\n        int n=nums.length;\n        long ans[][][]=new long[n+1][k+1][2];\n        for(int j=0;j<=k;j++){ans[0][j]=new long[]{-(long)1e18,-(long)1e18};}\n        ans[0][0][0]=0;\n        for(int i=1;i<=n;i++){\n            ans[i][0][1]=-(long)1e14;\n            for(int j=1;j<=k;j++){\n                ans[i][j][0]=Math.max(ans[i-1][j][0],ans[i-1][j][1]);\n                ans[i][j][1]=Math.max(ans[i-1][j-1][1],Math.max(ans[i-1][j-1][0],ans[i-1][j][1]))+(long)nums[i-1]*(j%2*2-1)*(k+1-j);\n            }\n        }\n        return Math.max(ans[n][k][0],ans[n][k][1]);\n    }", "trans_code": "def maximum_strength ( nums , k ) :\n    n = len ( nums )\n    ans = [ [ - float ( 1e18 ) , - float ( 1e18 ) ] ]\n    ans [ 0 ] [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        ans [ i ] [ 0 ] = - float ( 1e14 )\n        for j in range ( 1 , k + 1 ) :\n            ans [ i ] [ j ] [ 0 ] = max ( ans [ i - 1 ] [ j ] [ 0 ] , ans [ i - 1 ] [ j ] [ 1 ] )\n            ans [ i ] [ j ] [ 1 ] = max ( ans [ i - 1 ] [ j - 1 ] [ 1 ] , max ( ans [ i - 1 ] [ j - 1 ] [ 0 ] , ans [ i - 1 ] [ j ] [ 1 ] ) ) + float ( nums [ i - 1 ] ) * ( j % 2 ** 2 - 1 ) * ( k + 1 - j )\n    return max ( ans [ n ] [ k ] [ 0 ] , ans [ n ] [ k ] [ 1 ] )\n", "reference_code": "def maximumStrength( nums: List[int], k: int) -> int:\n    n = len(nums)\n    s = list(accumulate(nums, initial=0))\n    f = [[0] * (n + 1) for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        f[i][i - 1] = mx = -inf\n        w = (k - i + 1) * (1 if i % 2 else -1)\n        # j \u4e0d\u80fd\u592a\u5c0f\u4e5f\u4e0d\u80fd\u592a\u5927\uff0c\u8981\u7ed9\u524d\u9762\u7559 i-1 \u4e2a\u6570\uff0c\u540e\u9762\u7559 k-i \u4e2a\u6570\n        for j in range(i, n - k + i + 1):\n            mx = max(mx, f[i - 1][j - 1] - s[j - 1] * w)\n            f[i][j] = max(f[i][j - 1], s[j] * w + mx)\n    return f[k][n]", "target_Lan": "python###maximumStrength.py", "target_code_shell": "from typing import List\nfrom itertools import accumulate\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumStrength([], 0))\n    print(maximumStrength([1, -1, 2, -2], 2))\n    print(maximumStrength([-1, -2, -3], 1))\n    print(maximumStrength([5, 10, 15], 3))\n    print(maximumStrength([-5, -10, 10, 5], 2))"}, {"source_Lan": "java###countSubstrings_Test.java", "source_code": "    public static long countSubstrings(String s, char c) {\n        long k = s.chars().filter(ch -> ch == c).count();\n        return k * (k + 1) / 2;\n    }", "trans_code": "def count_substrings ( s , char ) :\n    k = len ( s.chars )\n    return k * ( k + 1 ) / 2\n", "reference_code": "def countSubstrings( s: str, c: str) -> int:\n    return comb(s.count(c) + 1, 2)", "target_Lan": "python###countSubstrings.py", "target_code_shell": "from math import comb\n# TOFILL\nif __name__ == \"__main__\":\n    print(countSubstrings(\"\", 'a'))\n    print(countSubstrings(\"hello\", 'a'))\n    print(countSubstrings(\"aaa\", 'a'))\n    print(countSubstrings(\"abacadae\", 'a'))\n    print(countSubstrings(\"b\", 'b'))"}, {"source_Lan": "java###MinSize_Test.java", "source_code": "    public static int MinSize(int[] A, int n) {\n        \n        \n        int curr = A[0];\n        int count = 1;\n        for (int i = 1; i < n; ++i) {\n            if (A[i] == curr) {\n                count += 1;\n            } else {\n                count -= 1;\n                if (count == 0) {\n                    curr = A[i];\n                    count = 1;\n                }\n            }\n        }\n        int max_f = 0;\n        for (int i = 0; i < n; i++) {\n            if (curr == A[i]) {\n                max_f++;\n            }\n        }\n        if (max_f <= (n + 1) / 2) {\n            return n & 1;\n        } else {\n            return 2 * max_f - n;\n        }\n    }", "trans_code": "def MinSize ( A , n ) :\n    curr = A [ 0 ]\n    count = 1\n    for i in range ( 1 , n ) :\n        if A [ i ] == curr :\n            count += 1\n        else :\n            count -= 1\n            if count == 0 :\n                curr = A [ i ]\n                count = 1\n    max_f = 0\n    for i in range ( n ) :\n        if curr == A [ i ] : max_f += 1\n    if max_f <= ( n + 1 ) / 2 :\n        return n & 1\n    else :\n        return 2 * max_f - n\n", "reference_code": "def MinSize(A: List[int], n: int) -> int:\n    #find majority element which may occur more than n/2 (Boyer-Moore Majority Voting Algorithm)\n    curr = A[0]\n    count = 1\n    for i in range(1, n):\n        if A[i] == curr:\n            count += 1\n        else:\n            count -= 1\n            if count == 0:\n                curr = A[i]\n                count = 1\n    max_f = A.count(curr)\n    if max_f <= (n + 1) // 2:\n        return n & 1\n    else:\n        return 2 * max_f - n", "target_Lan": "python###MinSize.py", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(MinSize([1, 1, 2, 2, 3], 5))\n    print(MinSize([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n    print(MinSize([1, 2, 2], 3))\n    print(MinSize([1, 1, 1, 1, 2, 2, 3, 3], 8))\n    print(MinSize([1, 1, 1, 2, 2, 2, 2], 7))"}, {"source_Lan": "java###minimumAddedCoins_Test.java", "source_code": "public static int minimumAddedCoins(int[] coins, int target) {\n        Arrays.sort(coins);\n        int ans = 0;\n        int x = 1;\n        int length = coins.length, index = 0;\n        while (x <= target) {\n            if (index < length && coins[index] <= x) {\n                x += coins[index];\n                index++;\n            } else {\n                x *= 2;\n                ans++;\n            }\n        }\n        return ans;\n    }", "trans_code": "def minimum_added_coins ( coins , target ) :\n    coins.sort ( )\n    ans = 0\n    x = 1\n    length , index = len ( coins ) , 0\n    while x <= target :\n        if index < length and coins [ index ] <= x :\n            x += coins [ index ]\n            index += 1\n        else :\n            x *= 2\n            ans += 1\n    return ans\n", "reference_code": "def minimumAddedCoins( coins: List[int], target: int) -> int:\n        coins.sort()\n        ans, x = 0, 1\n        length, index = len(coins), 0\n        while x <= target:\n            if index < length and coins[index] <= x:\n                x += coins[index]\n                index += 1\n            else:\n                x <<= 1\n                ans += 1\n        return ans", "target_Lan": "python###minimumAddedCoins.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumAddedCoins([1, 2, 5], 8))\n    print(minimumAddedCoins([1, 1, 1, 1], 10))\n    print(minimumAddedCoins([], 5))\n    print(minimumAddedCoins([2, 3, 4], 16))\n    print(minimumAddedCoins([5], -1))"}, {"source_Lan": "java###findPeakGrid_Test.java", "source_code": "public static int[] findPeakGrid(int[][] mat) {\n        int m = mat.length, n = mat[0].length;\n        int low = 0, high = m - 1;\n        while (low <= high) {\n            int i = (low + high) / 2;\n            int j = -1, maxElement = -1;\n            for (int k = 0; k < n; k++) {\n                if (mat[i][k] > maxElement) {\n                    j = k;\n                    maxElement = mat[i][k];\n                }\n            }\n            if (i - 1 >= 0 && mat[i][j] < mat[i - 1][j]) {\n                high = i - 1;\n                continue;\n            }\n            if (i + 1 < m && mat[i][j] < mat[i + 1][j]) {\n                low = i + 1;\n                continue;\n            }\n            return new int[]{i, j};\n        }\n        return new int[0]; \n    }", "trans_code": "def findPeakGrid ( mat ) :\n    m , n = len ( mat ) , len ( mat [ 0 ] )\n    low , high = 0 , m - 1\n    while low <= high :\n        i = ( low + high ) // 2\n        j , maxElement = - 1 , - 1\n        for k in range ( n ) :\n            if mat [ i ] [ k ] > maxElement :\n                j = k\n                maxElement = mat [ i ] [ k ]\n        if i - 1 >= 0 and mat [ i ] [ j ] < mat [ i - 1 ] [ j ] :\n            high = i - 1\n            continue\n        if i + 1 < m and mat [ i ] [ j ] < mat [ i + 1 ] [ j ] :\n            low = i + 1\n            continue\n        return [ i , j ]\n", "reference_code": "def findPeakGrid( mat: List[List[int]]) -> List[int]:\n       m = len(mat)\n       low, high = 0, m - 1\n       while low <= high:\n           i = (low + high) // 2\n           j = mat[i].index(max(mat[i]))\n           if i - 1 >= 0 and mat[i][j] < mat[i - 1][j]:\n               high = i - 1\n               continue\n           if i + 1 < m and mat[i][j] < mat[i + 1][j]:\n               low = i + 1\n               continue\n           return [i, j]\n       return None # impossible", "target_Lan": "python###findPeakGrid.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findPeakGrid([[1]]))\n    print(findPeakGrid([[1, 2, 3], [5, 6, 4], [7, 8, 9]]))\n    print(findPeakGrid([[10, 20, 15], [21, 22, 14], [7, 16, 3]]))\n    print(findPeakGrid([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]))\n    print(findPeakGrid([[1, 2, 1], [4, 5, 6], [1, 2, 1]]))"}, {"source_Lan": "java###maximumSumOfHeights_Test.java", "source_code": "    public static long maximumSumOfHeights(List<Integer> maxHeights) {\n        int n = maxHeights.size();\n        long res = 0;\n        long[] prefix = new long[n];\n        long[] suffix = new long[n];\n        Deque<Integer> stack1 = new ArrayDeque<Integer>();\n        Deque<Integer> stack2 = new ArrayDeque<Integer>();\n        for (int i = 0; i < n; i++) {\n            while (!stack1.isEmpty() && maxHeights.get(i) < maxHeights.get(stack1.peek())) {\n                stack1.pop();\n            }\n            if (stack1.isEmpty()) {\n                prefix[i] = (long) (i + 1) * maxHeights.get(i);\n            } else {\n                prefix[i] = prefix[stack1.peek()] + (long) (i - stack1.peek()) * maxHeights.get(i);\n            }\n            stack1.push(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            while (!stack2.isEmpty() && maxHeights.get(i) < maxHeights.get(stack2.peek())) {\n                stack2.pop();\n            }\n            if (stack2.isEmpty()) {\n                suffix[i] = (long) (n - i) * maxHeights.get(i);\n            } else {\n                suffix[i] = suffix[stack2.peek()] + (long) (stack2.peek() - i) * maxHeights.get(i);\n            }\n            stack2.push(i);\n            res = Math.max(res, prefix[i] + suffix[i] - maxHeights.get(i));\n        }\n        return res;\n    }", "trans_code": "def maximum_sum_of_heights ( max_heights ) :\n    n = len ( max_heights )\n    res = 0\n    prefix = [ 0 ] * n\n    suffix = [ 0 ] * n\n    stack1 = deque ( )\n    stack2 = deque ( )\n    for i in range ( n ) :\n        while not stack1.empty ( ) and max_heights [ i ] < max_heights [ stack1.pop ( ) ] :\n            stack1.pop ( )\n        if stack1.empty ( ) :\n            prefix [ i ] = int ( i + 1 ) * max_heights [ i ]\n        else :\n            prefix [ i ] = prefix [ stack1.pop ( ) ] + int ( i - stack1.pop ( ) ) * max_heights [ i ]\n        stack1.append ( i )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        while not stack2.empty ( ) and max_heights [ i ] < max_heights [ stack2.pop ( ) ] :\n            stack2.pop ( )\n        if stack2.empty ( ) :\n            suffix [ i ] = int ( n - i ) * max_heights [ i ]\n        else :\n            suffix [ i ] = suffix [ stack2.pop ( ) ] + int ( stack2.pop ( ) - i ) * max_heights [ i ]\n        stack2.append ( i )\n        res = max ( res , prefix [ i ] + suffix [ i ] - max_heights [ i ] )\n    return res\n", "reference_code": "def maximumSumOfHeights( maxHeights: List[int]) -> int:\n        n = len(maxHeights)\n        res = 0\n        prefix, suffix = [0] * n, [0] * n\n        stack1, stack2 = [], []\n        for i in range(n):\n            while len(stack1) > 0 and maxHeights[i] < maxHeights[stack1[-1]]:\n                stack1.pop()\n            if len(stack1) == 0:\n                prefix[i] = (i + 1) * maxHeights[i]\n            else:\n                prefix[i] = prefix[stack1[-1]] + (i - stack1[-1]) * maxHeights[i]\n            stack1.append(i)\n        for i in range(n - 1, -1, -1):\n            while len(stack2) > 0 and maxHeights[i] < maxHeights[stack2[-1]]:\n                stack2.pop()\n            if len(stack2) == 0:\n                suffix[i] = (n - i) * maxHeights[i]\n            else:\n                suffix[i] = suffix[stack2[-1]] + (stack2[-1] - i) * maxHeights[i]\n            stack2.append(i)\n            res = max(res, prefix[i] + suffix[i] - maxHeights[i])\n        return res", "target_Lan": "python###maximumSumOfHeights.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumSumOfHeights([]))  \n    print(maximumSumOfHeights([1]))  \n    print(maximumSumOfHeights([2, 1, 5, 6, 2, 3]))  \n    print(maximumSumOfHeights([1, 3, 2, 5, 4]))  \n    print(maximumSumOfHeights([2**31-1, 1, 2**31-1]))"}, {"source_Lan": "java###isAcronym_Test.java", "source_code": "public static boolean isAcronym(List<String> words, String s) {\n        if (words.size() != s.length()) {\n            return false;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (words.get(i).charAt(0) != s.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }", "trans_code": "def is_acronym ( words , s ) :\n    if len ( words ) != len ( s ) :\n        return False\n    for word in words :\n        if word [ 0 ] != s [ 0 ] :\n            return False\n    return True\n", "reference_code": "def isAcronym( words: List[str], s: str) -> bool:\n        return len(words) == len(s) and all(words[i][0] == s[i] for i in range(len(s)))", "target_Lan": "python###isAcronym.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(isAcronym([], \"\"))\n    print(isAcronym([\"apple\", \"banana\"], \"\"))\n    print(isAcronym([\"apple\", \"banana\"], \"ab\"))\n    print(isAcronym([\"apple\", \"banana\"], \"ab\"))\n    print(isAcronym([\"apple\", \"banana\"], \"ac\"))"}, {"source_Lan": "java###possibleToStamp_Test.java", "source_code": "    public static boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {\n        int m = grid.length, n = grid[0].length;\n        int[][] sum = new int[m + 2][n + 2];\n        int[][] diff = new int[m + 2][n + 2];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + grid[i - 1][j - 1];\n            }\n        }\n        for (int i = 1; i + stampHeight - 1 <= m; i++) {\n            for (int j = 1; j + stampWidth - 1 <= n; j++) {\n                int x = i + stampHeight - 1;\n                int y = j + stampWidth - 1;\n                if (sum[x][y] - sum[x][j - 1] - sum[i - 1][y] + sum[i - 1][j - 1] == 0) {\n                    diff[i][j]++;\n                    diff[i][y + 1]--;\n                    diff[x + 1][j]--;\n                    diff[x + 1][y + 1]++;\n                }\n            }\n        }\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n                if (diff[i][j] == 0 && grid[i - 1][j - 1] == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "trans_code": "def possible_to_stamp ( grid , stamp_height , stamp_width ) :\n    m , n = len ( grid ) , len ( grid [ 0 ] )\n    sum = np.zeros ( ( m + 2 , n + 2 ) )\n    diff = np.zeros ( ( m + 2 , n + 2 ) )\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            sum [ i ] [ j ] = sum [ i - 1 ] [ j ] + sum [ i ] [ j - 1 ] - sum [ i - 1 ] [ j - 1 ] + grid [ i - 1 ] [ j - 1 ]\n    for i in range ( 1 , m + stamp_height - 1 <= m ) :\n        for j in range ( 1 , n + stamp_width - 1 <= n ) :\n            x = i + stamp_height - 1\n            y = j + stamp_width - 1\n            if sum [ x ] [ y ] - sum [ x ] [ j - 1 ] - sum [ i - 1 ] [ y ] + sum [ i - 1 ] [ j - 1 ] == 0 :\n                diff [ i ] [ j ] += 1\n                diff [ i ] [ y + 1 ] -= 1\n                diff [ x + 1 ] [ j ] -= 1\n                diff [ x + 1 ] [ y + 1 ] += 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            diff [ i ] [ j ] += diff [ i - 1 ] [ j ] + diff [ i ] [ j - 1 ] - diff [ i - 1 ] [ j - 1 ]\n            if diff [ i ] [ j ] == 0 and grid [ i - 1 ] [ j - 1 ] == 0 :\n                return False\n    return True\n", "reference_code": "def possibleToStamp( grid: List[List[int]], stampHeight: int, stampWidth: int) -> bool:\n        m, n = len(grid), len(grid[0])\n        psum = [[0] * (n + 2) for _ in range(m + 2)]\n        diff = [[0] * (n + 2) for _ in range(m + 2)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                psum[i][j] = psum[i - 1][j] + psum[i][j - 1] - psum[i - 1][j - 1] + grid[i - 1][j - 1]\n        for i in range(1, m + 2 - stampHeight):\n            for j in range(1, n + 2 - stampWidth):\n                x = i + stampHeight - 1\n                y = j + stampWidth - 1\n                if psum[x][y] - psum[x][j - 1] - psum[i - 1][y] + psum[i - 1][j - 1] == 0:\n                    diff[i][j] += 1\n                    diff[i][y + 1] -= 1\n                    diff[x + 1][j] -= 1\n                    diff[x + 1][y + 1] += 1\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1]\n                if diff[i][j] == 0 and grid[i - 1][j - 1] == 0:\n                    return False\n        return True", "target_Lan": "python###possibleToStamp.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(possibleToStamp([[0]], 1, 1))  \n    print(possibleToStamp([[0, 0], [0, 0]], 2, 2))  \n    print(possibleToStamp([[0, 1], [0, 0]], 1, 2))  \n    print(possibleToStamp([[1, 0, 0], [0, 1, 0], [0, 0, 0]], 1, 1))  \n    print(possibleToStamp([[0, 0, 0, 0], [0, 0, 0, 0]], 2, 3))"}, {"source_Lan": "java###makeSmallestPalindrome_Test.java", "source_code": "    public static String makeSmallestPalindrome(String s) {\n        char[] arr = s.toCharArray();\n        int left = 0, right = arr.length - 1;\n        while (left < right) {\n            if (arr[left] != arr[right]) {\n                arr[left] = arr[right] = (char) Math.min(arr[left], arr[right]);\n            }\n            ++left;\n            --right;\n        }\n        return new String(arr);\n    }", "trans_code": "def makeSmallestPalindrome ( s ) :\n    arr = s.split ( )\n    left , right = 0 , len ( arr ) - 1\n    while left < right :\n        if arr [ left ] != arr [ right ] :\n            arr [ left ] , arr [ right ] = ( min ( arr [ left ] , arr [ right ] ) , max ( arr [ left ] , arr [ right ] ) )\n        left += 1\n        right -= 1\n    return ''.join ( arr )\n", "reference_code": "def makeSmallestPalindrome( s: str) -> str:\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            if s[left] != s[right]:\n                s[left] = s[right] = min(s[left], s[right])\n            left += 1\n            right -= 1\n        return \"\".join(s)", "target_Lan": "python###makeSmallestPalindrome.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(makeSmallestPalindrome(\"\"))\n    print(makeSmallestPalindrome(\"a\"))\n    print(makeSmallestPalindrome(\"aa\"))\n    print(makeSmallestPalindrome(\"ab\"))\n    print(makeSmallestPalindrome(\"abc\"))"}, {"source_Lan": "java###secondGreaterElement_Test.java", "source_code": "    public static int[] secondGreaterElement(int[] nums) {\n        int[] res = new int[nums.length];\n        Arrays.fill(res, -1);\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n        for (int i = 0; i < nums.length; ++i) {\n            while (!pq.isEmpty() && pq.peek()[0] < nums[i]) {\n                res[pq.poll()[1]] = nums[i];\n            }\n            while (!stack.isEmpty() && nums[stack.peek()] < nums[i]) {\n                pq.offer(new int[]{nums[stack.peek()], stack.peek()});\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        return res;\n    }", "trans_code": "def second_greater_element ( nums ) :\n    res = [ - 1 ]\n    stack = deque ( )\n    pq = PriorityQueue ( ( a , b ) for a , b in zip ( nums , stack ) )\n    for i in range ( len ( nums ) ) :\n        while not pq.empty ( ) and pq.get ( ) [ 0 ] < nums [ i ] :\n            res [ pq.get ( ) [ 1 ] ] = nums [ i ]\n        while not stack.empty ( ) and nums [ stack.pop ( ) ] < nums [ i ] :\n            pq.put ( [ nums [ stack.pop ( ) ] , stack.pop ( ) ] )\n            stack.pop ( )\n        stack.append ( i )\n    return res\n", "reference_code": "def secondGreaterElement( nums: List[int]) -> List[int]:\n    res = [-1] * len(nums)\n    stack = []\n    q = []\n    for i in range(len(nums)):\n        while len(q) and q[0][0] < nums[i]:\n            res[q[0][1]] = nums[i]\n            heappop(q)\n        while len(stack) and nums[stack[-1]] < nums[i]:\n            heappush(q, (nums[stack[-1]], stack[-1]))\n            stack.pop()\n        stack.append(i)\n    return res", "target_Lan": "python###secondGreaterElement.py", "target_code_shell": "from typing import List\nfrom heapq import heappop, heappush\n# TOFILL\nif __name__ == \"__main__\":\n    print(secondGreaterElement([]))\n    print(secondGreaterElement([5]))\n    print(secondGreaterElement([4, 1, 2, 3, 5]))\n    print(secondGreaterElement([5, 4, 3, 2, 1]))\n    print(secondGreaterElement([1, 1, 1, 1, 1]))"}, {"source_Lan": "java###maxTaxiEarnings_Test.java", "source_code": "    public static long maxTaxiEarnings(int n, int[][] rides) {\n        long[] dp = new long[n + 1];\n        Map<Integer, List<int[]>> rideMap = new HashMap<Integer, List<int[]>>();\n        for (int[] ride : rides) {\n            rideMap.putIfAbsent(ride[1], new ArrayList<int[]>());\n            rideMap.get(ride[1]).add(ride);\n        }\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i - 1];\n            for (int[] ride : rideMap.getOrDefault(i, new ArrayList<int[]>())) {\n                dp[i] = Math.max(dp[i], dp[ride[0]] + ride[1] - ride[0] + ride[2]);\n            }\n        }\n        return dp[n];\n    }", "trans_code": "def maxTaxiEarnings ( n , rides ) :\n    dp = [ 0 ] * ( n + 1 )\n    rideDict = { }\n    for ride in rides :\n        rideDict.setdefault ( ride [ 1 ] , [ ] ).append ( ride )\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] = dp [ i - 1 ]\n        for ride in rideDict.get ( i , [ ] ) :\n            dp [ i ] = max ( dp [ i ] , dp [ ride [ 0 ] ] + ride [ 1 ] - ride [ 0 ] + ride [ 2 ] )\n    return dp [ n ]\n", "reference_code": "def maxTaxiEarnings( n: int, rides: List[List[int]]) -> int:\n        dp = [0] * (n + 1)\n        rideMap = {}\n        for ride in rides:\n            if ride[1] not in rideMap:\n                rideMap[ride[1]] = []\n            rideMap[ride[1]].append(ride)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            if i not in rideMap:\n                continue\n            for ride in rideMap[i]:\n                dp[i] = max(dp[i], dp[ride[0]] + ride[1] - ride[0] + ride[2])\n        return dp[n]", "target_Lan": "python###maxTaxiEarnings.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxTaxiEarnings(5, [[1, 2, 10], [2, 3, 10], [3, 5, 10]]))\n    print(maxTaxiEarnings(5, [[1, 5, 20]]))\n    print(maxTaxiEarnings(5, [[1, 2, 5], [2, 3, 5], [3, 4, 5], [4, 5, 5]]))\n    print(maxTaxiEarnings(5, [[1, 2, -5], [2, 3, -5], [3, 4, -5]]))\n    print(maxTaxiEarnings(5, [[1, 2, 1000000000], [2, 5, 1000000000]]))"}, {"source_Lan": "java###carPooling_Test.java", "source_code": "public static boolean carPooling(int[][] trips, int capacity) {\n        int toMax = 0;\n        for (int[] trip : trips) {\n            toMax = Math.max(toMax, trip[2]);\n        }\n        int[] diff = new int[toMax + 1];\n        for (int[] trip : trips) {\n            diff[trip[1]] += trip[0];\n            diff[trip[2]] -= trip[0];\n        }\n        int count = 0;\n        for (int i = 0; i <= toMax; ++i) {\n            count += diff[i];\n            if (count > capacity) {\n                return false;\n            }\n        }\n        return true;\n    }", "trans_code": "def carPooling ( trips , capacity ) :\n    to_max = 0\n    for trip in trips :\n        to_max = max ( to_max , trip [ 2 ] )\n    diff = [ trip [ 1 ] for trip in trips ]\n    count = 0\n    for i in range ( 0 , to_max ) :\n        count += diff [ i ]\n        if count > capacity :\n            return False\n    return True\n", "reference_code": "def carPooling( trips: List[List[int]], capacity: int) -> bool:\n        to_max = max(trip[2] for trip in trips)\n        diff = [0] * (to_max + 1)\n        for num_i, from_i, to_i in trips:\n            diff[from_i] += num_i\n            diff[to_i] -= num_i\n        count = 0\n        for i in range(to_max + 1):\n            count += diff[i]\n            if count > capacity:\n                return False\n        return True", "target_Lan": "python###carPooling.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(carPooling([[2, 1, 5], [3, 2, 7]], 5))  \n    print(carPooling([[2, 1, 5], [3, 5, 7]], 5))  \n    print(carPooling([[1, 0, 1], [1, 1, 2], [1, 2, 3]], 3))  \n    print(carPooling([[5, 0, 1], [5, 1, 2], [5, 2, 3]], 10))  \n    print(carPooling([[4, 0, 3], [5, 2, 5]], 6))"}, {"source_Lan": "java###firstCompleteIndex_Test.java", "source_code": "public static int firstCompleteIndex(int[] arr, int[][] mat) {\n        int n = mat.length;\n        int m = mat[0].length;\n        Map<Integer, int[]> map = new HashMap<Integer, int[]>();\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                map.put(mat[i][j], new int[]{i, j});\n            }\n        }\n        int[] rowCnt = new int[n];\n        int[] colCnt = new int[m];\n        for (int i = 0; i < arr.length; ++i) {\n            int[] v = map.get(arr[i]);\n            ++rowCnt[v[0]];\n            if (rowCnt[v[0]] == m) {\n                return i;\n            }\n            ++colCnt[v[1]];\n            if (colCnt[v[1]] == n) {\n                return i;\n            }\n        }\n        return -1;\n    }", "trans_code": "def first_complete_index ( arr , mat ) :\n    n = len ( mat )\n    m = len ( mat [ 0 ] )\n    d = { }\n    for i in range ( n ) :\n        for j in range ( m ) :\n            d [ mat [ i ] [ j ] ] = [ i , j ]\n    row_cnt = [ ]\n    col_cnt = [ ]\n    for i in range ( n ) :\n        v = d [ arr [ i ] ]\n        row_cnt.append ( v [ 0 ] )\n        if row_cnt [ v [ 0 ] ] == m :\n            return i\n        col_cnt.append ( v [ 1 ] )\n        if col_cnt [ v [ 1 ] ] == n :\n            return i\n    return - 1\n", "reference_code": "def firstCompleteIndex( arr: List[int], mat: List[List[int]]) -> int:\n        n, m = len(mat), len(mat[0])\n        mp = {}\n        for i in range(n):\n            for j in range(m):\n                mp[mat[i][j]] = [i, j]\n        rowCnt, colCnt = [0] * n, [0] * m\n        for i in range(len(arr)):\n            v = mp[arr[i]]\n            rowCnt[v[0]] += 1\n            if rowCnt[v[0]] == m:\n                return i\n            colCnt[v[1]] += 1\n            if colCnt[v[1]] == n:\n                return i\n        return -1", "target_Lan": "python###firstCompleteIndex.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(firstCompleteIndex([1, 2, 3, 4, 5], [[1, 2, 3], [4, 5, 6]]))\n    print(firstCompleteIndex([1, 4], [[1, 2], [3, 4]]))\n    print(firstCompleteIndex([1, 2, 3], [[2, 3, 1], [4, 5, 6]]))\n    print(firstCompleteIndex([], [[1, 2], [3, 4]]))\n    print(firstCompleteIndex([5, 1, 2, 3, 4], [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]))"}, {"source_Lan": "java###closeStrings_Test.java", "source_code": "public static boolean closeStrings(String word1, String word2) {\n        int[] count1 = new int[26], count2 = new int[26];\n        for (char c : word1.toCharArray()) {\n            count1[c - 'a']++;\n        }\n        for (char c : word2.toCharArray()) {\n            count2[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count1[i] > 0 && count2[i] == 0 || count1[i] == 0 && count2[i] > 0) {\n                return false;\n            }\n        }\n        Arrays.sort(count1);\n        Arrays.sort(count2);\n        return Arrays.equals(count1, count2);\n    }", "trans_code": "def close_strings ( word1 , word2 ) :\n    count1 , count2 = [ ] , [ ]\n    for c in word1 :\n        count1.append ( c - 'a' )\n    for c in word2 :\n        count2.append ( c - 'a' )\n    for i in range ( 26 ) :\n        if count1 [ i ] > 0 and count2 [ i ] == 0 or count1 [ i ] == 0 and count2 [ i ] > 0 :\n            return False\n    count1.sort ( )\n    count2.sort ( )\n    return len ( count1 ) == len ( count2 )\n", "reference_code": "def closeStrings( word1: str, word2: str) -> bool:\n        return Counter(word1).keys() == Counter(word2).keys() and sorted(Counter(word1).values()) == sorted(Counter(word2).values())", "target_Lan": "python###closeStrings.py", "target_code_shell": "from collections import Counter\n# TOFILL\nif __name__ == \"__main__\":\n    print(closeStrings(\"abc\", \"abc\"))\n    print(closeStrings(\"abc\", \"abcd\"))\n    print(closeStrings(\"abc\", \"def\"))\n    print(closeStrings(\"aabbcc\", \"abcabc\"))\n    print(closeStrings(\"\", \"\"))"}, {"source_Lan": "java###minDeletion_Test.java", "source_code": "public static int minDeletion(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        boolean check = true;\n        for (int i = 0; i + 1 < n; ++i) {\n            if (nums[i] == nums[i + 1] && check) {\n                ++ans;\n            } else {\n                check = !check;\n            }\n        }\n        if ((n - ans) % 2 != 0) {\n            ++ans;\n        }\n        return ans;\n    }", "trans_code": "def min_deletion ( nums ) :\n    n = len ( nums )\n    ans = 0\n    check = True\n    for i in range ( 0 , n ) :\n        if nums [ i ] == nums [ i + 1 ] and check :\n            ans += 1\n        else :\n            check = not check\n    if ( n - ans ) % 2 != 0 :\n        ans += 1\n    return ans\n", "reference_code": "def minDeletion( nums: List[int]) -> int:\n        n = len(nums)\n        ans, check = 0, True\n        for i in range(n - 1):\n            if nums[i] == nums[i + 1] and check:\n                ans += 1\n            else:\n                check = not check\n        if (n - ans) % 2 != 0:\n            ans += 1\n        return ans", "target_Lan": "python###minDeletion.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minDeletion([]))                     \n    print(minDeletion([1]))                    \n    print(minDeletion([1, 2, 1, 2, 1]))       \n    print(minDeletion([1, 1, 1]))              \n    print(minDeletion([1, 2, 2, 3, 3, 3, 4, 4]))"}, {"source_Lan": "java###maximumSum_Test.java", "source_code": "public static int maximumSum(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        int res = -1;\n        for (int i : nums) {\n            int digitsSum = 0;\n            int temp = i;\n            while (temp > 0) {\n                digitsSum += temp % 10;\n                temp /= 10;\n            }\n            if (map.containsKey(digitsSum)) {\n                res = Math.max(res, map.get(digitsSum) + i);\n                map.put(digitsSum, Math.max(map.get(digitsSum), i));\n            } else {\n                map.put(digitsSum, i);\n            }\n        }\n        return res;\n    }", "trans_code": "def maximum_sum ( nums ) :\n    d = { }\n    res = - 1\n    for i in nums :\n        digits_sum = 0\n        temp = i\n        while temp > 0 :\n            digits_sum += temp % 10\n            temp /= 10\n        if d.has_key ( digits_sum ) :\n            res = max ( res , d [ digits_sum ] + i )\n            d [ digits_sum ] = max ( d [ digits_sum ] , i )\n        else :\n            d [ digits_sum ] = i\n    return res\n", "reference_code": "def maximumSum( nums: List[int]) -> int:\n        d = defaultdict(int)\n        res = -1\n        for i in nums:\n            digitsSum = sum(int(c) for c in str(i))\n            if digitsSum in d:\n                res = max(res, d[digitsSum] + i)\n                d[digitsSum] = max(d[digitsSum], i)\n            else:\n                d[digitsSum] = i\n        return res", "target_Lan": "python###maximumSum.py", "target_code_shell": "from collections import defaultdict\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maximumSum([12, 21, 2, 3, 39]))\n    print(maximumSum([13, 31, 4, 1]))\n    print(maximumSum([123, 234, 345]))\n    print(maximumSum([0, 0, 0, 1]))\n    print(maximumSum([2, 5, 8, 14, 23]))"}, {"source_Lan": "java###minPathCost_Test.java", "source_code": "public static int minPathCost(int[][] grid, int[][] moveCost) {\n        int m = grid.length, n = grid[0].length;\n        int[][] dp = new int[2][n];\n        dp[0] = grid[0].clone();\n        int cur = 0;\n        for (int i = 1; i < m; i++) {\n            int next = 1 - cur;\n            for (int j = 0; j < n; j++) {\n                dp[next][j] = Integer.MAX_VALUE;\n                for (int k = 0; k < n; k++) {\n                    dp[next][j] = Math.min(dp[next][j], dp[cur][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);\n                }\n            }\n            cur = next;\n        }\n        return Arrays.stream(dp[cur]).min().getAsInt();\n    }", "trans_code": "def min_path_cost ( grid , move_cost ) :\n    m , n = len ( grid ) , len ( grid [ 0 ] )\n    dp = [ 0 ] * n\n    dp [ 0 ] = grid [ 0 ].copy ( )\n    cur = 0\n    for i in range ( 1 , m ) :\n        next = 1 - cur\n        for j in range ( n ) :\n            dp [ next ] [ j ] = sys.maxint\n            for k in range ( n ) :\n                dp [ next ] [ j ] = min ( dp [ next ] [ j ] , dp [ cur ] [ k ] + move_cost [ grid [ i - 1 ] [ k ] ] [ j ] + grid [ i ] [ j ] )\n        cur = next\n    return sum ( dp [ cur ] )\n", "reference_code": "def minPathCost( grid: List[List[int]], moveCost: List[List[int]]) -> int:\n       m, n = len(grid), len(grid[0])\n       dp = grid[0]\n       for i in range(1, len(grid)):\n           dp = [grid[i][j] + min(dp[k] + moveCost[grid[i - 1][k]][j] for k in range(n)) for j in range(n)]\n       return min(dp)", "target_Lan": "python###minPathCost.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minPathCost([[1]], [[0]]))"}, {"source_Lan": "java###maximizeSum_Test.java", "source_code": "public static int maximizeSum(int[] nums, int k) {\n        int m = Arrays.stream(nums).max().getAsInt();\n        return (2 * m + k - 1) * k / 2;\n    }", "trans_code": "def maximize_sum ( nums , k ) :\n    m = sum ( nums )\n    return ( 2 * m + k - 1 ) * k / 2\n", "reference_code": "def maximizeSum( nums: List[int], k: int) -> int:\n        return (2 * max(nums) + k - 1) * k // 2", "target_Lan": "python###maximizeSum.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    nums1 = [1, 2, 3]\n    k1 = 5\n    print(maximizeSum(nums1, k1))  \n    nums2 = [-1, -2, -3]\n    k2 = 3\n    print(maximizeSum(nums2, k2))  \n    nums3 = [2**10 - 1]\n    k3 = 2\n    print(maximizeSum(nums3, k3))  \n    nums4 = [10, 5, 3, 2]\n    k4 = 4\n    print(maximizeSum(nums4, k4))  \n    nums5 = [100, 200, 300]\n    k5 = 1\n    print(maximizeSum(nums5, k5))"}, {"source_Lan": "java###findTheCity_Test.java", "source_code": "public static int findTheCity(int n, int[][] edges, int distanceThreshold) {\n        int[] ans = {Integer.MAX_VALUE / 2, -1};\n        int[][] mp = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(mp[i], Integer.MAX_VALUE / 2);\n        }\n        for (int[] eg : edges) {\n            int from = eg[0], to = eg[1], weight = eg[2];\n            mp[from][to] = mp[to][from] = weight;\n        }\n        for (int k = 0; k < n; ++k) {\n            mp[k][k] = 0;\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    mp[i][j] = Math.min(mp[i][j], mp[i][k] + mp[k][j]);\n                }\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            int cnt = 0;\n            for (int j = 0; j < n; ++j) {\n                if (mp[i][j] <= distanceThreshold) {\n                    cnt++;\n                }\n            }\n            if (cnt <= ans[0]) {\n                ans[0] = cnt;\n                ans[1] = i;\n            }\n        }\n        return ans[1];\n    }", "trans_code": "def find_the_city ( n , edges , distance_threshold ) :\n    ans = [ int ( n / 2 ) , - 1 ]\n    mp = { }\n    for i in range ( n ) :\n        del mp [ i ]\n    for eg in edges :\n        from int ( eg [ 0 ] ) , eg [ 1 ] , weight = eg [ 2 ]\n        mp [ from ] [ to ] = mp [ to ] [ from ] = weight\n    for k in range ( n ) :\n        mp [ k ] [ k ] = 0\n        for i in range ( n ) :\n            for j in range ( n ) :\n                mp [ i ] [ j ] = min ( mp [ i ] [ j ] , mp [ i ] [ k ] + mp [ k ] [ j ] )\n    for i in range ( n ) :\n        cnt = 0\n        for j in range ( n ) :\n            if mp [ i ] [ j ] <= distance_threshold :\n                cnt += 1\n        if cnt <= ans [ 0 ] :\n            ans [ 0 ] = cnt\n            ans [ 1 ] = i\n    return ans [ 1 ]\n", "reference_code": "def findTheCity( n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n        ans = (inf, -1)\n        mp = [[inf] * n for _ in range(n)]\n        for fr, to, weight in edges:\n            mp[fr][to], mp[to][fr] = weight, weight\n        for k in range(n):\n            mp[k][k] = 0\n            for i in range(n):\n                for j in range(n):\n                    mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j])\n        for i in range(n):\n            cnt = sum(mp[i][j] <= distanceThreshold for j in range(n))\n            if cnt <= ans[0]:\n                ans = (cnt, i)\n        return ans[1]", "target_Lan": "python###findTheCity.py", "target_code_shell": "from typing import List\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    n1 = 4\n    edges1 = [[0, 1, 3], [1, 2, 1], [2, 3, 4], [3, 0, 2]]\n    distanceThreshold1 = 4\n    print(findTheCity(n1, edges1, distanceThreshold1))  \n    n2 = 5\n    edges2 = [[0, 1, 2], [1, 2, 2], [2, 3, 2], [3, 4, 2], [4, 0, 2]]\n    distanceThreshold2 = 2\n    print(findTheCity(n2, edges2, distanceThreshold2))  \n    n3 = 6\n    edges3 = [[0, 1, 7], [1, 2, 6], [2, 3, 5], [3, 4, 4], [4, 5, 3], [5, 0, 2]]\n    distanceThreshold3 = 7\n    print(findTheCity(n3, edges3, distanceThreshold3))  \n    n4 = 3\n    edges4 = [[0, 1, 1], [1, 2, 2], [2, 0, 3]]\n    distanceThreshold4 = 1\n    print(findTheCity(n4, edges4, distanceThreshold4))  \n    n5 = 4\n    edges5 = [[0, 1, 10], [1, 2, 10], [2, 3, 10]]\n    distanceThreshold5 = 10\n    print(findTheCity(n5, edges5, distanceThreshold5))"}, {"source_Lan": "java###longestAlternatingSubarray_Test.java", "source_code": "public static int longestAlternatingSubarray(int[] nums, int threshold) {\n        int res = 0, dp = 0;\n        for (int l = nums.length - 1; l >= 0; l--) {\n            if (nums[l] > threshold) {\n                dp = 0;\n            } else if (l == nums.length - 1 || nums[l] % 2 != nums[l + 1] % 2) {\n                dp++;\n            } else {\n                dp = 1;\n            }\n            if (nums[l] % 2 == 0) {\n                res = Math.max(res, dp);\n            }\n        }\n        return res;\n    }", "trans_code": "def longestAlternatingSubarray ( nums , threshold ) :\n    res , dp = 0 , 0\n    for l in range ( len ( nums ) - 1 , - 1 , - 1 ) :\n        if nums [ l ] > threshold :\n            dp = 0\n        elif l == len ( nums ) - 1 or nums [ l ] % 2 != nums [ l + 1 ] % 2 :\n            dp += 1\n        else :\n            dp = 1\n        if nums [ l ] % 2 == 0 :\n            res = max ( res , dp )\n    return res\n", "reference_code": "def longestAlternatingSubarray( nums: List[int], threshold: int) -> int:\n        res, dp = 0, 0\n        for l in range(len(nums) - 1, -1, -1):\n            if nums[l] > threshold:\n                dp = 0\n            elif l == len(nums) - 1 or nums[l] % 2 != nums[l + 1] % 2:\n                dp = dp + 1\n            else:\n                dp = 1\n            res = dp if nums[l] % 2 == 0 and dp > res else res\n        return res", "target_Lan": "python###longestAlternatingSubarray.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(longestAlternatingSubarray([2, 3, 4, 5, 6], 6))\n    print(longestAlternatingSubarray([], 10))\n    print(longestAlternatingSubarray([10, 11, 12, 13], 8))\n    print(longestAlternatingSubarray([1, 2, 3, 5, 7], 10))\n    print(longestAlternatingSubarray([2, 4, 6, 8], 10))"}, {"source_Lan": "java###findTheLongestBalancedSubstring_Test.java", "source_code": "public static int findTheLongestBalancedSubstring(String s) {\n        int res = 0;\n        int n = s.length();\n        int[] count = new int[2];\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n                count[1]++;\n                res = Math.max(res, 2 * Math.min(count[0], count[1]));\n            } else if (i == 0 || s.charAt(i - 1) == '1') {\n                count[0] = 1;\n                count[1] = 0;\n            } else {\n                count[0]++;\n            }\n        }\n        return res;\n    }", "trans_code": "def find_the_longest_balanced_substring ( s ) :\n    res = 0\n    n = len ( s )\n    count = [ 0 ] * 2\n    for i in range ( n ) :\n        if s [ i ] == '1' :\n            count [ 1 ] += 1\n            res = max ( res , 2 * min ( count [ 0 ] , count [ 1 ] ) )\n        elif i == 0 or s [ i - 1 ] == '1' :\n            count [ 0 ] = 1\n            count [ 1 ] = 0\n        else :\n            count [ 0 ] += 1\n    return res\n", "reference_code": "def findTheLongestBalancedSubstring( s: str) -> int:\n        res = 0\n        n = len(s)\n        count = [0, 0]\n        for i in range(n):\n            if s[i] == '1':\n                count[1] += 1\n                res = max(res, 2 * min(count))\n            elif i == 0 or s[i-1] == '1':\n                count[0] = 1\n                count[1] = 0\n            else:\n                count[0] += 1\n        return res", "target_Lan": "python###findTheLongestBalancedSubstring.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(findTheLongestBalancedSubstring(\"\"))\n    print(findTheLongestBalancedSubstring(\"0000\"))\n    print(findTheLongestBalancedSubstring(\"1111\"))\n    print(findTheLongestBalancedSubstring(\"0101\"))\n    print(findTheLongestBalancedSubstring(\"101001\"))"}, {"source_Lan": "java###vowelStrings_Test.java", "source_code": "public static int vowelStrings(String[] words, int left, int right) {\n        Set<Character> vowels = new HashSet<Character>() {{\n            add('a');\n            add('e');\n            add('i');\n            add('o');\n            add('u');\n        }};\n        int ans = 0;\n        for (int i = left; i <= right; ++i) {\n            String word = words[i];\n            if (vowels.contains(word.charAt(0)) && vowels.contains(word.charAt(word.length() - 1))) {\n                ++ans;\n            }\n        }\n        return ans;\n    }", "trans_code": "def vowelStrings ( words , left , right ) :\n    vowels = set ( [ 'a' , 'e' , 'i' , 'o' , 'u' ] )\n    ans = 0\n    for i in range ( left , right + 1 ) :\n        word = words [ i ]\n        if vowels.intersection ( word [ 0 ] ) and vowels.intersection ( word [ - 1 ] ) :\n            ans += 1\n    return ans\n", "reference_code": "def vowelStrings( words: List[str], left: int, right: int) -> int:\n        vowels = set(\"aeiou\")\n        ans = 0\n        for i in range(left, right + 1):\n            word = words[i]\n            if word[0] in vowels and word[-1] in vowels:\n                ans += 1\n        return ans", "target_Lan": "python###vowelStrings.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(vowelStrings([\"apple\", \"banana\", \"orange\", \"grape\", \"umbrella\"], 0, 4))\n    print(vowelStrings([\"cat\", \"dog\", \"elephant\", \"ant\", \"igloo\"], 0, 4))\n    print(vowelStrings([\"egg\", \"pear\", \"op\", \"mt\"], 1, 1))\n    print(vowelStrings([\"umbrella\", \"cat\", \"octopus\", \"grapes\"], 3, 2))"}, {"source_Lan": "java###categorizeBox_Test.java", "source_code": "public static String categorizeBox(int length, int width, int height, int mass) {\n        long maxd = Math.max(length, Math.max(width, height)), vol = 1L * length * width * height;\n        boolean isBulky = maxd >= 10000 || vol >= 1000000000, isHeavy = mass >= 100;\n        if (isBulky && isHeavy) {\n             return \"Both\";\n        } else if (isBulky) {\n            return \"Bulky\";\n        } else if (isHeavy) {\n            return \"Heavy\";\n        } else {\n            return \"Neither\";\n        }\n    }", "trans_code": "def categorize_box ( length , width , height , mass ) :\n    maxd , vol = max ( length , max ( width , height ) ) , 1 * length * width * height\n    isBulky , isHeavy = maxd >= 10000 or vol >= 1000000000 , mass >= 100\n    if isBulky and isHeavy :\n        return \"Both\"\n    elif isBulky :\n        return \"Bulky\"\n    elif isHeavy :\n        return \"Heavy\"\n    else :\n        return \"Neither\"\n", "reference_code": "def categorizeBox( length, width, height, mass):\n        maxd = max(length, width, height)\n        vol = length * width * height\n        isBulky = maxd >= 10000 or vol >= 10**9\n        isHeavy = mass >= 100\n        if isBulky and isHeavy:\n            return 'Both'\n        if isBulky:\n            return 'Bulky'\n        if isHeavy:\n            return 'Heavy'\n        return 'Neither'", "target_Lan": "python###categorizeBox.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(categorizeBox(10000, 10000, 10000, 1000))  \n    print(categorizeBox(10000, 1, 1, 50))             \n    print(categorizeBox(1, 1, 1, 150))                 \n    print(categorizeBox(1, 1, 1, 50))                  \n    print(categorizeBox(30000, 30000, 30000, 2000))"}, {"source_Lan": "java###pickGifts_Test.java", "source_code": "public static long pickGifts(int[] gifts, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);\n        for (int gift : gifts) {\n            pq.offer(gift);\n        }\n        while (k > 0) {\n            k--;\n            int x = pq.poll();\n            pq.offer((int) Math.sqrt(x));\n        }\n        long res = 0;\n        while (!pq.isEmpty()) {\n            res += pq.poll();\n        }\n        return res;\n    }", "trans_code": "def pickGifts ( gifts , k ) :\n    pq = PriorityQueue ( ( a , b ) for ( a , b ) in gifts )\n    while k > 0 :\n        k -= 1\n        x = pq.get ( )\n        pq.put ( int ( math.sqrt ( x ) ) )\n    res = 0\n    while not pq.empty ( ) :\n        res += pq.get ( )\n    return res\n", "reference_code": "def pickGifts(gifts: List[int], k: int) -> int:\n    q = [-gift for gift in gifts]\n    heapify(q)\n    while k:\n        x = heappop(q)\n        heappush(q, -int(sqrt(-x)))\n        k -= 1\n    return -sum(q)\n", "target_Lan": "python###pickGifts.py", "target_code_shell": "from typing import List\nfrom heapq import heapify, heappop, heappush\nfrom math import sqrt\n# TOFILL\nif __name__ == \"__main__\":\n    print(pickGifts([100], 1))\n    print(pickGifts([1, 2, 3, 4, 5], 2))\n    print(pickGifts([16, 25, 9, 4], 3))\n    print(pickGifts([2**31 - 1, 1000000, 500000], 2))"}, {"source_Lan": "java###minimumOneBitOperations_Test.java", "source_code": "public static int minimumOneBitOperations(int n) {\n        int ans = 0;\n        int sign = 1;\n        for (int i = 29; i >= 0; --i) {\n            if ((n & (1 << i)) != 0) {\n                ans += sign * ((1 << (i + 1)) - 1);\n                sign = -sign;\n            }\n        }\n        return ans;\n    }", "trans_code": "def minimumOneBitOperations ( n ) :\n    ans = 0\n    sign = 1\n    for i in range ( 29 , - 1 , - 1 ) :\n        if ( n & ( 1 << i ) ) :\n            ans += sign * ( ( 1 << ( i + 1 ) ) - 1 )\n            sign = - sign\n    return ans\n", "reference_code": "def minimumOneBitOperations( n: int) -> int:\n        ans = 0\n        sign = 1\n        for i in range(29, -1, -1):\n            if n & (1 << i):\n                ans += sign * ((1 << (i + 1)) - 1)\n                sign = -sign\n        return ans", "target_Lan": "python###minimumOneBitOperations.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(minimumOneBitOperations(0))\n    print(minimumOneBitOperations(1))\n    print(minimumOneBitOperations(2147483647))  \n    print(minimumOneBitOperations(16))\n    print(minimumOneBitOperations(7))"}, {"source_Lan": "java###successfulPairs_Test.java", "source_code": "public static int[] successfulPairs(int[] spells, int[] potions, long success) {\n        int n = spells.length, m = potions.length;\n        int[] res = new int[n];\n        int[][] idx = new int[n][2];\n        for (int i = 0; i < n; ++i) {\n            idx[i][0] = spells[i];\n            idx[i][1] = i;\n        }\n        Arrays.sort(potions);\n        for (int i = 0, j = m - 1; i < j; ++i, --j) {\n            int temp = potions[i];\n            potions[i] = potions[j];\n            potions[j] = temp;\n        }\n        Arrays.sort(idx, (a, b) -> a[0] - b[0]);\n        for (int i = 0, j = 0; i < n; ++i) {\n            int p = idx[i][1];\n            int v = idx[i][0];\n            while (j < m && (long) potions[j] * v >= success) {\n                ++j;\n            }\n            res[p] = j;\n        }\n        return res;\n    }", "trans_code": "def successful_pairs ( spells , potions , success ) :\n    n , m = len ( spells ) , len ( potions )\n    res = [ ]\n    idx = [ ]\n    for i in range ( n ) :\n        idx.append ( spells [ i ] )\n        idx.append ( i )\n    idx.sort ( )\n    for i , j in enumerate ( m - 1 ) :\n        temp = potions [ i ]\n        potions [ i ] = potions [ j ]\n        potions [ j ] = temp\n    idx.sort ( )\n    for i , j in enumerate ( n ) :\n        p = idx [ i ]\n        v = idx [ i ]\n        while j < m and long ( potions [ j ] * v ) >= success :\n            j += 1\n        res.append ( p )\n    return res\n", "reference_code": "def successfulPairs( spells: List[int], potions: List[int], success: int) -> List[int]:\n        res = [0] * len(spells)\n        idx = [i for i in range(len(spells))]\n        idx.sort(key = lambda x: spells[x])\n        potions.sort(key = lambda x : -x)\n        j = 0\n        for p in idx:\n            v = spells[p]\n            while j < len(potions) and potions[j] * v >= success:\n                j += 1\n            res[p] = j\n        return res", "target_Lan": "python###successfulPairs.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(successfulPairs([1, 2, 3], [10, 20], 15))\n    print(successfulPairs([100, 200], [1, 2, 3], 600))\n    print(successfulPairs([-5, 0, 5], [10, 2, 1], 0))\n    print(successfulPairs([2**31-1, 2**31-1], [2**31-1, 2**31-1], 2**31-1))\n    print(successfulPairs([], [], 10))"}, {"source_Lan": "java###countPairs_Test.java", "source_code": "public static int countPairs(List<Integer> nums, int target) {\n        int res = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i + 1; j < nums.size(); j++) {\n                if (nums.get(i) + nums.get(j) < target) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }", "trans_code": "def count_pairs ( nums , target ) :\n    res = 0\n    for i in range ( len ( nums ) ) :\n        for j in range ( i + 1 , len ( nums ) ) :\n            if nums [ i ] + nums [ j ] < target :\n                res += 1\n    return res\n", "reference_code": "def countPairs( nums: List[int], target: int) -> int:\n        return sum(x + y < target for x, y in combinations(nums, 2))", "target_Lan": "python###countPairs.py", "target_code_shell": "from typing import List\nfrom itertools import combinations\n# TOFILL\nif __name__ == \"__main__\":\n    print(countPairs([], 5))               \n    print(countPairs([3], 4))               \n    print(countPairs([2, 4, 6, 8], 11))     \n    print(countPairs([1, 2, 3, 4], 10))     \n    print(countPairs([5, 7, 9], 10))"}, {"source_Lan": "java###tupleSameProduct_Test.java", "source_code": "    public static int tupleSameProduct(int[] nums) {\n        int n = nums.length;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                int key = nums[i] * nums[j];\n                cnt.put(key, cnt.getOrDefault(key, 0) + 1);\n            }\n        }\n        int ans = 0;\n        for (Integer v : cnt.values()) {\n            ans += v * (v - 1) * 4;\n        }\n        return ans;\n    }", "trans_code": "def tuple_same_product ( nums ) :\n    n = len ( nums )\n    cnt = { }\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            key = nums [ i ] * nums [ j ]\n            cnt [ key ] = cnt.get ( key , 0 ) + 1\n    ans = 0\n    for v in cnt.values ( ) :\n        ans += v * ( v - 1 ) * 4\n    return ans\n", "reference_code": "def tupleSameProduct( nums: List[int]) -> int:\n        n = len(nums)\n        cnt = Counter([nums[i] * nums[j] for i in range(n) for j in range(i + 1, n)])\n        ans = 0\n        for _, v in cnt.items():\n            ans += v * (v - 1) * 4\n        return ans", "target_Lan": "python###tupleSameProduct.py", "target_code_shell": "from typing import List\nfrom collections import Counter\n# TOFILL\nif __name__ == \"__main__\":\n    print(tupleSameProduct([]))                    \n    print(tupleSameProduct([2]))                   \n    print(tupleSameProduct([2, 3, 5, 7]))         \n    print(tupleSameProduct([1, 2, 4, 3]))         \n    print(tupleSameProduct([1, 2, -2, -1]))"}, {"source_Lan": "java###sumOfMultiples_Test.java", "source_code": "public static int sumOfMultiples(int n) {\n        int res = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\n                res += i;\n            }\n        }\n        return res;\n    }", "trans_code": "def sum_of_multiples ( n ) :\n    res = 0\n    for i in range ( 1 , n + 1 ) :\n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0 :\n            res += i\n    return res\n", "reference_code": "def sumOfMultiples( n: int) -> int:\n        return sum(i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0 or i % 7 == 0)", "target_Lan": "python###sumOfMultiples.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(sumOfMultiples(0))\n    print(sumOfMultiples(10))\n    print(sumOfMultiples(21))\n    print(sumOfMultiples(100))\n    print(sumOfMultiples(-5))"}, {"source_Lan": "java###topStudents_Test.java", "source_code": "public static List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {\n        Map<String, Integer> words = new HashMap<>();\n        for (String word : positive_feedback) {\n            words.put(word, 3);\n        }\n        for (String word : negative_feedback) {\n            words.put(word, -1);\n        }\n        int n = report.length;\n        int[] scores = new int[n];\n        int[][] A = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            int score = 0;\n            for (String word : report[i].split(\" \")) {\n                score += words.getOrDefault(word, 0);\n            }\n            A[i] = new int[]{-score, student_id[i]};\n        }\n        Arrays.sort(A, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n        List<Integer> topK = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            topK.add(A[i][1]);\n        }\n        return topK;\n    }", "trans_code": "def top_students ( positive_feedback , negative_feedback , report , student_id , k ) :\n    words = { }\n    for word in positive_feedback :\n        words [ word ] = 3\n    for word in negative_feedback :\n        words [ word ] = - 1\n    n = len ( report )\n    scores = [ ]\n    A = [ ]\n    for i in range ( n ) :\n        score = 0\n        for word in report [ i ] :\n            score += words.get ( word , 0 )\n        A.append ( ( - score , student_id [ i ] ) )\n    A.sort ( key = lambda a : a [ 0 ] , reverse = True )\n    top_k = [ ]\n    for i in range ( k ) :\n        top_k.append ( A [ i ] [ 1 ] )\n    return top_k\n", "reference_code": "def topStudents( positive_feedback, negative_feedback, report, student_id, k):\n        words = {}\n        for w in positive_feedback:\n            words[w] = 3\n        for w in negative_feedback:\n            words[w] = -1\n        A = []\n        for s, i in zip(report, student_id):\n            score = sum(words.get(w, 0)for w in s.split())\n            A.append([-score, i])\n        A.sort()\n        return [i for v,i in A[:k]]", "target_Lan": "python###topStudents.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(topStudents([\"excellent\", \"good\"], [\"poor\", \"bad\"], [\"excellent job\", \"good effort\", \"bad work\"], [1, 2, 3], 2))\n    print(topStudents([\"amazing\"], [], [\"amazing job\"], [1], 1))\n    print(topStudents([], [\"terrible\"], [\"terrible performance\"], [1], 1))\n    print(topStudents([\"great\", \"superb\"], [\"awful\"], [\"great job\", \"awful work\", \"perfect effort\"], [1, 2, 3], 2))\n    print(topStudents([\"good\"], [\"bad\"], [\"this is a good day\", \"what a bad moment\"], [5, 6], 1))"}, {"source_Lan": "java###splitNum_Test.java", "source_code": "public static int splitNum(int num) {\n        char[] stnum = Integer.toString(num).toCharArray();\n        Arrays.sort(stnum);\n        int num1 = 0, num2 = 0;\n        for (int i = 0; i < stnum.length; ++i) {\n            if (i % 2 == 0) {\n                num1 = num1 * 10 + (stnum[i] - '0');\n            } else {\n                num2 = num2 * 10 + (stnum[i] - '0');\n            }\n        }\n        return num1 + num2;\n    }", "trans_code": "def split_num ( num ) :\n    stnum = str ( num ).split ( '.' )\n    stnum.sort ( )\n    num1 , num2 = 0 , 0\n    for i in stnum :\n        if i % 2 == 0 :\n            num1 = num1 * 10 + ( i - '0' )\n        else :\n            num2 = num2 * 10 + ( i - '0' )\n    return num1 , num2\n", "reference_code": "def splitNum( num: int) -> int:\n        stnum = \"\".join(sorted(str(num)))\n        num1, num2 = int(stnum[::2]), int(stnum[1::2])\n        return num1 + num2", "target_Lan": "python###splitNum.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(splitNum(2134))       \n    print(splitNum(7744))       \n    print(splitNum(999999999))  \n    print(splitNum(102340))"}, {"source_Lan": "java###fullBloomFlowers_Test.java", "source_code": " public static int[] fullBloomFlowers(int[][] flowers, int[] persons) {\n        TreeMap<Integer, Integer> cnt = new TreeMap<>();\n        for (int[] flower : flowers) {\n            cnt.put(flower[0], cnt.getOrDefault(flower[0], 0) + 1);\n            cnt.put(flower[1] + 1, cnt.getOrDefault(flower[1] + 1, 0) - 1);\n        }\n        int m = persons.length;\n        Integer[] indices = IntStream.range(0, m).boxed().toArray(Integer[]::new);\n        Arrays.sort(indices, (i, j) -> persons[i] - persons[j]);\n        int[] ans = new int[m];\n        int curr = 0;\n        for (int x : indices) {\n            while (!cnt.isEmpty() && cnt.firstKey() <= persons[x]) {\n                curr += cnt.pollFirstEntry().getValue();\n            }\n            ans[x] = curr;\n        }\n        return ans;\n    }", "trans_code": "def full_bloom ( flowers , persons ) :\n    cnt = defaultdict ( int )\n    for flower in flowers :\n        cnt [ flower [ 0 ] ] += cnt.get ( flower [ 0 ] , 0 ) + 1\n        cnt [ flower [ 1 ] + 1 ] += cnt.get ( flower [ 1 ] + 1 , 0 ) - 1\n    m = len ( persons )\n    indices = intbitset ( range ( m ) )\n    indices.sort ( )\n    ans = [ ]\n    curr = 0\n    for x in indices :\n        while not cnt.empty ( ) and cnt.first_key ( ) <= persons [ x ] :\n            curr += cnt.pop_first_entry ( ) [ 1 ]\n        ans.append ( curr )\n    return ans\n", "reference_code": "def fullBloomFlowers( flowers: List[List[int]], people: List[int]) -> List[int]:\n        cnt = collections.defaultdict(int)\n        for start, end in flowers:\n            cnt[start] += 1\n            cnt[end + 1] -= 1\n        arr = sorted(cnt.items())\n        m = len(people)\n        ans = [0] * m\n        j, curr = 0, 0\n        for p, i in sorted(zip(people, range(m))):\n            while j < len(arr) and arr[j][0] <= p:\n                curr += arr[j][1]\n                j += 1\n            ans[i] = curr\n        return ans", "target_Lan": "python###fullBloomFlowers.py", "target_code_shell": "from typing import List\nimport collections\n# TOFILL\nif __name__ == \"__main__\":\n    print(fullBloomFlowers([], []))\n    print(fullBloomFlowers([[1, 4]], [2]))\n    print(fullBloomFlowers([[1, 3], [4, 6]], [1, 2, 3, 4, 5]))\n    print(fullBloomFlowers([[1, 2], [3, 5], [6, 8]], [0, 3, 6, 7, 9]))\n    print(fullBloomFlowers([[1, 5], [2, 3]], [1, 2, 3, 4, 5]))"}, {"source_Lan": "java###filterRestaurants_Test.java", "source_code": "public static List<Integer> filterRestaurants(int[][] restaurants, int veganFriendly, int maxPrice, int maxDistance) {\n        int n = restaurants.length;\n        List<int[]> filtered = new ArrayList<int[]>();\n        for (int i = 0; i < n; i++) {\n            if (restaurants[i][3] <= maxPrice && restaurants[i][4] <= maxDistance && !(veganFriendly == 1 && restaurants[i][2] == 0)) {\n                filtered.add(restaurants[i]);\n            }\n        }\n        Collections.sort(filtered, (a, b) -> {\n            if (a[1] != b[1]) {\n                return b[1] - a[1];\n            } else {\n                return b[0] - a[0];\n            }\n        });\n        List<Integer> res = new ArrayList<Integer>();\n        for (int[] v : filtered) {\n            res.add(v[0]);\n        }\n        return res;\n    }", "trans_code": "def filterRestaurants ( restaurants , veganFriendly , maxPrice , maxDistance ) :\n    n = len ( restaurants )\n    filtered = [ ]\n    for i in range ( n ) :\n        if restaurants [ i ] [ 3 ] <= maxPrice and restaurants [ i ] [ 4 ] <= maxDistance and not ( veganFriendly == 1 and restaurants [ i ] [ 2 ] == 0 ) :\n            filtered.append ( restaurants [ i ] )\n    filtered.sort ( key = lambda ( a , b ) : a [ 1 ] - b [ 1 ] )\n    res = [ ]\n    for v in filtered :\n        res.append ( v [ 0 ] )\n    return res\n", "reference_code": "def filterRestaurants( restaurants: List[List[int]], veganFriendly: int, maxPrice: int, maxDistance: int) -> List[int]:\n        filtered = [r for r in restaurants if r[3] <= maxPrice and r[4] <= maxDistance and not (veganFriendly and not r[2])]\n        filtered.sort(key=lambda r: (-r[1], -r[0]))\n        return [r[0] for r in filtered]", "target_Lan": "python###filterRestaurants.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    restaurants1 = [[1, 4, 1, 40, 10], [2, 3, 0, 50, 5], [3, 5, 1, 25, 15]]\n    restaurants2 = [[1, 4, 1, 40, 10], [2, 3, 0, 50, 5], [3, 5, 0, 70, 20]]\n    restaurants3 = [[1, 5, 0, 1000, 100], [2, 2, 1, 500, 50]]\n    restaurants4 = [[1, 4, 1, 0, 0]]\n    restaurants5 = [[1, 5, 1, float('inf'), float('inf')]]\n    print(filterRestaurants(restaurants1, 1, 50, 15))  \n    print(filterRestaurants(restaurants2, 0, 50, 15))  \n    print(filterRestaurants(restaurants3, 1, 100, 100))  \n    print(filterRestaurants(restaurants4, 1, 10, 10))  \n    print(filterRestaurants(restaurants5, 1, float('inf'), float('inf')))"}, {"source_Lan": "java###passThePillow_Test.java", "source_code": "public static int passThePillow(int n, int time) {\n        time %= (n - 1) * 2;\n        return time < n ? time + 1 : n * 2 - time - 1;\n    }", "trans_code": "def pass_the_pillow ( n , time ) :\n    time %= ( n - 1 ) * 2\n    return time < n\n", "reference_code": "def passThePillow( n: int, time: int) -> int:\n        time %= (n - 1) * 2\n        return time + 1 if time < n else n * 2 - time - 1", "target_Lan": "python###passThePillow.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(passThePillow(2, 3))\n    print(passThePillow(5, 10))\n    print(passThePillow(4, 7))\n    print(passThePillow(10, 20))"}, {"source_Lan": "java###collectTheCoins_Test.java", "source_code": "public static int collectTheCoins(int[] coins, int[][] edges) {\n        int n = coins.length;\n        List<Integer>[] g = new List[n];\n        for (int i = 0; i < n; ++i) {\n            g[i] = new ArrayList<Integer>();\n        }\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0], y = edge[1];\n            g[x].add(y);\n            g[y].add(x);\n            ++degree[x];\n            ++degree[y];\n        }\n        int rest = n;\n        \n        Queue<Integer> queue = new ArrayDeque<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (degree[i] == 1 && coins[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            --degree[u];\n            --rest;\n            for (int v : g[u]) {\n                --degree[v];\n                if (degree[v] == 1 && coins[v] == 0) {\n                    queue.offer(v);\n                }\n            }\n        }\n        \n        for (int x = 0; x < 2; ++x) {\n            queue = new ArrayDeque<Integer>();\n            for (int i = 0; i < n; ++i) {\n                if (degree[i] == 1) {\n                    queue.offer(i);\n                }\n            }\n            while (!queue.isEmpty()) {\n                int u = queue.poll();\n                --degree[u];\n                --rest;\n                for (int v : g[u]) {\n                    --degree[v];\n                }\n            }\n        }\n        return rest == 0 ? 0 : (rest - 1) * 2;\n    }", "trans_code": "def collect_the_coins ( coins , edges ) :\n    n = len ( coins )\n    g = [ ]\n    for i in range ( n ) :\n        g.append ( [ ] )\n    degree = { }\n    for edge in edges :\n        x , y = edge\n        g [ x ].append ( y )\n        g [ y ].append ( x )\n        yield degree [ x ] , degree [ y ]\n    rest = n\n    queue = Queue ( )\n    for i in range ( n ) :\n        if degree [ i ] == 1 and coins [ i ] == 0 :\n            queue.put ( i )\n    while not queue.empty ( ) :\n        u = queue.get ( )\n        del degree [ u ]\n        del rest\n        for v in g [ u ] :\n            del degree [ v ]\n            if degree [ v ] == 1 and coins [ v ] == 0 :\n                queue.put ( v )\n    for x in range ( 2 ) :\n        queue = Queue ( )\n        for i in range ( n ) :\n            if degree [ i ] == 1 :\n                queue.put ( i )\n        while not queue.empty ( ) :\n            u = queue.get ( )\n            del degree [ u ]\n            del rest\n            for v in g [ u ] :\n                del degree [ v ]\n", "reference_code": "def collectTheCoins( coins: List[int], edges: List[List[int]]) -> int:\n        n = len(coins)\n        g = defaultdict(list)\n        degree = [0] * n\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n            degree[x] += 1\n            degree[y] += 1\n        rest = n\n        # \u5220\u9664\u6811\u4e2d\u6240\u6709\u65e0\u91d1\u5e01\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u76f4\u5230\u6811\u4e2d\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u662f\u542b\u6709\u91d1\u5e01\u7684\n        q = deque(i for i in range(n) if degree[i] == 1 and coins[i] == 0)\n        while q:\n            u = q.popleft()\n            degree[u] -= 1\n            rest -= 1\n            for v in g[u]:\n                degree[v] -= 1\n                if degree[v] == 1 and coins[v] == 0:\n                    q.append(v)\n        # \u5220\u9664\u6811\u4e2d\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9, \u8fde\u7eed\u5220\u96642\u6b21\n        for _ in range(2):\n            q = deque(i for i in range(n) if degree[i] == 1)\n            while q:\n                u = q.popleft()\n                degree[u] -= 1\n                rest -= 1\n                for v in g[u]:\n                    degree[v] -= 1\n        return 0 if rest == 0 else (rest - 1) * 2", "target_Lan": "python###collectTheCoins.py", "target_code_shell": "from collections import defaultdict, deque\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(collectTheCoins([], []))                                   \n    print(collectTheCoins([0, 0, 0], [[0, 1], [1, 2]]))             \n    print(collectTheCoins([1, 0, 0], [[0, 1], [0, 2]]))             \n    print(collectTheCoins([1, 1, 0], [[0, 1], [0, 2]]))             \n    print(collectTheCoins([1, 1, 1], [[0, 1], [0, 2]]))"}, {"source_Lan": "java###distMoney_Test.java", "source_code": "public static int distMoney(int money, int children) {\n        if (money < children) {\n            return -1;\n        }\n        money -= children;\n        int cnt = Math.min(money / 7, children);\n        money -= cnt * 7;\n        children -= cnt;\n        if ((children == 0 && money > 0) || (children == 1 && money == 3)) {\n            cnt--;\n        }\n        return cnt;\n    }", "trans_code": "def dist_money ( money , children ) :\n    if money < children :\n        return - 1\n    money -= children\n    cnt = min ( money // 7 , children )\n    money -= cnt * 7\n    children -= cnt\n    if ( children == 0 and money > 0 ) :\n        cnt -= 1\n    return cnt\n", "reference_code": "def distMoney( money: int, children: int) -> int:\n        if money < children:\n            return -1\n        money -= children\n        cnt = min(money // 7, children)\n        money -= cnt * 7\n        children -= cnt\n        if (children == 0 and money > 0) or (children == 1 and money == 3):\n            cnt -= 1\n        return cnt", "target_Lan": "python###distMoney.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(distMoney(0, 1))  \n    print(distMoney(5, 5))  \n    print(distMoney(10, 2)) \n    print(distMoney(25, 5)) \n    print(distMoney(10, 3))"}, {"source_Lan": "java###queensAttacktheKing_Test.java", "source_code": "public static List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {\n        Set<Integer> queenPos = new HashSet<Integer>();\n        for (int[] queen : queens) {\n            int x = queen[0], y = queen[1];\n            queenPos.add(x * 8 + y);\n        }\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        for (int dx = -1; dx <= 1; ++dx) {\n            for (int dy = -1; dy <= 1; ++dy) {\n                if (dx == 0 && dy == 0) {\n                    continue;\n                }\n                int kx = king[0] + dx, ky = king[1] + dy;\n                while (kx >= 0 && kx < 8 && ky >= 0 && ky < 8) {\n                    int pos = kx * 8 + ky;\n                    if (queenPos.contains(pos)) {\n                        List<Integer> posList = new ArrayList<Integer>();\n                        posList.add(kx);\n                        posList.add(ky);\n                        ans.add(posList);\n                        break;\n                    }\n                    kx += dx;\n                    ky += dy;\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def queensAttacktheKing ( queens , king ) :\n    queenPos = set ( )\n    for queen in queens :\n        x , y = queen\n        queenPos.add ( x * 8 + y )\n    ans = [ ]\n    for dx in range ( - 1 , 1 ) :\n        for dy in range ( - 1 , 1 ) :\n            if dx == 0 and dy == 0 :\n                continue\n            kx , ky = king [ 0 ] + dx , king [ 1 ] + dy\n            while kx >= 0 and kx < 8 and ky >= 0 and ky < 8 :\n                pos = kx * 8 + ky\n                if queenPos.add ( pos ) :\n                    posList = [ kx , ky ]\n                    ans.append ( posList )\n                    break\n                kx += dx\n                ky += dy\n    return ans\n", "reference_code": "def queensAttacktheKing( queens: List[List[int]], king: List[int]) -> List[List[int]]:\n        queen_pos = set((x, y) for x, y in queens)\n        ans = list()\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if dx == dy == 0:\n                    continue\n                kx, ky = king[0] + dx, king[1] + dy\n                while 0 <= kx < 8 and 0 <= ky < 8:\n                    if (kx, ky) in queen_pos:\n                        ans.append([kx, ky])\n                        break\n                    kx += dx\n                    ky += dy\n        return ans", "target_Lan": "python###queensAttacktheKing.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(queensAttacktheKing([[0, 1], [1, 0], [2, 2], [3, 3]], [3, 2]))\n    print(queensAttacktheKing([], [4, 4]))\n    print(queensAttacktheKing([[8, 8], [9, 9]], [4, 4]))\n    print(queensAttacktheKing([[0, 0], [0, 1], [1, 0]], [0, 7]))\n    print(queensAttacktheKing([[5, 5], [2, 3], [6, 4]], [3, 3]))"}, {"source_Lan": "java###giveGem_Test.java", "source_code": "public static int giveGem(int[] gem, int[][] operations) {\n        for (int[] operation : operations) {\n            int x = operation[0], y = operation[1];\n            int number = gem[x] / 2;\n            gem[x] -= number;\n            gem[y] += number;\n        }\n        int mn = gem[0], mx = gem[0];\n        for (int number : gem) {\n            mn = Math.min(number, mn);\n            mx = Math.max(number, mx);\n        }\n        return mx - mn;\n    }", "trans_code": "def give_gem ( gem , operations ) :\n    for operation in operations :\n        x , y = operation\n        number = gem [ x ] / 2\n        gem [ x ] -= number\n        gem [ y ] += number\n    mn , mx = gem [ 0 ] , gem [ 0 ]\n    for number in gem :\n        mn , mx = min ( number , mn ) , max ( number , mx )\n    return mx - mn , mn\n", "reference_code": "def giveGem( gem: List[int], operations: List[List[int]]) -> int:\n        for x, y in operations:\n            number = gem[x] // 2\n            gem[x] -= number\n            gem[y] += number\n        mn, mx = gem[0], gem[0]\n        for number in gem:\n            mn = min(number, mn)\n            mx = max(number, mx)\n        return mx - mn", "target_Lan": "python###giveGem.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    gem1 = [10, 5, 15]\n    operations1 = [[0, 1], [1, 2]]\n    print(giveGem(gem1, operations1))  \n    gem2 = [0, 0, 0]\n    operations2 = []\n    print(giveGem(gem2, operations2))  \n    gem3 = [8, -2, 5]\n    operations3 = [[0, 1], [2, 1]]\n    print(giveGem(gem3, operations3))  \n    gem4 = [20, 50, 80]\n    operations4 = [[1, 0], [2, 1], [0, 2]]\n    print(giveGem(gem4, operations4))  \n    gem5 = [1000, 3000, 2000]\n    operations5 = [[0, 1], [1, 2]]\n    print(giveGem(gem5, operations5))"}, {"source_Lan": "java###checkValidGrid_Test.java", "source_code": "public static boolean checkValidGrid(int[][] grid) {\n        if (grid[0][0] != 0) {\n            return false;\n        }\n        int n = grid.length;\n        int[][] indices = new int[n * n][2];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                indices[grid[i][j]][0] = i;\n                indices[grid[i][j]][1] = j;\n            }\n        }\n        for (int i = 1; i < n * n; i++) {\n            int dx = Math.abs(indices[i][0] - indices[i - 1][0]);\n            int dy = Math.abs(indices[i][1] - indices[i - 1][1]);\n            if (dx * dy != 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "trans_code": "def check_valid_grid ( grid ) :\n    if grid [ 0 ] [ 0 ] != 0 :\n        return False\n    n = len ( grid )\n    indices = np.zeros ( ( n * n , 2 ) )\n    for i in range ( n ) :\n        for j in range ( n ) :\n            indices [ grid [ i ] [ j ] ] [ 0 ] = i\n            indices [ grid [ i ] [ j ] ] [ 1 ] = j\n    for i in range ( 1 , n * n ) :\n        dx = np.abs ( indices [ i ] [ 0 ] - indices [ i - 1 ] [ 0 ] )\n        dy = np.abs ( indices [ i ] [ 1 ] - indices [ i - 1 ] [ 1 ] )\n        if dx * dy != 2 :\n            return False\n    return True\n", "reference_code": "def checkValidGrid( grid: List[List[int]]) -> bool:\n        if grid[0][0] != 0:\n            return False\n        n = len(grid)\n        indices = [[] for _ in range(n * n)]\n        for i in range(n):\n            for j in range(n):\n                indices[grid[i][j]] = [i, j]\n        for i in range(1, n * n, 1):\n            dx = abs(indices[i][0] - indices[i - 1][0])\n            dy = abs(indices[i][1] - indices[i - 1][1])\n            if dx * dy != 2:\n                return False\n        return True", "target_Lan": "python###checkValidGrid.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(checkValidGrid([[0, 1], [2, 3]]))\n    print(checkValidGrid([[1, 0], [2, 3]]))\n    print(checkValidGrid([[0, 1], [3, 2]]))\n    print(checkValidGrid([[0]]))\n    print(checkValidGrid([[0, 1], [1, 2]]))"}, {"source_Lan": "java###findTheArrayConcVal_Test.java", "source_code": "public static long findTheArrayConcVal(int[] nums) {\n        long ans = 0;\n        for (int i = 0, j = nums.length - 1; i <= j; i++, j--) {\n            if (i != j) {\n                ans += Integer.parseInt(Integer.toString(nums[i]) + Integer.toString(nums[j]));\n            } else {\n                ans += nums[i];\n            }\n        }\n        return ans;\n    }", "trans_code": "def find_the_array_concval ( nums ) :\n    ans = 0\n    for i , j in enumerate ( nums ) :\n        if i != j :\n            ans += int ( str ( i ) + str ( j ) )\n        else :\n            ans += nums [ i ]\n    return ans\n", "reference_code": "def findTheArrayConcVal( nums: List[int]) -> int:\n        ans = 0\n        i, j = 0, len(nums) - 1\n        while i <= j:\n            if i != j:\n                ans += int(str(nums[i]) + str(nums[j]))\n            else:\n                ans += nums[i]\n            i += 1\n            j -= 1\n        return ans", "target_Lan": "python###findTheArrayConcVal.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findTheArrayConcVal([]))          \n    print(findTheArrayConcVal([5]))         \n    print(findTheArrayConcVal([1, 2]))      \n    print(findTheArrayConcVal([3, 4, 5]))"}, {"source_Lan": "java###findDelayedArrivalTime_Test.java", "source_code": "public static int findDelayedArrivalTime(int arrivalTime, int delayedTime) {\n        return (arrivalTime + delayedTime) % 24;\n    }", "trans_code": "def find_delayed_arrival_time ( arrival_time , delayed_time ) :\n    return ( arrival_time + delayed_time ) % 24\n", "reference_code": "def findDelayedArrivalTime( arrivalTime: int, delayedTime: int) -> int:\n        return (arrivalTime + delayedTime) % 24", "target_Lan": "python###findDelayedArrivalTime.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(findDelayedArrivalTime(0, 0))\n    print(findDelayedArrivalTime(23, 1))\n    print(findDelayedArrivalTime(10, 15))\n    print(findDelayedArrivalTime(12, 12))\n    print(findDelayedArrivalTime(25, 100))"}, {"source_Lan": "java###checkIfPrerequisite_Test.java", "source_code": "    public static List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {\n        List<Integer>[] g = new List[numCourses];\n        for (int i = 0; i < numCourses; i++) {\n            g[i] = new ArrayList<Integer>();\n        }\n        int[] indgree = new int[numCourses];\n        boolean[][] isPre = new boolean[numCourses][numCourses];\n        for (int[] p : prerequisites) {\n            ++indgree[p[1]];\n            g[p[0]].add(p[1]);\n        }\n        Queue<Integer> queue = new ArrayDeque<Integer>();\n        for (int i = 0; i < numCourses; ++i) {\n            if (indgree[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int cur = queue.poll();\n            for (int ne : g[cur]) {\n                isPre[cur][ne] = true;\n                for (int i = 0; i < numCourses; ++i) {\n                    isPre[i][ne] = isPre[i][ne] | isPre[i][cur];\n                }\n                --indgree[ne];\n                if (indgree[ne] == 0) {\n                    queue.offer(ne);\n                }\n            }\n        }\n        List<Boolean> res = new ArrayList<Boolean>();\n        for (int[] query : queries) {\n            res.add(isPre[query[0]][query[1]]);\n        }\n        return res;\n    }", "trans_code": "def check_if_prerequisite ( num_courses , prerequisites , queries ) :\n    g = [ [ ] for _ in range ( num_courses ) ]\n    indgree = { }\n    is_pre = [ ]\n    for p in prerequisites :\n        yield indgree [ p [ 1 ] ]\n        g [ p [ 0 ] ].append ( p [ 1 ] )\n    queue = Queue ( )\n    for i in range ( num_courses ) :\n        if indgree [ i ] == 0 :\n            queue.put ( i )\n    while not queue.empty ( ) :\n        cur = queue.get ( )\n        for ne in g [ cur ] :\n            is_pre [ cur ] [ ne ] = True\n            for i in range ( num_courses ) :\n                is_pre [ i ] [ ne ] = is_pre [ i ] [ ne ] | is_pre [ i ] [ cur ]\n            del indgree [ ne ]\n            if indgree [ ne ] == 0 :\n                queue.put ( ne )\n    res = [ ]\n    for query in queries :\n        res.append ( is_pre [ query [ 0 ] ] [ query [ 1 ] ] )\n    return res\n", "reference_code": "def checkIfPrerequisite( numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        g = [[] for _ in range(numCourses)]\n        indgree = [0] * numCourses\n        isPre = [[False] * numCourses for _ in range(numCourses)]\n        for p in prerequisites:\n            indgree[p[1]] += 1\n            g[p[0]].append(p[1])\n        q = []\n        for i in range(numCourses):\n            if indgree[i] == 0:\n                q.append(i)\n        while len(q) > 0:\n            cur = q[0]\n            q.pop(0)\n            for ne in g[cur]:\n                isPre[cur][ne] = True\n                for i in range(numCourses):\n                    isPre[i][ne] = isPre[i][ne] or isPre[i][cur]\n                indgree[ne] -= 1\n                if indgree[ne] == 0:\n                    q.append(ne)\n        res = []\n        for query in queries:\n            res.append(isPre[query[0]][query[1]])\n        return res", "target_Lan": "python###checkIfPrerequisite.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(checkIfPrerequisite(3, [[0, 1], [1, 2]], [[0, 2], [1, 0]]))\n    print(checkIfPrerequisite(4, [[0, 1], [1, 2], [2, 3]], [[0, 3], [3, 0], [0, 1]]))\n    print(checkIfPrerequisite(5, [[0, 1], [1, 2], [2, 3], [0, 4]], [[0, 3], [0, 4], [1, 2], [2, 4]]))"}, {"source_Lan": "java###minTrioDegree_Test.java", "source_code": "    public static int minTrioDegree(int n, int[][] edges) {\n        int[][] g = new int[n][n];\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            g[x][y] = g[y][x] = 1;\n            ++degree[x];\n            ++degree[y];\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (g[i][j] == 1) {\n                    for (int k = j + 1; k < n; ++k) {\n                        if (g[i][k] == 1 && g[j][k] == 1) {\n                            ans = Math.min(ans, degree[i] + degree[j] + degree[k] - 6);\n                        }\n                    }\n                }\n            }\n        }\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }", "trans_code": "def min_trio_degree ( n , edges ) :\n    g = np.zeros ( ( n , n ) )\n    degree = np.zeros ( ( n , n ) )\n    for edge in edges :\n        x , y = edge [ 0 ] - 1 , edge [ 1 ] - 1\n        g [ x , y ] = g [ y , x ] = 1\n        yield degree [ x ] , degree [ y ]\n    ans = np.inf\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if g [ i , j ] == 1 :\n                for k in range ( j + 1 , n ) :\n                    if g [ i , k ] == 1 and g [ j , k ] == 1 :\n                        ans = min ( ans , degree [ i ] + degree [ j ] + degree [ k ] - 6 )\n", "reference_code": "def minTrioDegree( n: int, edges: List[List[int]]) -> int:\n        g = [[0] * n for _ in range(n)]\n        degree = [0] * n\n        for x, y in edges:\n            x, y = x - 1, y - 1\n            g[x][y] = g[y][x] = 1\n            degree[x] += 1\n            degree[y] += 1\n        ans = inf\n        for i in range(n):\n            for j in range(i + 1, n):\n                if g[i][j] == 1:\n                    for k in range(j + 1, n):\n                        if g[i][k] == g[j][k] == 1:\n                            ans = min(ans, degree[i] + degree[j] + degree[k] - 6)\n        return -1 if ans == inf else ans", "target_Lan": "python###minTrioDegree.py", "target_code_shell": "from typing import List\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(minTrioDegree(3, [[1, 2], [2, 3], [1, 3]]))       \n    print(minTrioDegree(4, [[1, 2], [1, 3], [2, 3]]))       \n    print(minTrioDegree(5, [[1, 2], [2, 3], [3, 4]]))       \n    print(minTrioDegree(4, [[1, 2], [2, 3], [1, 3], [1, 4]])) \n    print(minTrioDegree(6, [[1, 2], [1, 3], [2, 3], [2, 4], [4, 5], [5, 6], [6, 1]]))"}, {"source_Lan": "java###minTrioDegree_Test.java", "source_code": "public static int minTrioDegree(int n, int[][] edges) {\n        \n        Set<Integer>[] g = new Set[n];\n        for (int i = 0; i < n; ++i) {\n            g[i] = new HashSet<Integer>();\n        }\n        \n        List<Integer>[] h = new List[n];\n        for (int i = 0; i < n; ++i) {\n            h[i] = new ArrayList<Integer>();\n        }\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            g[x].add(y);\n            g[y].add(x);\n            ++degree[x];\n            ++degree[y];\n        }\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            if (degree[x] < degree[y] || (degree[x] == degree[y] && x < y)) {\n                h[x].add(y);\n            } else {\n                h[y].add(x);\n            }\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; ++i) {\n            for (int j : h[i]) {\n                for (int k : h[j]) {\n                    if (g[i].contains(k)) {\n                        ans = Math.min(ans, degree[i] + degree[j] + degree[k] - 6);\n                    }\n                }\n            }\n        }\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }", "trans_code": "def min_trio_degree ( n , edges ) :\n    g = set ( )\n    h = [ ]\n    degree = [ ]\n    for edge in edges :\n        x , y = edge [ 0 ] - 1 , edge [ 1 ] - 1\n        g.add ( y )\n        g.add ( x )\n        degree.append ( x )\n        degree.append ( y )\n    for edge in edges :\n        x , y = edge [ 0 ] - 1 , edge [ 1 ] - 1\n        if degree [ x ] < degree [ y ] or ( degree [ x ] == degree [ y ] and x < y ) :\n            h.append ( y )\n        else :\n            h.append ( x )\n    ans = float ( 'inf' )\n    for i in range ( n ) :\n        for j in range ( h [ i ] ) :\n            for k in range ( h [ j ] ) :\n                if g [ i ] [ k ] :\n                    ans = min ( ans , degree [ i ] + degree [ j ] + degree [ k ] - 6 )\n    return ans if ans else - 1\n", "reference_code": "def minTrioDegree( n: int, edges: List[List[int]]) -> int:\n        # \u539f\u56fe\n        g = defaultdict(set)\n        # \u5b9a\u5411\u540e\u7684\u56fe\n        h = defaultdict(list)\n        degree = [0] * n\n        for x, y in edges:\n            x, y = x - 1, y - 1\n            g[x].add(y)\n            g[y].add(x)\n            degree[x] += 1\n            degree[y] += 1\n        for x, y in edges:\n            x, y = x - 1, y - 1\n            if degree[x] < degree[y] or (degree[x] == degree[y] and x < y):\n                h[x].append(y)\n            else:\n                h[y].append(x)\n        ans = inf\n        for i in range(n):\n            for j in h[i]:\n                for k in h[j]:\n                    if k in g[i]:\n                        ans = min(ans, degree[i] + degree[j] + degree[k] - 6)\n        return -1 if ans == inf else ans", "target_Lan": "python###minTrioDegree.py", "target_code_shell": "from collections import defaultdict\nfrom typing import List\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(minTrioDegree(3, [[1, 2], [1, 3], [2, 3]]))\n    print(minTrioDegree(4, [[1, 2], [1, 3]]))\n    print(minTrioDegree(5, [[1, 2], [2, 3], [3, 1], [1, 4], [4, 5]]))\n    print(minTrioDegree(0, []))\n    print(minTrioDegree(6, [[1, 2], [2, 3], [1, 3], [4, 5], [5, 6], [4, 6]]))"}, {"source_Lan": "java###minimumJumps_Test.java", "source_code": "public static int minimumJumps(int[] forbidden, int a, int b, int x) {\n        Queue<int[]> queue = new ArrayDeque<int[]>();\n        Set<Integer> visited = new HashSet<Integer>();\n        queue.offer(new int[]{0, 1, 0});\n        visited.add(0);\n        int lower = 0, upper = Math.max(Arrays.stream(forbidden).max().getAsInt() + a, x) + b;\n        Set<Integer> forbiddenSet = new HashSet<Integer>();\n        for (int position : forbidden) {\n            forbiddenSet.add(position);\n        }\n        while (!queue.isEmpty()) {\n            int[] arr = queue.poll();\n            int position = arr[0], direction = arr[1], step = arr[2];\n            if (position == x) {\n                return step;\n            }\n            int nextPosition = position + a;\n            int nextDirection = 1;\n            if (lower <= nextPosition && nextPosition <= upper && !visited.contains(nextPosition * nextDirection) && !forbiddenSet.contains(nextPosition)) {\n                visited.add(nextPosition * nextDirection);\n                queue.offer(new int[]{nextPosition, nextDirection, step + 1});\n            }\n            if (direction == 1) {\n                nextPosition = position - b;\n                nextDirection = -1;\n                if (lower <= nextPosition && nextPosition <= upper && !visited.contains(nextPosition * nextDirection) && !forbiddenSet.contains(nextPosition)) {\n                    visited.add(nextPosition * nextDirection);\n                    queue.offer(new int[]{nextPosition, nextDirection, step + 1});\n                }\n            }\n        }\n        return -1;\n    }", "trans_code": "def minimum_jumps ( forbidden , a , b , x ) :\n    queue = Queue ( )\n    visited = set ( )\n    queue.put ( [ 0 , 1 , 0 ] )\n    visited.add ( 0 )\n    lower , upper = max ( map ( int , forbidden ) )\n    forbidden_set = set ( )\n    for position in forbidden :\n        forbidden_set.add ( position )\n    while not queue.empty ( ) :\n        arr = queue.get ( )\n        position , direction , step = arr\n        if position == x :\n            return step\n        next_position = position + a\n        next_direction = 1\n        if lower <= next_position <= upper and not visited.add ( next_position * next_direction ) and not forbidden_set.add ( next_position ) :\n            visited.add ( next_position * next_direction )\n            queue.put ( [ next_position , next_direction , step + 1 ] )\n        if direction == 1 :\n            next_position = position - b\n            next_direction = - 1\n            if lower <= next_position <= upper and not visited.add ( next_position * next_direction ) and not forbidden_set.add ( next_position ) :\n                visited.add ( next_position * next_direction )\n                queue.put ( [ next_position , next_direction , step + 1 ] )\n    return - 1\n", "reference_code": "def minimumJumps( forbidden: List[int], a: int, b: int, x: int) -> int:\n        q, visited = deque([[0, 1, 0]]), set([0])\n        lower, upper = 0, max(max(forbidden) + a, x) + b\n        forbiddenSet = set(forbidden)\n        while q:\n            position, direction, step = q.popleft()\n            if position == x:\n                return step\n            nextPosition = position + a\n            nextDirection = 1\n            if lower <= nextPosition <= upper and nextPosition * nextDirection not in visited and nextPosition not in forbiddenSet:\n                visited.add(nextPosition * nextDirection)\n                q.append([nextPosition, nextDirection, step + 1])\n            if direction == 1:\n                nextPosition = position - b\n                nextDirection = -1\n                if lower <= nextPosition <= upper and nextPosition * nextDirection not in visited and nextPosition not in forbiddenSet:\n                    visited.add(nextPosition * nextDirection)\n                    q.append([nextPosition, nextDirection, step + 1])\n        return -1", "target_Lan": "python###minimumJumps.py", "target_code_shell": "from collections import deque\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumJumps([3, 4], 5, 2, 10))\n    print(minimumJumps([2, 5], 1, 1, 6))\n    print(minimumJumps([1, 2, 3], 2, 1, 8))\n    print(minimumJumps([7, 9, 10], 3, 2, 12))"}, {"source_Lan": "java###numFactoredBinaryTrees_Test.java", "source_code": "public static int numFactoredBinaryTrees(int[] arr) {\n        Arrays.sort(arr);\n        int n = arr.length;\n        long[] dp = new long[n];\n        long res = 0, mod = 1000000007;\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            for (int left = 0, right = i - 1; left <= right; left++) {\n                while (right >= left && (long) arr[left] * arr[right] > arr[i]) {\n                    right--;\n                }\n                if (right >= left && (long) arr[left] * arr[right] == arr[i]) {\n                    if (right != left) {\n                        dp[i] = (dp[i] + dp[left] * dp[right] * 2) % mod;\n                    } else {\n                        dp[i] = (dp[i] + dp[left] * dp[right]) % mod;\n                    }\n                }\n            }\n            res = (res + dp[i]) % mod;\n        }\n        return (int) res;\n    }", "trans_code": "def num_factored_binary_trees ( arr ) :\n    arr.sort ( )\n    n = len ( arr )\n    dp = [ 0 ] * n\n    res , mod = 0 , 1000000007\n    for i in range ( n ) :\n        dp [ i ] = 1\n        for left , right in enumerate ( i - 1 , 1 ) :\n            while right >= left and int ( arr [ left ] * arr [ right ] ) > arr [ i ] :\n                right -= 1\n            if right >= left and int ( arr [ left ] * arr [ right ] ) == arr [ i ] :\n                if right != left :\n                    dp [ i ] = ( dp [ i ] + dp [ left ] * dp [ right ] ** 2 ) % mod\n                else :\n                    dp [ i ] = ( dp [ i ] + dp [ left ] * dp [ right ] ) % mod\n        res = ( res + dp [ i ] ) % mod\n    return int ( res )\n", "reference_code": "def numFactoredBinaryTrees( arr: List[int]) -> int:\n        n = len(arr)\n        arr = sorted(arr)\n        dp = [1] * n\n        res, mod = 0, 10**9 + 7\n        for i in range(n):\n            left, right = 0, i - 1\n            while left <= right:\n                while right >= left and arr[left] * arr[right] > arr[i]:\n                    right -= 1\n                if right >= left and arr[left] * arr[right] == arr[i]:\n                    if right != left:\n                        dp[i] = (dp[i] + dp[left] * dp[right] * 2) % mod\n                    else:\n                        dp[i] = (dp[i] + dp[left] * dp[right]) % mod\n                left += 1\n            res = (res + dp[i]) % mod\n        return res", "target_Lan": "python###numFactoredBinaryTrees.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(numFactoredBinaryTrees([]))            \n    print(numFactoredBinaryTrees([2]))           \n    print(numFactoredBinaryTrees([2, 4]))        \n    print(numFactoredBinaryTrees([2, 4, 8]))     \n    print(numFactoredBinaryTrees([15, 3, 5]))"}, {"source_Lan": "java###countPairs_Test.java", "source_code": "public static int[] countPairs(int n, int[][] edges, int[] queries) {\n        int[] degree = new int[n];\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            if (x > y) {\n                int temp = x;\n                x = y;\n                y = temp;\n            }\n            degree[x]++;\n            degree[y]++;\n            cnt.put(x * n + y, cnt.getOrDefault(x * n + y, 0) + 1);\n        }\n        int[] arr = Arrays.copyOf(degree, n);\n        int[] ans = new int[queries.length];\n        Arrays.sort(arr);\n        for (int k = 0; k < queries.length; k++) {\n            int bound = queries[k], total = 0;\n            for (int i = 0, j = n - 1; i < n; i++) {\n                while (j > i && arr[i] + arr[j] > bound) {\n                    j--;\n                }\n                total += n - 1 - Math.max(i, j);\n            }\n            for (Map.Entry<Integer, Integer> entry : cnt.entrySet()) {\n                int val = entry.getKey(), freq = entry.getValue();\n                int x = val / n, y = val % n;\n                if (degree[x] + degree[y] > bound && degree[x] + degree[y] - freq <= bound) {\n                    total--;\n                }\n            }\n            ans[k] = total;\n        }\n        return ans;\n    }", "trans_code": "def count_pairs ( n , edges , queries ) :\n    degree = [ 0 ] * n\n    cnt = { }\n    for edge in edges :\n        x , y = edge [ 0 ] - 1 , edge [ 1 ] - 1\n        if x > y :\n            temp = x\n            x , y = y , temp\n        degree [ x ] += 1\n        degree [ y ] += 1\n        cnt [ x * n + y ] = cnt.get ( x * n + y , 0 ) + 1\n    arr = list ( degree )\n    ans = [ 0 ] * len ( queries )\n    for k in range ( len ( queries ) ) :\n        bound , total = queries [ k ] , 0\n        for i , j in enumerate ( range ( n - 1 , n ) ) :\n            while j > i and arr [ i ] + arr [ j ] > bound :\n                j -= 1\n            total += n - 1 - max ( i , j )\n        for key , freq in cnt.items ( ) :\n            val , freq = key\n            x , y = val // n , val % n\n            if degree [ x ] + degree [ y ] > bound and degree [ x ] + degree [ y ] - freq <= bound :\n                total -= 1\n        ans [ k ] = total\n    return ans\n", "reference_code": "def countPairs( n: int, edges: List[List[int]], queries: List[int]) -> List[int]:\n        degree = [0 for _ in range(n)]\n        cnt = collections.defaultdict(int)\n        for edge in edges:\n            x, y = edge[0] - 1, edge[1] - 1\n            if x > y:\n                x, y = y, x\n            degree[x] += 1\n            degree[y] += 1\n            cnt[x * n + y] += 1\n        arr = sorted(degree)\n        ans = []\n        for bound in queries:\n            total = 0\n            j = n - 1\n            for i in range(n):\n                while j > i and arr[i] + arr[j] > bound:\n                    j -= 1\n                total += n - 1 - max(i, j)\n            for val, freq in cnt.items():\n                x, y = val // n, val % n\n                if degree[x] + degree[y] > bound and degree[x] + degree[y] - freq <= bound:\n                    total -= 1\n            ans.append(total)\n        return ans", "target_Lan": "python###countPairs.py", "target_code_shell": "import collections\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(countPairs(5, [], {1, 2, 3}))\n    print(countPairs(5, [[1, 2], [1, 3]], {1, 2, 3}))\n    print(countPairs(5, [[1, 2], [1, 3], [1, 4], [1, 5]], {4}))\n    print(countPairs(5, [[1, 2], [2, 3], [3, 4]], {-1, 0}))\n    edges = [[i, i + 1] for i in range(1, 1000)]  \n    print(countPairs(1000, edges, {1000}))"}, {"source_Lan": "java###captureForts_Test.java", "source_code": "public static int captureForts(int[] forts) {\n        int n = forts.length;\n        int ans = 0, pre = -1;\n        for (int i = 0; i < n; i++) {\n            if (forts[i] == 1 || forts[i] == -1) {\n                if (pre >= 0 && forts[i] != forts[pre]) {\n                    ans = Math.max(ans, i - pre - 1);\n                }\n                pre = i;\n            }\n        }\n        return ans;\n    }", "trans_code": "def capture_forts ( forts ) :\n    n = len ( forts )\n    ans , pre = 0 , - 1\n    for i in range ( n ) :\n        if forts [ i ] == 1 or forts [ i ] == - 1 :\n            if pre >= 0 and forts [ i ] != forts [ pre ] :\n                ans = max ( ans , i - pre - 1 )\n            pre = i\n    return ans\n", "reference_code": "def captureForts( forts: List[int]) -> int:\n        ans, pre = 0, -1\n        for i, fort in enumerate(forts):\n            if fort == -1 or fort == 1:\n                if pre >= 0 and fort != forts[pre]:\n                    ans = max(ans, i - pre - 1)\n                pre = i\n        return ans", "target_Lan": "python###captureForts.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(captureForts([]))\n    print(captureForts([1, 1, 1, 1]))\n    print(captureForts([-1, -1, -1, -1]))\n    print(captureForts([1, 0, 0, -1, 0, 1]))\n    print(captureForts([1, -1, 0, 1, -1]))"}, {"source_Lan": "java###maxDistToClosest_Test.java", "source_code": "public static int maxDistToClosest(int[] seats) {\n        int res = 0;\n        int l = 0;\n        while (l < seats.length && seats[l] == 0) {\n            ++l;\n        }\n        res = Math.max(res, l);\n        while (l < seats.length) {\n            int r = l + 1;\n            while (r < seats.length && seats[r] == 0) {\n                ++r;\n            }\n            if (r == seats.length) {\n                res = Math.max(res, r - l - 1);\n            } else {\n                res = Math.max(res, (r - l) / 2);\n            }\n            l = r;\n        }\n        return res;\n    }", "trans_code": "def max_dist_to_closest ( seats ) :\n    res = 0\n    l = 0\n    while l < len ( seats ) and seats [ l ] == 0 :\n        l += 1\n    res = max ( res , l )\n    while l < len ( seats ) :\n        r = l + 1\n        while r < len ( seats ) and seats [ r ] == 0 :\n            r += 1\n        if r == len ( seats ) :\n            res = max ( res , r - l - 1 )\n        else :\n            res = max ( res , ( r - l ) / 2 )\n        l = r\n    return res\n", "reference_code": "def maxDistToClosest( seats: List[int]) -> int:\n        res, l = 0, 0\n        while l < len(seats) and seats[l] == 0:\n            l += 1\n        res = max(res, l)\n        while l < len(seats):\n            r = l + 1\n            while r < len(seats) and seats[r] == 0:\n                r += 1\n            if r == len(seats):\n                res = max(res, r - l - 1)\n            else:\n                res = max(res, (r - l) // 2)\n            l = r\n        return res", "target_Lan": "python###maxDistToClosest.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxDistToClosest([]))                 \n    print(maxDistToClosest([1, 1, 1, 1, 1]))   \n    print(maxDistToClosest([0, 0, 1, 0, 0]))   \n    print(maxDistToClosest([0, 1, 0, 1, 0]))   \n    print(maxDistToClosest([1, 0, 0, 0, 1]))"}, {"source_Lan": "java###ways_Test.java", "source_code": "public static int ways(String[] pizza, int k) {\n        int m = pizza.length, n = pizza[0].length(), mod = 1_000_000_007;\n        int[][] apples = new int[m + 1][n + 1];\n        int[][][] dp = new int[k + 1][m + 1][n + 1];\n        \n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                apples[i][j] = apples[i][j + 1] + apples[i + 1][j] - apples[i + 1][j + 1] + (pizza[i].charAt(j) == 'A' ? 1 : 0);\n                dp[1][i][j] = apples[i][j] > 0 ? 1 : 0;\n            }\n        }\n        for (int ki = 2; ki <= k; ki++) {\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    \n                    for (int i2 = i + 1; i2 < m; i2++) {\n                        if (apples[i][j] > apples[i2][j]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i2][j]) % mod;\n                        }\n                    }\n                    \n                    for (int j2 = j + 1; j2 < n; j2++) {\n                        if (apples[i][j] > apples[i][j2]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i][j2]) % mod;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[k][0][0];\n    }", "trans_code": "def ways ( pizza , k ) :\n    m , n , mod = len ( pizza ) , 1_000_000_007\n    apples = np.zeros ( ( m + 1 , n + 1 ) )\n    dp = np.zeros ( ( k + 1 , m + 1 ) )\n    for i in range ( m - 1 , - 1 , - 1 ) :\n        for j in range ( n - 1 , - 1 , - 1 ) :\n            apples [ i ] [ j ] = apples [ i ] [ j + 1 ] + apples [ i + 1 ] [ j ] - apples [ i + 1 ] [ j + 1 ] + ( pizza [ i ] [ j ] == 'A' )\n            dp [ 1 ] [ i ] [ j ] = apples [ i ] [ j ] > 0\n    for ki in range ( 2 , k + 1 ) :\n        for i in range ( m ) :\n            for j in range ( n ) :\n                for i2 in range ( i + 1 , m + 1 ) :\n                    if apples [ i ] [ j ] > apples [ i2 ] [ j ] :\n                        dp [ ki ] [ i ] [ j ] = ( dp [ ki ] [ i ] [ j ] + dp [ ki - 1 ] [ i2 ] [ j ] ) % mod\n                for j2 in range ( j + 1 , n + 1 ) :\n                    if apples [ i ] [ j ] > apples [ i ] [ j2 ] :\n                        dp [ ki ] [ i ] [ j ] = ( dp [ ki ] [ i ] [ j ] + dp [ ki - 1 ] [ i ] [ j2 ] ) % mod\n    return dp [ k ] [ 0 ]\n", "reference_code": "def ways( pizza: List[str], k: int) -> int:\n        m, n, mod = len(pizza), len(pizza[0]), 10 ** 9 + 7\n        apples = [[0] * (n + 1) for _ in range(m + 1)]\n        dp = [[[0 for j in range(n)] for i in range(m)] for _ in range(k + 1)]\n        # \u9884\u5904\u7406\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                apples[i][j] = apples[i][j + 1] + apples[i + 1][j] - apples[i + 1][j + 1] + (pizza[i][j] == 'A')\n                dp[1][i][j] = 1 if apples[i][j] > 0 else 0\n        for k in range(1, k + 1):\n            for i in range(m):\n                for j in range(n):\n                    # \u6c34\u5e73\u65b9\u5411\u5207\n                    for i2 in range(i + 1, m):\n                        if apples[i][j] > apples[i2][j]:\n                            dp[k][i][j] = (dp[k][i][j] + dp[k - 1][i2][j]) % mod\n                    # \u5782\u76f4\u65b9\u5411\u5207\n                    for j2 in range(j + 1, n):\n                        if apples[i][j] > apples[i][j2]:\n                            dp[k][i][j] = (dp[k][i][j] + dp[k - 1][i][j2]) % mod\n        return dp[k][0][0]", "target_Lan": "python###ways.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(ways([\"A\"], 1))\n    print(ways([\"A\", \"A\"], 2))\n    print(ways([\"AAA\", \"AAA\", \"AAA\"], 3))\n    print(ways([\"AA\", \"AA\", \"AA\"], 4))\n    print(ways([\"A\", \"A\", \"A\"], 3))"}, {"source_Lan": "java###findReplaceString_Test.java", "source_code": "public static String findReplaceString(String s, int[] indices, String[] sources, String[] targets) {\n        int n = s.length(), m = indices.length;\n        List<Integer> ops = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            ops.add(i);\n        }\n        ops.sort((i, j) -> indices[i] - indices[j]);\n        StringBuilder ans = new StringBuilder();\n        int pt = 0;\n        for (int i = 0; i < n;) {\n            while (pt < m && indices[ops.get(pt)] < i) {\n                pt++;\n            }\n            boolean succeed = false;\n            while (pt < m && indices[ops.get(pt)] == i) {\n                if (s.substring(i, Math.min(i + sources[ops.get(pt)].length(), n)).equals(sources[ops.get(pt)])) {\n                    succeed = true;\n                    break;\n                }\n                pt++;\n            }\n            if (succeed) {\n                ans.append(targets[ops.get(pt)]);\n                i += sources[ops.get(pt)].length();\n            } else {\n                ans.append(s.charAt(i));\n                i++;\n            }\n        }\n        return ans.toString();\n    }", "trans_code": "def find_replace_string ( s , indices , sources , targets ) :\n    n , m = len ( s ) , len ( indices )\n    ops = [ i for i in range ( m ) ]\n    ops.sort ( ( i , j ) )\n    ans = [ ]\n    pt = 0\n    for i in range ( n ) :\n        while pt < m and indices [ ops [ pt ] ] < i :\n            pt += 1\n        succeed = False\n        while pt < m and indices [ ops [ pt ] ] == i :\n            if s [ i : min ( i + len ( sources [ ops [ pt ] ] ) , n ) ] == sources [ ops [ pt ] ] :\n                succeed = True\n                break\n            pt += 1\n        if succeed :\n            ans.append ( targets [ ops [ pt ] ] )\n            i += len ( sources [ ops [ pt ] ] )\n        else :\n            ans.append ( s [ i ] )\n            i += 1\n    return ans\n", "reference_code": "def findReplaceString( s: str, indices: List[int], sources: List[str], targets: List[str]) -> str:\n        n, m = len(s), len(indices)\n        ops = list(range(m))\n        ops.sort(key=lambda x: indices[x])\n        ans = list()\n        i = pt = 0\n        while i < n:\n            while pt < m and indices[ops[pt]] < i:\n                pt += 1\n            succeed = False\n            while pt < m and indices[ops[pt]] == i:\n                if s[i:i + len(sources[ops[pt]])] == sources[ops[pt]]:\n                    succeed = True\n                    break\n                pt += 1\n            if succeed:\n                ans.append(targets[ops[pt]])\n                i += len(sources[ops[pt]])\n            else:\n                ans.append(s[i])\n                i += 1\n        return \"\".join(ans)", "target_Lan": "python###findReplaceString.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findReplaceString(\"\", [], [], []))  \n    print(findReplaceString(\"hello world\", [0, 6], [\"hi\", \"world\"], [\"hey\", \"Earth\"]))  \n    print(findReplaceString(\"hello world\", [0, 6], [\"hello\", \"world\"], [\"hi\", \"Earth\"]))  \n    print(findReplaceString(\"hello world\", [0, 3], [\"he\", \"lo\"], [\"fo\", \"la\"]))  \n    print(findReplaceString(\"abc def ghi\", [0, 4, 8], [\"abc\", \"def\", \"ghi\"], [\"123\", \"456\", \"789\"]))"}, {"source_Lan": "java###circularGameLosers_Test.java", "source_code": "public static int[] circularGameLosers(int n, int k) {\n        boolean[] visit = new boolean[n];\n        for (int i = k, j = 0; !visit[j]; i += k) {\n            visit[j] = true;\n            j = (j + i) % n;\n        }\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (!visit[i]) {\n                list.add(i + 1);\n            }\n        }\n        int[] ans = new int[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n            ans[i] = list.get(i);\n        }\n        return ans;\n    }", "trans_code": "def circular_game_losers ( n , k ) :\n    visit = [ ]\n    for i , j in enumerate ( range ( k ) ) :\n        visit.append ( True )\n        j = ( j + i ) % n\n    list = [ ]\n    for i in range ( n ) :\n        if not visit [ i ] :\n            list.append ( i + 1 )\n    ans = [ ]\n    for i in range ( len ( list ) ) :\n        ans.append ( list [ i ] )\n    return ans\n", "reference_code": "def circularGameLosers( n: int, k: int) -> List[int]:\n        visit = [False] * n\n        i = k\n        j = 0\n        while not visit[j]:\n            visit[j] = True\n            j = (j + i) % n\n            i += k\n        ans = []\n        for i in range(n):\n            if not visit[i]:\n                ans.append(i + 1)\n        return ans", "target_Lan": "python###circularGameLosers.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(circularGameLosers(1, 1))\n    print(circularGameLosers(5, 2))\n    print(circularGameLosers(10, 10))\n    print(circularGameLosers(100, 15))\n    print(circularGameLosers(7, 8))"}, {"source_Lan": "java###countSeniors_Test.java", "source_code": "public static int countSeniors(String[] details) {\n        int count = 0;\n        for (String info : details) {\n            if (Integer.parseInt(info.substring(11, 13)) > 60) {\n                count++;\n            }\n        }\n        return count;\n    }", "trans_code": "def count_seniors ( details ) :\n    count = 0\n    for info in details :\n        if int ( info [ 11 : 13 ] ) > 60 :\n            count += 1\n    return count\n", "reference_code": "def countSeniors( details: List[str]) -> int:\n        return sum(1 for info in details if int(info[11:13]) > 60)", "target_Lan": "python###countSeniors.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(countSeniors([]))"}, {"source_Lan": "java###maxAbsoluteSum_Test.java", "source_code": "public static int maxAbsoluteSum(int[] nums) {\n        int positiveMax = 0, negativeMin = 0;\n        int positiveSum = 0, negativeSum = 0;\n        for (int num : nums) {\n            positiveSum += num;\n            positiveMax = Math.max(positiveMax, positiveSum);\n            positiveSum = Math.max(0, positiveSum);\n            negativeSum += num;\n            negativeMin = Math.min(negativeMin, negativeSum);\n            negativeSum = Math.min(0, negativeSum);\n        }\n        return Math.max(positiveMax, -negativeMin);\n    }", "trans_code": "def max_absolute_sum ( nums ) :\n    positive_max , negative_min = 0 , 0\n    positive_sum , negative_sum = 0 , 0\n    for num in nums :\n        positive_sum += num\n        positive_max = max ( positive_max , positive_sum )\n        positive_sum = max ( 0 , positive_sum )\n        negative_sum += num\n        negative_min = min ( negative_min , negative_sum )\n        negative_sum = min ( 0 , negative_sum )\n    return max ( positive_max , - negative_min )\n", "reference_code": "def maxAbsoluteSum( nums: List[int]) -> int:\n        positiveMax, negativeMin = 0, 0\n        positiveSum, negativeSum = 0, 0\n        for n in nums:\n            positiveSum += n\n            positiveMax = max(positiveMax, positiveSum)\n            positiveSum = max(0, positiveSum)\n            negativeSum += n\n            negativeMin = min(negativeMin, negativeSum)\n            negativeSum = min(0, negativeSum)\n        return max(positiveMax, -negativeMin)", "target_Lan": "python###maxAbsoluteSum.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxAbsoluteSum([]))  \n    print(maxAbsoluteSum([1, 2, 3, 4, 5]))  \n    print(maxAbsoluteSum([-1, -2, -3, -4, -5]))  \n    print(maxAbsoluteSum([1, -2, 3, -4, 5]))  \n    print(maxAbsoluteSum([0, 1, -1, 2, -2]))"}, {"source_Lan": "java###maxScore_Test.java", "source_code": "public static int maxScore(List<List<Integer>> grid) {\n        int m = grid.size(), n = grid.get(0).size();\n        int[][] prerow = new int[m][n];\n        int[][] precol = new int[m][n];\n        int[][] f = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            Arrays.fill(f[i], Integer.MIN_VALUE);\n        }\n        int ans = Integer.MIN_VALUE;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i > 0) {\n                    f[i][j] = Math.max(f[i][j], grid.get(i).get(j) + precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    f[i][j] = Math.max(f[i][j], grid.get(i).get(j) + prerow[i][j - 1]);\n                }\n                ans = Math.max(ans, f[i][j]);\n                prerow[i][j] = precol[i][j] = Math.max(f[i][j], 0) - grid.get(i).get(j);\n                if (i > 0) {\n                    precol[i][j] = Math.max(precol[i][j], precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    prerow[i][j] = Math.max(prerow[i][j], prerow[i][j - 1]);\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def max_score ( grid ) :\n    m , n = len ( grid ) , len ( grid [ 0 ] )\n    prerow = [ ]\n    precol = [ ]\n    f = [ ]\n    for i in range ( m ) :\n        del f [ i ]\n    ans = int ( 0 )\n    for i in range ( m ) :\n        for j in range ( n ) :\n            if i > 0 :\n                f [ i ] [ j ] = max ( f [ i ] [ j ] , grid [ i ] [ j ] + precol [ i - 1 ] [ j ] )\n            if j > 0 :\n                f [ i ] [ j ] = max ( f [ i ] [ j ] , grid [ i ] [ j ] + prerow [ i ] [ j - 1 ] )\n            ans = max ( ans , f [ i ] [ j ] )\n            prerow [ i ] [ j ] = precol [ i ] [ j ] = max ( f [ i ] [ j ] , 0 ) - grid [ i ] [ j ]\n            if i > 0 :\n                precol [ i ] [ j ] = max ( precol [ i ] [ j ] , precol [ i - 1 ] [ j ] )\n            if j > 0 :\n                prerow [ i ] [ j ] = max ( prerow [ i ] [ j ] , prerow [ i ] [ j - 1 ] )\n    return ans\n", "reference_code": "def maxScore( grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        prerow = [[0] * n for _ in range(m)]\n        precol = [[0] * n for _ in range(m)]\n        f = [[-inf] * n for _ in range(m)]\n        ans = -inf\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    f[i][j] = max(f[i][j], grid[i][j] + precol[i - 1][j])\n                if j > 0:\n                    f[i][j] = max(f[i][j], grid[i][j] + prerow[i][j - 1])\n                ans = max(ans, f[i][j])\n                prerow[i][j] = precol[i][j] = max(f[i][j], 0) - grid[i][j]\n                if i > 0:\n                    precol[i][j] = max(precol[i][j], precol[i - 1][j])\n                if j > 0:\n                    prerow[i][j] = max(prerow[i][j], prerow[i][j - 1])\n        return ans", "target_Lan": "python###maxScore.py", "target_code_shell": "from typing import List\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxScore([[1, -2], [3, 4]]))\n    print(maxScore([[0, 0], [0, 0]]))\n    print(maxScore([[-1, -1], [-1, -1]]))\n    print(maxScore([[1, 2, 3], [4, -1, 6], [7, 8, 9]]))\n    print(maxScore([[10, -5, 20], [-1, 5, 2], [6, 3, -10]]))"}, {"source_Lan": "java###isArraySpecial_Test.java", "source_code": "public static boolean[] isArraySpecial(int[] nums, int[][] queries) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for (int i = 1; i < n; i++) {\n            if (((nums[i] ^ nums[i - 1]) & 1) != 0) {\n                dp[i] = dp[i - 1] + 1;\n            }\n        }\n        boolean[] res = new boolean[queries.length];\n        for (int i = 0; i < queries.length; i++) {\n            int x = queries[i][0], y = queries[i][1];\n            res[i] = dp[y] >= y - x + 1;\n        }\n        return res;\n    }", "trans_code": "def is_array_special ( nums , queries ) :\n    n = len ( nums )\n    dp = [ 1 ] * n\n    for i in range ( 1 , n ) :\n        if ( ( nums [ i ] ^ nums [ i - 1 ] ) & 1 ) :\n            dp [ i ] = dp [ i - 1 ] + 1\n    res = [ ]\n    for i in range ( len ( queries ) ) :\n        x , y = queries [ i ]\n        res.append ( dp [ y ] >= y - x + 1 )\n    return res\n", "reference_code": "def isArraySpecial( nums: List[int], queries: List[List[int]]) -> List[bool]:\n       n = len(nums)\n       dp = [1] * n\n       for i in range(1, n):\n           if (nums[i] ^ nums[i - 1]) & 1 == 1:\n               dp[i] = dp[i - 1] + 1\n       return [dp[y] >= y - x + 1 for x, y in queries]", "target_Lan": "python###isArraySpecial.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    nums1 = [2, 3, 4, 5, 6]\n    queries1 = [[0, 2]]\n    print(isArraySpecial(nums1, queries1))  \n    nums2 = [2]\n    queries2 = [[0, 0]]\n    print(isArraySpecial(nums2, queries2))  \n    nums3 = [1, 3, 5, 7]\n    queries3 = [[0, 3]]\n    print(isArraySpecial(nums3, queries3))  \n    nums4 = [2, 4, 6, 8]\n    queries4 = [[0, 3]]\n    print(isArraySpecial(nums4, queries4))  \n    nums5 = [1, 2, 3, 4, 5, 6]\n    queries5 = [[0, 5], [1, 4], [2, 3]]\n    print(isArraySpecial(nums5, queries5))"}, {"source_Lan": "java###leftmostBuildingQueries_Test.java", "source_code": "public static int[] leftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.length;\n        int m = queries.length;\n        List<int[]>[] query = new List[n];\n        for (int i = 0; i < n; i++) {\n            query[i] = new ArrayList<int[]>();\n        }\n        int[] ans = new int[m];\n        List<Integer> st = new ArrayList<Integer>();\n        for (int i = 0; i < m; i++) {\n            int a = queries[i][0];\n            int b = queries[i][1];\n            if (a > b) {\n                int temp = a;\n                a = b;\n                b = temp;\n            }\n            if (a == b || heights[a] < heights[b]) {\n                ans[i] = b;\n                continue;\n            }\n            query[b].add(new int[]{i, heights[a]});\n        }\n        int top = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j < query[i].size(); j++) {\n                int q = query[i].get(j)[0];\n                int val = query[i].get(j)[1];\n                if (top == -1 || heights[st.get(0)] <= val) {\n                    ans[q] = -1;\n                    continue;\n                }\n                int l = 0, r = top;\n                while (l <= r) {\n                    int mid = (l + r) >> 1;\n                    if (heights[st.get(mid)] > val) {\n                        l = mid + 1;\n                    } else {\n                        r = mid - 1;\n                    }\n                }\n                ans[q] = st.get(r);\n            }\n            while (top >= 0 && heights[st.get(top)] <= heights[i]) {\n                st.remove(st.size() - 1);\n                top--;\n            }\n            st.add(i);\n            top++;\n        }\n        return ans;\n    }", "trans_code": "def leftmost_building_queries ( heights , queries ) :\n    n = len ( heights )\n    m = len ( queries )\n    query = [ [ ] for i in range ( n ) ]\n    ans = [ ]\n    st = [ ]\n    for i in range ( m ) :\n        a = queries [ i ] [ 0 ]\n        b = queries [ i ] [ 1 ]\n        if a > b :\n            temp = a\n            a , b = b , temp\n        if a == b or heights [ a ] < heights [ b ] :\n            ans.append ( b )\n            continue\n        query.append ( [ i , heights [ a ] ] )\n    top = - 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( len ( query [ i ] ) ) :\n            q = query [ i ] [ j ]\n            val = query [ i ] [ j ]\n            if top == - 1 or heights [ st [ 0 ] ] <= val :\n                ans.append ( q )\n                continue\n            l , r = 0 , top\n            while l <= r :\n                mid = ( l + r ) >> 1\n                if heights [ st [ mid ] ] > val :\n                    l = mid + 1\n                else :\n                    r = mid - 1\n            ans.append ( st [ r ] )\n        while top >= 0 and heights [ st [ top ] ] <= heights [ i ] :\n            st.pop ( - 1 )\n            top -= 1\n        st.append ( i )\n        top += 1\n    return ans\n", "reference_code": "def leftmostBuildingQueries( heights: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(heights)\n        m = len(queries)\n        query = [[] for _ in range(n)]\n        ans = [-1] * m\n        st = []\n        for i in range(m):\n            a, b = queries[i]\n            if a > b:\n                a, b = b, a\n            if a == b or heights[a] < heights[b]:\n                ans[i] = b\n                continue\n            query[b].append((i, heights[a]))\n        top = -1\n        for i in range(n - 1, -1, -1):\n            for q, val in query[i]:\n                if top == -1 or heights[st[0]] <= val:\n                    ans[q] = -1\n                    continue\n                l, r = 0, top\n                while l <= r:\n                    mid = (l + r) // 2\n                    if heights[st[mid]] > val:\n                        l = mid + 1\n                    else:\n                        r = mid - 1\n                ans[q] = st[r]\n            while top >= 0 and heights[st[top]] <= heights[i]:\n                st.pop()\n                top -= 1\n            st.append(i)\n            top += 1\n        return ans", "target_Lan": "python###leftmostBuildingQueries.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(leftmostBuildingQueries([3, 1, 4, 1, 5], [[0, 1], [1, 2], [3, 4]]))\n    print(leftmostBuildingQueries([1, 1, 1, 1], [[0, 1], [1, 2]]))\n    print(leftmostBuildingQueries([5, 4, 3, 2, 1], [[0, 4], [4, 0]]))\n    print(leftmostBuildingQueries([1, 2, 3, 4, 5], [[0, 1], [1, 4]]))\n    print(leftmostBuildingQueries([0, -1, -2, -3], [[0, 1], [2, 3], [1, 2]]))"}, {"source_Lan": "java###isArraySpecial_Test.java", "source_code": "public static boolean isArraySpecial(int[] nums) {\n        int n = nums.length;\n        for (int i = 1; i < n; ++i) {\n            if (nums[i - 1] % 2 == nums[i] % 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "trans_code": "def is_array_special ( nums ) :\n    n = len ( nums )\n    for i in range ( 1 , n ) :\n        if nums [ i - 1 ] % 2 == nums [ i ] % 2 :\n            return False\n    return True\n", "reference_code": "def isArraySpecial( nums: List[int]) -> bool:\n        n = len(nums)\n        for i in range(1, n):\n            if nums[i - 1] % 2 == nums[i] % 2:\n                return False\n        return True", "target_Lan": "python###isArraySpecial.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(isArraySpecial([]))               \n    print(isArraySpecial([1]))              \n    print(isArraySpecial([2, 1, 4, 3]))     \n    print(isArraySpecial([2, 4]))           \n    print(isArraySpecial([-2, 3, 0, -1]))"}, {"source_Lan": "java###finalPositionOfSnake_Test.java", "source_code": "public static int finalPositionOfSnake(int n, List<String> commands) {\n        int i = 0;\n        int j = 0;\n        for (String s : commands) {\n            switch (s.charAt(0)) {\n                case 'U' -> i--;\n                case 'D' -> i++;\n                case 'L' -> j--;\n                default  -> j++;\n            }\n        }\n        return i * n + j;\n    }", "trans_code": "def final_position_of_snake ( n , commands ) :\n    i = 0\n    j = 0\n    for s in commands :\n        try :\n            i -= 1\n        except IndexError :\n            j += 1\n    return i * n + j\n", "reference_code": "def finalPositionOfSnake( n: int, commands: List[str]) -> int:\n        i = j = 0\n        for s in commands:\n            if s[0] == 'U': i -= 1\n            elif s[0] == 'D': i += 1\n            elif s[0] == 'L': j -= 1\n            else: j += 1\n        return i * n + j", "target_Lan": "python###finalPositionOfSnake.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(finalPositionOfSnake(1, []))\n    print(finalPositionOfSnake(2, [\"U\", \"D\", \"L\", \"R\"]))\n    print(finalPositionOfSnake(3, [\"U\", \"U\", \"D\", \"L\", \"R\", \"R\"]))\n    print(finalPositionOfSnake(-1, [\"U\", \"D\", \"L\", \"D\"]))\n    print(finalPositionOfSnake(1000000, [\"U\", \"U\", \"R\", \"L\", \"D\", \"R\", \"U\"]))"}, {"source_Lan": "java###countOfPairs_Test.java", "source_code": "public static int countOfPairs(int[] nums) {\n        final int MOD = (int)(1e9 + 7);\n        int m = nums.length;\n        int n = Arrays.stream(nums).max().getAsInt();\n        int[] f = new int[n + 1];\n        \n        for (int v = 0; v <= nums[0]; ++v) f[v] = 1;\n        List<Integer> preSums = new ArrayList<>();\n        \n        for (int i = 1; i <= m; ++i) {\n            \n            preSums.clear();\n            int preSum = 0;\n            for(int v : f){\n                preSum += v;\n                preSum %= MOD; \n                preSums.add(preSum);\n            }\n            \n            if (i == m) return preSums.get(preSums.size() - 1);\n            \n            for (int j = 0; j <= nums[i]; ++j) {\n                int ceil = Math.min(j, nums[i-1] - nums[i] + j);\n                if (ceil >= 0)\n                    f[j] = preSums.get(ceil);\n                else \n                    f[j] = 0;\n            }\n            for (int j = nums[i] + 1; j < f.length; ++j) {\n                f[j] = 0;\n            }\n        }\n        \n        return 0;\n    }", "trans_code": "def count_of_pairs ( nums ) :\n    MOD = int ( 1e9 + 7 )\n    m = len ( nums )\n    n = sum ( nums )\n    f = [ ]\n    for v in range ( 0 , nums [ 0 ] + 1 ) :\n        f.append ( 1 )\n    pre_sums = [ ]\n    for i in range ( 1 , m + 1 ) :\n        pre_sums.reverse ( )\n        pre_sum = 0\n        for v in f :\n            pre_sum += v\n            pre_sum %= MOD\n            pre_sums.append ( pre_sum )\n        if i == m :\n            return pre_sums [ - 1 ]\n        for j in range ( 0 , nums [ i ] + 1 ) :\n            ceil = min ( j , nums [ i - 1 ] - nums [ i ] + j )\n            if ceil >= 0 :\n                f.append ( pre_sums [ ceil ] )\n            else :\n                f.append ( 0 )\n        for j in range ( nums [ i ] + 1 , len ( f ) ) :\n            f.append ( 0 )\n    return 0\n", "reference_code": "def countOfPairs( nums):\n        MOD = 1_000_000_007\n        m = len(nums)\n        n = max(nums)\n        f = [0] * (n + 1)\n        # \u521d\u59cb\u72b6\u6001\n        for v in range(nums[0] + 1):\n            f[v] = 1\n        preSums = []\n        # \u591a\u6267\u884c\u4e00\u8f6e\n        for i in range(1, m + 1):\n            # \u524d\u7f00\u548c\uff0c\u6b64\u5904\u4e0d\u91cd\u590d\u5f00\u8f9f\u7a7a\u95f4\u4ee5\u63d0\u5347\u6027\u80fd\u3002\n            preSums.clear()\n            preSum = 0\n            for v in f:\n                preSum += v\n                preSum %= MOD\n                preSums.append(preSum)\n            # \u6700\u540e\u4e00\u8f6e\u63d0\u524d\u8fd4\u56de\u7ed3\u5c3e\u5904\u7684\u65b9\u6848\u6570\u603b\u548c\n            if i == m:\n                return preSums[-1]\n            # \u4f18\u5316\u7a7a\u95f4\uff0c\u4e8c\u7ef4\u53d8\u4e00\u7ef4\uff0c\u6ca1\u7528\u5230\u7684\u683c\u5b50\u90fd\u8981\u4f7f\u5143\u7d20\u5f52 0 \n            for j in range(nums[i] + 1):\n                ceil = min(j, nums[i-1] - nums[i] + j)\n                if ceil >= 0:\n                    f[j] = preSums[ceil]\n                else:  # ceil < 0 \u8bf4\u660e\u4e0d\u5b58\u5728\n                    f[j] = 0\n            for j in range(nums[i] + 1, len(f)):\n                f[j] = 0\n        # \u4e0d\u4f1a\u6267\u884c\n        return 0", "target_Lan": "python###countOfPairs.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(countOfPairs([1]))\n    print(countOfPairs([1, 10]))\n    print(countOfPairs([5, 5, 5, 5]))\n    print(countOfPairs([1000000, 999999]))"}, {"source_Lan": "java###countOfPairs_Test.java", "source_code": "public static int countOfPairs(int[] nums) {\n        final int MOD = 1_000_000_007;\n        int n = nums.length;\n        int m = Arrays.stream(nums).max().getAsInt();\n        long[][] f = new long[n][m + 1];\n        long[] s = new long[m + 1];\n        Arrays.fill(f[0], 0, nums[0] + 1, 1);\n        for (int i = 1; i < n; i++) {\n            s[0] = f[i - 1][0];\n            for (int k = 1; k <= m; k++) {\n                s[k] = (s[k - 1] + f[i - 1][k]) % MOD; \n            }\n            for (int j = 0; j <= nums[i]; j++) {\n                int maxK = j + Math.min(nums[i - 1] - nums[i], 0);\n                f[i][j] = maxK >= 0 ? s[maxK] % MOD : 0;\n            }\n        }\n        return (int) (Arrays.stream(f[n - 1], 0, nums[n - 1] + 1).sum() % MOD);\n    }", "trans_code": "def count_of_pairs ( nums ) :\n    MOD = 1_000_000_007\n    n = len ( nums )\n    m = sum ( nums )\n    f = [ 0 ] * ( n + 1 )\n    s = [ 0 ] * ( m + 1 )\n    for i in range ( 1 , n + 1 ) :\n        s [ 0 ] = f [ i - 1 ] [ 0 ]\n        for k in range ( 1 , m + 1 ) :\n            s [ k ] = ( s [ k - 1 ] + f [ i - 1 ] [ k ] ) % MOD\n        for j in range ( 0 , len ( nums ) ) :\n            max_k = j + min ( nums [ i - 1 ] - nums [ i ] , 0 )\n            f [ i ] [ j ] = max_k >= 0 and s [ max_k ] % MOD or 0\n    return int ( sum ( f ) % MOD )\n", "reference_code": "def countOfPairs( nums: List[int]) -> int:\n        MOD = 1_000_000_007\n        n = len(nums)\n        m = max(nums)\n        f = [[0] * (m + 1) for _ in range(n)]\n        for j in range(nums[0] + 1):\n            f[0][j] = 1\n        for i in range(1, n):\n            s = list(accumulate(f[i - 1]))  # f[i-1] \u7684\u524d\u7f00\u548c\n            for j in range(nums[i] + 1):\n                max_k = j + min(nums[i - 1] - nums[i], 0)\n                f[i][j] = s[max_k] % MOD if max_k >= 0 else 0\n        return sum(f[-1][:nums[-1] + 1]) % MOD", "target_Lan": "python###countOfPairs.py", "target_code_shell": "from typing import List\nfrom itertools import accumulate\n# TOFILL\nif __name__ == \"__main__\":\n    print(countOfPairs([0]))\n    print(countOfPairs([1]))\n    print(countOfPairs([5, 3, 10, 6]))\n    print(countOfPairs([1_000_000, 999_999]))"}, {"source_Lan": "java###shortestDistanceAfterQueries_Test.java", "source_code": "public static int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        List<Integer>[] from = new ArrayList[n];\n        Arrays.setAll(from, i -> new ArrayList<>());\n        int[] f = new int[n];\n        for (int i = 1; i < n; i++) {\n            f[i] = i;\n        }\n        int[] ans = new int[queries.length];\n        for (int qi = 0; qi < queries.length; qi++) {\n            int l = queries[qi][0];\n            int r = queries[qi][1];\n            from[r].add(l);\n            if (f[l] + 1 < f[r]) {\n                f[r] = f[l] + 1;\n                for (int i = r + 1; i < n; i++) {\n                    f[i] = Math.min(f[i], f[i - 1] + 1);\n                    for (int j : from[i]) {\n                        f[i] = Math.min(f[i], f[j] + 1);\n                    }\n                }\n            }\n            ans[qi] = f[n - 1];\n        }\n        return ans;\n    }", "trans_code": "def shortest_distance_after_queries ( n , queries ) :\n    from_list = [ ]\n    f = [ i for i in range ( n ) ]\n    ans = [ ]\n    for qi in queries :\n        l = queries [ qi ] [ 0 ]\n        r = queries [ qi ] [ 1 ]\n        from_list.append ( l )\n        if f [ l ] + 1 < f [ r ] :\n            f [ r ] = f [ l ] + 1\n            for i in range ( r + 1 , n ) :\n                f [ i ] = min ( f [ i ] , f [ i - 1 ] + 1 )\n                for j in from_list :\n                    f [ i ] = min ( f [ i ] , f [ j ] + 1 )\n        ans.append ( f [ n - 1 ] )\n    return ans\n", "reference_code": "def shortestDistanceAfterQueries( n: int, queries: List[List[int]]) -> List[int]:\n        frm = [[] for _ in range(n)]\n        f = list(range(n))\n        ans = []\n        for l, r in queries:\n            frm[r].append(l)\n            if f[l] + 1 < f[r]:\n                f[r] = f[l] + 1\n                for i in range(r + 1, n):\n                    f[i] = min(f[i], f[i - 1] + 1, min((f[j] for j in frm[i]), default=inf) + 1)\n            ans.append(f[-1])\n        return ans", "target_Lan": "python###shortestDistanceAfterQueries.py", "target_code_shell": "from typing import List\nfrom math import inf\n# TOFILL\nif __name__ == \"__main__\":\n    print(shortestDistanceAfterQueries(5, [[0, 1], [2, 3], [1, 4], [0, 4], [3, 4]]))\n    print(shortestDistanceAfterQueries(1, []))\n    print(shortestDistanceAfterQueries(6, [[0, 5], [2, 4], [1, 3], [0, 2], [3, 5]]))\n    print(shortestDistanceAfterQueries(10, [[0, 2], [2, 5], [1, 7], [4, 9], [3, 8]]))\n    print(shortestDistanceAfterQueries(7, [[0, 0], [5, 6], [0, 6], [3, 5], [2, 1]]))"}, {"source_Lan": "java###shortestDistanceAfterQueries2_Test.java", "source_code": "public static int[] shortestDistanceAfterQueries2(int n, int[][] queries) {\n        int[] nxt = new int[n - 1];\n        for (int i = 0; i < n - 1; i++) {\n            nxt[i] = i + 1;\n        }\n        int[] ans = new int[queries.length];\n        int cnt = n - 1;\n        for (int qi = 0; qi < queries.length; qi++) {\n            int l = queries[qi][0];\n            int r = queries[qi][1];\n            if (nxt[l] > 0 && nxt[l] < r) {\n                for (int i = nxt[l]; i < r;) {\n                    cnt--;\n                    int tmp = nxt[i];\n                    nxt[i] = 0;\n                    i = tmp;\n                }\n                nxt[l] = r;\n            }\n            ans[qi] = cnt;\n        }\n        return ans;\n    }", "trans_code": "def shortest_distance_after_queries_2 ( n , queries ) :\n    nxt = [ i + 1 for i in range ( n - 1 ) ]\n    ans = [ ]\n    cnt = n - 1\n    for qi in queries :\n        l = queries [ qi ] [ 0 ]\n        r = queries [ qi ] [ 1 ]\n        if nxt [ l ] > 0 and nxt [ l ] < r :\n            for i in nxt [ l ] :\n                cnt -= 1\n                tmp = nxt [ i ]\n                nxt [ i ] = 0\n                i = tmp\n            nxt [ l ] = r\n        ans.append ( cnt )\n    return ans\n", "reference_code": "def shortestDistanceAfterQueries2( n: int, queries: List[List[int]]) -> List[int]:\n        ans = []\n        nxt = list(range(1, n))\n        cnt = n - 1\n        for l, r in queries:\n            if 0 < nxt[l] < r:\n                i = nxt[l]\n                while i < r:\n                    cnt -= 1\n                    nxt[i], i = 0, nxt[i]\n                nxt[l] = r\n            ans.append(cnt)\n        return ans", "target_Lan": "python###shortestDistanceAfterQueries2.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(shortestDistanceAfterQueries2(2, [[0, 1]]))\n    print(shortestDistanceAfterQueries2(5, [[0, 3], [1, 4]]))\n    print(shortestDistanceAfterQueries2(3, [[0, 2], [0, 2]]))\n    print(shortestDistanceAfterQueries2(4, [[0, 1], [1, 2], [2, 3]]))\n    print(shortestDistanceAfterQueries2(10, [[0, 9], [1, 8], [2, 7]]))"}, {"source_Lan": "java###winningPlayerCount_Test.java", "source_code": "public static int winningPlayerCount(int n, int[][] pick) {\n        int[][] cnts = new int[n][11];\n        for (int[] p : pick) {\n            cnts[p[0]][p[1]]++;\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int c : cnts[i]) {\n                if (c > i) {\n                    ans++;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def winning_player_count ( n , pick ) :\n    cnts = np.zeros ( ( n , 11 ) )\n    for p in pick :\n        cnts [ p [ 0 ] ] [ p [ 1 ] ] += 1\n    ans = 0\n    for i in range ( n ) :\n        for c in cnts [ i ] :\n            if c > i :\n                ans += 1\n                break\n    return ans\n", "reference_code": "def winningPlayerCount( n: int, pick: List[List[int]]) -> int:\n        cnts = [[0] * 11 for _ in range(n)]\n        for x, y in pick:\n            cnts[x][y] += 1\n        ans = 0\n        for i, cnt in enumerate(cnts):\n            if any(c > i for c in cnt):\n                ans += 1\n        return ans", "target_Lan": "python###winningPlayerCount.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(winningPlayerCount(0, []))\n    print(winningPlayerCount(1, [[0, 1]]))\n    print(winningPlayerCount(2, [[0, 1], [1, 2]]))\n    print(winningPlayerCount(3, [[0, 1], [1, 2], [2, 2]]))\n    print(winningPlayerCount(3, [[0, 1], [1, 3], [2, 2], [1, 10], [0, 1]]))"}, {"source_Lan": "java###minFlips_Test.java", "source_code": "    public static int minFlips(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int diffRow = 0;\n        for (int[] row : grid) {\n            for (int j = 0; j < n / 2; j++) {\n                if (row[j] != row[n - 1 - j]) {\n                    diffRow++;\n                }\n            }\n        }\n        int diffCol = 0;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][j] != grid[m - 1 - i][j]) {\n                    diffCol++;\n                }\n            }\n        }\n        return Math.min(diffRow, diffCol);\n    }", "trans_code": "def minFlips ( grid ) :\n    m = len ( grid )\n    n = len ( grid [ 0 ] )\n    diffRow = 0\n    for row in grid :\n        for j in range ( n // 2 ) :\n            if row [ j ] != row [ n - 1 - j ] :\n                diffRow += 1\n    diffCol = 0\n    for j in range ( n ) :\n        for i in range ( m // 2 ) :\n            if grid [ i ] [ j ] != grid [ m - 1 - i ] [ j ] :\n                diffCol += 1\n    return min ( diffRow , diffCol )\n", "reference_code": "def minFlips( grid: List[List[int]]) -> int:\n        diff_row = 0\n        for row in grid:\n            for j in range(len(row) // 2):\n                if row[j] != row[-1 - j]:\n                    diff_row += 1\n        diff_col = 0\n        for col in zip(*grid):\n            for i in range(len(grid) // 2):\n                if col[i] != col[-1 - i]:\n                    diff_col += 1\n        return min(diff_row, diff_col)", "target_Lan": "python###minFlips.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minFlips([[1, 1, 1]]))\n    print(minFlips([[1], [0], [1]]))\n    print(minFlips([[0, 1], [1, 0]]))\n    print(minFlips([[0, 1, 1], [1, 0, 0], [0, 1, 1]]))"}, {"source_Lan": "java###minFlips_Test.java", "source_code": "    public static int minFlips(int[][] a) {\n        int ans = 0;\n        int m = a.length;\n        int n = a[0].length;\n        for (int i = 0; i < m / 2; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int cnt1 = a[i][j] + a[i][n - 1 - j] + a[m - 1 - i][j] + a[m - 1 - i][n - 1 - j];\n                ans += Math.min(cnt1, 4 - cnt1); \n            }\n        }\n        if (m % 2 > 0 && n % 2 > 0) {\n            \n            ans += a[m / 2][n / 2];\n        }\n        int diff = 0, cnt1 = 0;\n        if (m % 2 > 0) {\n            \n            for (int j = 0; j < n / 2; j++) {\n                if (a[m / 2][j] != a[m / 2][n - 1 - j]) {\n                    diff++;\n                } else {\n                    cnt1 += a[m / 2][j] * 2;\n                }\n            }\n        }\n        if (n % 2 > 0) {\n            \n            for (int i = 0; i < m / 2; i++) {\n                if (a[i][n / 2] != a[m - 1 - i][n / 2]) {\n                    diff++;\n                } else {\n                    cnt1 += a[i][n / 2] * 2;\n                }\n            }\n        }\n        return ans + (diff > 0 ? diff : cnt1 % 4);\n    }", "trans_code": "def min_flips ( a ) :\n    ans = 0\n    m = len ( a )\n    n = len ( a [ 0 ] )\n    for i in range ( m // 2 ) :\n        for j in range ( n // 2 ) :\n            cnt1 = a [ i ] [ j ] + a [ i ] [ n - 1 - j ] + a [ m - 1 - i ] [ j ] + a [ m - 1 - i ] [ n - 1 - j ]\n            ans += min ( cnt1 , 4 - cnt1 )\n    if m % 2 and n % 2 :\n        ans += a [ m // 2 ] [ n // 2 ]\n    diff , cnt1 = 0 , 0\n    if m % 2 :\n        for j in range ( n // 2 ) :\n            if a [ m // 2 ] [ j ] != a [ m // 2 ] [ n - 1 - j ] :\n                diff += 1\n            else :\n                cnt1 += a [ m // 2 ] [ j ] * 2\n    if n % 2 :\n        for i in range ( m // 2 ) :\n            if a [ i ] [ n // 2 ] != a [ m - 1 - i ] [ n // 2 ] :\n                diff += 1\n            else :\n                cnt1 += a [ i ] [ n // 2 ] * 2\n    return ans + ( diff > 0 and diff or cnt1 % 4 )\n", "reference_code": "def minFlips( a: List[List[int]]) -> int:\n        ans = 0\n        m, n = len(a), len(a[0])\n        for i in range(m // 2):\n            row, row2 = a[i], a[-1 - i]\n            for j in range(n // 2):\n                cnt1 = row[j] + row[-1 - j] + row2[j] + row2[-1 - j]\n                ans += min(cnt1, 4 - cnt1)  # \u5168\u4e3a 1 \u6216\u5168\u4e3a 0\n        if m % 2 and n % 2:\n            # \u6b63\u4e2d\u95f4\u7684\u6570\u5fc5\u987b\u662f 0\n            ans += a[m // 2][n // 2]\n        diff = cnt1 = 0\n        if m % 2:\n            # \u7edf\u8ba1\u6b63\u4e2d\u95f4\u8fd9\u4e00\u6392\n            row = a[m // 2]\n            for j in range(n // 2):\n                if row[j] != row[-1 - j]:\n                    diff += 1\n                else:\n                    cnt1 += row[j] * 2\n        if n % 2:\n            # \u7edf\u8ba1\u6b63\u4e2d\u95f4\u8fd9\u4e00\u5217\n            for i in range(m // 2):\n                if a[i][n // 2] != a[- 1 - i][n // 2]:\n                    diff += 1\n                else:\n                    cnt1 += a[i][n // 2] * 2\n        return ans + (diff if diff else cnt1 % 4)", "target_Lan": "python###minFlips.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minFlips([[0, 0], [0, 0]]))\n    print(minFlips([[1, 1], [1, 1]]))\n    print(minFlips([[0, 1], [1, 0]]))\n    print(minFlips([[1, 0], [1, 0]]))\n    print(minFlips([[0, 1, 0], [1, 1, 1], [0, 1, 0]]))"}, {"source_Lan": "java###canAliceWin_Test.java", "source_code": "public static boolean canAliceWin(int[] nums) {\n        int s = 0;\n        for (int x : nums) {\n            s += x < 10 ? x : -x;\n        }\n        return s != 0;\n    }", "trans_code": "def can_alice_win ( nums ) :\n    s = 0\n    for x in nums :\n        s += x < 10\n    return s != 0\n", "reference_code": "def canAliceWin( nums: List[int]) -> bool:\n        return sum(x if x < 10 else -x for x in nums) != 0", "target_Lan": "python###canAliceWin.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(canAliceWin([]))               \n    print(canAliceWin([5, 3]))           \n    print(canAliceWin([10, 20]))         \n    print(canAliceWin([1, 2, 3]))        \n    print(canAliceWin([7, 15, 11]))"}, {"source_Lan": "java###numberOfSubstrings_Test.java", "source_code": "public static int numberOfSubstrings(String S) {\n        char[] s = S.toCharArray();\n        int n = s.length;\n        int m = 0;\n        int[] a = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                a[m++] = i;\n            }\n        }\n        int tot1 = n - m;\n        a[m] = n; \n        int ans = 0;\n        int i = 0; \n        for (int left = 0; left < n; left++) {\n            if (s[left] == '1') {\n                ans += a[i] - left; \n            }\n            for (int k = i; k < m; k++) {\n                int cnt0 = k - i + 1;\n                if (cnt0 * cnt0 > tot1) {\n                    break;\n                }\n                int cnt1 = a[k] - left - (k - i);\n                ans += Math.max(a[k + 1] - a[k] - Math.max(cnt0 * cnt0 - cnt1, 0), 0);\n            }\n            if (s[left] == '0') {\n                i++; \n            }\n        }\n        return ans;\n    }", "trans_code": "def number_of_substrings ( S ) :\n    s = S.split ( )\n    n = len ( s )\n    m = 0\n    a = [ ]\n    for i in range ( n + 1 ) :\n        if s [ i ] == '0' :\n            a.append ( i )\n    tot1 = n - m\n    a.append ( n )\n    ans = 0\n    i = 0\n    for left in range ( n ) :\n        if s [ left ] == '1' :\n            ans += a [ i ] - left\n        for k in range ( i , m ) :\n            cnt0 = k - i + 1\n            if cnt0 * cnt0 > tot1 :\n                break\n            cnt1 = a [ k ] - left - ( k - i )\n            ans += max ( a [ k + 1 ] - a [ k ] - max ( cnt0 * cnt0 - cnt1 , 0 ) , 0 )\n        if s [ left ] == '0' :\n            i += 1\n    return ans\n", "reference_code": "def numberOfSubstrings( s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  # \u54e8\u5175\n        ans = i = 0  # >= left \u7684\u7b2c\u4e00\u4e2a 0 \u7684\u4e0b\u6807\u662f a[i]\n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  # \u4e0d\u542b 0 \u7684\u5b50\u4e32\u4e2a\u6570\n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                # \u53ef\u4ee5\u6539\u6210\u624b\u52a8\u6bd4\u5927\u5c0f\uff0c\u90a3\u6837\u66f4\u5feb\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  # \u8fd9\u4e2a 0 \u540e\u9762\u4e0d\u4f1a\u518d\u679a\u4e3e\u5230\u4e86\n        return ans", "target_Lan": "python###numberOfSubstrings.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(numberOfSubstrings(\"\"))\n    print(numberOfSubstrings(\"111111\"))\n    print(numberOfSubstrings(\"000000\"))\n    print(numberOfSubstrings(\"101010\"))\n    print(numberOfSubstrings(\"100010001000\"))"}, {"source_Lan": "java###mostFrequent_Test.java", "source_code": "public static int mostFrequent(int a[], int n)\n    {\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        for(int i=0;i<n;i++)\n        {\n            if(mp.containsKey(a[i]))\n                mp.put(a[i], mp.get(a[i])+1);\n            else\n                mp.put(a[i],1);\n        }\n        int ans=-1,res=0;\n        for(Entry<Integer,Integer> val : mp.entrySet())\n            res=Math.max(res,val.getValue());\n        for(Entry<Integer,Integer> val : mp.entrySet())\n        {\n            if (val.getValue()==res&&val.getKey()>ans)\n                ans=val.getKey();\n        }\n        return ans;\n    }", "trans_code": "def most_frequent ( a , n ) :\n    mp = { }\n    for i in range ( n ) :\n        if mp.has_key ( a [ i ] ) :\n            mp [ a [ i ] ] = mp [ a [ i ] ] + 1\n        else :\n            mp [ a [ i ] ] = 1\n    ans , res = - 1 , 0\n    for val in mp.items ( ) :\n        res = max ( res , val [ 1 ] )\n    for val in mp.items ( ) :\n        if val [ 1 ] == res and val [ 0 ] > ans :\n            ans = val [ 0 ]\n    return ans\n", "reference_code": "def mostFrequent(n,arr):\n    dic={}\n    for ele in arr:\n        if ele in dic:\n            dic[ele]+=1\n        else:\n            dic[ele]=1\n    mx=0\n    for ele in dic.values():\n        mx=max(mx,ele)\n    ans=0\n    for key in sorted(dic):\n        if dic[key]==mx:\n            ans=key\n    return ans", "target_Lan": "python###mostFrequent.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    arr1 = [0]\n    n1 = 1\n    print(mostFrequent(n1, arr1))  \n    arr2 = [1]\n    n2 = 1\n    print(mostFrequent(n2, arr2))  \n    arr3 = [1, 2]\n    n3 = 2\n    print(mostFrequent(n3, arr3))  \n    arr4 = [1, 2, 2, 3, 3, 3]\n    n4 = 6\n    print(mostFrequent(n4, arr4))  \n    arr5 = [3, 3, 1, 1, 1, 3, 2, 2, 2]\n    n5 = 9\n    print(mostFrequent(n5, arr5))"}, {"source_Lan": "java###getMax_Test.java", "source_code": "public static int getMax(int x) {\n        \n        boolean flag = false;\n        int prev = -1;\n        int cnt = 0;\n        for (int i = 30; i >= 0; i--) {\n            if (cnt >= 2) break;\n            if (!flag && (x & (1 << i)) > 0) {\n                flag = true;\n                continue;\n            }\n            if (flag) {\n                if ((x & (1 << i)) == 0 && prev == -1) {\n                    prev = i;\n                    x |= (1 << i);\n                    cnt++;\n                }\n                if ((x & (1 << i)) == 0 && prev - i > 1) {\n                    x |= (1 << i);\n                    cnt++;\n                }\n            }\n        }\n        return x;\n    }", "trans_code": "def getMax ( x ) :\n    flag = False\n    prev = - 1\n    cnt = 0\n    for i in range ( 30 , - 1 , - 1 ) :\n        if cnt >= 2 :\n            break\n        if not flag and ( x & ( 1 << i ) ) > 0 :\n            flag = True\n            continue\n        if flag :\n            if ( x & ( 1 << i ) ) == 0 and prev == - 1 :\n                prev = i\n                x |= ( 1 << i )\n                cnt += 1\n            if ( x & ( 1 << i ) ) == 0 and prev - i > 1 :\n                x |= ( 1 << i )\n                cnt += 1\n    return x\n", "reference_code": "def getMax( x: int) -> int:\n        # code here\n        flag = False\n        prev = -1\n        cnt = 0\n        for i in range(30, -1, -1):\n            if cnt >= 2:\n                break\n            if not flag and (x & (1 << i)) > 0:\n                flag = True\n                continue\n            if flag:\n                if (x & (1 << i)) == 0 and prev == -1:\n                    prev = i\n                    x |= (1 << i)\n                    cnt += 1\n                if (x & (1 << i)) == 0 and prev - i > 1:\n                    x |= (1 << i)\n                    cnt += 1\n        return x", "target_Lan": "python###getMax.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(getMax(0))\n    print(getMax(1))\n    print(getMax(3))\n    print(getMax(5))\n    print(getMax(2147483647))"}, {"source_Lan": "java###getMaxProductivity_Test.java", "source_code": "public static int getMaxProductivity(int n, int[] productivity) {\n        int totalSum = 0;\n        for (int val : productivity) {\n            totalSum += val;\n        }\n        int halfSum = totalSum / 2;\n        int[] dp = new int[halfSum + 1];\n        dp[0] = 1;\n        for (int prod : productivity) {\n            for (int j = halfSum; j >= prod; j--) {\n                dp[j] = dp[j] | dp[j - prod];\n            }\n        }\n        int maxProductivity = 0;\n        for (int i = 1; i <= halfSum; i++) {\n            if (dp[i] == 1) {\n                maxProductivity = Math.max(maxProductivity, i * (totalSum - i));\n            }\n        }\n        return maxProductivity;\n    }", "trans_code": "def get_max_productivity ( n , productivity ) :\n    total_sum = 0\n    for val in productivity :\n        total_sum += val\n    half_sum = total_sum // 2\n    dp = [ 1 ] * ( half_sum + 1 )\n    dp [ 0 ] = 1\n    for prod in productivity :\n        for j in range ( half_sum , prod >= prod , - 1 ) :\n            dp [ j ] = dp [ j ] | dp [ j - prod ]\n    max_productivity = 0\n    for i in range ( 1 , half_sum + 1 ) :\n        if dp [ i ] == 1 :\n            max_productivity = max ( max_productivity , i * ( total_sum - i ) )\n    return max_productivity\n", "reference_code": "def getMaxProductivity( n: int, productivity: List[int]) -> int:\n        total_sum = sum(productivity)\n        # Initialize dp array with size total_sum + 1\n        dp = [0] * (total_sum + 1)\n        dp[0] = 1\n        # Update the dp array based on the given logic\n        for prod in productivity:\n            for j in range(total_sum, prod - 1, -1):\n                dp[j] = dp[j] or dp[j - prod]\n        # Calculate the maximum productivity\n        max_productivity = 0\n        for i in range(1, total_sum):\n            if dp[i]:\n                max_productivity = max(max_productivity, i * (total_sum - i))\n        return max_productivity", "target_Lan": "python###getMaxProductivity.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(getMaxProductivity(0, [])) \n    print(getMaxProductivity(3, [1, 2, 3])) \n    print(getMaxProductivity(4, [2, 2, 2, 2])) \n    print(getMaxProductivity(3, [1, 1000000, 1])) \n    print(getMaxProductivity(5, [5, 5, 5, 5, 5]))"}, {"source_Lan": "java###getCount_Test.java", "source_code": "    public static long getCount(int n, int[] arr, int a, int b) {\n        \n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                boolean flag = false;\n                for (int k = i; k <= j; k++) {\n                    for (int l = k + 1; l <= j; l++) {\n                        if (arr[k] + arr[l] < a || arr[k] + arr[l] > b) {\n                            flag = true;\n                        }\n                    }\n                }\n                if (!flag) ans++;\n            }\n        }\n        return ans;\n    }", "trans_code": "def get_count ( n , arr , a , b ) :\n    ans = 0\n    for i in range ( n ) :\n        for j in range ( i , n ) :\n            flag = False\n            for k in range ( i , j ) :\n                for l in range ( k + 1 , j ) :\n                    if arr [ k ] + arr [ l ] < a or arr [ k ] + arr [ l ] > b :\n                        flag = True\n            if not flag :\n                ans += 1\n    return ans\n", "reference_code": "def getCount( n : int, arr : List[int], a : int, b : int) -> int:\n        # code here\n        ans = 0\n        for i in range(n):\n            for j in range(i, n):\n                flag = False\n                for k in range(i, j + 1):\n                    for l in range(k + 1, j + 1):\n                        if arr[k] + arr[l] < a or arr[k] + arr[l] > b:\n                            flag = True\n                if not flag:\n                    ans += 1\n        return ans", "target_Lan": "python###getCount.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(getCount(0, [], 1, 10))  \n    print(getCount(1, [5], 3, 7))  \n    print(getCount(3, [1, 2, 3], 3, 5))  \n    print(getCount(4, [10, -1, 5, 4], 4, 15))  \n    print(getCount(5, [2147483647, 2147483647, 2147483647, 2147483647, 2147483647], 3, 10))"}, {"source_Lan": "java###minSwaps_Test.java", "source_code": "public static int minSwaps(String S) {\n        int evenSum = 0, oddSum = 0;\n        int n = S.length();\n        \n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 1)\n                oddSum += (S.charAt(i) == '1') ? 1 : 0;\n            else\n                evenSum += (S.charAt(i) == '1') ? 1 : 0;\n        }\n        \n        int difference = Math.abs(oddSum - evenSum);\n        \n        if (difference % 2 == 1) return -1;\n        \n        return difference / 2;\n    }", "trans_code": "def minSwaps ( S ) :\n    evenSum , oddSum = 0 , 0\n    n = len ( S )\n    for i in range ( n ) :\n        if i % 2 == 1 :\n            oddSum += ( S [ i ] == '1' )\n        else :\n            evenSum += ( S [ i ] == '1' )\n    difference = abs ( oddSum - evenSum )\n    if difference % 2 == 1 :\n        return - 1\n    return difference / 2\n", "reference_code": "def minSwaps( S):\n        even_sum, odd_sum = 0, 0\n        n = len(S)\n        # Calculating the sum of digits at even and odd positions.\n        for i in range(n):\n            if i % 2 == 1:\n                odd_sum += (S[i] == '1')\n            else:\n                even_sum += (S[i] == '1')\n        # Calculating the absolute difference between even and odd sums.\n        difference = abs(odd_sum - even_sum)\n        # If the difference is odd, return -1.\n        if difference % 2 == 1:\n            return -1\n        # Returning half of the difference as the minimum swaps required.\n        return difference // 2", "target_Lan": "python###minSwaps.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(minSwaps(\"\"))\n    print(minSwaps(\"1001\"))\n    print(minSwaps(\"1100\"))\n    print(minSwaps(\"111000\"))\n    print(minSwaps(\"1111\"))"}, {"source_Lan": "java###countUniques_Test.java", "source_code": "public static int countUniques(int[] a, int k, int l, int r) {\n        Set<Integer> set = new HashSet<>();\n        int dup = 0;\n        for(int i : a) if(!set.add(i)) dup++;\n        int unique = set.size();\n        for(int i = l ; i <= r ; i++)\n            if(k>0 && dup>0 && !set.contains(i)){\n                unique++; k--; dup--;\n            }\n        return unique;\n    }", "trans_code": "def count_ques ( a , k , l , r ) :\n    set = set ( )\n    dup = 0\n    for i in a :\n        if not set.add ( i ) :\n            dup += 1\n    unique = len ( set )\n    for i in range ( l , r + 1 ) :\n        if k > 0 and dup > 0 and not set.add ( i ) :\n            unique += 1\n            k -= 1\n            dup -= 1\n    return unique\n", "reference_code": "def countUniques( a, k, l, r):\n        # code here\n        set_ = set()\n        dup = 0\n        for i in a:\n            if i in set_:\n                dup += 1\n            else:\n                set_.add(i)\n        unique = len(set_)\n        for i in range(l, r + 1):\n            if k > 0 and dup > 0 and i not in set_:\n                unique += 1\n                k -= 1\n                dup -= 1\n        return unique", "target_Lan": "python###countUniques.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(countUniques([1, 2, 3], 1, 4, 5))\n    print(countUniques([1, 1, 1], 2, 2, 2))\n    print(countUniques([2, 2, 3, 4, 4, 5], 1, 1, 5))\n    print(countUniques([1, 2, 3], 0, 3, 5))\n    print(countUniques([], 3, 1, 3))"}, {"source_Lan": "java###maxLength_Test.java", "source_code": "public static int maxLength(int N, int[] arr) {\n        int ans = 0;\n        for(int i = 0 ; i < N; i++){\n            int or = 0;\n            for(int j = i ; j < N; j++){\n                or = or | arr[j];\n                int x = Integer.bitCount(or);\n                if(x == Integer.toBinaryString(or).length()){\n                    ans = Math.max(ans , j - i + 1);\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def max_length ( N , arr ) :\n    ans = 0\n    for i in range ( N ) :\n        or = 0\n        for j in range ( i , N ) :\n            or = or | arr [ j ]\n            x = int ( or )\n            if x == len ( str ( or ) ) :\n                ans = max ( ans , j - i + 1 )\n    return ans\n", "reference_code": "def maxLength( arr):\n        # code here\n        N = len(arr)\n        ans = 0\n        for i in range(N):\n            or_val = 0\n            for j in range(i, n):\n                or_val |= arr[j]\n                x = bin(or_val).count('1')\n                if x == len(bin(or_val)) - 2:  # Subtract 2 for '0b' prefix\n                    ans = max(ans, j - i + 1)\n        return ans", "target_Lan": "python###maxLength.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(maxLength([]))"}, {"source_Lan": "java###firstWord_Test.java", "source_code": "public static String firstWord(int n, String[] dictionary) {\n        \n        Arrays.sort(dictionary);\n        Set<String> seenWords = new HashSet<>();\n        for (String word : dictionary) {\n            if (seenWords.contains(word)) {\n                return \"Invalid\";\n            }\n            seenWords.add(word);\n        }\n        return dictionary[0];\n    }", "trans_code": "def first_word ( n , dictionary ) :\n    dictionary.sort ( )\n    seen_words = set ( )\n    for word in dictionary :\n        if seen_words.issubset ( word ) :\n            return \"Invalid\"\n        seen_words.add ( word )\n    return dictionary [ 0 ]\n", "reference_code": "def firstWord( n: int, dictionary: List[str]) -> str:\n        dictionary.sort()\n        seen_words = set()\n        for word in dictionary:\n            if word in seen_words:\n                return \"Invalid\"\n            seen_words.add(word)\n        return dictionary[0]", "target_Lan": "python###firstWord.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(firstWord(1, [\"apple\"]))\n    print(firstWord(3, [\"banana\", \"apple\", \"cherry\"]))\n    print(firstWord(4, [\"banana\", \"apple\", \"banana\", \"cherry\"]))\n    print(firstWord(3, [\"apple\", \"apple\", \"apple\"]))"}, {"source_Lan": "java###longestSubarray_Test.java", "source_code": "public static int longestSubarray(int n, int[] arr) {\n        int ans = -1;\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                count++;\n                sum += arr[j];\n                if (count == sum) {\n                    ans = Math.max(ans, count);\n                }\n            }\n        }\n        return ans;\n    }", "trans_code": "def longest_subarray ( n , arr ) :\n    ans = - 1\n    for i in range ( n ) :\n        count = 0\n        sum = 0\n        for j in range ( i , n ) :\n            count += 1\n            sum += arr [ j ]\n            if count == sum :\n                ans = max ( ans , count )\n    return ans\n", "reference_code": "def longestSubarray( n: int, arr: List[int]) -> int:\n        ans = -1\n        for i in range(n):\n            count = 0\n            total_sum = 0\n            for j in range(i, n):\n                count += 1\n                total_sum += arr[j]\n                if count == total_sum:\n                    ans = max(ans, count)\n        return ans", "target_Lan": "python###longestSubarray.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(longestSubarray(0, []))\n    print(longestSubarray(5, [0, 0, 0, 0, 0]))\n    print(longestSubarray(4, [1, 2, 3, 4]))\n    print(longestSubarray(6, [1, 2, 1, 2, 1, 1]))\n    print(longestSubarray(5, [-1, -2, -3, 3, 3]))"}, {"source_Lan": "java###minDifference_Test.java", "source_code": "public static int minDifference(int n, int[] arr, int x) {\n        int ans = n + 1;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((arr[i] ^ arr[j]) <= x) {\n                    ans = Math.min(ans, j - i);\n                }\n            }\n        }\n        return (ans == n + 1) ? -1 : ans;\n    }", "trans_code": "def min_difference ( n , arr , x ) :\n    ans = n + 1\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] ^ arr [ j ] ) <= x :\n                ans = min ( ans , j - i )\n    return ( ans , ans + 1 )\n", "reference_code": "def minDifference( n: int, arr: List[int], x: int) -> int:\n        ans = n + 1\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if (arr[i] ^ arr[j]) <= x:\n                    ans = min(ans, j - i)\n        return -1 if ans == n + 1 else ans", "target_Lan": "python###minDifference.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minDifference(0, [], 5))       \n    print(minDifference(2, [5, 10], 3))  \n    print(minDifference(3, [1, 2, 3], 1)) \n    print(minDifference(4, [2, 4, 6, 3], 3)) \n    print(minDifference(5, [1, 1, 1, 1, 1], 0))"}, {"source_Lan": "java###reachAlice_Test.java", "source_code": "public static String reachAlice(int d, int x, int y, int k) {\n        int p = d / x;\n        int q = d / y;\n        q += k;\n        return (p <= q) ? \"Walk\" : \"Bike\";\n    }", "trans_code": "def reach_alice ( d , x , y , k ) :\n    p = d / x\n    q = d / y\n    q += k\n    return ( p <= q )\n", "reference_code": "def reachAlice( d: int, x: int, y: int, k: int) -> str:\n        p = d // x\n        q = d // y\n        q += k\n        return \"Walk\" if p <= q else \"Bike\"", "target_Lan": "python###reachAlice.py", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(reachAlice(0, 1, 1, 1))\n    print(reachAlice(10, 1, 2, 5))\n    print(reachAlice(10, 5, 5, 0))\n    print(reachAlice(20, 2, 4, 2))"}, {"source_Lan": "java###removeOrder_Test.java", "source_code": "public static int[] removeOrder(int n, int[] arr, String str) {\n        Arrays.sort(arr);\n        int i = 0, j = n - 1;\n        int[] ans = new int[n];\n        int idx = 0;\n        for (char ch : str.toCharArray()) {\n            if (ch == '0')\n                ans[idx++] = arr[i++];\n            else\n                ans[idx++] = arr[j--];\n        }\n        return ans;\n    }", "trans_code": "def remove_order ( n , arr , str ) :\n    arr.sort ( )\n    i , j = 0 , n - 1\n    ans = [ ]\n    idx = 0\n    for ch in str :\n        if ch == '0' :\n            ans.append ( arr [ i ++ ] )\n        else :\n            ans.append ( arr [ j -- ] )\n    return ans\n", "reference_code": "def removeOrder( n: int, arr: List[int], str: str) -> List[int]:\n        # Sort the array\n        arr.sort()\n        i = 0\n        j = n - 1\n        ans = [0] * n\n        idx = 0\n        for ch in str:\n            if ch == '0':\n                ans[idx] = arr[i]\n                i += 1\n            else:\n                ans[idx] = arr[j]\n                j -= 1\n            idx += 1\n        return ans", "target_Lan": "python###removeOrder.py", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(removeOrder(5, [5, 3, 1, 4, 2], \"01010\"))\n    print(removeOrder(0, [], \"\"))\n    print(removeOrder(3, [1, 1, 1], \"111\"))\n    print(removeOrder(4, [3, 2, 1, 4], \"0000\"))\n    print(removeOrder(3, [-1, -2, -3], \"111\"))"}]