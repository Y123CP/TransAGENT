[{"source_Lan": "python###ANDequalOR.py", "source_code": "def ANDequalOR( n: int, arr: List[int]) -> int:\n    ans = 0\n    pre = 0\n    count = 0\n    for i in range(n):\n        if arr[i] == arr[pre]:\n            count += 1\n        else:\n            ans += (count * (count + 1)) // 2\n            pre = i\n            count = 1\n    ans += (count * (count + 1)) // 2\n    return ans", "trans_code": "public static int ANDequalOR ( int n , int [ ] arr ) throws Exception {\n  int ans = 0 ;\n  int pre = 0 ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == arr [ pre ] ) {\n      count ++ ;\n    }\n    else {\n      ans += ( count * ( count + 1 ) ) / 2 ;\n      pre = i ;\n      count = 1 ;\n    }\n  }\n  ans += ( count * ( count + 1 ) ) / 2 ;\n  return ans ;\n}\n", "reference_code": "    public static long ANDequalOR(int n, int[] arr) {\n        long ans = 0;\n        int pre = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == arr[pre]) {\n                count++;\n            } else {\n                ans += (count * (count + 1)) / 2;\n                pre = i;\n                count = 1;\n            }\n        }\n        ans += (count * (count + 1)) / 2;\n        return ans;\n    }", "target_Lan": "java###ANDequalOR_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\npublic class ANDequalOR_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(ANDequalOR(0, new int[]{}));\n    System.out.println(ANDequalOR(1, new int[]{1}));\n    System.out.println(ANDequalOR(2, new int[]{1, 2}));\n    System.out.println(ANDequalOR(5, new int[]{1, 1, 2, 2, 2}));\n    System.out.println(ANDequalOR(6, new int[]{1, 1, 1, 2, 2, 2}));\n    System.out.println(ANDequalOR(3, new int[]{1, 2, 1}));\n    System.out.println(ANDequalOR(4, new int[]{1, 1, 2, 1}));\n    System.out.println(ANDequalOR(10, new int[]{1, 1, 2, 2, 1, 1, 2, 2, 1, 1}));\n}\n}"}, {"source_Lan": "python###findGoodPairs.py", "source_code": "def findGoodPairs( a, n, k):\n    mp=dict()\n    for i in range(n):\n        if (a[i] in mp):\n            mp[a[i]].append(i)\n        else:\n            mp[a[i]]=[i]\n    c=0\n    for i in mp:\n        li=mp[i]\n        le=len(li)\n        i=0\n        j=0\n        while(j<le):\n            if (li[j]-li[i])>=k:\n                c+=(le-j)\n                i+=1\n            else:\n                j+=1\n    return c", "trans_code": "public static int findGoodPairs ( int [ ] a , int n , int k ) {\n  Map < Integer , List < Integer >> mp = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( a [ i ] < 0 ) || ( a [ i ] > n ) ) {\n      mp . put ( a [ i ] , new ArrayList < Integer > ( ) ) ;\n    }\n    else {\n      mp . put ( a [ i ] , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  int c = 0 ;\n  for ( int i = 0 ;\n  i < mp . size ( ) ;\n  i ++ ) {\n    List < Integer > li = mp . get ( i ) ;\n    int le = li . size ( ) ;\n    i = 0 ;\n    int j = 0 ;\n    while ( ( j < le ) && ( li . get ( j ) - li . get ( i ) ) >= k ) {\n      if ( ( li . get ( j ) - li . get ( i ) ) >= k ) {\n        c += ( le - j ) ;\n        i ++ ;\n      }\n      else {\n        j ++ ;\n      }\n    }\n  }\n  return c ;\n}\n", "reference_code": "    static long findGoodPairs(int a[], int n, int k){\n        \n        long ans = 0;\n        Map<Integer, Integer> hm = new HashMap<>();\n        for(int i = k; i < n; i++){\n            hm.put(a[i - k], hm.getOrDefault(a[i - k], 0) + 1);\n            ans += hm.getOrDefault(a[i], 0);\n        }\n        return ans;\n    }", "target_Lan": "java###findGoodPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findGoodPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(findGoodPairs(new int[]{1,2,3,4,5}, 5, 2));\n        System.out.println(findGoodPairs(new int[]{1,1,1,1,1}, 5, 2));\n        System.out.println(findGoodPairs(new int[]{1,2,3,4,5,6,7,8,9,10}, 10, 3));\n        System.out.println(findGoodPairs(new int[]{10,20,30,40,50,60,70,80,90,100}, 10, 4));\n        System.out.println(findGoodPairs(new int[]{100,200,300,400,500,600,700,800,900,1000}, 10, 5));\n    }\n}"}, {"source_Lan": "python###Towerheight.py", "source_code": "def Towerheight( n: int, k: int, arr: List[int]) -> int:\n    \n    st = []\n    total_height = 0\n    i = 0\n    \n    for j in range(n):\n        total_height += arr[j]\n        st.append(arr[j])\n        \n        if total_height > k:\n            \n            remove_boxes = i + 1\n            while remove_boxes > 0 and st:\n                total_height -= st.pop()\n                remove_boxes -= 1\n            i += 1\n    \n    return total_height", "trans_code": "public static int Towerheight ( int n , int k , int [ ] arr ) throws Exception {\n  Stack < Integer > st = new Stack < Integer > ( ) ;\n  int totalHeight = 0 ;\n  int i = 0 ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    totalHeight += arr [ j ] ;\n    st . push ( arr [ j ] ) ;\n    if ( totalHeight > k ) {\n      int removeBoxes = i + 1 ;\n      while ( removeBoxes > 0 && st . size ( ) > 0 ) {\n        totalHeight -= st . pop ( ) ;\n        removeBoxes -- ;\n      }\n      i ++ ;\n    }\n  }\n  return totalHeight ;\n}\n", "reference_code": "    public static int Towerheight(int n, int k, int[] arr) {\n        \n        Stack<Integer> st = new Stack<>();\n        \n        int totalHeight = 0;\n        \n        int i = 0;\n        \n        for (int j = 0; j < n; j++) {\n            totalHeight += arr[j];\n            st.push(arr[j]);\n            \n            if (totalHeight > k) {\n                int removeBoxes = i + 1;\n                \n                while (removeBoxes > 0 && !st.empty()) {\n                    totalHeight -= st.pop();\n                    removeBoxes--;\n                }\n                i++;\n            }\n        }\n        \n        return totalHeight;\n    }", "target_Lan": "java###Towerheight_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class Towerheight_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[] arr = new int[0];\n    System.out.println(Towerheight(0, 0, arr));\n\n    arr = new int[]{10};\n    System.out.println(Towerheight(1, 10, arr));\n\n    arr = new int[]{10, 5};\n    System.out.println(Towerheight(2, 15, arr));\n\n    arr = new int[]{10, 5, 15};\n    System.out.println(Towerheight(3, 20, arr));\n\n    arr = new int[]{10, 5, 15, 10};\n    System.out.println(Towerheight(4, 25, arr));\n}\n}"}, {"source_Lan": "python###timeTravel.py", "source_code": "def timeTravel( n, arr):\n    ans=0\n    for i in range(1,n):\n        if (arr[i]>arr[i-1]):\n            ans+=1\n        elif (arr[i]<arr[i-1]):\n            ans+=2\n    return ans", "trans_code": "public static int timeTravel ( int n , int [ ] arr ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( ( arr [ i ] > arr [ i - 1 ] ) && ( arr [ i ] < arr [ i - 1 ] ) ) {\n      ans ++ ;\n    }\n    else if ( ( arr [ i ] < arr [ i - 1 ] ) && ( arr [ i ] > arr [ i - 1 ] ) ) {\n      ans += 2 ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int timeTravel(int n, int[] arr) {\n        int ans = 0;\n        for(int i = 1; i < n; i++)\n            ans += (arr[i] > arr[i - 1] ? 1 : (arr[i] < arr[i - 1] ? 2 : 0));\n        return ans;\n    }", "target_Lan": "java###timeTravel_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class timeTravel_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(timeTravel(0, new int[]{}));\n    System.out.println(timeTravel(1, new int[]{1}));\n    System.out.println(timeTravel(2, new int[]{1, 2}));\n    System.out.println(timeTravel(3, new int[]{1, 2, 1}));\n    System.out.println(timeTravel(4, new int[]{1, 2, 3, 4}));\n}\n}"}, {"source_Lan": "python###lastFairyStanding.py", "source_code": "def lastFairyStanding( n : int, k : int) -> int:\n    ans = 0\n    for x in range(2, n+1): \n        ans = (ans + k) % x\n    return ans + 1", "trans_code": "public static int lastFairyStanding ( int n , int k ) throws Exception {\n  int ans = 0 ;\n  for ( int x = 2 ;\n  x <= n ;\n  x ++ ) ans = ( ans + k ) % x ;\n  return ans + 1 ;\n}\n", "reference_code": "    public static int lastFairyStanding(int n, int k) {\n        int i = 1, ans = 0;\n        while (i <= n)\n            ans = (ans + k) % i++;\n        return ans + 1;\n    }", "target_Lan": "java###lastFairyStanding_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class lastFairyStanding_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(lastFairyStanding(1, 1));\n    System.out.println(lastFairyStanding(5, 2));\n    System.out.println(lastFairyStanding(10, 3));\n    System.out.println(lastFairyStanding(15, 4));\n    System.out.println(lastFairyStanding(20, 5));\n}\n}"}, {"source_Lan": "python###collectingCoins.py", "source_code": "def collectingCoins( N: int, Coins: List[List[int]]) -> int:\n    \n    hor = defaultdict(int)\n    ver = defaultdict(int)\n    diaa = defaultdict(int)\n    diab = defaultdict(int)\n    \n    m = 0\n    \n    for el in Coins:\n        a, b = el[0], el[1]\n        \n        hor[a] += 1\n        ver[b] += 1\n        diaa[a + b] += 1\n        diab[a - b] += 1\n        \n        m = max(m, hor[a], ver[b], diaa[a + b], diab[a - b])\n    \n    return m", "trans_code": "public static int collectingCoins ( int N , List < List < Integer >> Coins ) throws Exception {\n  Map < Integer , Integer > hor = new TreeMap < Integer , Integer > ( ) ;\n  Map < Integer , Integer > ver = new TreeMap < Integer , Integer > ( ) ;\n  Map < Integer , Integer > diaa = new TreeMap < Integer , Integer > ( ) ;\n  Map < Integer , Integer > diab = new TreeMap < Integer , Integer > ( ) ;\n  int m = 0 ;\n  for ( List < Integer > el : Coins ) {\n    int a = el . get ( 0 ) ;\n    int b = el . get ( 1 ) ;\n    hor . put ( a , 1 ) ;\n    ver . put ( b , 1 ) ;\n    diaa . put ( a + b , 1 ) ;\n    diab . put ( a - b , 1 ) ;\n    m = Math . max ( m , hor . get ( a ) , ver . get ( b ) , diaa . get ( a + b ) , diab . get ( a - b ) ) ;\n  }\n  return m ;\n}\n", "reference_code": "    public static int collectingCoins(int N, int[][] Coins) {\n        Map<Integer, Integer> hor = new HashMap<>(); \n        Map<Integer, Integer> ver = new HashMap<>(); \n        Map<Integer, Integer> diaa = new HashMap<>(); \n        Map<Integer, Integer> diab = new HashMap<>(); \n        int m = 0; \n            \n            for (int[] el : Coins) {\n                int a = el[0], b = el[1];\n                hor.put(a, hor.getOrDefault(a, 0) + 1); \n                ver.put(b, ver.getOrDefault(b, 0) + 1); \n                diaa.put(a + b, diaa.getOrDefault(a + b, 0) + 1); \n                diab.put(a - b, diab.getOrDefault(a - b, 0) + 1); \n                \n                m = Math.max(m, hor.get(a));\n                m = Math.max(m, ver.get(b));\n                m = Math.max(m, diaa.get(a + b));\n                m = Math.max(m, diab.get(a - b));\n            }\n            return m; \n    }", "target_Lan": "java###collectingCoins_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class collectingCoins_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(collectingCoins(1, new int[][]{{0,0}}));\n    System.out.println(collectingCoins(2, new int[][]{{0,0},{1,1}}));\n    System.out.println(collectingCoins(3, new int[][]{{0,0},{1,1},{2,2}}));\n    System.out.println(collectingCoins(4, new int[][]{{0,0},{1,1},{2,2},{3,3}}));\n    System.out.println(collectingCoins(5, new int[][]{{0,0},{1,1},{2,2},{3,3},{4,4}}));\n}\n}"}, {"source_Lan": "python###equality.py", "source_code": "def equality( A, B):\n    if A > B:\n        return 0\n    if A == B:\n        return 1\n    if B % 2 == 0:\n        return 1\n    return 0", "trans_code": "public static int equality ( int A , int B ) {\n  if ( A > B ) return 0 ;\n  if ( A == B ) return 1 ;\n  if ( B % 2 == 0 ) return 1 ;\n  return 0 ;\n}\n", "reference_code": "    public static int equality(int A, int B) {\n        \n        if (B < A) return 0;\n        \n        if (A == B) return 1;\n        \n        if (B % 2 == 0) return 1;\n        \n        return 0;\n    }", "target_Lan": "java###equality_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class equality_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(equality(1, 1));\n    System.out.println(equality(0, 0));\n    System.out.println(equality(-1, -1));\n    System.out.println(equality(10, 10));\n    System.out.println(equality(-5, -5));\n    System.out.println(equality(1, 2));\n    System.out.println(equality(2, 1));\n    System.out.println(equality(0, 1));\n    System.out.println(equality(1, 0));\n    System.out.println(equality(1, 3));\n}\n}"}, {"source_Lan": "python###ForYou.py", "source_code": "def ForYou( n : int, arr : List[int], m : int, order : List[List[int]]) -> int:\n    diff = [0] * (n + 1)\n    for it in order:\n        diff[it[0] - 1] += 1\n        diff[it[1]] -= 1\n    for i in range(1, n):\n        diff[i] += diff[i - 1]\n    diff.pop()\n    diff.sort()\n    arr.sort()\n    ans = 0\n    mod = int(1e9) + 7\n    for i in range(n):\n        ans += diff[i] * arr[i]\n        ans %= mod\n    return ans", "trans_code": "public static int ForYou ( int n , int [ ] arr , int m , List < List < Integer >> order ) throws Exception {\n  int [ ] diff = new int [ n + 1 ] ;\n  for ( List < Integer > it : order ) {\n    diff [ it . get ( 0 ) - 1 ] ++ ;\n    diff [ it . get ( 1 ) ] -- ;\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) diff [ i ] += diff [ i - 1 ] ;\n  diff . remove ( 0 ) ;\n  Arrays . sort ( diff ) ;\n  arr . sort ( ) ;\n  int ans = 0 ;\n  int mod = Integer . MAX_VALUE + 7 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    ans += diff [ i ] * arr [ i ] ;\n    ans %= mod ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static long ForYou(int n, int[] arr, int m, int[][] order) {\n        \n        int[] diff = new int[n + 1];\n        \n        for (int[] it : order) {\n            diff[it[0] - 1]++;\n            diff[it[1]]--;\n        }\n        \n        for (int i = 1; i <= n; i++) {\n            diff[i] += diff[i - 1];\n        }\n        \n        diff = Arrays.copyOf(diff, n);\n        Arrays.sort(diff);\n        \n        Arrays.sort(arr);\n        long ans = 0;\n        int mod = (int)1e9 + 7;\n        \n        for (int i = 0; i < n; i++) {\n            ans += ((long)diff[i]) * ((long)arr[i]);\n            ans %= mod;\n        }\n        return ans;\n    }", "target_Lan": "java###ForYou_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class ForYou_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(ForYou(5, new int[]{1, 2, 3, 4, 5}, 3, new int[][]{{1, 3}, {2, 4}, {1, 5}}));\n        System.out.println(ForYou(0, new int[]{}, 0, new int[][]{}));\n        System.out.println(ForYou(1, new int[]{10}, 1, new int[][]{{1, 1}}));\n        System.out.println(ForYou(3, new int[]{1, 2, 3}, 2, new int[][]{{1, 2}, {2, 3}}));\n        System.out.println(ForYou(5, new int[]{5, 5, 5, 5, 5}, 5, new int[][]{{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}}));\n    }\n}"}, {"source_Lan": "python###maxSumII.py", "source_code": "def maxSumII( n, arr, brr):\n    ans = [0] * n\n    ma = 0\n    brr.reverse()\n    v = [0] * n\n    vp = [0,0] * n\n    fans = []\n    for i in brr:\n        fans.append(ma)\n        b = i - 1\n        temp = arr[b]\n        left = b\n        right = b\n        if b - 1 >= 0 and v[b - 1] != 0:\n            temp += ans[b - 1]\n            left = min(left, vp[b - 1][0])\n        if b + 1 < n and v[b + 1] != 0:\n            temp += ans[b + 1]\n            right = max(right, vp[b + 1][1])\n        v[b] = arr[b]\n        ans[left] = temp\n        ans[right] = temp\n        vp[left] = (left, right)\n        vp[right] = (left, right)\n        ma = max(temp, ma)\n    fans.reverse()\n    return fans", "trans_code": "public static int [ ] maxSumII ( int n , int [ ] arr , List < Integer > brr ) {\n  int [ ] ans = new int [ n ] ;\n  int ma = 0 ;\n  brr . clear ( ) ;\n  int [ ] v = new int [ n ] ;\n  int [ ] vp = new int [ n ] ;\n  int [ ] fans = new int [ n ] ;\n  for ( int i = 0 ;\n  i < brr . size ( ) ;\n  i ++ ) {\n    fans [ i ] = ma ;\n    int b = brr . get ( i ) - 1 ;\n    int temp = arr [ b ] ;\n    int left = b ;\n    int right = b ;\n    if ( b - 1 >= 0 && v [ b - 1 ] != 0 ) {\n      temp += ans [ b - 1 ] ;\n      left = Math . min ( left , vp [ b - 1 ] . intValue ( ) ) ;\n    }\n    if ( b + 1 < n && v [ b + 1 ] != 0 ) {\n      temp += ans [ b + 1 ] ;\n      right = Math . max ( right , vp [ b + 1 ] . intValue ( ) ) ;\n    }\n    v [ b ] = arr [ b ] ;\n    ans [ left ] = temp ;\n    ans [ right ] = temp ;\n    vp [ left ] = ( int ) left ;\n    vp [ right ] = ( int ) right ;\n    ma = Math . max ( temp , ma ) ;\n  }\n  fans [ 0 ] = ma ;\n  return fans ;\n}\n", "reference_code": "    public static ArrayList<Long> maxSumII(int n, int[] arr, int[] brr) {\n        long[] ans = new long[n];     \n        long ma = 0;                  \n        int[] v = new int[n];         \n        long[][] vp = new long[n][2]; \n        ArrayList<Long> fans = new ArrayList<>(); \n        \n        for (int i = brr.length - 1; i >= 0; --i) {\n            fans.add(ma);            \n            long b = brr[i] - 1;     \n            long temp = arr[(int)b]; \n            long left = b;           \n            long right = b;          \n            \n            if (b - 1 >= 0 && v[(int)(b - 1)] != 0) {\n                temp += ans[(int)(b - 1)];\n                left = Math.min(left, vp[(int)(b - 1)][0]);\n            }\n            \n            if (b + 1 < n && v[(int)(b + 1)] != 0) {\n                temp += ans[(int)(b + 1)];\n                right = Math.max(right, vp[(int)(b + 1)][1]);\n            }\n            v[(int)b] = arr[(int)b];                  \n            ans[(int)left] = temp;                    \n            ans[(int)right] = temp;                   \n            vp[(int)left] = new long[] {left, right}; \n            vp[(int)right] = new long[] {left, right}; \n            ma = Math.max(temp, ma);                   \n        }\n        Collections.reverse(fans); \n        return fans;               \n    }", "target_Lan": "java###maxSumII_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class maxSumII_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxSumII(5, new int[]{1, 2, 3, 4, 5}, new int[]{1, 2, 3, 4, 5}));\n        System.out.println(maxSumII(3, new int[]{5, 4, 3}, new int[]{1, 2, 3}));\n        System.out.println(maxSumII(4, new int[]{10, 20, 30, 40}, new int[]{4, 3, 2, 1}));\n        System.out.println(maxSumII(2, new int[]{100, 200}, new int[]{2, 1}));\n        System.out.println(maxSumII(3, new int[]{10, 20, 30}, new int[]{3, 2, 1}));\n    }\n}"}, {"source_Lan": "python###findEnemies.py", "source_code": "def findEnemies( n : int, m : int, k : int, col : List[int], count : List[int]) -> List[List[int]]:\n    arr=[[-1]*(m) for _ in range(n)]\n    ind=0\n    for i in range(n):\n        while count[i]>0:\n            arr[i][col[ind]]=ind\n            ind+=1\n            count[i]-=1\n    return arr", "trans_code": "public static int [ ] [ ] findEnemies ( int n , int m , int k , int [ ] col , int [ ] count ) throws Exception {\n  int [ ] [ ] arr = new int [ n ] [ m ] ;\n  int ind = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( count [ i ] > 0 ) {\n      arr [ i ] [ col [ ind ] ] = ind ;\n      ind ++ ;\n      count [ i ] -- ;\n    }\n  }\n  return arr ;\n}\n", "reference_code": "    public static ArrayList<ArrayList<Integer>> findEnemies(int n, int m, int k, int[] col, int[] count) {\n        ArrayList<ArrayList<Integer>> answer = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            ArrayList<Integer> row = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                row.add(-1);\n            }\n            answer.add(row);\n        }\n        int curr = 0;\n        int ind = 0;\n        while (curr < k && ind < n) {\n            int total = count[ind];\n            while (total-- > 0) {\n                answer.get(ind).set(col[curr], curr);\n                curr += 1;\n            }\n            ind += 1;\n        }\n        return answer;\n    }", "target_Lan": "java###findEnemies_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class findEnemies_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(findEnemies(0,0,0,new int[]{},new int[]{}));\n        System.out.println(findEnemies(1,1,1,new int[]{0},new int[]{1}));\n        System.out.println(findEnemies(2,2,2,new int[]{0,1},new int[]{1,1}));\n        System.out.println(findEnemies(3,3,3,new int[]{0,1,2},new int[]{1,1,1}));\n        System.out.println(findEnemies(4,4,4,new int[]{0,1,2,3},new int[]{1,1,1,1}));\n    }\n}"}, {"source_Lan": "python###smallestString.py", "source_code": "def smallestString( n : int, s : str) -> str:\n    \n    if n == 1:\n        return \"-1\"\n    answer = list(s)\n    \n    for i in range(n // 2):\n        \n        if s[i] != 'a':\n            answer[i] = 'a'\n            return ''.join(answer)\n    \n    answer[-1] = 'b'\n    return ''.join(answer)", "trans_code": "public static String smallestString ( int n , String s ) throws Exception {\n  if ( n == 1 ) return \"-1\" ;\n  List < String > answer = Lists . newArrayList ( s ) ;\n  for ( int i = 0 ;\n  i < n / 2 ;\n  i ++ ) {\n    if ( s . charAt ( i ) != 'a' ) {\n      answer . add ( i , \"a\" ) ;\n      return Joiner . on ( \" \" ) . join ( answer ) ;\n    }\n  }\n  answer . add ( - 1 , \"b\" ) ;\n  return Joiner . on ( \" \" ) . join ( answer ) ;\n}\n", "reference_code": "    public static String smallestString(int n, String s) {\n        \n        StringBuilder answer = new StringBuilder(s);\n        int odd = n % 2; \n        if (n == 1) {\n            return \"-1\"; \n        }\n        for (int i = 0; i < n / 2; i++) {\n            if (s.charAt(i) != 'a') {\n                answer.setCharAt(i, 'a'); \n                return answer.toString(); \n            }\n        }\n        answer.setCharAt(answer.length() - 1, 'b'); \n        return answer.toString(); \n    }", "target_Lan": "java###smallestString_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class smallestString_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(smallestString(1, \"a\"));\n    System.out.println(smallestString(2, \"b\"));\n    System.out.println(smallestString(3, \"aaa\"));\n    System.out.println(smallestString(4, \"abcd\"));\n    System.out.println(smallestString(5, \"abcde\"));\n}\n}"}, {"source_Lan": "python###doesExists.py", "source_code": "def doesExists( S: str) -> str:\n    hsh = [0] * 26\n    for c in S:\n        hsh[ord(c) - ord('a')] += 1\n    curr = [i for i in hsh if i != 0]\n    if len(curr) == 1:\n        return \"NO\"\n    return \"YES\"", "trans_code": "public static String doesExists ( String S ) throws Exception {\n  int [ ] hsh = new int [ 26 ] ;\n  for ( int i = 0 ;\n  i < S . length ( ) ;\n  i ++ ) {\n    hsh [ ( int ) S . charAt ( i ) - 'a' ] ++ ;\n  }\n  int [ ] curr = new int [ hsh . length ] ;\n  for ( int i = 0 ;\n  i < hsh . length ;\n  i ++ ) {\n    curr [ i ] = i ;\n  }\n  if ( curr . length == 1 ) {\n    return \"NO\" ;\n  }\n  return \"YES\" ;\n}\n", "reference_code": "    public static String doesExists(String s) {\n        int n = s.length();\n        ArrayList<Integer> hsh = new ArrayList<>(26);\n        for (int i = 0; i < 26; i++) hsh.add(0);\n        for (Character c : s.toCharArray()) hsh.set(c - 'a', hsh.get(c - 'a') + 1);\n        int curr = 0;\n        for (int i = 0; i < 26; i++)\n            if (hsh.get(i) > 0) curr++;\n        if (curr == 1) return \"NO\";\n        return \"YES\";\n    }", "target_Lan": "java###doesExists_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Scanner;\npublic class doesExists_Test {\n// TOFILL\npublic static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        System.out.println(doesExists(\"\"));\n        System.out.println(doesExists(\"a\"));\n        System.out.println(doesExists(\"abcd\"));\n        System.out.println(doesExists(\"abcabc\"));\n        System.out.println(doesExists(\"abcabcabc\"));\n    }\n}"}, {"source_Lan": "python###arrangingHorses.py", "source_code": "def arrangingHorses( n: int, m: int,data: List[List[int]]) -> List[int]:\n    deg = [0] * (n)\n    g = [[] for _ in range(n)]\n    for el in data:\n        deg[el[0]] += 1\n        g[el[1]].append(el[0])\n    q = []\n    ans = []\n    for i in range(n):\n        if deg[i] == 0:\n            heappush(q, i)\n    while q:\n        node = heappop(q)\n        ans.append(node)\n        for el in g[node]:\n            deg[el] -= 1\n            if deg[el] == 0:\n                heappush(q, el)\n    return ans", "trans_code": "public static List < Integer > arrangingHorses ( int n , int m , List < List < Integer >> data ) throws Exception {\n  int [ ] deg = new int [ n ] ;\n  ArrayList < Integer > g = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    deg [ i ] = 0 ;\n    g . add ( i ) ;\n  }\n  for ( List < Integer > el : data ) {\n    deg [ el . get ( 0 ) ] ++ ;\n    g . add ( el . get ( 1 ) ) ;\n  }\n  Queue < Integer > q = new LinkedList < Integer > ( ) ;\n  List < Integer > ans = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( deg [ i ] == 0 ) {\n      heappush ( q , i ) ;\n    }\n  }\n  while ( q . size ( ) > 0 ) {\n    int node = heappop ( q ) ;\n    ans . add ( node ) ;\n    for ( Integer el : g . get ( node ) ) {\n      deg [ el ] -- ;\n      if ( deg [ el ] == 0 ) {\n        heappush ( q , el ) ;\n      }\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static ArrayList<Integer> arrangingHorses(int n, int m, int[][] data) {\n        int[] inDegree = new int[n];\n        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();\n        for (int i = 0; i < n; i++) adjList.add(new ArrayList<>());\n        for (int[] edge : data) {\n            int a = edge[0], b = edge[1];\n            adjList.get(b).add(a); \n            ++inDegree[a];\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(); \n        for (int i = 0; i < n; ++i) {\n            if (inDegree[i] == 0) pq.add(i);\n        }\n        ArrayList<Integer> order = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            int horse = pq.poll();\n            order.add(horse);\n            for (int neigh : adjList.get(horse)) {\n                --inDegree[neigh];\n                if (inDegree[neigh] == 0) pq.add(neigh);\n            }\n        }\n        return order;\n    }", "target_Lan": "java###arrangingHorses_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class arrangingHorses_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][] h = new int[0][0];\n    System.out.println(arrangingHorses(0, 0, h));\n    System.out.println(arrangingHorses(1, 0, h));\n\n    h = new int[][]{{0, 1}};\n    System.out.println(arrangingHorses(2, 1, h));\n\n    h = new int[][]{{0, 1}, {1, 2}};\n    System.out.println(arrangingHorses(3, 2, h));\n\n    h = new int[][]{{0, 1}, {1, 0}};\n    System.out.println(arrangingHorses(3, 2, h));\n}\n}"}, {"source_Lan": "python###AreEqual.py", "source_code": "def AreEqual( a: str, b: str) -> bool:\n    for i in range(len(a) - 1):\n        if (a[i] == b[i] and a[i] == '0' and a[i + 1] == b[i + 1]\n                and a[i + 1] == '1'):\n            return True\n    return False", "trans_code": "public static boolean AreEqual ( String a , String b ) throws Exception {\n  for ( int i = 0 ;\n  i < a . length ( ) - 1 ;\n  i ++ ) {\n    if ( ( a . charAt ( i ) == b . charAt ( i ) && a . charAt ( i ) == '0' && a . charAt ( i + 1 ) == b . charAt ( i + 1 ) && a . charAt ( i + 1 ) == '1' ) ) {\n      return true ;\n    }\n  }\n  return false ;\n}\n", "reference_code": "    public static boolean AreEqual(String a, String b) {\n        int n = a.length();\n        boolean flag = false;\n        for (int i = 0; i < n - 1; i++) {\n            if (a.charAt(i) == '0' && b.charAt(i + 1) == '1') {\n                if (a.charAt(i) == b.charAt(i) && a.charAt(i + 1) == b.charAt(i + 1)) {\n                    flag = true;\n                }\n            }\n        }\n        return flag;\n    }", "target_Lan": "java###AreEqual_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class AreEqual_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(AreEqual(\"\", \"\"));\n    System.out.println(AreEqual(\"1\", \"1\"));\n    System.out.println(AreEqual(\"01\", \"10\"));\n    System.out.println(AreEqual(\"001\", \"110\"));\n    System.out.println(AreEqual(\"0001\", \"1110\"));\n}\n}"}, {"source_Lan": "python###maxPoints.py", "source_code": "def maxPoints( n: int, arr: List[List[int]]) -> int:\n    dp = [0] * (200000)\n    for i in range(n - 1, -1, -1):\n        dp[i] = max(arr[i][0] + dp[arr[i][1] + i + 1], dp[i + 1])\n    return dp[0]", "trans_code": "public static int maxPoints ( int n , List < List < Integer >> arr ) throws Exception {\n  int [ ] dp = new int [ 200000 ] ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    dp [ i ] = Math . max ( arr . get ( i ) . intValue ( ) + dp [ arr . get ( i ) . intValue ( ) + i + 1 ] , dp [ i + 1 ] ) ;\n  }\n  return dp [ 0 ] ;\n}\n", "reference_code": "    public static long maxPoints(int n, int[][] arr) {\n        long[] dp = new long[200001];\n        for (int i = n - 1; i >= 0; --i)\n            dp[i] = Math.max(arr[i][0] + dp[arr[i][1] + i + 1], dp[i + 1]);\n        return dp[0];\n    }", "target_Lan": "java###maxPoints_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxPoints_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxPoints(0, new int[][]{}));\n        System.out.println(maxPoints(1, new int[][]{{10, 1}}));\n        System.out.println(maxPoints(2, new int[][]{{10, 1}, {20, 2}}));\n        System.out.println(maxPoints(3, new int[][]{{10, 1}, {20, 2}, {30, 3}}));\n        System.out.println(maxPoints(4, new int[][]{{10, 1}, {20, 2}, {30, 3}, {40, 4}}));\n    }\n}"}, {"source_Lan": "python###matrixConundrum.py", "source_code": "def matrixConundrum( n: int, m: int, mat: List[str]) -> bool:\n    check = ['p', 'l', 'a', 'y']\n    idx = 0\n    for j in range(m):\n        for i in range(n):\n            if mat[i][j] == check[idx]:\n                idx += 1\n                if idx == 4:\n                    return True\n                break\n    return False", "trans_code": "public static boolean matrixConundrum ( int n , int m , char [ ] [ ] mat ) throws Exception {\n  char [ ] check = {\n    'p' , 'l' , 'a' , 'y' }\n    ;\n    int idx = 0 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      for ( int i = 0 ;\n      i < n ;\n      i ++ ) {\n        if ( mat [ i ] [ j ] == check [ idx ] ) {\n          idx ++ ;\n          if ( idx == 4 ) {\n            return true ;\n          }\n          break ;\n        }\n      }\n    }\n    return false ;\n  }\n  ", "reference_code": "    public static boolean matrixConundrum(int n, int m, List<String> mat) {\n        String play = \"play\";\n        int fnd = 0;\n        for (int i = 0; i < m; ++i) {\n            boolean check = false;\n            for (int j = 0; j < n; ++j) {\n                if (mat.get(j).charAt(i) == play.charAt(fnd)) {\n                    check = true;\n                }\n            }\n            if (check) {\n                ++fnd;\n                if (fnd == 4) {\n                    break;\n                }\n            }\n        }\n        return fnd == 4;\n    }", "target_Lan": "java###matrixConundrum_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class matrixConundrum_Test {\n// TOFILL\npublic static void main(String[] args) {\n    List<String> input1 = Arrays.asList(\"play\", \"plat\", \"palt\", \"palp\");\n    List<String> input2 = Arrays.asList(\"poy\", \"yop\", \"oyp\");\n    List<String> input3 = Arrays.asList(\"yp\", \"py\");\n    List<String> input4 = Arrays.asList(\"play\");\n    List<String> input5 = Arrays.asList(\"papl\", \"aypl\", \"payp\", \"palp\");\n\n    System.out.println(matrixConundrum(4, 4, input1));\n    System.out.println(matrixConundrum(3, 3, input2));\n    System.out.println(matrixConundrum(2, 2, input3));\n    System.out.println(matrixConundrum(1, 1, input4));\n    System.out.println(matrixConundrum(4, 4, input5));\n}\n}"}, {"source_Lan": "python###matchingCnt.py", "source_code": "def matchingCnt( n: int, X: List[str]) -> List[int]:\n    mp = []\n    ans = [0] * n\n    for i in range(n - 1, -1, -1):\n        s = X[i]\n        for j in range(len(s)):\n            \n            if len(mp) == j:\n                mp.append([0] * 26)\n            \n            ans[i] += mp[j][ord(s[j]) - 97]\n            mp[j][ord(s[j]) - 97] += 1\n    return ans", "trans_code": "public static int [ ] matchingCnt ( int n , String [ ] X ) throws Exception {\n  int [ ] mp = new int [ n ] ;\n  int [ ] ans = new int [ n ] ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    String s = X [ i ] ;\n    for ( int j = 0 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      if ( mp . length == j ) mp [ j ] = new int [ 26 ] ;\n      ans [ i ] += mp [ j ] [ ( char ) s . charAt ( j ) - 97 ] ;\n      mp [ j ] [ ( char ) s . charAt ( j ) - 97 ] ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int[] matchingCnt(int n, String[] X) {\n        Map<Integer, int[]> map = new HashMap<>();\n        int[] ans = new int[n];\n        for (int i = n - 1; i >= 0; i--) {\n            String x = X[i];\n            int cans = 0;\n            for (int j = 0; j < x.length(); j++) {\n                if (!map.containsKey(j)) {\n                    map.put(j, new int[26]);\n                }\n                cans = cans + map.get(j)[x.charAt(j) - 'a'];\n                map.get(j)[x.charAt(j) - 'a']++;\n            }\n            ans[i] = cans;\n        }\n        return ans;\n    }", "target_Lan": "java###matchingCnt_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n    import java.util.Arrays;\npublic class matchingCnt_Test {\n// TOFILL\npublic static void main(String[] args) {\n            System.out.println(Arrays.toString(matchingCnt(0, new String[]{})));\n            System.out.println(Arrays.toString(matchingCnt(1, new String[]{\"a\"})));\n            System.out.println(Arrays.toString(matchingCnt(2, new String[]{\"a\", \"b\"})));\n            System.out.println(Arrays.toString(matchingCnt(3, new String[]{\"a\", \"b\", \"c\"})));\n            System.out.println(Arrays.toString(matchingCnt(4, new String[]{\"a\", \"b\", \"c\", \"d\"})));\n        }\n}"}, {"source_Lan": "python###maxAlternatingSubstring.py", "source_code": "def maxAlternatingSubstring( N: int, S: str) -> int:\n    diff = []\n    i = 0\n    while i < N:\n        j = i + 1\n        while j < N and S[j] != S[j - 1]:\n            j += 1\n        diff.append(j - i)\n        i = j\n    diff.append(0)\n    ans_before = 0\n    for x in diff:\n        ans_before += ((x * (x + 1)) // 2)\n    ans = 0\n    for i in range(len(diff) - 1):\n        a = diff[i]\n        b = diff[i + 1]\n        currAns = (ans_before - ((a * (a + 1)) // 2) -\n                   ((b * (b + 1)) // 2) + ((a + b + 1) * (a + b + 2)) // 2)\n        ans = max(ans, currAns)\n    return ans", "trans_code": "public static int maxAlternatingSubstring ( int N , String S ) throws Exception {\n  ArrayList < Integer > diff = new ArrayList < Integer > ( ) ;\n  int i = 0 ;\n  while ( i < N ) {\n    int j = i + 1 ;\n    while ( j < N && S . charAt ( j ) != S . charAt ( j - 1 ) ) j ++ ;\n    diff . add ( j - i ) ;\n    i = j ;\n  }\n  diff . add ( 0 ) ;\n  int ansBefore = 0 ;\n  for ( int x : diff ) ansBefore += ( ( x * ( x + 1 ) ) / 2 ) ;\n  int ans = 0 ;\n  for ( i = 0 ;\n  i < diff . size ( ) - 1 ;\n  i ++ ) {\n    int a = diff . get ( i ) ;\n    int b = diff . get ( i + 1 ) ;\n    int currAns = ( ansBefore - ( ( a * ( a + 1 ) ) / 2 ) - ( ( b * ( b + 1 ) ) / 2 ) + ( ( a + b + 1 ) * ( a + b + 2 ) ) / 2 ) ;\n    ans = Math . max ( ans , currAns ) ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static long maxAlternatingSubstring(int N, String S) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < N;) {\n            int j = i + 1;\n            while (j < N && S.charAt(j) != S.charAt(j - 1)) j++;\n            diff.add(j - i);\n            i = j;\n        }\n        diff.add(0);\n        long ans_before = 0;\n        for (int x : diff) {\n            ans_before += ((x * 1L * (x + 1)) / 2);\n        }\n        long ans = 0;\n        for (int i = 0; i < diff.size() - 1; i++) {\n            long a = diff.get(i);\n            long b = diff.get(i + 1);\n            long currAns = ans_before - ((a * (a + 1)) / 2) - ((b * (b + 1)) / 2) +\n                           ((a + b + 1) * (a + b + 2)) / 2;\n            ans = Math.max(ans, currAns);\n        }\n        return ans;\n    }", "target_Lan": "java###maxAlternatingSubstring_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n    import java.util.*;\npublic class maxAlternatingSubstring_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxAlternatingSubstring(10, \"0101010101\"));\n        System.out.println(maxAlternatingSubstring(5, \"00000\"));\n    }\n}"}, {"source_Lan": "python###isPossible.py", "source_code": "def isPossible( a: int, b: int, c: int) -> str:\n    \n    if (a + b) > c and (a + c) > b and (b + c) > a:\n        return \"YES\"\n    else:\n        return \"NO\"", "trans_code": "public static String isPossible ( int a , int b , int c ) throws Exception {\n  if ( ( a + b ) > c && ( a + c ) > b && ( b + c ) > a ) {\n    return \"YES\" ;\n  }\n  else {\n    return \"NO\" ;\n  }\n}\n", "reference_code": "    public static String isPossible(int a, int b, int c) {\n        \n        if ((a + b) > c && (a + c) > b && (b + c) > a)\n            return \"YES\";\n        else\n            return \"NO\";\n    }", "target_Lan": "java###isPossible_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class isPossible_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(isPossible(0, 0, 0));\n    System.out.println(isPossible(1, 1, 3));\n    System.out.println(isPossible(3, 4, 5));\n    System.out.println(isPossible(10, 10, 20));\n    System.out.println(isPossible(1, 2, 3));\n}\n}"}, {"source_Lan": "python###countSuperPalindrome.py", "source_code": "def countSuperPalindrome( l: int, r: int) -> int:\n    count = 0\n    start = ceil(sqrt(l))\n    while start * start <= r:\n        s = str(start * start)\n        \n        if s == s[::-1]:\n            count += 1\n        start += 1\n    return count", "trans_code": "public static int countSuperPalindrome ( int l , int r ) throws Exception {\n  int count = 0 ;\n  int start = Math . ceil ( Math . sqrt ( l ) ) ;\n  while ( start * start <= r ) {\n    String s = String . valueOf ( start * start ) ;\n    if ( s . equals ( s . substring ( 0 , s . length ( ) - 1 ) ) ) {\n      count ++ ;\n    }\n    start ++ ;\n  }\n  return count ;\n}\n", "reference_code": "    public static int countSuperPalindrome(int l, int r) {\n        int count = 0;\n        \n        int start = (int)Math.ceil(Math.sqrt(l));\n        \n        while (start * start <= r) {\n            \n            int square = start * start;\n            String s = Integer.toString(square);\n            \n            if (s.equals(new StringBuilder(s).reverse().toString())) {\n                count++;\n            }\n            start++;\n        }\n        return count;\n    }", "target_Lan": "java###countSuperPalindrome_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n    import java.util.*;\npublic class countSuperPalindrome_Test {\n// TOFILL\npublic static void main(String[] args) {\n            System.out.println(countSuperPalindrome(1, 10));\n            System.out.println(countSuperPalindrome(10, 100));\n            System.out.println(countSuperPalindrome(100, 1000));\n            System.out.println(countSuperPalindrome(1000, 10000));\n            System.out.println(countSuperPalindrome(10000, 100000));\n        }\n}"}, {"source_Lan": "python###countOperations.py", "source_code": "def countOperations( s: str) -> int:\n    mod = 10**9 + 7\n    ans = 0\n    count_b = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == 'b':\n            count_b = (count_b + 1) % mod\n        else:\n            ans = (ans + count_b) % mod\n            count_b = (count_b + count_b) % mod\n    return ans", "trans_code": "public static int countOperations ( String s ) throws Exception {\n  int mod = 10 * 9 + 7 ;\n  int ans = 0 ;\n  int countB = 0 ;\n  for ( int i = s . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( s . charAt ( i ) == 'b' ) {\n      countB = ( countB + 1 ) % mod ;\n    }\n    else {\n      ans = ( ans + countB ) % mod ;\n      countB = ( countB + countB ) % mod ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int countOperations(String s) {\n        final int mod = 1000000007;\n        int ans = 0;\n        int count_b = 0;\n        for (int i = s.length() - 1; i >= 0; --i) {\n            if (s.charAt(i) == 'b') {\n                count_b = (count_b + 1) % mod;\n            } else {\n                ans = (ans + count_b) % mod;\n                count_b = (count_b + count_b) % mod;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###countOperations_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class countOperations_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(countOperations(\"bbb\"));\n    System.out.println(countOperations(\"ab\"));\n    System.out.println(countOperations(\"baab\"));\n    System.out.println(countOperations(\"bbbaa\"));\n    System.out.println(countOperations(\"aaabbb\"));\n}\n}"}, {"source_Lan": "python###geeklandElections.py", "source_code": "def geeklandElections( n: int, k: int, s: str) -> bool:\n    ans = s.count(\"1\") + min(k, s.count(\"0\"))\n    return ans > n - ans", "trans_code": "public static boolean geeklandElections ( int n , int k , String s ) throws Exception {\n  int ans = s . indexOf ( \"1\" ) + Math . min ( k , s . indexOf ( \"0\" ) ) ;\n  return ans > n - ans ;\n}\n", "reference_code": "    public static boolean geeklandElections(int n, int k, String s) {\n        int votes = 0;\n        for (int i = 0; i < n; i++)\n            if (s.charAt(i) == '1') votes++;\n        return (votes + k) > (n - (votes + k));\n    }", "target_Lan": "java###geeklandElections_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class geeklandElections_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(geeklandElections(0, 0, \"\"));\n    System.out.println(geeklandElections(1, 1, \"1\"));\n    System.out.println(geeklandElections(1, 1, \"0\"));\n    System.out.println(geeklandElections(2, 1, \"10\"));\n    System.out.println(geeklandElections(2, 1, \"01\"));\n}\n}"}, {"source_Lan": "python###totalCount.py", "source_code": "def totalCount( n : int, s : str) -> int:\n    mod=10**9+7\n    ans=0\n    for i in range(n):\n        if s[i]==s[0]:\n            ans+=(n-i)\n            ans%=mod\n    return ans", "trans_code": "public static int totalCount ( int n , String s ) throws Exception {\n  int mod = 10 * 9 + 7 ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . charAt ( i ) == s . charAt ( 0 ) ) {\n      ans += ( n - i ) ;\n      ans %= mod ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int totalCount(int n, String s) {\n        int ans = 0, mod = (int)(1e9 + 7);\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == s.charAt(0))\n                ans = (ans + s.length() - i) % mod;\n        }\n        return ans;\n    }", "target_Lan": "java###totalCount_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class totalCount_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(totalCount(0, \"\"));\n    System.out.println(totalCount(10, \"aaaaaaaaaa\"));\n    System.out.println(totalCount(5, \"bbbbb\"));\n    System.out.println(totalCount(3, \"ccc\"));\n    System.out.println(totalCount(7, \"aabbaac\"));\n}\n}"}, {"source_Lan": "python###candyShop.py", "source_code": "def candyShop( n : int, candies : List[int]) -> int:\n    s=set(el for el in candies)\n    t=Counter()\n    l=0\n    p=0\n    ans=float(\"inf\")\n    for el in candies:\n        p+=el\n        t[el]+=1\n        while len(t)==len(s):\n            ans=min(ans,p)\n            t[candies[l]]-=1\n            p-=candies[l]\n            if t[candies[l]]==0:\n                del t[candies[l]]\n            l+=1\n    return ans", "trans_code": "public static int candyShop ( int n , List < Integer > candies ) throws Exception {\n  Set < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int el : candies ) {\n    s . add ( el ) ;\n  }\n  Counter < Integer > t = new ClassicCounter < Integer > ( ) ;\n  int l = 0 ;\n  int p = 0 ;\n  int ans = Integer . MIN_VALUE ;\n  for ( int el : candies ) {\n    p += el ;\n    t . count ( el ) ++ ;\n    while ( t . size ( ) == s . size ( ) ) {\n      ans = Math . min ( ans , p ) ;\n      t . count ( candies . get ( l ) ) -- ;\n      p -= candies . get ( l ) ;\n      if ( t . count ( candies . get ( l ) ) == 0 ) -- t . count ( candies . get ( l ) ) ;\n      l ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int candyShop(int n, int candies[]) {\n        int ans = Integer.MAX_VALUE;\n        int sum = 0;\n        int low = 0, high = 0;\n        Set<Integer> hs = new HashSet<>();\n        for(int x : candies)\n            hs.add(x);\n        Map<Integer, Integer> hm = new HashMap<>();\n        while(high < n){\n            hm.put(candies[high], hm.getOrDefault(candies[high], 0) + 1);\n            sum += candies[high++];\n            while(low < high && hm.get(candies[low]) > 1){\n                hm.put(candies[low], hm.get(candies[low]) - 1);\n                sum -= candies[low++];\n            }\n            if(hm.size() == hs.size())\n                ans = Math.min(ans, sum);\n        }\n        return ans;\n    }", "target_Lan": "java###candyShop_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class candyShop_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(candyShop(5, new int[]{1,2,3,4,5}));\n        System.out.println(candyShop(10, new int[]{2,2,2,2,2,2,2,2,2,2}));\n        System.out.println(candyShop(7, new int[]{1,1,1,1,1,1,1}));\n        System.out.println(candyShop(12, new int[]{10,20,30,40,50,60,70,80,90,100,110,120}));\n        System.out.println(candyShop(8, new int[]{1,2,3,1,2,3,1,2}));\n    }\n}"}, {"source_Lan": "python###isFriend.py", "source_code": "def isFriend( n : int, x : int, y : int, arr : List[int]) -> str:\n    if y-x in arr:\n        return \"yes\"\n    else:\n        return \"no\"", "trans_code": "public static String isFriend ( int n , int x , int y , List < Integer > arr ) throws Exception {\n  if ( y - x < arr . size ( ) ) {\n    return \"yes\" ;\n  }\n  else {\n    return \"no\" ;\n  }\n}\n", "reference_code": "    public static String isFriend(int n, int x, int y, int[] arr) {\n        for(int e : arr)\n            if(x + e == y)\n                return \"yes\";\n        return \"no\";\n    }", "target_Lan": "java###isFriend_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class isFriend_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(isFriend(0, 0, 0, new int[]{}));\n    System.out.println(isFriend(3, 1, 3, new int[]{1, 2, 3}));\n    System.out.println(isFriend(2, -1, 1, new int[]{-2, 2}));\n    System.out.println(isFriend(4, 0, 0, new int[]{0, 0, 0, 0}));\n    System.out.println(isFriend(1, 10, 10, new int[]{0}));\n}\n}"}, {"source_Lan": "python###minOPs.py", "source_code": "def minOPs( n : int, A : List[int]) -> int:\n    c=Counter(A)\n    t=[]\n    for el in c.values():\n        t.append(el)\n    t.sort()\n    s=0\n    ans=0\n    while s<=(n/2):\n        s+=t.pop()\n        ans+=1\n    return ans-1", "trans_code": "public static int minOPs ( int n , List < Integer > A ) throws Exception {\n  Counter c = new ClassicCounter < Integer > ( A ) ;\n  LinkedList < Integer > t = new LinkedList < Integer > ( ) ;\n  for ( Integer el : c . values ( ) ) t . add ( el ) ;\n  Collections . sort ( t ) ;\n  int s = 0 ;\n  int ans = 0 ;\n  while ( s <= ( n / 2 ) ) {\n    s += t . removeFirst ( ) ;\n    ans ++ ;\n  }\n  return ans - 1 ;\n}\n", "reference_code": "    public static int minOPs(int n, int[] A) {\n        Map<Integer, Integer> m = new HashMap<>();\n        for (int it : A) {\n            m.put(it, m.getOrDefault(it, 0) + 1);\n        }\n        int[] v = new int[m.size()];\n        int index = 0;\n        for (int value : m.values()) {\n            v[index++] = value;\n        }\n        Arrays.sort(v);\n        int sum = 0;\n        for (int i = v.length - 1; i >= 0; i--) {\n            sum += v[i];\n            if (sum > (n / 2)) {\n                return v.length - 1 - i;\n            }\n        }\n        return 0; \n    }", "target_Lan": "java###minOPs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n    import java.util.Arrays;\npublic class minOPs_Test {\n// TOFILL\npublic static void main(String[] args) {\n            int[] A1 = {1,2,2,3,3,3};\n            int[] A2 = {1,1,2,2};\n            int[] A3 = {1,2,3};\n            int[] A4 = {1,1};\n            int[] A5 = {1};\n            System.out.println(minOPs(5, A1));\n            System.out.println(minOPs(4, A2));\n            System.out.println(minOPs(3, A3));\n            System.out.println(minOPs(2, A4));\n            System.out.println(minOPs(1, A5));\n        }\n}"}, {"source_Lan": "python###minimizeArr.py", "source_code": "def minimizeArr( n: int, arr: List[int]) -> int:\n    min_element = min(arr)\n    if arr.count(min_element) == 1:\n        return 1\n    else:\n        count = arr.count(min_element)\n        for el in arr:\n            if el % min_element != 0:\n                return 1\n        return (count + 1) // 2", "trans_code": "public static int minimizeArr ( int n , int [ ] arr ) throws Exception {\n  int minElement = Math . min ( arr . length , n ) ;\n  if ( arr . length == 1 ) {\n    return 1 ;\n  }\n  else {\n    int count = arr . length ;\n    for ( int el : arr ) {\n      if ( el % minElement != 0 ) {\n        return 1 ;\n      }\n    }\n    return ( count + 1 ) / 2 ;\n  }\n}\n", "reference_code": "    public static int minimizeArr(int n, int[] arr) {\n        \n        int mi = Arrays.stream(arr).min().getAsInt();\n        int ct = 0;\n        \n        for (int j : arr) {\n            if (j == mi) ct++;\n        }\n        \n        if (ct == 1) return 1;\n        \n        for (int j : arr) {\n            if (j % mi != 0) return 1;\n        }\n        \n        return (int)Math.ceil((float)ct / 2);\n    }", "target_Lan": "java###minimizeArr_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimizeArr_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minimizeArr(3, new int[]{1, 2, 3}));\n    System.out.println(minimizeArr(5, new int[]{2, 2, 2, 2, 2}));\n    System.out.println(minimizeArr(3, new int[]{1, 2, 3}));\n    System.out.println(minimizeArr(5, new int[]{1, 2, 2, 3, 4}));\n}\n}"}, {"source_Lan": "python###consecutiveVal.py", "source_code": "def consecutiveVal( n: int, a: List[int]) -> str:\n    \n    Set = set(a)\n    ans = \"\"\n    \n    for e in a:\n        \n        if e - 1 in Set or e + 1 in Set:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans", "trans_code": "public static String consecutiveVal ( int n , int [ ] a ) throws Exception {\n  Set < Integer > Set = new HashSet < Integer > ( a ) ;\n  String ans = \"\" ;\n  for ( int e : a ) {\n    if ( e - 1 == Set . size ( ) || e + 1 == Set . size ( ) ) {\n      ans += '1' ;\n    }\n    else {\n      ans += '0' ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static String consecutiveVal(int n, List<Integer> a) {\n        StringBuilder result = new StringBuilder();\n        Map<Integer, Boolean> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            mp.put(a.get(i), true);\n        }\n        for (int i = 0; i < n; i++) {\n            if (Boolean.TRUE.equals(mp.get(a.get(i) - 1)) ||\n                Boolean.TRUE.equals(mp.get(a.get(i) + 1))) {\n                result.append('1');\n            } else {\n                result.append('0');\n            }\n        }\n        return result.toString();\n    }", "target_Lan": "java###consecutiveVal_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class consecutiveVal_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(consecutiveVal(3, new ArrayList<>(Arrays.asList(1, 2, 3))));\n    System.out.println(consecutiveVal(5, new ArrayList<>(Arrays.asList(3, 5, 4, 1, 2))));\n    System.out.println(consecutiveVal(4, new ArrayList<>(Arrays.asList(1, 1, 2, 3))));\n    System.out.println(consecutiveVal(2, new ArrayList<>(Arrays.asList(10, 11))));\n    System.out.println(consecutiveVal(3, new ArrayList<>(Arrays.asList(5, 4, 3))));\n}\n}"}, {"source_Lan": "python###chocolateDistribution.py", "source_code": "def chocolateDistribution( N, M, arr, brr):\n    arr.sort()\n    brr.sort()\n    ans = 0\n    i, j = 0, 0\n    while i < N and j < M:\n        if arr[i] <= brr[j]:\n            ans += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return ans", "trans_code": "public static int chocolateDistribution ( int N , int M , int [ ] arr , int [ ] brr ) {\n  Arrays . sort ( arr ) ;\n  Arrays . sort ( brr ) ;\n  int ans = 0 ;\n  int i = 0 , j = 0 ;\n  while ( i < N && j < M ) {\n    if ( arr [ i ] <= brr [ j ] ) {\n      ans ++ ;\n      i ++ ;\n      j ++ ;\n    }\n    else {\n      j ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int chocolateDistribution(int N, int M, int[] arr, int[] brr) {\n        Arrays.sort(arr);\n        Arrays.sort(brr);\n        int ans = 0;\n        int i = 0, j = 0;\n        while (i < N && j < M) {\n            if (arr[i] <= brr[j]) {\n                ans++;\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###chocolateDistribution_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class chocolateDistribution_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] brr1 = {1, 2, 3, 4, 5};\n        System.out.println(chocolateDistribution(5, 5, arr1, brr1));\n\n        int[] arr2 = {1, 2, 3, 4, 5};\n        int[] brr2 = {6, 7, 8, 9, 10};\n        System.out.println(chocolateDistribution(5, 5, arr2, brr2));\n\n        int[] arr3 = {6, 7, 8, 9, 10};\n        int[] brr3 = {1, 2, 3, 4, 5};\n        System.out.println(chocolateDistribution(5, 5, arr3, brr3));\n\n        int[] arr4 = {1, 2, 3, 4, 5};\n        int[] brr4 = {2, 3, 4, 5, 6};\n        System.out.println(chocolateDistribution(5, 5, arr4, brr4));\n\n        int[] arr5 = {6, 7, 8, 9, 10};\n        int[] brr5 = {1, 3, 5, 7, 9};\n        System.out.println(chocolateDistribution(5, 5, arr5, brr5));\n    }\n}"}, {"source_Lan": "python###minJumps.py", "source_code": "def minJumps( n, arr):\n    right_greater = [n] * n\n    right_lesser = [n] * n\n    stack = []\n    for i in range(n):\n        while stack and arr[stack[-1]] < arr[i]:\n            right_greater[stack[-1]] = i\n            stack.pop()\n        stack.append(i)\n    stack.clear()\n    for i in range(n):\n        while stack and arr[stack[-1]] > arr[i]:\n            right_lesser[stack[-1]] = i\n            stack.pop()\n        stack.append(i)\n    queue = deque([(0, 0)])\n    visited = [0] * n\n    while queue:\n        p, d = queue.popleft()\n        if visited[p] == 1:\n            continue\n        visited[p] = 1\n        if p == n - 1:\n            return d\n        temp = p + 1\n        \n        if arr[temp] > arr[p]:\n            while temp != n and arr[temp] > arr[p]:\n                queue.append((temp, d + 1))\n                temp = right_lesser[temp]\n            if temp != n:\n                queue.append((temp, d + 1))\n        \n        else:\n            while temp != n and arr[temp] < arr[p]:\n                queue.append((temp, d + 1))\n                temp = right_greater[temp]\n            if temp != n:\n                queue.append((temp, d + 1))\n    return -1", "trans_code": "public static int minJumps ( int n , int [ ] arr ) {\n  int [ ] rightGreater = new int [ n ] ;\n  int [ ] rightLesser = new int [ n ] ;\n  Stack < Integer > stack = new Stack < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( stack . size ( ) > 0 && arr [ stack . size ( ) - 1 ] < arr [ i ] ) {\n      rightGreater [ stack . size ( ) - 1 ] = i ;\n      stack . pop ( ) ;\n    }\n    stack . push ( i ) ;\n  }\n  stack . clear ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( stack . size ( ) > 0 && arr [ stack . size ( ) - 1 ] > arr [ i ] ) {\n      rightLesser [ stack . size ( ) - 1 ] = i ;\n      stack . pop ( ) ;\n    }\n    stack . push ( i ) ;\n  }\n  Deque < Integer > queue = new LinkedList < Integer > ( ) ;\n  queue . push ( 0 ) ;\n  int [ ] visited = new int [ n ] ;\n  while ( queue . size ( ) > 0 ) {\n    int p = queue . pop ( ) , d = 0 ;\n    while ( queue . size ( ) > 0 ) {\n      p = queue . pop ( ) ;\n      if ( visited [ p ] == 1 ) continue ;\n      visited [ p ] = 1 ;\n      if ( p == n - 1 ) return d ;\n      int temp = p + 1 ;\n      if ( arr [ temp ] > arr [ p ] ) {\n        while ( temp != n && arr [ temp ] > arr [ p ] ) {\n          queue . push ( new Integer ( temp ) ) ;\n          temp = rightLesser [ temp ] ;\n        }\n        if ( temp != n ) queue . push ( new Integer ( temp ) ) ;\n      }\n      else {\n        while ( temp != n && arr [ temp ] < arr [ p ] ) {\n          queue . push ( new Integer ( temp ) ) ;\n          temp = rightGreater [ temp ] ;\n        }\n        if ( temp != n ) queue . push ( new Integer ( temp ) ) ;\n      }\n    }\n    return - 1 ;\n  }\n  ", "reference_code": "    public static int minJumps(int n, int[] arr) {\n        int[] rightGreater = new int[n];\n        int[] rightLesser = new int[n];\n        Arrays.fill(rightGreater, n);\n        Arrays.fill(rightLesser, n);\n        \n        Deque<Integer> stack = new ArrayDeque<>();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && arr[stack.peek()] < arr[i]) {\n                rightGreater[stack.peek()] = i;\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        \n        stack.clear();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {\n                rightLesser[stack.peek()] = i;\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        Deque<int[]> queue = new ArrayDeque<>();\n        queue.offer(new int[]{0, 0});\n        boolean[] visited = new boolean[n];\n        while (!queue.isEmpty()) {\n            int[] p = queue.poll();\n            int idx = p[0];\n            int d = p[1];\n            if (visited[idx]) {\n                continue;\n            }\n            visited[idx] = true;\n            if (idx == n - 1) {\n                return d;\n            }\n            int temp = idx + 1;\n            if (arr[temp] > arr[idx]) {\n                while (temp < n && arr[temp] > arr[idx]) {\n                    queue.offer(new int[]{temp, d + 1});\n                    temp = rightLesser[temp];\n                }\n                if (temp < n) {\n                    queue.offer(new int[]{temp, d + 1});\n                }\n            } else {\n                while (temp < n && arr[temp] < arr[idx]) {\n                    queue.offer(new int[]{temp, d + 1});\n                    temp = rightGreater[temp];\n                }\n                if (temp < n) {\n                    queue.offer(new int[]{temp, d + 1});\n                }\n            }\n        }\n        return -1;\n    }", "target_Lan": "java###minJumps_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minJumps_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] arr1 = {10,20,30,40,50};\n        int[] arr2 = {50,40,30,20,10};\n        int[] arr3 = {10,20,30,20,10};\n        int[] arr4 = {10,10,10,10,10};\n        int[] arr5 = {10,20,-30,40,-50};\n\n        System.out.println(\"Minimum jumps for array \" + Arrays.toString(arr1) + \" is: \" + minJumps(arr1.length, arr1));\n        System.out.println(\"Minimum jumps for array \" + Arrays.toString(arr2) + \" is: \" + minJumps(arr2.length, arr2));\n        System.out.println(\"Minimum jumps for array \" + Arrays.toString(arr3) + \" is: \" + minJumps(arr3.length, arr3));\n        System.out.println(\"Minimum jumps for array \" + Arrays.toString(arr4) + \" is: \" + minJumps(arr4.length, arr4));\n        System.out.println(\"Minimum jumps for array \" + Arrays.toString(arr5) + \" is: \" + minJumps(arr5.length, arr5));\n    }\n}"}, {"source_Lan": "python###geekTasks.py", "source_code": "def geekTasks( n : int, m : int, q : int, tasks : List[List[int]]) -> int:\n    minA=0\n    minB=0\n    for i in range(q):\n        a,b=tasks[i][0],tasks[i][1]\n        a+=1\n        b+=1\n        if i==0:\n            minA=a\n            minB=b\n        else:\n            if minA>a:\n                minA=a\n            if minB>b:\n                minB=b\n    total=0\n    maxi=0\n    col=[0]*(n)\n    for i in range(q):\n        col[tasks[i][0]]=max(col[tasks[i][0]],tasks[i][1]+1)\n    for i in range(n-1,-1,-1):\n        maxi=max(maxi,col[i])\n        total+=maxi\n    total-=minA*minB\n    return total", "trans_code": "public static int geekTasks ( int n , int m , int q , List < List < Integer >> tasks ) throws Exception {\n  int minA = 0 ;\n  int minB = 0 ;\n  for ( int i = 0 ;\n  i < q ;\n  i ++ ) {\n    int a = tasks . get ( i ) . get ( 0 ) , b = tasks . get ( i ) . get ( 1 ) ;\n    a ++ ;\n    b ++ ;\n    if ( i == 0 ) {\n      minA = a ;\n      minB = b ;\n    }\n    else {\n      if ( minA > a ) minA = a ;\n      if ( minB > b ) minB = b ;\n    }\n  }\n  int total = 0 ;\n  int maxi = 0 ;\n  int [ ] col = new int [ n ] ;\n  for ( int i = 0 ;\n  i < q ;\n  i ++ ) col [ tasks . get ( i ) . get ( 0 ) ] = Math . max ( col [ tasks . get ( i ) . get ( 0 ) ] , tasks . get ( i ) . get ( 1 ) + 1 ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    maxi = Math . max ( maxi , col [ i ] ) ;\n    total += maxi ;\n  }\n  total -= minA * minB ;\n  return total ;\n}\n", "reference_code": "    public static long geekTasks(int n, int m, int q, int[][] tasks) {\n        long total = 0;\n        long minA = Long.MAX_VALUE, minB = Long.MAX_VALUE;\n        \n        for (int i = 0; i < q; i++) {\n            int a = tasks[i][0] + 1;\n            int b = tasks[i][1] + 1;\n            minA = Math.min(minA, a);\n            minB = Math.min(minB, b);\n        }\n        int[] col = new int[n]; \n        \n        for (int[] task : tasks) {\n            int x = task[1] + 1;\n            col[task[0]] = Math.max(col[task[0]], x);\n        }\n        long maxColValue = 0;\n        \n        for (int i = n - 1; i >= 0; i--) {\n            maxColValue = Math.max(maxColValue, col[i]);\n            total += maxColValue;\n        }\n        long cellsWithMaxValue = minA * minB;\n        \n        return total - cellsWithMaxValue;\n    }", "target_Lan": "java###geekTasks_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class geekTasks_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(geekTasks(3, 3, 3, new int[][] {{0,0},{1,1},{2,2}}));\n        System.out.println(geekTasks(2, 2, 2, new int[][] {{0,0},{1,1}}));\n        System.out.println(geekTasks(4, 4, 4, new int[][] {{0,0},{1,1},{2,2},{3,3}}));\n        System.out.println(geekTasks(5, 5, 5, new int[][] {{0,0},{1,1},{2,2},{3,3},{4,4}}));\n        System.out.println(geekTasks(6, 6, 6, new int[][] {{0,0},{1,1},{2,2},{3,3},{4,4},{5,5}}));\n    }\n}"}, {"source_Lan": "python###majorityWins.py", "source_code": "def majorityWins( arr, n, x, y):\n    count_x=0;\n    count_y=0;\n    for i in range(0,n):\n        \n        \n        if(arr[i]==x):\n            count_x+=1\n        if(arr[i]==y):\n            count_y+=1\n    \n    \n    if(count_x>count_y or (count_x==count_y and x<y)):\n        \n        return x\n    else:\n        \n        return y", "trans_code": "public static int majorityWins ( int [ ] arr , int n , int x , int y ) {\n  int countX = 0 ;\n  ;\n  int countY = 0 ;\n  ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    if ( ( arr [ i ] == x ) && ( arr [ i + 1 ] == y ) ) countX ++ ;\n    if ( ( arr [ i ] == y ) && ( arr [ i + 1 ] == x ) ) countY ++ ;\n  }\n  if ( ( countX > countY ) || ( countX == countY && x < y ) ) return x ;\n  else return y ;\n}\n", "reference_code": "    public static int majorityWins(int arr[], int n, int x, int y) {\n        int count_x = 0;\n        int count_y = 0;\n        \n        \n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) count_x++;\n            if (arr[i] == y) count_y++;\n        }\n        \n        if (count_x > count_y)\n            \n            return x;\n        else if (count_y > count_x)\n            \n            return y;\n        \n        else if (x < y)\n            return x;\n        else\n            return y;\n    }", "target_Lan": "java###majorityWins_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class majorityWins_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(majorityWins(new int[]{1, 2, 3, 4, 5}, 5, 1, 2));\n        System.out.println(majorityWins(new int[]{1, 1, 1, 2, 2}, 5, 1, 2));\n        System.out.println(majorityWins(new int[]{2, 2, 2, 1, 1}, 5, 1, 2));\n        System.out.println(majorityWins(new int[]{1, 2, 3, 4, 5}, 5, 2, 1));\n        System.out.println(majorityWins(new int[]{1, 2, 3, 4, 5}, 5, 1, 1));\n    }\n}"}, {"source_Lan": "python###minimumDifference.py", "source_code": "def minimumDifference( N : int, M : int, toys : List[List[int]]) -> int:\n    ans=float(\"inf\")\n    for el in toys:\n        el.sort()\n    q=[]\n    q1=[]\n    for i in range(N):\n        q.append((toys[i][0],i,1))\n        q1.append((-toys[i][0],i,1))\n    heapify(q)\n    heapify(q1)\n    while True:\n        ans=min(ans,-q1[0][0]-q[0][0])\n        el,ind,j=heappop(q)\n        if j==M:\n            break\n        heappush(q,(toys[ind][j],ind,j+1))\n        heappush(q1,(-toys[ind][j],ind,j+1))\n    return ans", "trans_code": "public static int minimumDifference ( int N , int M , List < List < Integer >> toys ) throws Exception {\n  int ans = Integer . MAX_VALUE ;\n  for ( List < Integer > el : toys ) {\n    el . sort ( ) ;\n  }\n  LinkedList < Pair < Integer , Integer >> q = new LinkedList < Pair < Integer , Integer >> ( ) ;\n  LinkedList < Pair < Integer , Integer >> q1 = new LinkedList < Pair < Integer , Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    q . add ( new Pair < Integer , Integer > ( toys . get ( i ) . getFirst ( ) , i , 1 ) ) ;\n    q1 . add ( new Pair < Integer , Integer > ( - toys . get ( i ) . getFirst ( ) , i , 1 ) ) ;\n  }\n  heapify ( q ) ;\n  heapify ( q1 ) ;\n  while ( true ) {\n    ans = Math . min ( ans , - q1 . get ( 0 ) . getFirst ( ) . compareTo ( q . get ( 0 ) . getFirst ( ) ) - q . get ( 0 ) . getFirst ( ) . compareTo ( q1 . get ( 0 ) . getFirst ( ) ) ) ;\n    Pair < Integer , Integer > el , ind , j ;\n    el = heappop ( q ) ;\n    ind = el . getFirst ( ) ;\n    j = el . getSecond ( ) ;\n    if ( j == M ) break ;\n    heappush ( q , new Pair < Integer , Integer > ( toys . get ( ind ) . getFirst ( ) , ind , j + 1 ) ) ;\n    heappush ( q1 , new Pair < Integer , Integer > ( - toys . get ( ind ) . getFirst ( ) , ind , j + 1 ) ) ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int minimumDifference(int N, int M, int[][] toys) {\n        List<int[]> list = new ArrayList<>();\n        for(int i = 0; i < N; i++){\n            for(int y : toys[i]){\n                list.add(new int[]{y, i});\n}\n        }\n        Collections.sort(list,\n            new Comparator<int[]>(){\n                public int compare(int x[], int y[]){\n                    return x[0] - y[0];\n                }\n            }\n        );\n        Map<Integer, Integer> hm = new HashMap<>();\n        int ans = Integer.MAX_VALUE;\n        int high = 0, low = 0;\n        while(high < list.size()){\n            hm.put(list.get(high)[1], hm.getOrDefault(list.get(high)[1], 0) + 1);\n            while(hm.size() == N){\n                ans = Math.min(ans, list.get(high)[0] - list.get(low)[0]);\n                hm.put(list.get(low)[1], hm.get(list.get(low)[1]) - 1);\n                if(hm.get(list.get(low)[1]) == 0)\n                    hm.remove(list.get(low)[1]);\n                low++;\n            }\n            high++;\n        }\n        return ans;\n    }", "target_Lan": "java###minimumDifference_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumDifference_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] toys1 = {{1}};\n        int[][] toys2 = {{1, 2}, {3, 4}};\n        int[][] toys3 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int[][] toys4 = {{1, 2, 3}, {4, 5, 6}};\n        int[][] toys5 = {{1, 2}, {3, 4}, {5, 6}};\n\n        System.out.println(minimumDifference(1, 1, toys1));\n        System.out.println(minimumDifference(2, 2, toys2));\n        System.out.println(minimumDifference(3, 3, toys3));\n        System.out.println(minimumDifference(2, 3, toys4));\n        System.out.println(minimumDifference(3, 2, toys5));\n    }\n}"}, {"source_Lan": "python###prefixDistinct.py", "source_code": "def prefixDistinct(n,arr):\n    ans=[]\n    s=set()\n    for el in arr:\n        s.add(el)\n        ans.append(len(s))\n    return ans", "trans_code": "public static List < Integer > prefixDistinct ( int n , String [ ] arr ) {\n  List < Integer > ans = new ArrayList < Integer > ( ) ;\n  Set < String > s = new HashSet < String > ( ) ;\n  for ( String el : arr ) {\n    s . add ( el ) ;\n    ans . add ( s . size ( ) ) ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int[] prefixDistinct(int n, int arr[]){\n        int ans[] = new int[n];\n        Set<Integer> hs = new HashSet<>();\n        for(int i = 0; i < n; i++){\n            hs.add(arr[i]);\n            ans[i] = hs.size();\n        }\n        return ans;\n    }", "target_Lan": "java###prefixDistinct_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class prefixDistinct_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] result = prefixDistinct(0, new int[]{});\n        System.out.println(Arrays.toString(result));\n\n        result = prefixDistinct(1, new int[]{1});\n        System.out.println(Arrays.toString(result));\n\n        result = prefixDistinct(2, new int[]{1, 1});\n        System.out.println(Arrays.toString(result));\n\n        result = prefixDistinct(5, new int[]{1, 2, 3, 4, 5});\n        System.out.println(Arrays.toString(result));\n\n        result = prefixDistinct(5, new int[]{1, 1, 1, 1, 1});\n        System.out.println(Arrays.toString(result));\n    }\n}"}, {"source_Lan": "python###canTrade.py", "source_code": "def canTrade( n: int, beautifulness: List[int], q: int,\n             queries: List[List[int]]) -> List[int]:\n    par = [i for i in range(n)]\n    for i in range(1, n):\n        if beautifulness[i] == beautifulness[i - 1]:\n            par[i] = par[i - 1]\n        else:\n            pass\n    ans = []\n    for el in queries:\n        a, b = el[0] - 1, el[1] - 1\n        if par[a] == par[b]:\n            ans.append(1)\n        else:\n            ans.append(0)\n    return ans", "trans_code": "public static List < Integer > canTrade ( int n , int [ ] beautifulness , int q , List < List < Integer >> queries ) throws Exception {\n  int [ ] par = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    par [ i ] = i ;\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( beautifulness [ i ] == beautifulness [ i - 1 ] ) {\n      par [ i ] = par [ i - 1 ] ;\n    }\n    else {\n    }\n  }\n  List < Integer > ans = new ArrayList < Integer > ( ) ;\n  for ( List < Integer > el : queries ) {\n    int a = el . get ( 0 ) - 1 , b = el . get ( 1 ) - 1 ;\n    if ( par [ a ] == par [ b ] ) {\n      ans . add ( 1 ) ;\n    }\n    else {\n      ans . add ( 0 ) ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int[] canTrade(int n, int[] beautifulness, int q, int[][] queries) {\n        int prev = beautifulness[0];\n        beautifulness[0] = 0;\n        for (int i = 1; i < n; i++) {\n            int curr = beautifulness[i];\n            if (beautifulness[i] == prev) {\n                beautifulness[i] = beautifulness[i - 1];\n            } else {\n                beautifulness[i] = i;\n            }\n            prev = curr;\n        }\n        int[] ans = new int[q];\n        for (int i = 0; i < q; i++) {\n            int u = queries[i][0] - 1, v = queries[i][1] - 1;\n            ans[i] = beautifulness[v] <= u ? 1 : 0;\n        }\n        return ans;\n    }", "target_Lan": "java###canTrade_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class canTrade_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(Arrays.toString(canTrade(3, new int[]{1, 2, 3}, 1, new int[][]{{1, 2}})));\n        System.out.println(Arrays.toString(canTrade(5, new int[]{5, 4, 3, 2, 1}, 2, new int[][]{{1, 2}, {3, 4}})));\n        System.out.println(Arrays.toString(canTrade(4, new int[]{1, 1, 1, 1}, 1, new int[][]{{1, 4}})));\n        System.out.println(Arrays.toString(canTrade(6, new int[]{1, 2, 3, 3, 2, 1}, 3, new int[][]{{1, 6}, {2, 5}, {3, 4}})));\n        System.out.println(Arrays.toString(canTrade(2, new int[]{1, 2}, 0, new int[][]{})));\n    }\n}"}, {"source_Lan": "python###minimumPushes2.py", "source_code": "def minimumPushes2( word: str) -> int:\n    k, rem = divmod(len(word), 8)\n    return (k * 4 + rem) * (k + 1)", "trans_code": "public static int minimumPushes2 ( String word ) throws Exception {\n  int k = word . length ( ) , rem = word . length ( ) ;\n  return ( k * 4 + rem ) * ( k + 1 ) ;\n}\n", "reference_code": "    public static int minimumPushes2(String word) {\n        int n = word.length();\n        int k = n / 8;\n        return (k * 4 + n % 8) * (k + 1);\n    }", "target_Lan": "java###minimumPushes2_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumPushes2_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minimumPushes2(\"\"));\n    System.out.println(minimumPushes2(\"abcdefgh\"));\n    System.out.println(minimumPushes2(\"abcdefghi\"));\n    System.out.println(minimumPushes2(\"a\"));\n    System.out.println(minimumPushes2(\"abcdefghijklmnopqrstuvwxyz\"));\n}\n}"}, {"source_Lan": "python###minimumPushes.py", "source_code": "def minimumPushes( word: str) -> int:\n    a = sorted(Counter(word).values(), reverse=True)\n    return sum(c * (i // 8 + 1) for i, c in enumerate(a))", "trans_code": "public static int minimumPushes ( String word ) throws Exception {\n  List < Integer > a = Collections . singletonList ( Counter . valueOf ( word ) . ordinal ( ) ) ;\n  return sum ( c * ( i / 8 + 1 ) , a ) ;\n}\n", "reference_code": "    public static int minimumPushes(String word) {\n        int[] cnt = new int[26];\n        for (char b : word.toCharArray()) {\n            cnt[b - 'a']++;\n        }\n        Arrays.sort(cnt);\n        int ans = 0;\n        for (int i = 0; i < 26; i++) {\n            ans += cnt[25 - i] * (i / 8 + 1);\n        }\n        return ans;\n    }", "target_Lan": "java###minimumPushes_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumPushes_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minimumPushes(\"abc\"));\n    System.out.println(minimumPushes(\"aaa\"));\n    System.out.println(minimumPushes(\"z\"));\n    System.out.println(minimumPushes(\"xyz\"));\n    System.out.println(minimumPushes(\"aabbcc\"));\n}\n}"}, {"source_Lan": "python###maxPalindromesAfterOperations.py", "source_code": "def maxPalindromesAfterOperations( words: List[str]) -> int:\n    ans = tot = 0\n    cnt = Counter()\n    for w in words:\n        tot += len(w)\n        cnt += Counter(w)\n    tot -= sum(c % 2 for c in cnt.values())  \n    words.sort(key=len)  \n    for w in words:\n        tot -= len(w) // 2 * 2  \n        if tot < 0: break\n        ans += 1\n    return ans", "trans_code": "public static int maxPalindromesAfterOperations ( List < String > words ) throws Exception {\n  int ans = tot = 0 ;\n  Counter < String > cnt = new ClassicCounter < > ( ) ;\n  for ( String w : words ) {\n    tot += w . length ( ) ;\n    cnt . incrementCount ( w . length ( ) ) ;\n  }\n  tot -= Math . abs ( c % 2 ) ;\n  Collections . sort ( cnt ) ;\n  for ( String w : words ) {\n    tot -= w . length ( ) / 2 * 2 ;\n    if ( tot < 0 ) break ;\n    ans ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maxPalindromesAfterOperations(String[] words) {\n        int tot = 0;\n        int mask = 0; \n        for (String w : words) {\n            tot += w.length();\n            for (char c : w.toCharArray()) {\n                mask ^= 1 << (c - 'a');\n            }\n        }\n        tot -= Integer.bitCount(mask); \n        Arrays.sort(words, (a, b) -> a.length() - b.length());\n        int ans = 0;\n        for (String w : words) {\n            tot -= w.length() / 2 * 2; \n            if (tot < 0) break;\n            ans++;\n        }\n        return ans;\n    }", "target_Lan": "java###maxPalindromesAfterOperations_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maxPalindromesAfterOperations_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maxPalindromesAfterOperations(new String[]{\"aa\", \"bb\"}));\n    System.out.println(maxPalindromesAfterOperations(new String[]{\"abc\", \"cba\", \"xyz\", \"zyx\"}));\n    System.out.println(maxPalindromesAfterOperations(new String[]{\"a\", \"bb\", \"ccc\", \"dddd\"}));\n    System.out.println(maxPalindromesAfterOperations(new String[]{\"abcd\", \"dcba\", \"xyzz\", \"zzyx\", \"lmnop\", \"pmlkn\"}));\n    System.out.println(maxPalindromesAfterOperations(new String[]{\"abcde\", \"edcba\", \"xyzzz\", \"zzzyx\", \"lmnopq\", \"qponml\"}));\n}\n}"}, {"source_Lan": "python###longestCommonPrefix.py", "source_code": "def longestCommonPrefix( arr1: List[int], arr2: List[int]) -> int:\n    st = set()\n    for s in map(str, arr1):\n        for i in range(1, len(s) + 1):\n            st.add(s[:i])\n    ans = 0\n    for s in map(str, arr2):\n        for i in range(1, len(s) + 1):\n            if s[:i] not in st:\n                break\n            ans = max(ans, i)\n    return ans", "trans_code": "public static int longestCommonPrefix ( List < Integer > arr1 , List < Integer > arr2 ) throws Exception {\n  Set < String > st = new HashSet < > ( ) ;\n  for ( String s : map ( arr1 ) ) {\n    for ( int i = 1 ;\n    i <= s . length ( ) ;\n    i ++ ) {\n      st . add ( s . substring ( 0 , i ) ) ;\n    }\n  }\n  int ans = 0 ;\n  for ( String s : map ( arr2 ) ) {\n    for ( int i = 1 ;\n    i <= s . length ( ) ;\n    i ++ ) {\n      if ( s . substring ( 0 , i ) != st . contains ( s . substring ( 0 , i ) ) ) {\n        break ;\n      }\n      ans = Math . max ( ans , i ) ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int longestCommonPrefix(int[] arr1, int[] arr2) {\n        Set<String> st = new HashSet<>();\n        for (int x : arr1) {\n            String s = Integer.toString(x);\n            for (int i = 1; i <= s.length(); i++) {\n                st.add(s.substring(0, i));\n            }\n        }\n        int ans = 0;\n        for (int x : arr2) {\n            String s = Integer.toString(x);\n            for (int i = 1; i <= s.length(); i++) {\n                if (!st.contains(s.substring(0, i))) {\n                    break;\n                }\n                ans = Math.max(ans, i);\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###longestCommonPrefix_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class longestCommonPrefix_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(longestCommonPrefix(new int[]{123, 234, 12345, 67890}, new int[]{1234, 2345, 67890, 123456}));\n        System.out.println(longestCommonPrefix(new int[]{12, 23, 34, 45}, new int[]{123, 234, 345, 456}));\n        System.out.println(longestCommonPrefix(new int[]{1, 2, 3, 4}, new int[]{1, 2, 3, 4}));\n        System.out.println(longestCommonPrefix(new int[]{12345, 23456, 34567, 45678}, new int[]{12345, 23456, 34567, 45678}));\n        System.out.println(longestCommonPrefix(new int[]{100, 200, 300, 400}, new int[]{1000, 2000, 3000, 4000}));\n    }\n}"}, {"source_Lan": "python###minimumOperationsToWriteY.py", "source_code": "def minimumOperationsToWriteY( grid: List[List[int]]) -> int:\n    cnt1 = [0] * 3\n    cnt2 = [0] * 3\n    n = len(grid)\n    m = n // 2\n    for i, row in enumerate(grid[:m]):\n        cnt1[row[i]] += 1\n        cnt1[row[-1 - i]] += 1\n        for j, x in enumerate(row):\n            if j != i and j != n - 1 - i:\n                cnt2[x] += 1\n    for row in grid[m:]:\n        cnt1[row[m]] += 1\n        for j, x in enumerate(row):\n            if j != m:\n                cnt2[x] += 1\n    max_not_change = 0\n    for i, c1 in enumerate(cnt1):\n        for j, c2 in enumerate(cnt2):\n            if i != j:\n                max_not_change = max(max_not_change, c1 + c2)\n    return n * n - max_not_change", "trans_code": "public static int minimumOperationsToWriteY ( List < List < Integer >> grid ) throws Exception {\n  int [ ] cnt1 = new int [ 3 ] ;\n  int [ ] cnt2 = new int [ 3 ] ;\n  int n = grid . size ( ) ;\n  int m = n / 2 ;\n  for ( int i = 0 , row = grid . get ( 0 ) ;\n  i < m ;\n  i ++ ) {\n    cnt1 [ row [ i ] ] ++ ;\n    cnt1 [ row [ m - 1 - i ] ] ++ ;\n    for ( int j = 0 , x = row . length ;\n    j < m ;\n    j ++ ) {\n      if ( j != i && j != n - 1 - i ) {\n        cnt2 [ x ] ++ ;\n      }\n    }\n  }\n  for ( List < Integer > row : grid ) {\n    cnt1 [ row . get ( m ) ] ++ ;\n    for ( int j = 0 , x = row . length ;\n    j < m ;\n    j ++ ) {\n      if ( j != m ) {\n        cnt2 [ x ] ++ ;\n      }\n    }\n  }\n  int maxNotChange = 0 ;\n  for ( int i = 0 , c1 = cnt1 . length ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 , c2 = cnt2 . length ;\n    j < m ;\n    j ++ ) {\n      if ( i != j ) {\n        maxNotChange = Math . max ( maxNotChange , c1 + c2 ) ;\n      }\n    }\n  }\n  return n * n - maxNotChange ;\n}\n", "reference_code": "    public static int minimumOperationsToWriteY(int[][] grid) {\n        int[] cnt1 = new int[3];\n        int[] cnt2 = new int[3];\n        int n = grid.length;\n        int m = n / 2;\n        for (int i = 0; i < m; i++) {\n            cnt1[grid[i][i]]++;\n            cnt1[grid[i][n - 1 - i]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != i && j != n - 1 - i) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        for (int i = m; i < n; i++) {\n            cnt1[grid[i][m]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != m) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        int maxNotChange = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (i != j) {\n                    maxNotChange = Math.max(maxNotChange, cnt1[i] + cnt2[j]);\n                }\n            }\n        }\n        return n * n - maxNotChange;\n    }", "target_Lan": "java###minimumOperationsToWriteY_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n    import java.util.Arrays;\npublic class minimumOperationsToWriteY_Test {\n// TOFILL\npublic static void main(String[] args) {\n            int[][] grid1 = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};\n            int[][] grid2 = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};\n            int[][] grid3 = {{2, 2, 2}, {2, 2, 2}, {2, 2, 2}};\n            System.out.println(minimumOperationsToWriteY(grid1));\n            System.out.println(minimumOperationsToWriteY(grid2));\n            System.out.println(minimumOperationsToWriteY(grid3));\n        }\n}"}, {"source_Lan": "python###maximumStrength.py", "source_code": "def maximumStrength( nums: List[int], k: int) -> int:\n    n = len(nums)\n    s = list(accumulate(nums, initial=0))\n    f = [[0] * (n + 1) for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        f[i][i - 1] = mx = -inf\n        w = (k - i + 1) * (1 if i % 2 else -1)\n        \n        for j in range(i, n - k + i + 1):\n            mx = max(mx, f[i - 1][j - 1] - s[j - 1] * w)\n            f[i][j] = max(f[i][j - 1], s[j] * w + mx)\n    return f[k][n]", "trans_code": "public static int maximumStrength ( int [ ] nums , int k ) throws Exception {\n  int n = nums . length ;\n  int [ ] s = Arrays . copyOf ( nums , n + 1 ) ;\n  int [ ] [ ] f = new int [ k + 1 ] [ n ] ;\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    f [ i ] [ i - 1 ] = mx = - inf ;\n    int w = ( k - i + 1 ) * ( 1 == i % 2 ? - 1 : 1 ) ;\n    for ( int j = i ;\n    j <= n - k + i + 1 ;\n    j ++ ) {\n      mx = Math . max ( mx , f [ i - 1 ] [ j - 1 ] - s [ j - 1 ] * w ) ;\n      f [ i ] [ j ] = Math . max ( f [ i ] [ j - 1 ] , s [ j ] * w + mx ) ;\n    }\n  }\n  return f [ k ] [ n ] ;\n}\n", "reference_code": "    public static long maximumStrength(int[] nums, int k) {\n        int n=nums.length;\n        long ans[][][]=new long[n+1][k+1][2];\n        for(int j=0;j<=k;j++){ans[0][j]=new long[]{-(long)1e18,-(long)1e18};}\n        ans[0][0][0]=0;\n        for(int i=1;i<=n;i++){\n            ans[i][0][1]=-(long)1e14;\n            for(int j=1;j<=k;j++){\n                ans[i][j][0]=Math.max(ans[i-1][j][0],ans[i-1][j][1]);\n                ans[i][j][1]=Math.max(ans[i-1][j-1][1],Math.max(ans[i-1][j-1][0],ans[i-1][j][1]))+(long)nums[i-1]*(j%2*2-1)*(k+1-j);\n            }\n        }\n        return Math.max(ans[n][k][0],ans[n][k][1]);\n    }", "target_Lan": "java###maximumStrength_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumStrength_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] input1 = {1, 2, 3, 4, 5};\n        int[] input2 = {-1, -2, -3, -4, -5};\n        int[] input3 = {0, 0, 0, 0, 0};\n        int[] input4 = {10, 20, 30, 40, 50};\n        int[] input5 = {100, 1000, 10000, 100000, 1000000};\n\n        System.out.println(maximumStrength(input1, 2));\n        System.out.println(maximumStrength(input2, 3));\n        System.out.println(maximumStrength(input3, 1));\n        System.out.println(maximumStrength(input4, 4));\n        System.out.println(maximumStrength(input5, 5));\n    }\n}"}, {"source_Lan": "python###maximumLengthSubstring.py", "source_code": "def maximumLengthSubstring( s: str) -> int:\n    ans = left = 0\n    cnt = Counter()\n    for i, c in enumerate(s):\n        cnt[c] += 1\n        while cnt[c] > 2:\n            cnt[s[left]] -= 1\n            left += 1\n        ans = max(ans, i - left + 1)\n    return ans", "trans_code": "public static int maximumLengthSubstring ( String s ) throws Exception {\n  int ans = left = 0 ;\n  Counter cnt = new Counter ( ) ;\n  for ( int i = 0 , c = s . length ( ) ;\n  i < s . length ( ) ;\n  i ++ ) {\n    cnt . put ( s . charAt ( left ) , i ) ;\n    while ( cnt . get ( s . charAt ( left ) ) > 2 ) {\n      cnt . put ( s . charAt ( left ) , i ) ;\n      left ++ ;\n    }\n    ans = Math . max ( ans , i - left + 1 ) ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maximumLengthSubstring(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        int left = 0;\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length; i++) {\n            int b = s[i] - 'a';\n            cnt[b]++;\n            while (cnt[b] > 2) {\n                cnt[s[left++] - 'a']--;\n            }\n            ans = Math.max(ans, i - left + 1);\n        }\n        return ans;\n    }", "target_Lan": "java###maximumLengthSubstring_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class maximumLengthSubstring_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maximumLengthSubstring(\"a\"));\n        System.out.println(maximumLengthSubstring(\"abc\"));\n        System.out.println(maximumLengthSubstring(\"aaa\"));\n        System.out.println(maximumLengthSubstring(\"abca\"));\n        System.out.println(maximumLengthSubstring(\"abcabc\"));\n    }\n}"}, {"source_Lan": "python###maxBottlesDrunk.py", "source_code": "def maxBottlesDrunk( numBottles: int, numExchange: int) -> int:\n    ans = numBottles  \n    while numBottles >= numExchange:  \n        ans += 1  \n        numBottles += 1 - numExchange\n        numExchange += 1\n    return ans", "trans_code": "public static int maxBottlesDrunk ( int numBottles , int numExchange ) throws Exception {\n  int ans = numBottles ;\n  while ( numBottles >= numExchange ) {\n    ans ++ ;\n    numBottles += 1 - numExchange ;\n    numExchange ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maxBottlesDrunk(int numBottles, int numExchange) {\n        int ans = numBottles; \n        while (numBottles >= numExchange) { \n            ans++; \n            numBottles += 1 - numExchange++;\n        }\n        return ans;\n    }", "target_Lan": "java###maxBottlesDrunk_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maxBottlesDrunk_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maxBottlesDrunk(1, 2));\n    System.out.println(maxBottlesDrunk(5, 5));\n    System.out.println(maxBottlesDrunk(10, 3));\n    System.out.println(maxBottlesDrunk(100, 5));\n    System.out.println(maxBottlesDrunk(500, 10));\n}\n}"}, {"source_Lan": "python###getSmallestString.py", "source_code": "def getSmallestString( s: str, k: int) -> str:\n    s = list(s)\n    for i, c in enumerate(map(ord, s)):\n        dis = min(c - ord('a'), ord('z') - c + 1)\n        if dis > k:\n            s[i] = chr(c - k)\n            break\n        s[i] = 'a'\n        k -= dis\n    return ''.join(s)", "trans_code": "public static String getSmallestString ( String s , int k ) throws Exception {\n  StringBuilder sb = new StringBuilder ( ) ;\n  for ( int i = 0 , c = s . length ( ) ;\n  i < c ;\n  i ++ ) {\n    int dis = Math . min ( s . charAt ( i ) - 'a' , s . charAt ( i ) - 'z' - s . charAt ( i ) + 1 ) ;\n    if ( dis > k ) {\n      sb . append ( ( char ) ( c - k ) ) ;\n      break ;\n    }\n    sb . append ( 'a' ) ;\n    k -= dis ;\n  }\n  return sb . toString ( ) ;\n}\n", "reference_code": "    public static String getSmallestString(String s, int k) {\n        char[] t = s.toCharArray();\n        for (int i = 0; i < t.length; i++) {\n            int dis = Math.min(t[i] - 'a', 'z' - t[i] + 1);\n            if (dis > k) {\n                t[i] -= k;\n                break;\n            }\n            t[i] = 'a';\n            k -= dis;\n        }\n        return new String(t);\n    }", "target_Lan": "java###getSmallestString_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class getSmallestString_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(getSmallestString(\"abcz\", 2));\n    System.out.println(getSmallestString(\"a\", 1));\n    System.out.println(getSmallestString(\"zzzz\", 2));\n    System.out.println(getSmallestString(\"abc\", 1));\n    System.out.println(getSmallestString(\"xyz\", 3));\n}\n}"}, {"source_Lan": "python###minOperationsToMakeMedianK.py", "source_code": "def minOperationsToMakeMedianK( nums: List[int], k: int) -> int:\n    nums.sort()\n    m = len(nums) // 2\n    ans = 0\n    if nums[m] > k:\n        for i in range(m, -1, -1):\n            if nums[i] <= k:\n                break\n            ans += nums[i] - k\n    else:\n        for i in range(m, len(nums)):\n            if nums[i] >= k:\n                break\n            ans += k - nums[i]\n    return ans", "trans_code": "public static int minOperationsToMakeMedianK ( int [ ] nums , int k ) throws Exception {\n  Arrays . sort ( nums ) ;\n  int m = nums . length / 2 ;\n  int ans = 0 ;\n  if ( nums [ m ] > k ) {\n    for ( int i = m ;\n    i >= 0 ;\n    i -- ) {\n      if ( nums [ i ] <= k ) break ;\n      ans += nums [ i ] - k ;\n    }\n  }\n  else {\n    for ( int i = m ;\n    i < nums . length ;\n    i ++ ) {\n      if ( nums [ i ] >= k ) break ;\n      ans += k - nums [ i ] ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static long minOperationsToMakeMedianK(int[] nums, int k) {\n        Arrays.sort(nums);\n        long ans = 0;\n        int m = nums.length / 2;\n        if (nums[m] > k) {\n            for (int i = m; i >= 0 && nums[i] > k; i--) {\n                ans += nums[i] - k;\n            }\n        } else {\n            for (int i = m; i < nums.length && nums[i] < k; i++) {\n                ans += k - nums[i];\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###minOperationsToMakeMedianK_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n    import java.util.*;\npublic class minOperationsToMakeMedianK_Test {\n// TOFILL\npublic static void main(String[] args) {\n            System.out.println(minOperationsToMakeMedianK(new int[]{1, 2, 3, 4, 5}, 3));\n            System.out.println(minOperationsToMakeMedianK(new int[]{10, 20, 30, 40, 50}, 30));\n            System.out.println(minOperationsToMakeMedianK(new int[]{-1, -2, -3, -4, -5}, -3));\n            System.out.println(minOperationsToMakeMedianK(new int[]{0, 0, 0, 0, 0}, 0));\n            System.out.println(minOperationsToMakeMedianK(new int[]{1000, 2000, 3000, 4000, 5000}, 3000));\n        }\n}"}, {"source_Lan": "python###minimumOperationsToMakeKPeriodic.py", "source_code": "def minimumOperationsToMakeKPeriodic( word: str, k: int) -> int:\n    n = len(word)\n    cnt = Counter(word[i - k: i] for i in range(k, n + 1, k))\n    mx = max(cnt.values())\n    return n // k - mx", "trans_code": "public static int minimumOperationsToMakeKPeriodic ( String word , int k ) throws Exception {\n  int n = word . length ( ) ;\n  Counter cnt = new Counter ( word . substring ( i - k , i + k ) ) ;\n  int mx = Math . max ( cnt . values ( ) ) ;\n  return n / k - mx ;\n}\n", "reference_code": "    public static int minimumOperationsToMakeKPeriodic(String word, int k) {\n        int n = word.length();\n        int mx = 0;\n        HashMap<String, Integer> cnt = new HashMap<>();\n        for (int i = k; i <= n; i += k) {\n            String sub = word.substring(i - k, i);\n            int c = cnt.merge(sub, 1, Integer::sum); \n            mx = Math.max(mx, c);\n        }\n        return n / k - mx;\n    }", "target_Lan": "java###minimumOperationsToMakeKPeriodic_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumOperationsToMakeKPeriodic_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minimumOperationsToMakeKPeriodic(\"abcabcabcabc\", 3));\n    System.out.println(minimumOperationsToMakeKPeriodic(\"aabbccddeeff\", 2));\n    System.out.println(minimumOperationsToMakeKPeriodic(\"aaaa\", 1));\n    System.out.println(minimumOperationsToMakeKPeriodic(\"abcd\", 4));\n}\n}"}, {"source_Lan": "python###sumDigitDifferences.py", "source_code": "def sumDigitDifferences( nums: List[int]) -> int:\n    ans = 0\n    cnt = [[0] * 10 for _ in str(nums[0])]\n    for k, x in enumerate(nums):\n        i = 0\n        while x:\n            x, d = divmod(x, 10)\n            ans += k - cnt[i][d]\n            cnt[i][d] += 1\n            i += 1\n    return ans", "trans_code": "public static int sumDigitDifferences ( int [ ] [ ] nums ) throws Exception {\n  int ans = 0 ;\n  int [ ] [ ] cnt = new int [ 10 ] [ nums . length ] ;\n  for ( int k = 0 , x = nums [ 0 ] . length ;\n  k < nums . length ;\n  k ++ ) {\n    x = nums [ k ] [ 0 ] ;\n    int d = nums [ k ] [ 1 ] ;\n    ans += k - cnt [ i ] [ d ] ;\n    cnt [ i ] [ d ] ++ ;\n    i ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static long sumDigitDifferences(int[] nums) {\n        long ans = 0;\n        int[][] cnt = new int[Integer.toString(nums[0]).length()][10];\n        for (int k = 0; k < nums.length; k++) {\n            int x = nums[k];\n            for (int i = 0; x > 0; x /= 10, i++) {\n                int d = x % 10;\n                ans += k - cnt[i][d]++;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###sumDigitDifferences_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class sumDigitDifferences_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(sumDigitDifferences(new int[]{123,456,789}));\n        System.out.println(sumDigitDifferences(new int[]{111,222,333}));\n        System.out.println(sumDigitDifferences(new int[]{10,20,30}));\n        System.out.println(sumDigitDifferences(new int[]{100,200,300}));\n        System.out.println(sumDigitDifferences(new int[]{1,2,3}));\n    }\n}"}, {"source_Lan": "python###compressedString.py", "source_code": "def compressedString( word: str) -> str:\n    t = []\n    i0 = -1\n    for i, c in enumerate(word):\n        if i + 1 == len(word) or c != word[i + 1]:\n            k, rem = divmod(i - i0, 9)\n            t.append((\"9\" + c) * k)\n            if rem:\n                t.append(str(rem))\n                t.append(c)\n            i0 = i\n    return ''.join(t)", "trans_code": "public static String compressedString ( String word ) throws Exception {\n  StringBuilder t = new StringBuilder ( ) ;\n  int i0 = - 1 ;\n  for ( int i = 0 , len = word . length ( ) ;\n  i < len ;\n  i ++ ) {\n    char c = word . charAt ( i ) ;\n    if ( i + 1 == len || c != word . charAt ( i + 1 ) ) {\n      int k = word . length ( ) , rem = i - i0 ;\n      t . append ( ( \"9\" + c ) * k ) ;\n      if ( rem > 0 ) {\n        t . append ( String . valueOf ( rem ) ) ;\n        t . append ( c ) ;\n      }\n      i0 = i ;\n    }\n  }\n  return t . toString ( ) ;\n}\n", "reference_code": "    public static String compressedString(String word) {\n        StringBuilder t = new StringBuilder();\n        char[] s = word.toCharArray();\n        int i0 = -1;\n        for (int i = 0; i < s.length; i++) {\n            char c = s[i];\n            if (i + 1 == s.length || c != s[i + 1]) {\n                int k = i - i0;\n                for (int j = 0; j < k / 9; j++) {\n                    t.append('9').append(c);\n                }\n                if (k % 9 > 0) {\n                    t.append((char) ('0' + (k % 9))).append(c);\n                }\n                i0 = i;\n            }\n        }\n        return t.toString();\n    }", "target_Lan": "java###compressedString_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class compressedString_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(compressedString(\"aabbbbcccaaa\"));\n        System.out.println(compressedString(\"aaabbcc\"));\n        System.out.println(compressedString(\"abc\"));\n        System.out.println(compressedString(\"aabbcc\"));\n        System.out.println(compressedString(\"aaaabbbbcccc\"));\n    }\n}"}, {"source_Lan": "python###maxTotalReward.py", "source_code": "def maxTotalReward( rewardValues: List[int]) -> int:\n    f = 1\n    for v in sorted(set(rewardValues)):\n        f |= (f & ((1 << v) - 1)) << v\n    return f.bit_length() - 1", "trans_code": "public static int maxTotalReward ( int [ ] rewardValues ) throws Exception {\n  BigInteger f = BigInteger . ONE ;\n  for ( int v : Collections . reverse ( rewardValues ) ) {\n    f |= ( f . mod ( ( 1 << v ) - 1 ) ) . intValue ( ) ;\n  }\n  return f . bitLength ( ) - 1 ;\n}\n", "reference_code": "    public static int maxTotalReward(int[] rewardValues) {\n        BigInteger f = BigInteger.ONE;\n        for (int v : Arrays.stream(rewardValues).distinct().sorted().toArray()) {\n            BigInteger mask = BigInteger.ONE.shiftLeft(v).subtract(BigInteger.ONE);\n            f = f.or(f.and(mask).shiftLeft(v));\n        }\n        return f.bitLength() - 1;\n    }", "target_Lan": "java###maxTotalReward_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.math.BigInteger;\nimport java.util.Arrays;\npublic class maxTotalReward_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxTotalReward(new int[]{0, 1, 2, 3, 4, 5}));\n        System.out.println(maxTotalReward(new int[]{10, 20, 30, 40, 50}));\n        System.out.println(maxTotalReward(new int[]{1, 2, 3, 4, 5}));\n        System.out.println(maxTotalReward(new int[]{5, 10, 15, 20, 25}));\n    }\n}"}, {"source_Lan": "python###countCompleteDayPairs.py", "source_code": "def countCompleteDayPairs( hours: List[int]) -> int:\n    ans = 0\n    cnt = [0] * 24\n    for t in hours:\n        \n        \n        ans += cnt[(24 - t % 24) % 24]\n        cnt[t % 24] += 1\n    return ans", "trans_code": "public static int countCompleteDayPairs ( List < Integer > hours ) throws Exception {\n  int ans = 0 ;\n  int [ ] cnt = new int [ 24 ] ;\n  for ( int t : hours ) {\n    ans += cnt [ ( 24 - t % 24 ) % 24 ] ;\n    cnt [ t % 24 ] ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static long countCompleteDayPairs(int[] hours) {\n        long ans = 0;\n        int[] cnt = new int[24];\n        for (int t : hours) {\n            \n            \n            ans += cnt[(24 - t % 24) % 24];\n            cnt[t % 24]++;\n        }\n        return ans;\n    }", "target_Lan": "java###countCompleteDayPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countCompleteDayPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] hours1 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23};\n        int[] hours2 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n        int[] hours3 = {23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};\n        int[] hours4 = {12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12};\n        int[] hours5 = {0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n\n        System.out.println(countCompleteDayPairs(hours1));\n        System.out.println(countCompleteDayPairs(hours2));\n        System.out.println(countCompleteDayPairs(hours3));\n        System.out.println(countCompleteDayPairs(hours4));\n        System.out.println(countCompleteDayPairs(hours5));\n    }\n}"}, {"source_Lan": "python###minimumAverage.py", "source_code": "def minimumAverage( nums: List[int]) -> float:\n    nums.sort()\n    return min(nums[i] + nums[-1 - i] for i in range(len(nums) // 2)) / 2", "trans_code": "public static double minimumAverage ( int [ ] nums ) throws Exception {\n  Arrays . sort ( nums ) ;\n  return Math . min ( nums [ i ] + nums [ nums . length - 1 - i ] , nums . length / 2 ) / 2 ;\n}\n", "reference_code": "    public static double minimumAverage(int[] nums) {\n        Arrays.sort(nums);\n        int ans = Integer.MAX_VALUE;\n        int n = nums.length;\n        for (int i = 0; i < n / 2; i++) {\n            ans = Math.min(ans, nums[i] + nums[n - 1 - i]);\n        }\n        return ans / 2.0;\n    }", "target_Lan": "java###minimumAverage_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumAverage_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[] nums1 = {1,2,3,4,5};\n    int[] nums2 = {10,20,30,40,50};\n    int[] nums3 = {100,200,300,400,500};\n    int[] nums4 = {1,1,1,1,1};\n    int[] nums5 = {0,0,0,0,0};\n\n    System.out.println(minimumAverage(nums1));\n    System.out.println(minimumAverage(nums2));\n    System.out.println(minimumAverage(nums3));\n    System.out.println(minimumAverage(nums4));\n    System.out.println(minimumAverage(nums5));\n}\n}"}, {"source_Lan": "python###minimumCost.py", "source_code": "def minimumCost( nums: List[int]) -> int:\n    return nums[0] + sum(sorted(nums[1:])[:2])", "trans_code": "public static int minimumCost ( List < Integer > nums ) throws Exception {\n  return nums . get ( 0 ) + Arrays . stream ( nums . subList ( 1 , nums . size ( ) ) ) . mapToInt ( Integer :: intValue ) . sum ( ) ;\n}\n", "reference_code": "    public static int minimumCost(int[] nums) {\n        Arrays.sort(nums, 1, nums.length);\n        return nums[0] + nums[1] + nums[2];\n    }", "target_Lan": "java###minimumCost_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumCost_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumCost(new int[]{1,2,3,4,5}));\n        System.out.println(minimumCost(new int[]{5,4,3,2,1}));\n        System.out.println(minimumCost(new int[]{0,0,0,0,0}));\n        System.out.println(minimumCost(new int[]{-1,-2,-3,-4,-5}));\n        System.out.println(minimumCost(new int[]{100,200,300,400,500}));\n    }\n}"}, {"source_Lan": "python###triangleType.py", "source_code": "def triangleType( nums: List[int]) -> str:\n    nums.sort()\n    x, y, z = nums\n    if x + y <= z:  \n        return \"none\"\n    if x == z:  \n        return \"equilateral\"\n    if x == y or y == z:\n        return \"isosceles\"\n    return \"scalene\"", "trans_code": "public static String triangleType ( List < Integer > nums ) throws Exception {\n  Collections . sort ( nums ) ;\n  int x = nums . get ( 0 ) ;\n  int y = nums . get ( 1 ) ;\n  int z = nums . get ( 2 ) ;\n  if ( x + y <= z ) return \"none\" ;\n  if ( x == z ) return \"equilateral\" ;\n  if ( x == y || y == z ) return \"isosceles\" ;\n  return \"scalene\" ;\n}\n", "reference_code": "    public static String triangleType(int[] nums) {\n        Arrays.sort(nums);\n        int x = nums[0];\n        int y = nums[1];\n        int z = nums[2];\n        if (x + y <= z) { \n            return \"none\";\n        }\n        if (x == z) { \n            return \"equilateral\";\n        }\n        if (x == y || y == z) {\n            return \"isosceles\";\n        }\n        return \"scalene\";\n    }", "target_Lan": "java###triangleType_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class triangleType_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(triangleType(new int[]{3,4,5}));\n        System.out.println(triangleType(new int[]{1,1,1}));\n        System.out.println(triangleType(new int[]{2,2,3}));\n        System.out.println(triangleType(new int[]{10,10,20}));\n        System.out.println(triangleType(new int[]{7,15,18}));\n    }\n}"}, {"source_Lan": "python###maximumSubarraySum.py", "source_code": "def maximumSubarraySum( nums: List[int], k: int) -> int:\n    ans = -inf\n    min_s = defaultdict(lambda: inf)\n    s = 0\n    for x in nums:\n        ans = max(ans, s + x - min(min_s[x - k], min_s[x + k]))\n        min_s[x] = min(min_s[x], s)\n        s += x\n    return ans if ans > -inf else 0", "trans_code": "public static int maximumSubarraySum ( int [ ] nums , int k ) throws Exception {\n  int ans = - inf ;\n  Map < Integer , Integer > minS = new TreeMap < Integer , Integer > ( ) ;\n  int s = 0 ;\n  for ( int x : nums ) {\n    ans = Math . max ( ans , s + x - Math . min ( minS . get ( x - k ) , minS . get ( x + k ) ) ) ;\n    minS . put ( x , Math . min ( minS . get ( x ) , s ) ) ;\n    s += x ;\n  }\n  return ans == - inf ? 0 : ans ;\n}\n", "reference_code": "    public static long maximumSubarraySum(int[] nums, int k) {\n        long ans = Long.MIN_VALUE;\n        long sum = 0;\n        Map<Integer, Long> minS = new HashMap<>();\n        for (int x : nums) {\n            long s1 = minS.getOrDefault(x - k, Long.MAX_VALUE / 2);\n            long s2 = minS.getOrDefault(x + k, Long.MAX_VALUE / 2);\n            ans = Math.max(ans, sum + x - Math.min(s1, s2));\n            minS.merge(x, sum, Math::min);\n            sum += x;\n        }\n        return ans > Long.MIN_VALUE / 4 ? ans : 0;\n    }", "target_Lan": "java###maximumSubarraySum_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maximumSubarraySum_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maximumSubarraySum(new int[]{}, 0));\n        System.out.println(maximumSubarraySum(new int[]{1, 2, 3, 4, 5}, 1));\n        System.out.println(maximumSubarraySum(new int[]{-1, -2, -3, -4, -5}, 2));\n        System.out.println(maximumSubarraySum(new int[]{10, 20, 30, 40, 50}, 3));\n        System.out.println(maximumSubarraySum(new int[]{5, 10, 15, 20, 25}, 4));\n    }\n}"}, {"source_Lan": "python###maxSelectedElements.py", "source_code": "def maxSelectedElements( nums: List[int]) -> int:\n    nums.sort()\n    f = defaultdict(int)\n    for x in nums:\n        f[x + 1] = f[x] + 1\n        f[x] = f[x - 1] + 1\n    return max(f.values())", "trans_code": "public static int maxSelectedElements ( int [ ] nums ) throws Exception {\n  Arrays . sort ( nums ) ;\n  Map < Integer , Integer > f = new TreeMap < Integer , Integer > ( ) ;\n  for ( int x : nums ) {\n    f . put ( x + 1 , f . get ( x ) + 1 ) ;\n    f . put ( x , f . get ( x - 1 ) + 1 ) ;\n  }\n  return Math . max ( f . values ( ) ) ;\n}\n", "reference_code": "    public static int maxSelectedElements(int[] nums) {\n        Arrays.sort(nums);\n        Map<Integer, Integer> f = new HashMap<>();\n        for (int x : nums) {\n            f.put(x + 1, f.getOrDefault(x, 0) + 1);\n            f.put(x, f.getOrDefault(x - 1, 0) + 1);\n        }\n        int ans = 0;\n        for (int res : f.values()) {\n            ans = Math.max(ans, res);\n        }\n        return ans;\n    }", "target_Lan": "java###maxSelectedElements_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxSelectedElements_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maxSelectedElements(new int[]{1, 2, 3, 4, 5}));\n    System.out.println(maxSelectedElements(new int[]{5, 5, 5, 5, 5}));\n    System.out.println(maxSelectedElements(new int[]{-1, -1, -1, -1, -1}));\n    System.out.println(maxSelectedElements(new int[]{1, 2, 2, 3, 3, 3, 4, 4, 4, 4}));\n    System.out.println(maxSelectedElements(new int[]{100, 200, 300, 400, 500}));\n}\n}"}, {"source_Lan": "python###sumOfPower.py", "source_code": "def sumOfPower( nums: List[int], k: int) -> int:\n    MOD = 1_000_000_007\n    n = len(nums)\n    f = [[0] * (n + 1) for _ in range(k + 1)]\n    f[0][0] = 1\n    for i, x in enumerate(nums):\n        for j in range(k, x - 1, -1):\n            for c in range(i + 1, 0, -1):\n                f[j][c] = (f[j][c] + f[j - x][c - 1]) % MOD\n    ans = 0\n    pow2 = 1\n    for i in range(n, 0, -1):\n        ans = (ans + f[k][i] * pow2) % MOD\n        pow2 = pow2 * 2 % MOD\n    return ans", "trans_code": "public static int sumOfPower ( int [ ] nums , int k ) throws Exception {\n  int MOD = 1_000_000_007 ;\n  int n = nums . length ;\n  int [ ] [ ] f = new int [ k + 1 ] [ n ] ;\n  f [ 0 ] [ 0 ] = 1 ;\n  for ( int i = 1 , x = nums [ 0 ] . length ;\n  i < x ;\n  i ++ ) {\n    for ( int j = k ;\n    j > x - 1 ;\n    j -- ) {\n      for ( int c = i + 1 ;\n      c > 0 ;\n      c -- ) {\n        f [ j ] [ c ] = ( f [ j ] [ c ] + f [ j - x ] [ c - 1 ] ) % MOD ;\n      }\n    }\n  }\n  int ans = 0 ;\n  int pow2 = 1 ;\n  for ( int i = n ;\n  i > 0 ;\n  i -- ) {\n    ans = ( ans + f [ k ] [ i ] * pow2 ) % MOD ;\n    pow2 = pow2 * 2 % MOD ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int sumOfPower(int[] nums, int k) {\n        final int MOD = 1_000_000_007;\n        int n = nums.length;\n        int[][] f = new int[k + 1][n + 1];\n        f[0][0] = 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = k; j >= nums[i]; j--) {\n                for (int c = i + 1; c > 0; c--) {\n                    f[j][c] = (f[j][c] + f[j - nums[i]][c - 1]) % MOD;\n                }\n            }\n        }\n        long ans = 0;\n        int pow2 = 1;\n        for (int i = n; i > 0; i--) {\n            ans = (ans + (long) f[k][i] * pow2) % MOD;\n            pow2 = pow2 * 2 % MOD;\n        }\n        return (int) ans;\n    }", "target_Lan": "java###sumOfPower_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class sumOfPower_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(sumOfPower(new int[]{1,2,3}, 6));\n    System.out.println(sumOfPower(new int[]{4,5,6}, 15));\n    System.out.println(sumOfPower(new int[]{7,8,9}, 24));\n    System.out.println(sumOfPower(new int[]{10,11,12}, 30));\n    System.out.println(sumOfPower(new int[]{13,14,15}, 45));\n}\n}"}, {"source_Lan": "python###minimumLevels.py", "source_code": "def minimumLevels( possible: List[int]) -> int:\n    \n    s = sum(possible) * 2 - len(possible)\n    pre = 0\n    for i, x in enumerate(possible[:-1]):\n        pre += 2 if x else -2\n        if pre > s:\n            return i + 1\n    return -1", "trans_code": "public static int minimumLevels ( List < Integer > possible ) throws Exception {\n  int s = sum ( possible ) * 2 - possible . size ( ) ;\n  int pre = 0 ;\n  for ( int i = 0 , x = possible . size ( ) - 1 ;\n  i < x ;\n  i ++ ) {\n    pre += 2 == x ? - 2 : 1 ;\n    if ( pre > s ) {\n      return i + 1 ;\n    }\n  }\n  return - 1 ;\n}\n", "reference_code": "    public static int minimumLevels(int[] possible) {\n        \n        int n = possible.length;\n        int s = 0;\n        for (int x : possible) {\n            s += x;\n        }\n        s = s * 2 - n;\n        int pre = 0;\n        for (int i = 0; i < n - 1; i++) {\n            pre += possible[i] == 1 ? 2 : -2;\n            if (pre > s) {\n                return i + 1;\n            }\n        }\n        return -1;\n    }", "target_Lan": "java###minimumLevels_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumLevels_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minimumLevels(new int[]{0, 0, 0, 0}));\n    System.out.println(minimumLevels(new int[]{1, 1, 1, 1}));\n    System.out.println(minimumLevels(new int[]{1, 0, 0, 0}));\n    System.out.println(minimumLevels(new int[]{0, 1, 0, 0}));\n    System.out.println(minimumLevels(new int[]{0, 0, 1, 0}));\n}\n}"}, {"source_Lan": "python###satisfiesConditions.py", "source_code": "def satisfiesConditions( grid: List[List[int]]) -> bool:\n    for i, row in enumerate(grid):\n        for j, x in enumerate(row):\n            if j and x == row[j - 1] or i and x != grid[i - 1][j]:\n                return False\n    return True", "trans_code": "public static boolean satisfiesConditions ( List < List < Integer >> grid ) throws Exception {\n  for ( int i = 0 , size = grid . size ( ) ;\n  i < size ;\n  i ++ ) {\n    List < Integer > row = grid . get ( i ) ;\n    for ( int j = 0 , size = row . size ( ) ;\n    j < size ;\n    j ++ ) {\n      Integer x = row . get ( j ) ;\n      if ( j > 0 && x == row . get ( j - 1 ) || i > 0 && x != grid . get ( i - 1 ) . get ( j ) ) {\n        return false ;\n      }\n    }\n  }\n  return true ;\n}\n", "reference_code": "    public static boolean satisfiesConditions(int[][] grid) {\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (j > 0 && grid[i][j] == grid[i][j - 1] || i > 0 && grid[i][j] != grid[i - 1][j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "target_Lan": "java###satisfiesConditions_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class satisfiesConditions_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][] grid1 = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};\n    int[][] grid2 = {{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};\n    int[][] grid3 = {{1, 1, 1}, {2, 2, 2}, {3, 3, 3}};\n    int[][] grid4 = {{1, 2, 3}, {2, 3, 1}, {3, 1, 2}};\n    int[][] grid5 = {{1, 1, 1}, {2, 1, 2}, {3, 1, 3}};\n    \n    System.out.println(satisfiesConditions(grid1)); // output: true\n    System.out.println(satisfiesConditions(grid2)); // output: false\n    System.out.println(satisfiesConditions(grid3)); // output: true\n    System.out.println(satisfiesConditions(grid4)); // output: false\n    System.out.println(satisfiesConditions(grid5)); // output: true\n}\n}"}, {"source_Lan": "python###occurrencesOfElement.py", "source_code": "def occurrencesOfElement( nums: List[int], queries: List[int], x: int) -> List[int]:\n    pos = [i for i, v in enumerate(nums) if v == x]\n    return [-1 if q > len(pos) else pos[q - 1] for q in queries]", "trans_code": "public static int [ ] occurrencesOfElement ( int [ ] nums , int [ ] queries , int x ) throws Exception {\n  int [ ] pos = new int [ nums . length + queries . length ] ;\n  System . arraycopy ( nums , 0 , pos , 0 , nums . length ) ;\n  System . arraycopy ( queries , 0 , pos , nums . length , queries . length ) ;\n  return new int [ queries . length ] ;\n}\n", "reference_code": "    public static int[] occurrencesOfElement(int[] nums, int[] queries, int x) {\n        List<Integer> pos = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == x) {\n                pos.add(i);\n            }\n        }\n        for (int i = 0; i < queries.length; i++) {\n            if (queries[i] > pos.size()) {\n                queries[i] = -1;\n            } else {\n                queries[i] = pos.get(queries[i] - 1);\n            }\n        }\n        return queries;\n    }", "target_Lan": "java###occurrencesOfElement_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class occurrencesOfElement_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(Arrays.toString(occurrencesOfElement(new int[]{1,2,3,4,5}, new int[]{1,2,3,4,5}, 3)));\n    System.out.println(Arrays.toString(occurrencesOfElement(new int[]{1,2,3,4,5}, new int[]{1,2,3,4,5}, 6)));\n    System.out.println(Arrays.toString(occurrencesOfElement(new int[]{1,2,3,4,5}, new int[]{1,2,3,4,5}, -1)));\n    System.out.println(Arrays.toString(occurrencesOfElement(new int[]{1,2,3,4,5}, new int[]{1,2,3,4,5}, 0)));\n    System.out.println(Arrays.toString(occurrencesOfElement(new int[]{1,2,3,4,5}, new int[]{1,2,3,4,5}, 1)));\n}\n}"}, {"source_Lan": "python###minOperations2.py", "source_code": "def minOperations2( nums: List[int]) -> int:\n    ans = 0\n    for i in range(len(nums) - 2):\n        if nums[i] == 0:\n            nums[i + 1] ^= 1\n            nums[i + 2] ^= 1\n            ans += 1\n    return ans if nums[-2] and nums[-1] else -1", "trans_code": "public static int minOperations2 ( int [ ] nums ) throws Exception {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < nums . length - 2 ;\n  i ++ ) {\n    if ( nums [ i ] == 0 ) {\n      nums [ i + 1 ] ^= 1 ;\n      nums [ i + 2 ] ^= 1 ;\n      ans ++ ;\n    }\n  }\n  return ans == nums . length - 2 && nums [ nums . length - 1 ] == 0 ? - 1 : ans ;\n}\n", "reference_code": "    public static int minOperations2(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        for (int i = 0; i < n - 2; i++) {\n            if (nums[i] == 0) {\n                nums[i + 1] ^= 1;\n                nums[i + 2] ^= 1;\n                ans++;\n            }\n        }\n        return nums[n - 2] != 0 && nums[n - 1] != 0 ? ans : -1;\n    }", "target_Lan": "java###minOperations2_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minOperations2_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minOperations2(new int[]{1,0,1,0}));\n    System.out.println(minOperations2(new int[]{0,0,0}));\n    System.out.println(minOperations2(new int[]{1,1,1}));\n    System.out.println(minOperations2(new int[]{1,1,0,1,1,0}));\n}\n}"}, {"source_Lan": "python###numberGame.py", "source_code": "def numberGame( nums: List[int]) -> List[int]:\n    nums.sort()\n    for i in range(0, len(nums), 2):\n        nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums", "trans_code": "public static int [ ] numberGame ( int [ ] nums ) throws Exception {\n  Arrays . sort ( nums ) ;\n  for ( int i = 0 ;\n  i < nums . length ;\n  i += 2 ) nums [ i ] = nums [ i + 1 ] ;\n  return nums ;\n}\n", "reference_code": "    public static int[] numberGame(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i += 2) {\n            int tmp = nums[i];\n            nums[i] = nums[i + 1];\n            nums[i + 1] = tmp;\n        }\n        return nums;\n    }", "target_Lan": "java###numberGame_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class numberGame_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(Arrays.toString(numberGame(new int[]{})));\n}\n}"}, {"source_Lan": "python###goodSubsetofBinaryMatrix.py", "source_code": "def goodSubsetofBinaryMatrix( grid: List[List[int]]) -> List[int]:\n    ans = []\n    mp = {}\n    m = len(grid)\n    n = len(grid[0])\n    for j in range(m):\n        st = 0\n        for i in range(n):\n            st |= (grid[j][i] << i)\n        mp[st] = j\n    if 0 in mp:\n        ans.append(mp[0])\n        return ans\n    for x, i in mp.items():\n        for y, j in mp.items():\n            if not (x & y):\n                return [min(i, j), max(i, j)]\n    return ans", "trans_code": "public static List goodSubsetofBinaryMatrix ( List < List < Integer >> grid ) throws Exception {\n  List < Integer > ans = new ArrayList < Integer > ( ) ;\n  Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  int m = grid . size ( ) ;\n  int n = grid . get ( 0 ) . size ( ) ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) {\n    int st = 0 ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      st |= ( grid . get ( j ) . get ( i ) << i ) ;\n    }\n    mp . put ( st , j ) ;\n  }\n  if ( 0 == mp . size ( ) ) {\n    ans . add ( mp . get ( 0 ) ) ;\n    return ans ;\n  }\n  for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) {\n    for ( Map . Entry < Integer , Integer > y : mp . entrySet ( ) ) {\n      if ( ! ( x . getKey ( ) & y . getKey ( ) ) . equals ( y . getKey ( ) ) ) {\n        return Arrays . asList ( Math . min ( i , j ) , Math . max ( i , j ) ) ;\n      }\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {\n        List<Integer> ans = new ArrayList<Integer>();\n        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();\n        int m = grid.length;\n        int n = grid[0].length;\n        for (int j = 0; j < m; j++) {\n            int st = 0;\n            for (int i = 0; i < n; i++) {\n                st |= (grid[j][i] << i);\n            }\n            mp.put(st, j);\n        }\n        if (mp.containsKey(0)) {\n            ans.add(mp.get(0));\n            return ans;\n        }\n        for (Map.Entry<Integer, Integer> entry1 : mp.entrySet()) {\n            int x = entry1.getKey(), i = entry1.getValue();\n            for (Map.Entry<Integer, Integer> entry2 : mp.entrySet()) {\n                int y = entry2.getKey(), j = entry2.getValue();\n                if ((x & y) == 0) {\n                    List<Integer> list = new ArrayList<Integer>();\n                    list.add(Math.min(i, j));\n                    list.add(Math.max(i, j));\n                    return list;\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###goodSubsetofBinaryMatrix_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class goodSubsetofBinaryMatrix_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] grid1 = {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}};\n        int[][] grid2 = {{1, 0, 0, 1}, {0, 1, 1, 0}, {1, 0, 0, 1}};\n        int[][] grid3 = {{1, 0, 1}, {0, 1, 0}, {1, 0, 1}};\n        int[][] grid4 = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};\n        int[][] grid5 = {{1, 1, 1, 1}, {1, 1, 1, 1}, {1, 1, 1, 1}};\n\n        System.out.println(goodSubsetofBinaryMatrix(grid1));\n        System.out.println(goodSubsetofBinaryMatrix(grid2));\n        System.out.println(goodSubsetofBinaryMatrix(grid3));\n        System.out.println(goodSubsetofBinaryMatrix(grid4));\n        System.out.println(goodSubsetofBinaryMatrix(grid5));\n    }\n}"}, {"source_Lan": "python###findMaximumElegance.py", "source_code": "def findMaximumElegance( items: List[List[int]], k: int) -> int:\n    items.sort(key = lambda item: -item[0])\n    categorySet = set()\n    res, profit = 0, 0\n    st = []\n    for i, item in enumerate(items):\n        if i < k:\n            profit += item[0]\n            if item[1] in categorySet:\n                st.append(item[0])\n            else:\n                categorySet.add(item[1])\n        elif item[1] not in categorySet and len(st) > 0:\n            profit += item[0] - st.pop()\n            categorySet.add(item[1])\n        res = max(res, profit + len(categorySet) * len(categorySet))\n    return res", "trans_code": "public static int findMaximumElegance ( List < List < Integer >> items , int k ) throws Exception {\n  Collections . sort ( items , new Comparator < List < Integer >> ( ) {\n    @ Override public int compare ( List < Integer > o1 , List < Integer > o2 ) {\n      return - o1 . get ( 0 ) . compareTo ( o2 . get ( 0 ) ) ;\n    }\n  }\n  ) ;\n  Set < Integer > categorySet = new HashSet < Integer > ( ) ;\n  int res = 0 , profit = 0 ;\n  Stack < Integer > st = new Stack < Integer > ( ) ;\n  for ( int i = 0 , n = items . size ( ) ;\n  i < n ;\n  i ++ ) {\n    List < Integer > item = items . get ( i ) ;\n    if ( i < k ) {\n      profit += item . get ( 0 ) ;\n      if ( item . get ( 1 ) < categorySet . size ( ) ) {\n        st . push ( item . get ( 0 ) ) ;\n      }\n      else {\n        categorySet . add ( item . get ( 1 ) ) ;\n      }\n    }\n    else if ( item . get ( 1 ) != categorySet . size ( ) && st . size ( ) > 0 ) {\n      profit += item . get ( 0 ) - st . pop ( ) ;\n      categorySet . add ( item . get ( 1 ) ) ;\n    }\n    res = Math . max ( res , profit + categorySet . size ( ) * categorySet . size ( ) ) ;\n  }\n  return res ;\n}\n", "reference_code": "    public static long findMaximumElegance(int[][] items, int k) {\n        Arrays.sort(items, (item0, item1) -> item1[0] - item0[0]);\n        var categorySet = new HashSet<Integer>();\n        long profit = 0, res = 0;\n        var st = new ArrayDeque<Integer>();\n        for (int i = 0; i < items.length; i++) {\n            if (i < k) {\n                profit += items[i][0];\n                if (!categorySet.add(items[i][1])) {\n                    st.push(items[i][0]);\n                }\n            } else if (!st.isEmpty() && categorySet.add(items[i][1])) {\n                profit += items[i][0] - st.pop();\n            }\n            res = Math.max(res, profit + (long)categorySet.size() * categorySet.size());\n        }\n        return res;\n    }", "target_Lan": "java###findMaximumElegance_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class findMaximumElegance_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(findMaximumElegance(new int[][]{{2,3},{3,1},{2,2},{5,4}}, 3));\n    System.out.println(findMaximumElegance(new int[][]{{10,1},{1,1},{2,2},{1,3},{1,4}}, 3));\n    System.out.println(findMaximumElegance(new int[][]{{5,1},{4,2},{3,3},{2,4},{1,5}}, 3));\n    System.out.println(findMaximumElegance(new int[][]{{5,1},{5,1},{5,2},{5,3},{5,4}}, 3));\n    System.out.println(findMaximumElegance(new int[][]{{1,1},{2,1},{3,1},{4,1},{5,1}}, 3));\n}\n}"}, {"source_Lan": "python###maximumBeauty.py", "source_code": "def maximumBeauty( nums: List[int], k: int) -> int:\n    res, j, n = 0, 0, len(nums)\n    nums.sort()\n    for i in range(n):\n        while nums[i] - 2 * k > nums[j]:\n            j += 1\n        res = max(res, i - j + 1)\n    return res", "trans_code": "public static int maximumBeauty ( int [ ] nums , int k ) throws Exception {\n  int res = 0 , j = 0 , n = nums . length ;\n  Arrays . sort ( nums ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( nums [ i ] - 2 * k > nums [ j ] ) {\n      j ++ ;\n    }\n    res = Math . max ( res , i - j + 1 ) ;\n  }\n  return res ;\n}\n", "reference_code": "    public static int maximumBeauty(int[] nums, int k) {\n        int res = 0, n = nums.length;\n        Arrays.sort(nums);\n        for (int i = 0, j = 0; i < n; i++) {\n            while (nums[i] - 2 * k > nums[j]) {\n                j++;\n            }\n            res = Math.max(res, i - j + 1);\n        }\n        return res;\n    }", "target_Lan": "java###maximumBeauty_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maximumBeauty_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maximumBeauty(new int[]{1, 2, 3, 4, 5}, 1));\n    System.out.println(maximumBeauty(new int[]{5, 4, 3, 2, 1}, 2));\n    System.out.println(maximumBeauty(new int[]{1, 1, 1, 1, 1}, 1));\n    System.out.println(maximumBeauty(new int[]{10, 20, 30, 40, 50}, 10));\n    System.out.println(maximumBeauty(new int[]{100, 200, 300, 400, 500}, 100));\n}\n}"}, {"source_Lan": "python###accountBalanceAfterPurchase.py", "source_code": "def accountBalanceAfterPurchase( purchaseAmount: int) -> int:\n    r = purchaseAmount % 10\n    purchaseAmount = purchaseAmount - r if r < 5 else purchaseAmount + 10 - r\n    return 100 - purchaseAmount", "trans_code": "public static int accountBalanceAfterPurchase ( int purchaseAmount ) throws Exception {\n  int r = purchaseAmount % 10 ;\n  purchaseAmount = purchaseAmount - r < 5 ? purchaseAmount + 10 - r : r ;\n  return 100 - purchaseAmount ;\n}\n", "reference_code": "    public static int accountBalanceAfterPurchase(int purchaseAmount) {\n        int r = purchaseAmount % 10;\n        if (r < 5) {\n            purchaseAmount -= r;\n        } else {\n            purchaseAmount += 10 - r;\n        }\n        return 100 - purchaseAmount;\n    }", "target_Lan": "java###accountBalanceAfterPurchase_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class accountBalanceAfterPurchase_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(accountBalanceAfterPurchase(0));\n    System.out.println(accountBalanceAfterPurchase(10));\n    System.out.println(accountBalanceAfterPurchase(15));\n    System.out.println(accountBalanceAfterPurchase(20));\n    System.out.println(accountBalanceAfterPurchase(100));\n}\n}"}, {"source_Lan": "python###maxOperations.py", "source_code": "def maxOperations( nums: List[int]) -> int:\n    n, t = len(nums), 0\n    for i in range(1, n, 2):\n        if nums[i] + nums[i - 1] != nums[1] + nums[0]:\n            break\n        t += 1\n    return t", "trans_code": "public static int maxOperations ( int [ ] nums ) throws Exception {\n  int n = nums . length , t = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i += 2 ) {\n    if ( nums [ i ] + nums [ i - 1 ] != nums [ 1 ] + nums [ 0 ] ) break ;\n    t ++ ;\n  }\n  return t ;\n}\n", "reference_code": "    public static int maxOperations(int[] nums) {\n        int n = nums.length, t = 0;\n        for (int i = 1; i < n; i += 2) {\n            if (nums[i] + nums[i - 1] != nums[1] + nums[0]) {\n                break;\n            }\n            t++;\n        }\n        return t;\n    }", "target_Lan": "java###maxOperations_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maxOperations_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maxOperations(new int[]{2, 3, 5, 7}));\n    System.out.println(maxOperations(new int[]{2, 2, 2, 2}));\n    System.out.println(maxOperations(new int[]{1, 2, 3, 4}));\n    System.out.println(maxOperations(new int[]{10, 20, 30, 40}));\n    System.out.println(maxOperations(new int[]{-5, -10, -15, -20}));\n}\n}"}, {"source_Lan": "python###minimumSteps.py", "source_code": "def minimumSteps( s):\n    ans, sum = 0, 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            sum += 1\n        else:\n            ans += sum\n    return ans", "trans_code": "public static int minimumSteps ( String s ) {\n  int ans = 0 , sum = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '1' ) sum ++ ;\n    else ans += sum ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static long minimumSteps(String s) {\n        long ans = 0;\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                sum++;\n            } else {\n                ans += sum;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###minimumSteps_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumSteps_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minimumSteps(\"0\"));\n    System.out.println(minimumSteps(\"1\"));\n    System.out.println(minimumSteps(\"0101\"));\n    System.out.println(minimumSteps(\"10101\"));\n    System.out.println(minimumSteps(\"11111\"));\n}\n}"}, {"source_Lan": "python###findMissingAndRepeatedValues.py", "source_code": "def findMissingAndRepeatedValues( grid: List[List[int]]) -> List[int]:\n    n = len(grid)\n    count = [0] * (n * n + 1)\n    count[0] = -1\n    for i in range(n):\n        for j in range(n):\n            count[grid[i][j]] += 1\n    return [count.index(2), count.index(0)]", "trans_code": "public static int [ ] findMissingAndRepeatedValues ( int [ ] [ ] grid ) throws Exception {\n  int n = grid . length ;\n  int [ ] count = new int [ n * n + 1 ] ;\n  count [ 0 ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      count [ grid [ i ] [ j ] ] ++ ;\n    }\n  }\n  return new int [ ] {\n    count [ 2 ] , count [ 0 ] }\n    ;\n  }\n  ", "reference_code": "    public static int[] findMissingAndRepeatedValues(int[][] grid) {\n        int n = grid.length;\n        int[] count = new int[n * n + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count[grid[i][j]]++;\n            }\n        }\n        int[] res = new int[2];\n        for (int i = 1; i <= n * n; i++) {\n            if (count[i] == 2) {\n                res[0] = i;\n            }\n            if (count[i] == 0) {\n                res[1] = i;\n            }\n        }\n        return res;\n    }", "target_Lan": "java###findMissingAndRepeatedValues_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n    import java.util.Arrays;\npublic class findMissingAndRepeatedValues_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] grid1 = {{1,2,3},{4,5,6},{7,8,8}};\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(grid1)));\n    }\n}"}, {"source_Lan": "python###distributeCandies.py", "source_code": "def distributeCandies( n: int, limit: int) -> int:\n    ans = 0\n    for i in range(min(limit, n) + 1):\n        if n - i > 2 * limit:\n            continue\n        ans += min(n - i, limit) - max(0, n - i - limit) + 1\n    return ans", "trans_code": "public static int distributeCandies ( int n , int limit ) throws Exception {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < Math . min ( limit , n ) + 1 ;\n  i ++ ) {\n    if ( n - i > 2 * limit ) continue ;\n    ans += Math . min ( n - i , limit ) - Math . max ( 0 , n - i - limit ) + 1 ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static long distributeCandies(int n, int limit) {\n        long ans = 0;\n        for (int i = 0; i <= Math.min(limit, n); i++) {\n            if (n - i > 2 * limit) {\n                continue;\n            }\n            ans += Math.min(n - i, limit) - Math.max(0, n - i - limit) + 1;\n        }\n        return ans;\n    }", "target_Lan": "java###distributeCandies_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class distributeCandies_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(distributeCandies(0, 0));\n    System.out.println(distributeCandies(10, 5));\n    System.out.println(distributeCandies(10, 0));\n    System.out.println(distributeCandies(10, 10));\n    System.out.println(distributeCandies(10, 15));\n}\n}"}, {"source_Lan": "python###findIndices.py", "source_code": "def findIndices( nums: List[int], indexDifference: int, valueDifference: int) -> List[int]:\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if j - i >= indexDifference and abs(nums[j] - nums[i]) >= valueDifference:\n                return [i, j]\n    return [-1, -1]", "trans_code": "public static int [ ] findIndices ( int [ ] nums , int indexDifference , int valueDifference ) throws Exception {\n  for ( int i = 0 ;\n  i < nums . length ;\n  i ++ ) {\n    for ( int j = i ;\n    j < nums . length ;\n    j ++ ) {\n      if ( j - i >= indexDifference && Math . abs ( nums [ j ] - nums [ i ] ) >= valueDifference ) {\n        return new int [ ] {\n          i , j }\n          ;\n        }\n      }\n    }\n    return new int [ ] {\n      - 1 , - 1 }\n      ;\n    }\n    ", "reference_code": "    public static int[] findIndices(int[] nums, int indexDifference, int valueDifference) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i; j < nums.length; j++) {\n                if (j - i >= indexDifference && Math.abs(nums[j] - nums[i]) >= valueDifference) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return new int[]{-1, -1};\n    }", "target_Lan": "java###findIndices_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n    import java.util.Arrays;\npublic class findIndices_Test {\n// TOFILL\npublic static void main(String[] args) {\n            System.out.println(Arrays.toString(findIndices(new int[]{1,2,3,4,5}, 1, 1)));\n            System.out.println(Arrays.toString(findIndices(new int[]{1,2,3,4,5}, 2, 2)));\n            System.out.println(Arrays.toString(findIndices(new int[]{1,2,3,4,5}, 3, 3)));\n            System.out.println(Arrays.toString(findIndices(new int[]{1,2,3,4,5}, 4, 4)));\n            System.out.println(Arrays.toString(findIndices(new int[]{1,2,3,4,5}, 5, 5)));\n        }\n}"}, {"source_Lan": "python###findMinimumTime.py", "source_code": "def findMinimumTime( tasks: List[List[int]]) -> int:\n    tasks.sort(key = lambda task: task[1])\n    run, res = [False] * (tasks[-1][1] + 1), 0\n    for start, end, duration in tasks:\n        duration -= sum(run[start : end+1])\n        res += max(duration, 0)\n        for j in range(end, -1, -1):\n            if duration <= 0:\n                break\n            if not run[j]:\n                run[j], duration = True, duration - 1\n    return res", "trans_code": "public static int findMinimumTime ( List < List < Integer >> tasks ) throws Exception {\n  Collections . sort ( tasks , new Comparator < List < Integer >> ( ) {\n    @ Override public int compare ( List < Integer > o1 , List < Integer > o2 ) {\n      return o1 . get ( 1 ) - o2 . get ( 1 ) ;\n    }\n  }\n  ) ;\n  boolean [ ] run = new boolean [ tasks . size ( ) + 1 ] , res = new int [ 0 ] ;\n  for ( int start = 0 , end = tasks . size ( ) , duration = 0 ;\n  start < end ;\n  ) {\n    duration -= Math . min ( run [ start ++ ] , run [ end ++ ] ) ;\n    res += Math . max ( duration , 0 ) ;\n    for ( int j = end ;\n    j >= start ;\n    j -- ) {\n      if ( duration <= 0 ) {\n        break ;\n      }\n      if ( ! run [ j ] ) {\n        run [ j ] = true ;\n        res ++ ;\n      }\n    }\n  }\n  return res ;\n}\n", "reference_code": "    public static int findMinimumTime(int[][] tasks) {\n        int n = tasks.length;\n        Arrays.sort(tasks, (a, b) -> a[1] - b[1]);\n        int[] run = new int[tasks[n - 1][1] + 1];\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            int start = tasks[i][0], end = tasks[i][1], duration = tasks[i][2];\n            for (int j = start; j <= end; j++) {\n                duration -= run[j];\n            }\n            res += Math.max(duration, 0);\n            for (int j = end; j >= 0 && duration > 0; j--) {\n                if (run[j] == 0) {\n                    duration--;\n                    run[j] = 1;\n                }\n            }\n        }\n        return res;\n    }", "target_Lan": "java###findMinimumTime_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class findMinimumTime_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][] tasks1 = {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}};\n    int[][] tasks2 = {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}, {4, 5, 6}};\n    int[][] tasks3 = {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}, {4, 5, 6}, {5, 6, 7}};\n    int[][] tasks4 = {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}, {4, 5, 6}, {5, 6, 7}, {6, 7, 8}};\n    int[][] tasks5 = {{1, 2, 3}, {2, 3, 4}, {3, 4, 5}, {4, 5, 6}, {5, 6, 7}, {6, 7, 8}, {7, 8, 9}};\n    System.out.println(findMinimumTime(tasks1));\n    System.out.println(findMinimumTime(tasks2));\n    System.out.println(findMinimumTime(tasks3));\n    System.out.println(findMinimumTime(tasks4));\n    System.out.println(findMinimumTime(tasks5));\n}\n}"}, {"source_Lan": "python###garbageCollection.py", "source_code": "def garbageCollection( garbage: List[str], travel: List[int]) -> int:\n    distance = {}\n    res = 0\n    cur_dis = 0\n    for i in range(len(garbage)):\n        res += len(garbage[i])\n        if i > 0:\n            cur_dis += travel[i - 1]\n        for c in garbage[i]:\n            distance[c] = cur_dis\n    return res + sum(distance.values())", "trans_code": "public static int garbageCollection ( String [ ] garbage , int [ ] travel ) throws Exception {\n  Map < String , Integer > distance = new HashMap < > ( ) ;\n  int res = 0 ;\n  int curDi = 0 ;\n  for ( int i = 0 ;\n  i < garbage . length ;\n  i ++ ) {\n    res += garbage [ i ] . length ( ) ;\n    if ( i > 0 ) {\n      curDi += travel [ i - 1 ] ;\n    }\n    for ( int c = 0 ;\n    c < garbage [ i ] . length ( ) ;\n    c ++ ) {\n      distance . put ( garbage [ i ] , curDi ) ;\n    }\n  }\n  return res + Arrays . hashCode ( distance . values ( ) ) ;\n}\n", "reference_code": "    public static int garbageCollection(String[] garbage, int[] travel) {\n        Map<Character, Integer> distance = new HashMap<>();\n        int res = 0, curDis = 0;\n        for (int i = 0; i < garbage.length; i++) {\n            res += garbage[i].length();\n            if (i > 0) {\n                curDis += travel[i - 1];\n            }\n            for (char c : garbage[i].toCharArray()) {\n                distance.put(c, curDis);\n            }\n        }\n        return res + distance.values().stream().reduce(0, Integer::sum);\n    }", "target_Lan": "java###garbageCollection_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class garbageCollection_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(garbageCollection(new String[]{\"\"}, new int[]{}));\n    System.out.println(garbageCollection(new String[]{\"MMM\"}, new int[]{1}));\n    System.out.println(garbageCollection(new String[]{\"PP\", \"GG\"}, new int[]{1, 2}));\n    System.out.println(garbageCollection(new String[]{\"G\", \"P\", \"GP\", \"GG\"}, new int[]{2, 3, 4}));\n    System.out.println(garbageCollection(new String[]{\"MMMMMMMMMM\", \"PPPPPP\", \"\", \"G\", \"GGG\"}, new int[]{1, 2, 3, 4, 5}));\n}\n}"}, {"source_Lan": "python###numberOfEmployeesWhoMetTarget.py", "source_code": "def numberOfEmployeesWhoMetTarget( hours, target):\n    ans = 0\n    for i in range(0, len(hours)):\n        if hours[i] >= target:\n            ans += 1\n    return ans", "trans_code": "public static int numberOfEmployeesWhoMetTarget ( int [ ] hours , int target ) {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i != hours . length ;\n  i ++ ) {\n    if ( hours [ i ] >= target ) {\n      ans ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int numberOfEmployeesWhoMetTarget(int[] hours, int target) {\n        int ans = 0;\n        for (int i = 0; i < hours.length; i++) {\n            if (hours[i] >= target) {\n                ans++;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###numberOfEmployeesWhoMetTarget_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class numberOfEmployeesWhoMetTarget_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[] hours1 = {0};\n    int target1 = 0;\n    System.out.println(numberOfEmployeesWhoMetTarget(hours1, target1));\n\n    int[] hours2 = {100, 200, 300, 400};\n    int target2 = 300;\n    System.out.println(numberOfEmployeesWhoMetTarget(hours2, target2));\n\n    int[] hours3 = {-1, -2, -3, -4};\n    int target3 = -2;\n    System.out.println(numberOfEmployeesWhoMetTarget(hours3, target3));\n\n    int[] hours4 = {10, 20, 30, 40, 50};\n    int target4 = 0;\n    System.out.println(numberOfEmployeesWhoMetTarget(hours4, target4));\n\n    int[] hours5 = {5, 5, 5, 5, 5};\n    int target5 = 5;\n    System.out.println(numberOfEmployeesWhoMetTarget(hours5, target5));\n}\n}"}, {"source_Lan": "python###totalCost.py", "source_code": "def totalCost( costs: List[int], k: int, candidates: int) -> int:\n    n = len(costs)\n    q = list()\n    left, right = candidates - 1, n - candidates\n    if left + 1 < right:\n        for i in range(left + 1):\n            heappush(q, (costs[i], i))\n        for i in range(right, n):\n            heappush(q, (costs[i], i))\n    else:\n        for i in range(n):\n            heappush(q, (costs[i], i))\n    ans = 0\n    for _ in range(k):\n        cost, idx = heappop(q)\n        ans += cost\n        if left + 1 < right:\n            if idx <= left:\n                left += 1\n                heappush(q, (costs[left], left))\n            else:\n                right -= 1\n                heappush(q, (costs[right], right))\n    return ans", "trans_code": "public static int totalCost ( int [ ] costs , int k , int candidates ) throws Exception {\n  int n = costs . length ;\n  LinkedList < Integer > q = Lists . newLinkedList ( ) ;\n  int left = candidates - 1 , right = n - candidates ;\n  if ( left + 1 < right ) {\n    for ( int i = 0 ;\n    i < left + 1 ;\n    i ++ ) {\n      heappush ( q , ( Integer ) costs [ i ] ) ;\n    }\n    for ( int i = right ;\n    i < n ;\n    i ++ ) {\n      heappush ( q , ( Integer ) costs [ i ] ) ;\n    }\n  }\n  else {\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      heappush ( q , ( Integer ) costs [ i ] ) ;\n    }\n  }\n  int ans = 0 ;\n  for ( ;\n  ;\n  ) {\n    int cost = heappop ( q ) ;\n    ans += cost ;\n    if ( left + 1 < right ) {\n      if ( cost <= left ) {\n        left ++ ;\n        heappush ( q , ( Integer ) costs [ left ] ) ;\n      }\n      else {\n        right -- ;\n        heappush ( q , ( Integer ) costs [ right ] ) ;\n      }\n    }\n  }\n}\n", "reference_code": "    public static long totalCost(int[] costs, int k, int candidates) {\n        int n = costs.length;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);\n        int left = candidates - 1, right = n - candidates;\n        if (left + 1 < right) {\n            for (int i = 0; i <= left; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n            for (int i = right; i < n; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n        } else {\n            for (int i = 0; i < n; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < k; ++i) {\n            int[] arr = pq.poll();\n            int cost = arr[0], id = arr[1];\n            ans += cost;\n            if (left + 1 < right) {\n                if (id <= left) {\n                    ++left;\n                    pq.offer(new int[]{costs[left], left});\n                } else {\n                    --right;\n                    pq.offer(new int[]{costs[right], right});\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###totalCost_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class totalCost_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(totalCost(new int[]{1,2,3,4,5}, 2, 1));\n        System.out.println(totalCost(new int[]{10,1,1,1,1,1,1,1,1,1}, 3, 2));\n        System.out.println(totalCost(new int[]{5,4,3,2,1}, 4, 3));\n        System.out.println(totalCost(new int[]{1,2,3,4,5,6,7,8,9,10}, 5, 4));\n        System.out.println(totalCost(new int[]{2,2,2,2,2,2,2,2,2,2}, 10, 5));\n    }\n}"}, {"source_Lan": "python###countTestedDevices.py", "source_code": "def countTestedDevices( batteryPercentages: List[int]) -> int:\n    n = len(batteryPercentages)\n    need = 0\n    for i in range(n):\n        if batteryPercentages[i] > 0:\n            need += 1\n            for j in range(i + 1, n):\n                batteryPercentages[j] = max(batteryPercentages[j] - 1, 0)\n    return need", "trans_code": "public static int countTestedDevices ( int [ ] batteryPercentages ) throws Exception {\n  int n = batteryPercentages . length ;\n  int need = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( batteryPercentages [ i ] > 0 ) {\n      need ++ ;\n      for ( int j = i + 1 ;\n      j < n ;\n      j ++ ) {\n        batteryPercentages [ j ] = Math . max ( batteryPercentages [ j ] - 1 , 0 ) ;\n      }\n    }\n  }\n  return need ;\n}\n", "reference_code": "    public static int countTestedDevices(int[] batteryPercentages) {\n        int n = batteryPercentages.length;\n        int need = 0;\n        for (int i = 0; i < n; i++) {\n            if (batteryPercentages[i] > 0) {\n                need++;\n                for (int j = i + 1; j < n; j++) {\n                    batteryPercentages[j] = Math.max(batteryPercentages[j] - 1, 0);\n                }\n            }\n        }\n        return need;\n    }", "target_Lan": "java###countTestedDevices_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countTestedDevices_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(countTestedDevices(new int[]{10, 10, 10, 10, 10}));\n        System.out.println(countTestedDevices(new int[]{0, 0, 0, 0, 0}));\n        System.out.println(countTestedDevices(new int[]{-1, -2, -3, -4, -5}));\n        System.out.println(countTestedDevices(new int[]{100, 50, 75, 25, 100}));\n        System.out.println(countTestedDevices(new int[]{90, 90, 90, 90, 90}));\n    }\n}"}, {"source_Lan": "python###maximumBinaryString.py", "source_code": "def maximumBinaryString( binary: str) -> str:\n    n = len(binary)\n    s = list(binary)\n    j = 0\n    for i in range(n):\n        if s[i] == '0':\n            while j <= i or (j < n and s[j] == '1'):\n                j += 1\n            if j < n:\n                s[j] = '1'\n                s[i] = '1'\n                s[i + 1] = '0'\n    return ''.join(s)", "trans_code": "public static String maximumBinaryString ( String binary ) throws Exception {\n  int n = binary . length ( ) ;\n  StringBuilder sb = new StringBuilder ( binary ) ;\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( sb . charAt ( i ) == '0' ) {\n      while ( j <= i || ( j < n && sb . charAt ( j ) == '1' ) ) {\n        j ++ ;\n      }\n      if ( j < n ) {\n        sb . setCharAt ( j , '1' ) ;\n        sb . setCharAt ( i , '1' ) ;\n        sb . setCharAt ( i + 1 , '0' ) ;\n      }\n    }\n  }\n  return sb . toString ( ) ;\n}\n", "reference_code": "    public static String maximumBinaryString(String binary) {\n        int n = binary.length();\n        char[] s = binary.toCharArray();\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                while (j <= i || (j < n && s[j] == '1')) {\n                    j++;\n                }\n                if (j < n) {\n                    s[j] = '1';\n                    s[i] = '1';\n                    s[i + 1] = '0';\n                }\n            }\n        }\n        return new String(s);\n    }", "target_Lan": "java###maximumBinaryString_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maximumBinaryString_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maximumBinaryString(\"1101\"));\n    System.out.println(maximumBinaryString(\"0000\"));\n    System.out.println(maximumBinaryString(\"1111\"));\n    System.out.println(maximumBinaryString(\"0101\"));\n    System.out.println(maximumBinaryString(\"1001\"));\n}\n}"}, {"source_Lan": "python###minOperations.py", "source_code": "def minOperations( nums: List[int]) -> int:\n    n = len(nums)\n    sortedUniqueNums = sorted((set(nums)))\n    res = n\n    j = 0\n    for i, left in enumerate(sortedUniqueNums):\n        right = left + n - 1\n        while j < len(sortedUniqueNums) and sortedUniqueNums[j] <= right:\n            res = min(res, n - (j - i + 1))\n            j += 1\n    return res", "trans_code": "public static int minOperations ( List < Integer > nums ) throws Exception {\n  int n = nums . size ( ) ;\n  List < Integer > sortedUniqueNums = new ArrayList < > ( ( Set < Integer > ) nums ) ;\n  int res = n ;\n  int j = 0 ;\n  for ( int i = 0 , left = 0 ;\n  i < n ;\n  i ++ ) {\n    int right = left + n - 1 ;\n    while ( j < sortedUniqueNums . size ( ) && sortedUniqueNums . get ( j ) <= right ) {\n      res = Math . min ( res , n - ( j - i + 1 ) ) ;\n      j ++ ;\n    }\n  }\n  return res ;\n}\n", "reference_code": "    public static int minOperations(int[] nums) {\n        int n = nums.length;\n        Set<Integer> set = new HashSet<Integer>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        List<Integer> sortedUniqueNums = new ArrayList<Integer>(set);\n        Collections.sort(sortedUniqueNums);\n        int res = n;\n        int j = 0;\n        for (int i = 0; i < sortedUniqueNums.size(); i++) {\n            int left = sortedUniqueNums.get(i);\n            int right = left + n - 1;\n            while (j < sortedUniqueNums.size() && sortedUniqueNums.get(j) <= right) {\n                res = Math.min(res, n - (j - i + 1));\n                j++;\n            }\n        }\n        return res;\n    }", "target_Lan": "java###minOperations_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minOperations_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minOperations(new int[]{1,2,3,4,5}));\n    System.out.println(minOperations(new int[]{1,1,1,1,1}));\n    System.out.println(minOperations(new int[]{-1,-2,-3,-4,-5}));\n    System.out.println(minOperations(new int[]{1,2,3,4,100}));\n    System.out.println(minOperations(new int[]{5,5,5,5,5}));\n}\n}"}, {"source_Lan": "python###findChampion.py", "source_code": "def findChampion( n: int, edges: List[List[int]]) -> int:\n    degree = [0] * n\n    for x, y in edges:\n        degree[y] += 1\n    champion = -1\n    for i, d in enumerate(degree):\n        if d == 0:\n            if champion == -1:\n                champion = i\n            else:\n                return -1\n    return champion", "trans_code": "public static int findChampion ( int n , List < List < Integer >> edges ) throws Exception {\n  int [ ] degree = new int [ n ] ;\n  for ( List < Integer > x : edges ) {\n    degree [ x . size ( ) ] ++ ;\n  }\n  int champion = - 1 ;\n  for ( int i = 0 , d = degree . length ;\n  i < n ;\n  i ++ ) {\n    if ( degree [ i ] == 0 ) {\n      if ( champion == - 1 ) {\n        champion = i ;\n      }\n      else {\n        return - 1 ;\n      }\n    }\n  }\n  return champion ;\n}\n", "reference_code": "    public static int findChampion(int n, int[][] edges) {\n        int[] degree = new int[n];\n        for (int[] e : edges) {\n            degree[e[1]]++;\n        }\n        int champion = -1;\n        for (int i = 0; i < n; i++) {\n            if (degree[i] == 0) {\n                if (champion == -1) {\n                    champion = i;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        return champion;\n    }", "target_Lan": "java###findChampion_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findChampion_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][] edges1 = new int[0][0];\n    System.out.println(findChampion(0, edges1));\n    \n    int[][] edges2 = new int[0][0];\n    System.out.println(findChampion(1, edges2));\n    \n    int[][] edges3 = {{0, 1}, {1, 0}};\n    System.out.println(findChampion(2, edges3));\n    \n    int[][] edges4 = {{0, 1}, {1, 2}, {2, 0}};\n    System.out.println(findChampion(3, edges4));\n    \n    int[][] edges5 = {{0, 1}, {0, 2}, {1, 2}};\n    System.out.println(findChampion(3, edges5));\n}\n}"}, {"source_Lan": "python###kSum.py", "source_code": "def kSum( nums: List[int], k: int) -> int:\n    n = len(nums)\n    total = 0\n    for i in range(n):\n        if nums[i] >= 0:\n            total += nums[i]\n        else:\n            nums[i] = -nums[i]\n    nums.sort()\n    ret = 0\n    pq = [(nums[0], 0)]\n    for j in range(2, k + 1):\n        t, i = heappop(pq)\n        ret = t\n        if i == n - 1:\n            continue\n        heappush(pq, (t + nums[i + 1], i + 1))\n        heappush(pq, (t - nums[i] + nums[i + 1], i + 1))\n    return total - ret", "trans_code": "public static int kSum ( int [ ] nums , int k ) throws Exception {\n  int n = nums . length ;\n  int total = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( nums [ i ] >= 0 ) total += nums [ i ] ;\n    else nums [ i ] = - nums [ i ] ;\n  }\n  Arrays . sort ( nums ) ;\n  int ret = 0 ;\n  PriorityQueue < Integer > pq = new PriorityQueue < Integer > ( ) ;\n  pq . add ( new Integer ( nums [ 0 ] ) ) ;\n  for ( int j = 2 ;\n  j <= k ;\n  j ++ ) {\n    int t = heappop ( pq ) ;\n    ret = t ;\n    if ( i == n - 1 ) continue ;\n    heappush ( pq , new Integer ( t + nums [ i + 1 ] ) ) ;\n    heappush ( pq , new Integer ( t - nums [ i ] + nums [ i + 1 ] ) ) ;\n  }\n  return total - ret ;\n}\n", "reference_code": "    public static long kSum(int[] nums, int k) {\n        int n = nums.length;\n        long total = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] >= 0) {\n                total += nums[i];\n            } else {\n                nums[i] = -nums[i];\n            }\n        }\n        Arrays.sort(nums);\n        long ret = 0;\n        PriorityQueue<long[]> pq = new PriorityQueue<long[]>((a, b) -> Long.compare(a[0], b[0]));\n        pq.offer(new long[]{nums[0], 0});\n        for (int j = 2; j <= k; j++) {\n            long[] arr = pq.poll();\n            long t = arr[0];\n            int i = (int) arr[1];\n            ret = t;\n            if (i == n - 1) {\n                continue;\n            }\n            pq.offer(new long[]{t + nums[i + 1], i + 1});\n            pq.offer(new long[]{t - nums[i] + nums[i + 1], i + 1});\n        }\n        return total - ret;\n    }", "target_Lan": "java###kSum_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class kSum_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(kSum(new int[]{1, 2, 3, 4, 5}, 2));\n        System.out.println(kSum(new int[]{-1, -2, -3, -4, -5}, 3));\n        System.out.println(kSum(new int[]{0, 0, 0, 0, 0}, 1));\n        System.out.println(kSum(new int[]{100, 200, 300, 400, 500}, 4));\n        System.out.println(kSum(new int[]{-10, -20, -30, -40, -50}, 5));\n    }\n}"}, {"source_Lan": "python###divisibilityArray.py", "source_code": "def divisibilityArray( word, m):\n    cur = 0\n    res = []\n    for c in word:\n        cur = (cur * 10 + int(c)) % m\n        res.append(1 if cur == 0 else 0)\n    return res", "trans_code": "public static int [ ] divisibilityArray ( String word , int m ) {\n  int cur = 0 ;\n  int [ ] res = new int [ word . length ( ) ] ;\n  for ( int i = 0 ;\n  i < word . length ( ) ;\n  i ++ ) {\n    cur = ( cur * 10 + Integer . parseInt ( word . substring ( i , i + 1 ) ) ) % m ;\n    res [ i ] = 1 == cur ? 0 : 1 ;\n  }\n  return res ;\n}\n", "reference_code": "    public static int[] divisibilityArray(String word, int m) {\n        int[] res = new int[word.length()];\n        long cur = 0;\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            cur = (cur * 10 + (c - '0')) % m;\n            res[i] = (cur == 0) ? 1 : 0;\n        }\n        return res;\n    }", "target_Lan": "java###divisibilityArray_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class divisibilityArray_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(Arrays.toString(divisibilityArray(\"12345\", 1)));\n    System.out.println(Arrays.toString(divisibilityArray(\"99999\", 1)));\n    System.out.println(Arrays.toString(divisibilityArray(\"12345\", 1000)));\n    System.out.println(Arrays.toString(divisibilityArray(\"98765\", 12345)));\n    System.out.println(Arrays.toString(divisibilityArray(\"10000\", 10000)));\n}\n}"}, {"source_Lan": "python###findKOr.py", "source_code": "def findKOr( nums: List[int], k: int) -> int:\n    ans = 0\n    for i in range(31):\n        cnt = sum(1 for num in nums if ((num >> i) & 1) > 0)\n        if cnt >= k:\n            ans |= 1 << i\n    return ans", "trans_code": "public static int findKOr ( int [ ] nums , int k ) throws Exception {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < 31 ;\n  i ++ ) {\n    int cnt = sum ( 1 , nums ) ;\n    if ( ( ( num >> i ) & 1 ) > 0 ) {\n      ans |= 1 << i ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int findKOr(int[] nums, int k) {\n        int ans = 0;\n        for (int i = 0; i < 31; ++i) {\n            int cnt = 0;\n            for (int num : nums) {\n                if (((num >> i) & 1) != 0) {\n                    ++cnt;\n                }\n            }\n            if (cnt >= k) {\n                ans |= 1 << i;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###findKOr_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class findKOr_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[] nums1 = {1, 2, 3, 4, 5};\n    int[] nums2 = {0, 0, 0, 0, 0};\n    int[] nums3 = {-1, -2, -3, -4, -5};\n    int[] nums4 = {100, 200, 300, 400, 500};\n    int[] nums5 = {1, 1, 1, 1, 1};\n    System.out.println(findKOr(nums1, 3));\n    System.out.println(findKOr(nums2, 1));\n    System.out.println(findKOr(nums3, 2));\n    System.out.println(findKOr(nums4, 4));\n    System.out.println(findKOr(nums5, 5));\n}\n}"}, {"source_Lan": "python###minIncrements.py", "source_code": "def minIncrements( n: int, cost: List[int]) -> int:\n    ans = 0\n    for i in range(n - 2, 0, -2):\n        ans += abs(cost[i] - cost[i + 1])\n        \n        cost[i // 2] += max(cost[i], cost[i + 1])\n    return ans", "trans_code": "public static int minIncrements ( int n , int [ ] cost ) throws Exception {\n  int ans = 0 ;\n  for ( int i = n - 2 ;\n  i > 0 ;\n  i -- ) {\n    ans += Math . abs ( cost [ i ] - cost [ i + 1 ] ) ;\n    cost [ i / 2 ] += Math . max ( cost [ i ] , cost [ i + 1 ] ) ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int minIncrements(int n, int[] cost) {\n        int ans = 0;\n        for (int i = n - 2; i > 0; i -= 2) {\n            ans += Math.abs(cost[i] - cost[i + 1]);\n            \n            cost[i / 2] += Math.max(cost[i], cost[i + 1]);\n        }\n        return ans;\n    }", "target_Lan": "java###minIncrements_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minIncrements_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minIncrements(5, new int[]{1, 2, 3, 4, 5}));\n        System.out.println(minIncrements(6, new int[]{5, 4, 3, 2, 1, 0}));\n        System.out.println(minIncrements(0, new int[]{}));\n        System.out.println(minIncrements(1, new int[]{5}));\n        System.out.println(minIncrements(3, new int[]{1, 2, 3}));\n    }\n}"}, {"source_Lan": "python###maxResult.py", "source_code": "def maxResult( nums: List[int], k: int) -> int:\n    n = len(nums)\n    dp = [0] * n\n    dp[0] = nums[0]\n    queue = deque([0])\n    for i in range(1, n):\n        while queue and queue[0] < i - k:\n            queue.popleft()\n        dp[i] = dp[queue[0]] + nums[i]\n        while queue and dp[queue[-1]] <= dp[i]:\n            queue.pop()\n        queue.append(i)\n    return dp[n - 1]", "trans_code": "public static int maxResult ( List < Integer > nums , int k ) throws Exception {\n  int n = nums . size ( ) ;\n  int [ ] dp = new int [ n ] ;\n  dp [ 0 ] = nums . get ( 0 ) ;\n  Deque < Integer > queue = new ArrayDeque < Integer > ( ) ;\n  queue . push ( 0 ) ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    while ( queue . isEmpty ( ) && queue . peek ( ) < i - k ) {\n      queue . pop ( ) ;\n    }\n    dp [ i ] = dp [ queue . pop ( ) ] + nums . get ( i ) ;\n    while ( queue . isEmpty ( ) && dp [ queue . pop ( ) ] <= dp [ i ] ) {\n      queue . pop ( ) ;\n    }\n    queue . push ( i ) ;\n  }\n  return dp [ n - 1 ] ;\n}\n", "reference_code": "    public static int maxResult(int[] nums, int k) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        dp[0] = nums[0];\n        Deque<Integer> queue = new ArrayDeque<>();\n        queue.offerLast(0);\n        for (int i = 1; i < n; i++) {\n            while (queue.peekFirst() < i - k) {\n                queue.pollFirst();\n            }\n            dp[i] = dp[queue.peekFirst()] + nums[i];\n            while (!queue.isEmpty() && dp[queue.peekLast()] <= dp[i]) {\n                queue.pollLast();\n            }\n            queue.offerLast(i);\n        }\n        return dp[n - 1];\n    }", "target_Lan": "java###maxResult_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxResult_Test {\n// TOFILL\npublic static void main(String[] args){\n        System.out.println(maxResult(new int[]{1,-1,-2,4,-7,3}, 2));\n        System.out.println(maxResult(new int[]{10,-5,-2,4,0,3}, 3));\n        System.out.println(maxResult(new int[]{-1,-2,-3,-4,-5,-6}, 4));\n        System.out.println(maxResult(new int[]{1,2,3,4,5,6}, 1));\n        System.out.println(maxResult(new int[]{100,90,80,70,60,50}, 6));\n    }\n}"}, {"source_Lan": "python###stoneGameVI.py", "source_code": "def stoneGameVI( aliceValues: List[int], bobValues: List[int]) -> int:\n    values = [[a+b, a, b] for a, b in zip(aliceValues, bobValues)]\n    values.sort(reverse=True)\n    aliceSum, bobSum = sum(value[1] for value in values[::2]), sum(value[2] for value in values[1::2])\n    if aliceSum > bobSum:\n        return 1\n    elif aliceSum == bobSum:\n        return 0\n    else:\n        return -1", "trans_code": "public static int stoneGameVI ( int [ ] aliceValues , int [ ] bobValues ) throws Exception {\n  ArrayList < Integer > values = new ArrayList < Integer > ( ) ;\n  for ( int a : aliceValues ) {\n    values . add ( new Integer ( a + b ) ) ;\n  }\n  Collections . sort ( values ) ;\n  int aliceSum = Integer . parseInt ( values . get ( 0 ) . toString ( ) ) , bobSum = Integer . parseInt ( values . get ( 1 ) . toString ( ) ) ;\n  if ( aliceSum > bobSum ) {\n    return 1 ;\n  }\n  else if ( aliceSum == bobSum ) {\n    return 0 ;\n  }\n  else {\n    return - 1 ;\n  }\n}\n", "reference_code": "    public static int stoneGameVI(int[] aliceValues, int[] bobValues) {\n        int n = aliceValues.length;\n        int[][] values = new int[n][3];\n        for (int i = 0; i < n; i++) {\n            values[i][0] = aliceValues[i] + bobValues[i];\n            values[i][1] = aliceValues[i];\n            values[i][2] = bobValues[i];\n        }\n        Arrays.sort(values, (a, b) -> b[0] - a[0]);\n        int aliceSum = 0, bobSum = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                aliceSum += values[i][1];\n            } else {\n                bobSum += values[i][2];\n            }\n        }\n        if (aliceSum > bobSum) {\n            return 1;\n        } else if (aliceSum == bobSum) {\n            return 0;\n        } else {\n            return -1;\n        }\n    }", "target_Lan": "java###stoneGameVI_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class stoneGameVI_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(stoneGameVI(new int[]{1,2,3}, new int[]{2,3,1}));\n    System.out.println(stoneGameVI(new int[]{1,3,2}, new int[]{2,1,3}));\n    System.out.println(stoneGameVI(new int[]{2,1,3}, new int[]{1,3,2}));\n    System.out.println(stoneGameVI(new int[]{0,0,0}, new int[]{0,0,0}));\n    System.out.println(stoneGameVI(new int[]{-1,-2,-3}, new int[]{-2,-3,-1}));\n}\n}"}, {"source_Lan": "python###maxNumberOfAlloys.py", "source_code": "def maxNumberOfAlloys( n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n    left, right, ans = 1, 2 * 10**8, 0\n    while left <= right:\n        mid = (left + right) // 2\n        valid = False\n        for i in range(k):\n            spend = 0\n            for j, (composition_j, stock_j, cost_j) in enumerate(zip(composition[i], stock, cost)):\n                spend += max(composition_j * mid - stock_j, 0) * cost_j\n            if spend <= budget:\n                valid = True\n                break\n        if valid:\n            ans = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return ans", "trans_code": "public static int maxNumberOfAlloys ( int n , int k , int budget , List < List < Integer >> composition , List < Integer > stock , List < Integer > cost ) throws Exception {\n  int left = 1 , right = 2 * 10 * 8 , ans = 0 ;\n  while ( left <= right ) {\n    int mid = ( left + right ) / 2 ;\n    boolean valid = false ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) {\n      int spend = 0 ;\n      for ( int j = 0 , composition_j = 0 , stock_j = 0 , cost_j = 0 ;\n      j < composition . size ( ) ;\n      j ++ ) {\n        spend += Math . max ( composition_j * mid - stock_j , 0 ) * cost_j ;\n      }\n      if ( spend <= budget ) {\n        valid = true ;\n        break ;\n      }\n    }\n    if ( valid ) {\n      ans = mid ;\n      left = mid + 1 ;\n    }\n    else {\n      right = mid - 1 ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {\n        int left = 1, right = 200000000, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            boolean valid = false;\n            for (int i = 0; i < k; ++i) {\n                long spend = 0;\n                for (int j = 0; j < n; ++j) {\n                    spend += Math.max((long) composition.get(i).get(j) * mid - stock.get(j), 0) * cost.get(j);\n                }\n                if (spend <= budget) {\n                    valid = true;\n                    break;\n                }\n            }\n            if (valid) {\n                ans = mid;\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###maxNumberOfAlloys_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class maxNumberOfAlloys_Test {\n// TOFILL\npublic static void main(String[] args) {\n        List<List<Integer>> composition1 = Arrays.asList(Arrays.asList(1,2), Arrays.asList(3,4));\n        List<Integer> stock1 = Arrays.asList(5,6);\n        List<Integer> cost1 = Arrays.asList(7,8);\n        System.out.println(maxNumberOfAlloys(2, 2, 100, composition1, stock1, cost1));\n        \n        List<List<Integer>> composition2 = new ArrayList<>();\n        List<Integer> stock2 = new ArrayList<>();\n        List<Integer> cost2 = new ArrayList<>();\n        System.out.println(maxNumberOfAlloys(0, 0, 0, composition2, stock2, cost2));\n        \n        List<List<Integer>> composition3 = Arrays.asList(Arrays.asList(1));\n        List<Integer> stock3 = Arrays.asList(0);\n        List<Integer> cost3 = Arrays.asList(100);\n        System.out.println(maxNumberOfAlloys(1, 1, 1000, composition3, stock3, cost3));\n        \n        List<List<Integer>> composition4 = Arrays.asList(Arrays.asList(1,2,3), Arrays.asList(4,5,6), Arrays.asList(7,8,9));\n        List<Integer> stock4 = Arrays.asList(10,11,12);\n        List<Integer> cost4 = Arrays.asList(13,14,15);\n        System.out.println(maxNumberOfAlloys(3, 3, 10000, composition4, stock4, cost4));\n        \n        List<List<Integer>> composition5 = Arrays.asList(Arrays.asList(1,2,3,4), Arrays.asList(5,6,7,8), Arrays.asList(9,10,11,12), Arrays.asList(13,14,15,16));\n        List<Integer> stock5 = Arrays.asList(17,18,19,20);\n        List<Integer> cost5 = Arrays.asList(21,22,23,24);\n        System.out.println(maxNumberOfAlloys(4, 4, 100000, composition5, stock5, cost5));\n    }\n}"}, {"source_Lan": "python###maximumSumOfHeights.py", "source_code": "def maximumSumOfHeights( maxHeights: List[int]) -> int:\n    n = len(maxHeights)\n    res = 0\n    for i in range(n):\n        pre, psum = maxHeights[i], maxHeights[i]\n        for j in range(i - 1, -1, -1):\n            pre = min(pre, maxHeights[j])\n            psum += pre\n        suf = maxHeights[i]\n        for j in range(i + 1, n):\n            suf = min(suf, maxHeights[j])\n            psum += suf\n        res = max(res, psum)\n    return res", "trans_code": "public static int maximumSumOfHeights ( int [ ] maxHeights ) throws Exception {\n  int n = maxHeights . length ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int pre = maxHeights [ i ] , psum = maxHeights [ i ] ;\n    for ( int j = i - 1 ;\n    j >= 0 ;\n    j -- ) {\n      pre = Math . min ( pre , maxHeights [ j ] ) ;\n      psum += pre ;\n    }\n    int suf = maxHeights [ i ] ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      suf = Math . min ( suf , maxHeights [ j ] ) ;\n      psum += suf ;\n    }\n    res = Math . max ( res , psum ) ;\n  }\n  return res ;\n}\n", "reference_code": "    public static long maximumSumOfHeights(List<Integer> maxHeights) {\n        int n = maxHeights.size();\n        long res = 0;\n        for (int i = 0; i < n; i++) {\n            int pre = maxHeights.get(i);\n            long sum = pre;\n            for (int j = i - 1; j >= 0; j--) {\n                pre = Math.min(pre, maxHeights.get(j));\n                sum += pre;\n            }\n            int suf = maxHeights.get(i);\n            for (int j = i + 1; j < n; j++) {\n                suf = Math.min(suf, maxHeights.get(j));\n                sum += suf;\n            }\n            res = Math.max(res, sum);\n        }\n        return res;\n    }", "target_Lan": "java###maximumSumOfHeights_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\npublic class maximumSumOfHeights_Test {\n// TOFILL\npublic static void main(String[] args) {\n        List<Integer> maxHeights1 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> maxHeights2 = Arrays.asList(5, 4, 3, 2, 1);\n        List<Integer> maxHeights3 = Arrays.asList(1, 1, 1, 1, 1);\n        List<Integer> maxHeights4 = Arrays.asList(0, 0, 0, 0, 0);\n        List<Integer> maxHeights5 = Arrays.asList(-1, -2, -3, -4, -5);\n\n        System.out.println(maximumSumOfHeights(maxHeights1));\n        System.out.println(maximumSumOfHeights(maxHeights2));\n        System.out.println(maximumSumOfHeights(maxHeights3));\n        System.out.println(maximumSumOfHeights(maxHeights4));\n        System.out.println(maximumSumOfHeights(maxHeights5));\n    }\n}"}, {"source_Lan": "python###alternatingSubarray.py", "source_code": "def alternatingSubarray( nums: List[int]) -> int:\n    res = -1\n    n = len(nums)\n    for firstIndex in range(n):\n        for i in range(firstIndex + 1, n):\n            length = i - firstIndex + 1\n            if nums[i] - nums[firstIndex] == (length - 1) % 2:\n                res = max(res, length)\n            else:\n                break\n    return res", "trans_code": "public static int alternatingSubarray ( int [ ] nums ) throws Exception {\n  int res = - 1 ;\n  int n = nums . length ;\n  for ( int firstIndex = 0 ;\n  firstIndex < n ;\n  firstIndex ++ ) {\n    for ( int i = firstIndex + 1 ;\n    i < n ;\n    i ++ ) {\n      int length = i - firstIndex + 1 ;\n      if ( nums [ i ] - nums [ firstIndex ] == ( length - 1 ) % 2 ) {\n        res = Math . max ( res , length ) ;\n      }\n      else {\n        break ;\n      }\n    }\n  }\n  return res ;\n}\n", "reference_code": "    public static int alternatingSubarray(int[] nums) {\n        int res = -1;\n        int n = nums.length;\n        for (int firstIndex = 0; firstIndex < n; firstIndex++) {\n            for (int i = firstIndex + 1; i < n; i++) {\n                int length = i - firstIndex + 1;\n                if (nums[i] - nums[firstIndex] == (length - 1) % 2) {\n                    res = Math.max(res, length);\n                } else {\n                    break;\n                }\n            }\n        }\n        return res;\n    }", "target_Lan": "java###alternatingSubarray_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class alternatingSubarray_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] nums1 = {1, 2, 3, 4, 5};\n        int[] nums2 = {5, 4, 3, 2, 1};\n        int[] nums3 = {1, 1, 1, 1, 1};\n        int[] nums4 = {2, 4, 6, 8, 10};\n        int[] nums5 = {1, 3, 5, 7, 9};\n        System.out.println(alternatingSubarray(nums1));\n        System.out.println(alternatingSubarray(nums2));\n        System.out.println(alternatingSubarray(nums3));\n        System.out.println(alternatingSubarray(nums4));\n        System.out.println(alternatingSubarray(nums5));\n    }\n}"}, {"source_Lan": "python###minimumTime.py", "source_code": "def minimumTime( nums1: List[int], nums2: List[int], x: int) -> int:\n    n = len(nums1)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for j, (b, a) in enumerate(sorted(zip(nums2, nums1)), 1):\n        for i in range(j, 0, -1):\n            dp[j][i] = max(dp[j - 1][i], dp[j - 1][i - 1] + i * b + a)\n    sa, sb = sum(nums1), sum(nums2)\n    for i in range(0, n + 1):\n        if sb * i + sa - dp[n][i] <= x:\n            return i\n    return -1", "trans_code": "public static int minimumTime ( List < Integer > nums1 , List < Integer > nums2 , int x ) throws Exception {\n  int n = nums1 . size ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ nums2 . size ( ) ] ;\n  for ( int j = 0 , a = 1 ;\n  j < n ;\n  j ++ ) {\n    for ( int i = j ;\n    i > 0 ;\n    i -- ) {\n      dp [ j ] [ i ] = Math . max ( dp [ j - 1 ] [ i ] , dp [ j - 1 ] [ i - 1 ] + i * b + a ) ;\n    }\n  }\n  int sa = sum ( nums1 ) , sb = sum ( nums2 ) ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    if ( sb * i + sa - dp [ n ] [ i ] <= x ) {\n      return i ;\n    }\n  }\n  return - 1 ;\n}\n", "reference_code": "    public static int minimumTime(List<Integer> nums1, List<Integer> nums2, int x) {\n        int n = nums1.size(), s1 = 0, s2 = 0;\n        int[][] dp = new int[n + 1][n + 1];\n        List<List<Integer>> nums = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int a = nums1.get(i), b = nums2.get(i);\n            nums.add(Arrays.asList(b, a));\n            s1 += a;\n            s2 += b;\n        }\n        Collections.sort(nums, (o1, o2) -> Integer.compare(o1.get(0), o2.get(0)));\n        for (int j = 1; j <= n; ++j) {\n            int b = nums.get(j - 1).get(0), a = nums.get(j - 1).get(1);\n            for (int i = j; i > 0; --i) {\n                dp[j][i] = Math.max(dp[j - 1][i], dp[j - 1][i - 1] + i * b + a);\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            if (s2 * i + s1 - dp[n][i] <= x) {\n                return i;\n            }\n        }\n        return -1;\n    }", "target_Lan": "java###minimumTime_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minimumTime_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumTime(Arrays.asList(3,2,1), Arrays.asList(0,0,0), 6));\n        System.out.println(minimumTime(Arrays.asList(5,1,2,3), Arrays.asList(2,0,1,3), 10));\n        System.out.println(minimumTime(Arrays.asList(2,1), Arrays.asList(1,0), 5));\n        System.out.println(minimumTime(Arrays.asList(10,9,8,7,6,5,4,3,2,1), Arrays.asList(0,1,2,3,4,5,6,7,8,9), 50));\n        System.out.println(minimumTime(Arrays.asList(1,2,3,4,5), Arrays.asList(5,4,3,2,1), 20));\n    }\n}"}, {"source_Lan": "python###minLength.py", "source_code": "def minLength( s: str) -> int:\n    stack = []\n    for c in s:\n        stack.append(c)\n        if len(stack) >= 2 and ((stack[-2] == 'A' and stack[-1] == 'B') or (stack[-2] == 'C' and stack[-1] == 'D')):\n            stack.pop()\n            stack.pop()\n    return len(stack)", "trans_code": "public static int minLength ( String s ) throws Exception {\n  Stack < Character > stack = new Stack < Character > ( ) ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    stack . push ( s . charAt ( i ) ) ;\n    if ( stack . size ( ) >= 2 && ( ( stack . peek ( ) == 'A' && stack . peek ( ) == 'B' ) || ( stack . peek ( ) == 'C' && stack . peek ( ) == 'D' ) ) ) {\n      stack . pop ( ) ;\n      stack . pop ( ) ;\n    }\n  }\n  return stack . size ( ) ;\n}\n", "reference_code": "    public static int minLength(String s) {\n        List<Character> stack = new ArrayList<Character>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            stack.add(c);\n            int m = stack.size();\n            if (m >= 2 &&\n                (stack.get(m - 2) == 'A' && stack.get(m - 1) == 'B' ||\n                stack.get(m - 2) == 'C' && stack.get(m - 1) == 'D')) {\n                stack.remove(m - 1);\n                stack.remove(m - 2);\n            }\n        }\n        return stack.size();\n    }", "target_Lan": "java###minLength_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minLength_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minLength(\"\"));\n    System.out.println(minLength(\"AB\"));\n    System.out.println(minLength(\"ABCD\"));\n    System.out.println(minLength(\"AABBCCDD\"));\n    System.out.println(minLength(\"ACBD\"));\n}\n}"}, {"source_Lan": "python###addMinimum.py", "source_code": "def addMinimum( word: str) -> int:\n    n = len(word)\n    d = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = d[i - 1] + 2\n        if i > 1 and word[i - 1] > word[i - 2]:\n            d[i] = d[i - 1] - 1\n    return d[n]", "trans_code": "public static int addMinimum ( String word ) throws Exception {\n  int n = word . length ( ) ;\n  int [ ] d = new int [ n + 1 ] ;\n  d [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    d [ i ] = d [ i - 1 ] + 2 ;\n    if ( i > 1 && word . charAt ( i - 1 ) > word . charAt ( i - 2 ) ) {\n      d [ i ] = d [ i - 1 ] - 1 ;\n    }\n  }\n  return d [ n ] ;\n}\n", "reference_code": "    public static int addMinimum(String word) {\n        int n = word.length();\n        int[] d = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            d[i] = d[i - 1] + 2;\n            if (i > 1 && word.charAt(i - 1) > word.charAt(i - 2)) {\n                d[i] = d[i - 1] - 1;\n            }\n        }\n        return d[n];\n    }", "target_Lan": "java###addMinimum_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class addMinimum_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(addMinimum(\"\"));\n        System.out.println(addMinimum(\"a\"));\n        System.out.println(addMinimum(\"z\"));\n        System.out.println(addMinimum(\"abc\"));\n        System.out.println(addMinimum(\"xyz\"));\n        System.out.println(addMinimum(\"hello\"));\n        System.out.println(addMinimum(\"java\"));\n        System.out.println(addMinimum(\"programming\"));\n        System.out.println(addMinimum(\"algorithm\"));\n        System.out.println(addMinimum(\"computer\"));\n    }\n}"}, {"source_Lan": "python###trafficLights.py", "source_code": "def trafficLights( n: int, q: int, queries: List[List[int]]) -> str:\n    sweap = [0] * (n + 1)\n    for l, r in queries:\n        sweap[l - 1] += 1\n        sweap[r] -= 1\n    curr = 0\n    ans = \"\"\n    for i in range(n):\n        curr = (curr + sweap[i]) % 3\n        if curr == 0:\n            ans += 'R'\n        elif curr == 1:\n            ans += 'Y'\n        else:\n            ans += 'G'\n    return ans", "trans_code": "public static String trafficLights ( int n , int q , List < List < Integer >> queries ) throws Exception {\n  int [ ] sweap = new int [ n + 1 ] ;\n  for ( int l = 0 , r = 0 ;\n  l < n ;\n  l ++ , r ++ ) {\n    sweap [ l - 1 ] ++ ;\n    sweap [ r ] -- ;\n  }\n  int curr = 0 ;\n  String ans = \"\" ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    curr = ( curr + sweap [ i ] ) % 3 ;\n    if ( curr == 0 ) ans += 'R' ;\n    else if ( curr == 1 ) ans += 'Y' ;\n    else ans += 'G' ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static String trafficLights(int n, int q, int[][] queries) {\n        int[] darr = new int[n + 1];\n        for (int[] Q : queries) {\n            int a = Q[0];\n            int b = Q[1];\n            darr[a - 1]++;\n            darr[b]--;\n        }\n        Arrays.parallelPrefix(darr, (A, B) -> A + B);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int X = darr[i] % 3;\n            if (X == 0)\n                sb.append(\"R\");\n            else if (X == 1)\n                sb.append(\"Y\");\n            else if (X == 2)\n                sb.append(\"G\");\n        }\n        return sb.toString();\n    }", "target_Lan": "java###trafficLights_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class trafficLights_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(trafficLights(0, 0, new int[][]{}));\n    System.out.println(trafficLights(1, 1, new int[][]{{1,1}}));\n    System.out.println(trafficLights(2, 2, new int[][]{{1,2},{2,2}}));\n    System.out.println(trafficLights(3, 3, new int[][]{{1,3},{2,3},{3,3}}));\n    System.out.println(trafficLights(5, 5, new int[][]{{1,5},{2,5},{3,5},{4,5},{5,5}}));\n}\n}"}, {"source_Lan": "python###isMagicArray.py", "source_code": "def isMagicArray( n : int, arr : List[int]) -> bool:\n    for i in range(n-1):\n        if (arr[i]&1)==(arr[i+1]&1):\n            return 0\n    return 1", "trans_code": "public static boolean isMagicArray ( int n , int [ ] arr ) throws Exception {\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( ( arr [ i ] & 1 ) == ( arr [ i + 1 ] & 1 ) ) {\n      return 0 ;\n    }\n  }\n  return 1 ;\n}\n", "reference_code": "    public static boolean isMagicArray(int n, int[] arr) {\n        \n        for (int i = 1; i < n; i++) {\n            \n            if ((arr[i] % 2 == 0 && arr[i - 1] % 2 == 0) || (arr[i] % 2 != 0 && arr[i - 1] % 2 != 0)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }", "target_Lan": "java###isMagicArray_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class isMagicArray_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(isMagicArray(0, new int[]{}));\n    System.out.println(isMagicArray(1, new int[]{1}));\n    System.out.println(isMagicArray(2, new int[]{1, 2}));\n    System.out.println(isMagicArray(3, new int[]{1, 2, 3}));\n    System.out.println(isMagicArray(4, new int[]{1, 2, 3, 4}));\n}\n}"}, {"source_Lan": "python###minimumDis.py", "source_code": "def minimumDis( N: int, X: List[int]) -> int:\n    X.sort()\n    return X[(N - 1) // 2]", "trans_code": "public static int minimumDis ( int N , int [ ] X ) throws Exception {\n  Arrays . sort ( X ) ;\n  return X [ ( N - 1 ) / 2 ] ;\n}\n", "reference_code": "    public static int minimumDis(int N, int[] X) {\n        Arrays.sort(X);\n        return X[(N - 1) / 2];\n    }", "target_Lan": "java###minimumDis_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumDis_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[] X1 = {1};\n    System.out.println(minimumDis(1, X1));\n    int[] X2 = {1, 2};\n    System.out.println(minimumDis(2, X2));\n    int[] X3 = {1, 2, 3};\n    System.out.println(minimumDis(3, X3));\n    int[] X4 = {1, 2, 3, 4};\n    System.out.println(minimumDis(4, X4));\n}\n}"}, {"source_Lan": "python###maximumStrongIndices.py", "source_code": "def maximumStrongIndices( n: int, x: int, y: int, a: List[int],\n                         b: List[int]) -> int:\n    j = 0\n    ans = 0\n    for i in range(n):\n        while j < n and b[j] < a[i] - x:\n            j += 1\n        if j < n and b[j] <= a[i] + y:\n            ans += 1\n            j += 1\n    return ans", "trans_code": "public static int maximumStrongIndices ( int n , int x , int y , List < Integer > a , List < Integer > b ) throws Exception {\n  int j = 0 ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( j < n && b . get ( j ) < a . get ( i ) - x ) {\n      j ++ ;\n    }\n    if ( j < n && b . get ( j ) <= a . get ( i ) + y ) {\n      ans ++ ;\n      j ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maximumStrongIndices(int n, int x, int y, int[] a, int[] b) {\n        int j = 0, ans = 0;\n        for (int i = 0; i < n; i++) {\n            while (j < n && b[j] < a[i] - x) {\n                j++;\n            }\n            if (j < n && b[j] <= a[i] + y) {\n                ans++;\n                j++;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###maximumStrongIndices_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maximumStrongIndices_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maximumStrongIndices(5, 2, 3, new int[]{1, 2, 3, 4, 5}, new int[]{3, 4, 5, 6, 7}));\n    System.out.println(maximumStrongIndices(5, 1, 1, new int[]{1, 2, 3, 4, 5}, new int[]{2, 3, 4, 5, 6}));\n    System.out.println(maximumStrongIndices(5, 0, 0, new int[]{1, 2, 3, 4, 5}, new int[]{1, 2, 3, 4, 5}));\n    System.out.println(maximumStrongIndices(5, -1, -1, new int[]{1, 2, 3, 4, 5}, new int[]{0, 1, 2, 3, 4}));\n    System.out.println(maximumStrongIndices(5, -2, -2, new int[]{1, 2, 3, 4, 5}, new int[]{-1, 0, 1, 2, 3}));\n}\n}"}, {"source_Lan": "python###minElements.py", "source_code": "def minElements( n : int, m : int, arr1 : List[int], arr2 : List[int]) -> int:\n    s=sum(arr1)\n    arr2.sort(reverse=True)\n    ind=0\n    curr=0\n    for el in arr2:\n        curr+=el\n        if curr>=s:\n            return ind+1\n        ind+=1\n    return -1", "trans_code": "public static int minElements ( int n , int m , List < Integer > arr1 , List < Integer > arr2 ) throws Exception {\n  int s = sum ( arr1 ) ;\n  Collections . sort ( arr2 ) ;\n  int ind = 0 ;\n  int curr = 0 ;\n  for ( int el : arr2 ) {\n    curr += el ;\n    if ( curr >= s ) {\n      return ind + 1 ;\n    }\n    ind ++ ;\n  }\n  return - 1 ;\n}\n", "reference_code": "    public static int minElements(int n, int m, int[] arr1, int[] arr2) {\n        long sum = 0;\n        \n        for (int num : arr1) {\n            sum += num;\n        }\n        Arrays.sort(arr2); \n        long currentSum = 0;\n        int count = 0;\n        \n        for (int i = m - 1; i >= 0; i--) {\n            currentSum += arr2[i];\n            count++;\n            \n            if (currentSum >= sum) {\n                break;\n            }\n        }\n        \n        return currentSum >= sum ? count : -1;\n    }", "target_Lan": "java###minElements_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minElements_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minElements(5, 5, new int[]{1, 2, 3, 4, 5}, new int[]{5, 4, 3, 2, 1}));\n    System.out.println(minElements(5, 5, new int[]{1, 1, 1, 1, 1}, new int[]{5, 5, 5, 5, 5}));\n    System.out.println(minElements(5, 5, new int[]{1, 2, 3, 4, 5}, new int[]{1, 2, 3, 4, 5}));\n    System.out.println(minElements(5, 5, new int[]{10, 20, 30, 40, 50}, new int[]{5, 10, 15, 20, 25}));\n    System.out.println(minElements(5, 5, new int[]{1, 2, 3, 4, 5}, new int[]{10, 10, 10, 10, 10}));\n}\n}"}, {"source_Lan": "python###maxScoreSubseq.py", "source_code": "def maxScoreSubseq( n : int, arr : List[int]) -> int:\n    d=defaultdict(int)\n    v=max(arr)\n    for i in range(n):\n        d[arr[i]-i]+=max(0,arr[i])\n    c=(1 if 0 in arr else 0)\n    for el in d:\n        if d[el]>0:\n            v=max(v,d[el])\n        elif d[el]==0 and c:\n            v=max(0,v)\n    return v", "trans_code": "public static int maxScoreSubseq ( int n , int [ ] arr ) throws Exception {\n  TreeMap < Integer , Integer > map = new TreeMap < Integer , Integer > ( ) ;\n  int v = Math . max ( arr ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    map . put ( arr [ i ] - i , Math . max ( 0 , arr [ i ] ) ) ;\n  }\n  boolean c = ( 1 == arr . length ) ? 0 : 1 ;\n  for ( Integer el : map . keySet ( ) ) {\n    if ( map . get ( el ) > 0 ) {\n      v = Math . max ( v , map . get ( el ) ) ;\n    }\n    else if ( map . get ( el ) == 0 && c ) {\n      v = Math . max ( 0 , v ) ;\n    }\n  }\n  return v ;\n}\n", "reference_code": "    public static int maxScoreSubseq(int n, int[] arr) {\n        \n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        int ma = Integer.MIN_VALUE;\n        \n        for(int i = 0; i < n; i++) {\n            \n            if(arr[i] >= 0) \n                map.put(arr[i] - i, map.getOrDefault(arr[i] - i, 0) + arr[i]);\n            \n            ma = Math.max(ma, arr[i]);\n        }\n        \n        int ele = Integer.MIN_VALUE;\n        \n        for(int j : map.values()) \n            ele = Math.max(ele, j);\n        \n        return Math.max(ele, ma);\n    }", "target_Lan": "java###maxScoreSubseq_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maxScoreSubseq_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maxScoreSubseq(1, new int[]{1}));\n    System.out.println(maxScoreSubseq(2, new int[]{1, 2}));\n    System.out.println(maxScoreSubseq(3, new int[]{1, 2, 3}));\n    System.out.println(maxScoreSubseq(4, new int[]{1, 2, 3, 4}));\n}\n}"}, {"source_Lan": "python###areaOfMaxDiagonal.py", "source_code": "def areaOfMaxDiagonal( dimensions: List[List[int]]) -> int:\n    return max((x * x + y * y, x * y) for x, y in dimensions)[1]", "trans_code": "public static int areaOfMaxDiagonal ( List < List < Integer >> dimensions ) throws Exception {\n  return Math . max ( ( x * x + y * y ) , x * y ) . intValue ( ) ;\n}\n", "reference_code": "    public static int areaOfMaxDiagonal(int[][] dimensions) {\n        int ans = 0, maxL = 0;\n        for (int[] d : dimensions) {\n            int x = d[0], y = d[1];\n            int l = x * x + y * y;\n            if (l > maxL || (l == maxL && x * y > ans)) {\n                maxL = l;\n                ans = x * y;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###areaOfMaxDiagonal_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class areaOfMaxDiagonal_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][] dimensions1 = {{1,2},{3,4},{5,6}};\n    int[][] dimensions2 = {{10,20},{30,40},{50,60}};\n    int[][] dimensions3 = {{0,0},{0,0},{0,0}};\n    int[][] dimensions4 = {{1,1},{1,1},{1,1}};\n    int[][] dimensions5 = {{100,200},{300,400},{500,600}};\n\n    System.out.println(areaOfMaxDiagonal(dimensions1));\n    System.out.println(areaOfMaxDiagonal(dimensions2));\n    System.out.println(areaOfMaxDiagonal(dimensions3));\n    System.out.println(areaOfMaxDiagonal(dimensions4));\n    System.out.println(areaOfMaxDiagonal(dimensions5));\n}\n}"}, {"source_Lan": "python###maxFrequencyElements.py", "source_code": "def maxFrequencyElements( nums: List[int]) -> int:\n    ans = max_cnt = 0\n    cnt = Counter()\n    for x in nums:\n        cnt[x] += 1\n        c = cnt[x]\n        if c > max_cnt:\n            max_cnt = ans = c\n        elif c == max_cnt:\n            ans += c\n    return ans", "trans_code": "public static int maxFrequencyElements ( int [ ] nums ) throws Exception {\n  int ans = maxCnt = 0 ;\n  Counter cnt = new Counter ( ) ;\n  for ( int x : nums ) {\n    cnt . put ( x , 1 ) ;\n    int c = cnt . get ( x ) ;\n    if ( c > maxCnt ) {\n      maxCnt = ans = c ;\n    }\n    else if ( c == maxCnt ) {\n      ans += c ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maxFrequencyElements(int[] nums) {\n        int ans = 0, maxCnt = 0;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        for (int x : nums) {\n            int c = cnt.merge(x, 1, Integer::sum);\n            if (c > maxCnt) {\n                maxCnt = ans = c;\n            } else if (c == maxCnt) {\n                ans += c;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###maxFrequencyElements_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maxFrequencyElements_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maxFrequencyElements(new int[]{1, 2, 3, 4, 5}));\n    System.out.println(maxFrequencyElements(new int[]{1, 1, 1, 1, 1}));\n    System.out.println(maxFrequencyElements(new int[]{-1, -1, -1, -1, -1}));\n    System.out.println(maxFrequencyElements(new int[]{10, 20, 30, 40, 50}));\n    System.out.println(maxFrequencyElements(new int[]{1, 2, 2, 3, 3}));\n}\n}"}, {"source_Lan": "python###minOrAfterOperations.py", "source_code": "def minOrAfterOperations( nums: List[int], k: int) -> int:\n    ans = mask = 0\n    for b in range(max(nums).bit_length() - 1, -1, -1):\n        mask |= 1 << b\n        cnt = 0  \n        and_res = -1  \n        for x in nums:\n            and_res &= x & mask\n            if and_res:\n                cnt += 1  \n            else:\n                and_res = -1  \n        if cnt > k:\n            ans |= 1 << b  \n            mask ^= 1 << b  \n    return ans", "trans_code": "public static int minOrAfterOperations ( int [ ] nums , int k ) throws Exception {\n  int ans = mask = 0 ;\n  for ( int b = Math . max ( nums ) . bitLength ( ) - 1 ;\n  b >= 0 ;\n  b -- ) {\n    mask |= 1 << b ;\n    int cnt = 0 ;\n    int andRes = - 1 ;\n    for ( int x : nums ) {\n      andRes &= x & mask ;\n      if ( andRes > 0 ) {\n        cnt ++ ;\n      }\n      else {\n        andRes = - 1 ;\n      }\n    }\n    if ( cnt > k ) {\n      ans |= 1 << b ;\n      mask ^= 1 << b ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; \n            int and = -1; \n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; \n                } else {\n                    and = -1; \n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; \n                mask ^= 1 << b; \n            }\n        }\n        return ans;\n    }", "target_Lan": "java###minOrAfterOperations_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minOrAfterOperations_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minOrAfterOperations(new int[]{1, 2, 3, 4, 5}, 2));\n    System.out.println(minOrAfterOperations(new int[]{10, 20, 30, 40, 50}, 3));\n    System.out.println(minOrAfterOperations(new int[]{100, 200, 300, 400, 500}, 4));\n    System.out.println(minOrAfterOperations(new int[]{1000, 2000, 3000, 4000, 5000}, 5));\n    System.out.println(minOrAfterOperations(new int[]{10000, 20000, 30000, 40000, 50000}, 6));\n}\n}"}, {"source_Lan": "python###resultArray.py", "source_code": "def resultArray( nums: List[int]) -> List[int]:\n    a = nums[:1]\n    b = nums[1:2]\n    for x in nums[2:]:\n        if a[-1] > b[-1]:\n            a.append(x)\n        else:\n            b.append(x)\n    return a + b", "trans_code": "public static List < Integer > resultArray ( List < Integer > nums ) throws Exception {\n  List < Integer > a = nums . subList ( 0 , 1 ) ;\n  List < Integer > b = nums . subList ( 1 , 2 ) ;\n  for ( int x : nums ) {\n    if ( a . get ( a . size ( ) - 1 ) > b . get ( b . size ( ) - 1 ) ) {\n      a . add ( x ) ;\n    }\n    else {\n      b . add ( x ) ;\n    }\n  }\n  return a + b ;\n}\n", "reference_code": "    public static int[] resultArray(int[] nums) {\n        int n = nums.length;\n        List<Integer> a = new ArrayList<>();\n        List<Integer> b = new ArrayList<>();\n        a.add(nums[0]);\n        b.add(nums[1]);\n        for (int i = 2; i < n; i++) {\n            if (a.get(a.size() - 1) > b.get(b.size() - 1)) {\n                a.add(nums[i]);\n            } else {\n                b.add(nums[i]);\n            }\n        }\n        a.addAll(b);\n        for (int i = 0; i < n; i++) {\n            nums[i] = a.get(i);\n        }\n        return nums;\n    }", "target_Lan": "java###resultArray_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class resultArray_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(Arrays.toString(resultArray(new int[]{1, 2, 3, 4, 5})));\n        System.out.println(Arrays.toString(resultArray(new int[]{5, 4, 3, 2, 1})));\n        System.out.println(Arrays.toString(resultArray(new int[]{1, 1, 1, 1, 1})));\n        System.out.println(Arrays.toString(resultArray(new int[]{-1, -2, -3, -4, -5})));\n        System.out.println(Arrays.toString(resultArray(new int[]{0, 0, 0, 0, 0})));\n    }\n}"}, {"source_Lan": "python###countSubmatrices.py", "source_code": "def countSubmatrices( grid: List[List[int]], k: int) -> int:\n    ans = 0\n    m, n = len(grid), len(grid[0])\n    s = [[0] * (n + 1) for _ in range(m + 1)]\n    for i, row in enumerate(grid):\n        for j, x in enumerate(row):\n            s[i + 1][j + 1] = s[i + 1][j] + s[i][j + 1] - s[i][j] + x\n            if s[i + 1][j + 1] <= k:\n                ans += 1\n    return ans", "trans_code": "public static int countSubmatrices ( List < List < Integer >> grid , int k ) throws Exception {\n  int ans = 0 ;\n  int m = grid . size ( ) , n = grid . get ( 0 ) . size ( ) ;\n  int [ ] [ ] s = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 , row = grid . get ( 0 ) ;\n  i < row . size ( ) ;\n  i ++ ) {\n    for ( int j = 0 , x = row . get ( i ) . size ( ) ;\n    j < x ;\n    j ++ ) {\n      s [ i + 1 ] [ j + 1 ] = s [ i + 1 ] [ j ] + s [ i ] [ j + 1 ] - s [ i ] [ j ] + x ;\n      if ( s [ i + 1 ] [ j + 1 ] <= k ) ans ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int countSubmatrices(int[][] grid, int k) {\n        int ans = 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][] sum = new int[m + 1][n + 1];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1] = sum[i + 1][j] + sum[i][j + 1] - sum[i][j] + grid[i][j];\n                if (sum[i + 1][j + 1] <= k) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###countSubmatrices_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class countSubmatrices_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][] grid1 = {{1,2,3},{4,5,6},{7,8,9}};\n    int[][] grid2 = {{1,2,3},{4,5,6},{7,8,9}};\n    int[][] grid3 = {{1,2,3},{4,5,6},{7,8,9}};\n    int[][] grid4 = {{1,2,3},{4,5,6},{7,8,9}};\n    int[][] grid5 = {{1,2,3},{4,5,6},{7,8,9}};\n    System.out.println(countSubmatrices(grid1, 10));\n    System.out.println(countSubmatrices(grid2, 1));\n    System.out.println(countSubmatrices(grid3, 0));\n    System.out.println(countSubmatrices(grid4, -1));\n    System.out.println(countSubmatrices(grid5, 100));\n}\n}"}, {"source_Lan": "python###minimumDeletions.py", "source_code": "def minimumDeletions( word: str, k: int) -> int:\n    cnt = sorted(Counter(word).values())\n    max_save = max(sum(min(c, base + k) for c in cnt[i:])\n                   for i, base in enumerate(cnt))\n    return len(word) - max_save", "trans_code": "public static int minimumDeletions ( String word , int k ) throws Exception {\n  List < Integer > cnt = new ArrayList < Integer > ( new Counter ( word ) . values ( ) ) ;\n  int maxSave = Math . max ( Math . min ( cnt . get ( i ) , base + k ) , cnt . get ( i ) ) ;\n  return word . length ( ) - maxSave ;\n}\n", "reference_code": "    public static int minimumDeletions(String word, int k) {\n        int[] cnt = new int[26];\n        for (char c : word.toCharArray()) {\n            cnt[c - 'a']++;\n        }\n        Arrays.sort(cnt);\n        int maxSave = 0;\n        for (int i = 0; i < 26; i++) {\n            int sum = 0;\n            for (int j = i; j < 26; j++) {\n                sum += Math.min(cnt[j], cnt[i] + k); \n            }\n            maxSave = Math.max(maxSave, sum);\n        }\n        return word.length() - maxSave;\n    }", "target_Lan": "java###minimumDeletions_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumDeletions_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(minimumDeletions(\"aabbcc\", 2));\n    System.out.println(minimumDeletions(\"aaabbbccc\", 3));\n    System.out.println(minimumDeletions(\"abcabcabcabc\", 3));\n    System.out.println(minimumDeletions(\"abcd\", 1));\n    System.out.println(minimumDeletions(\"abcdefghijklmnopqrstuvwxyz\", 1));\n}\n}"}, {"source_Lan": "python###maxScore.py", "source_code": "def maxScore( grid: List[List[int]]) -> int:\n    ans = -inf\n    m, n = len(grid), len(grid[0])\n    f = [[inf] * (n + 1) for _ in range(m + 1)]\n    for i, row in enumerate(grid):\n        for j, x in enumerate(row):\n            mn = min(f[i + 1][j], f[i][j + 1])\n            ans = max(ans, x - mn)\n            f[i + 1][j + 1] = min(mn, x)\n    return ans", "trans_code": "public static int maxScore ( List < List < Integer >> grid ) throws Exception {\n  int ans = - inf ;\n  int m = grid . size ( ) , n = grid . get ( 0 ) . size ( ) ;\n  int [ ] [ ] f = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 , row = grid . get ( 0 ) ;\n  i < m ;\n  i ++ ) {\n    for ( int j = 0 , x = row [ i ] . size ( ) ;\n    j < n ;\n    j ++ ) {\n      int mn = Math . min ( f [ i + 1 ] [ j ] , f [ i ] [ j + 1 ] ) ;\n      ans = Math . max ( ans , x - mn ) ;\n      f [ i + 1 ] [ j + 1 ] = Math . min ( mn , x ) ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maxScore(List<List<Integer>> grid) {\n        int ans = Integer.MIN_VALUE;\n        int m = grid.size(), n = grid.get(0).size();\n        int[][] f = new int[m + 1][n + 1];\n        Arrays.fill(f[0], Integer.MAX_VALUE);\n        for (int i = 0; i < m; i++) {\n            f[i + 1][0] = Integer.MAX_VALUE;\n            List<Integer> row = grid.get(i);\n            for (int j = 0; j < n; j++) {\n                int mn = Math.min(f[i + 1][j], f[i][j + 1]);\n                int x = row.get(j);\n                ans = Math.max(ans, x - mn);\n                f[i + 1][j + 1] = Math.min(mn, x);\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###maxScore_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class maxScore_Test {\n// TOFILL\npublic static void main(String[] args) {\n        List<List<Integer>> grid1 = Arrays.asList(Arrays.asList(1,2,3), Arrays.asList(4,5,6), Arrays.asList(7,8,9));\n        System.out.println(maxScore(grid1));\n\n        List<List<Integer>> grid2 = Arrays.asList(Arrays.asList(10,20,30), Arrays.asList(40,50,60), Arrays.asList(70,80,90));\n        System.out.println(maxScore(grid2));\n\n        List<List<Integer>> grid3 = Arrays.asList(Arrays.asList(100,200,300), Arrays.asList(400,500,600), Arrays.asList(700,800,900));\n        System.out.println(maxScore(grid3));\n\n        List<List<Integer>> grid4 = Arrays.asList(Arrays.asList(1,1,1), Arrays.asList(1,1,1), Arrays.asList(1,1,1));\n        System.out.println(maxScore(grid4));\n\n        List<List<Integer>> grid5 = Arrays.asList(Arrays.asList(9,9,9), Arrays.asList(9,9,9), Arrays.asList(9,9,9));\n        System.out.println(maxScore(grid5));\n    }\n}"}, {"source_Lan": "python###numberOfChild.py", "source_code": "def numberOfChild( n: int, k: int) -> int:\n    k, t = divmod(k, n - 1)\n    return n - t - 1 if k % 2 else t", "trans_code": "public static int numberOfChild ( int n , int k ) throws Exception {\n  k = k / 2 ;\n  int t = k % 2 ;\n  return n - t - 1 == k % 2 ? t : n ;\n}\n", "reference_code": "    public static int numberOfChild(int n, int k) {\n        int ans=0;\n        for(int neg=-1;k!=0;k--){\n            if(ans==0||ans==n-1){neg*=-1;}\n            ans+=neg;\n        }\n        return ans;\n    }", "target_Lan": "java###numberOfChild_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class numberOfChild_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(numberOfChild(10, 5));\n        System.out.println(numberOfChild(100, 10));\n        System.out.println(numberOfChild(50, 0));\n        System.out.println(numberOfChild(20, 15));\n        System.out.println(numberOfChild(15, 10));\n    }\n}"}, {"source_Lan": "python###minimumArea.py", "source_code": "def minimumArea( grid: List[List[int]]) -> int:\n    left, right = len(grid[0]), 0\n    top, bottom = len(grid), 0\n    for i, row in enumerate(grid):\n        for j, x in enumerate(row):\n            if x:\n                left = min(left, j)\n                right = max(right, j)\n                top = min(top, i)\n                bottom = i\n    return (right - left + 1) * (bottom - top + 1)", "trans_code": "public static int minimumArea ( int [ ] [ ] grid ) throws Exception {\n  int left = grid [ 0 ] . length , right = 0 ;\n  int top = grid . length , bottom = 0 ;\n  for ( int i = 0 , row = grid . length ;\n  i < grid . length ;\n  i ++ ) {\n    for ( int j = 0 , x = grid [ i ] . length ;\n    j < grid [ i ] . length ;\n    j ++ ) {\n      if ( grid [ i ] [ j ] > 0 ) {\n        left = Math . min ( left , grid [ i ] [ j ] ) ;\n        right = Math . max ( right , grid [ i ] [ j ] ) ;\n        top = Math . min ( top , grid [ i ] [ j ] ) ;\n        bottom = i ;\n      }\n    }\n  }\n  return ( right - left + 1 ) * ( bottom - top + 1 ) ;\n}\n", "reference_code": "    public static int minimumArea(int[][] grid) {\n        int left = grid[0].length;\n        int right = 0;\n        int top = grid.length;\n        int bottom = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    left = Math.min(left, j);\n                    right = Math.max(right, j);\n                    top = Math.min(top, i);\n                    bottom = i;\n                }\n            }\n        }\n        return (right - left + 1) * (bottom - top + 1);\n    }", "target_Lan": "java###minimumArea_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumArea_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] grid1 = {{1,0,0},{0,0,0},{0,0,0}};\n        int[][] grid2 = {{0,0,0},{0,0,0},{0,0,1}};\n        int[][] grid3 = {{1,1,1},{1,1,1},{1,1,1}};\n        int[][] grid4 = {{0,0,0},{0,1,0},{0,0,0}};\n        int[][] grid5 = {{0,0,0,0},{0,0,0,0},{0,0,0,1}};\n\n        System.out.println(minimumArea(grid1));\n        System.out.println(minimumArea(grid2));\n        System.out.println(minimumArea(grid3));\n        System.out.println(minimumArea(grid4));\n        System.out.println(minimumArea(grid5));\n    }\n}"}, {"source_Lan": "python###maximumLength.py", "source_code": "def maximumLength( nums: List[int], k: int) -> int:\n    f = [[0] * k for _ in range(k)]\n    for x in nums:\n        x %= k\n        for y, fxy in enumerate(f[x]):\n            f[y][x] = fxy + 1\n    return max(map(max, f))", "trans_code": "public static int maximumLength ( int [ ] nums , int k ) throws Exception {\n  int [ ] [ ] f = new int [ k ] [ k ] ;\n  for ( int x = 0 ;\n  x < nums . length ;\n  x ++ ) {\n    x %= k ;\n    for ( int y = 0 , fxy = f [ x ] . length ;\n    y < f [ x ] . length ;\n    y ++ , fxy ++ ) {\n      f [ y ] [ x ] = fxy + 1 ;\n    }\n  }\n  return Math . max ( Arrays . copyOf ( f , f . length ) ) ;\n}\n", "reference_code": "    public static int maximumLength(int[] nums, int k) {\n        int ans = 0;\n        int[][] f = new int[k][k];\n        for (int x : nums) {\n            x %= k;\n            for (int y = 0; y < k; y++) {\n                f[y][x] = f[x][y] + 1;\n                ans = Math.max(ans, f[y][x]);\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###maximumLength_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maximumLength_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maximumLength(new int[]{1,2,3,4,5}, 2));\n    System.out.println(maximumLength(new int[]{1,1,1,1,1}, 1));\n    System.out.println(maximumLength(new int[]{1,2,3,4,5}, 10));\n    System.out.println(maximumLength(new int[]{10,20,30,40,50}, 10));\n}\n}"}, {"source_Lan": "python###minimumArrayLength.py", "source_code": "def minimumArrayLength( nums: List[int]) -> int:\n    m = min(nums)\n    for x in nums:\n        if x % m:\n            return 1\n    return (nums.count(m) + 1) // 2", "trans_code": "public static int minimumArrayLength ( List < Integer > nums ) throws Exception {\n  int m = Math . min ( nums . size ( ) ) ;\n  for ( int x : nums ) {\n    if ( x % m > 0 ) return 1 ;\n  }\n  return ( nums . size ( ) + 1 ) / 2 ;\n}\n", "reference_code": "    public static int minimumArrayLength(int[] nums) {\n        int m = Integer.MAX_VALUE;\n        for (int x : nums) {\n            m = Math.min(m, x);\n        }\n        for (int x : nums) {\n            if (x % m > 0) {\n                return 1;\n            }\n        }\n        int cnt = 0;\n        for (int x : nums) {\n            if (x == m) {\n                cnt++;\n            }\n        }\n        return (cnt + 1) / 2;\n    }", "target_Lan": "java###minimumArrayLength_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumArrayLength_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumArrayLength(new int[]{1, 2, 3, 4, 5}));\n        System.out.println(minimumArrayLength(new int[]{1, 1, 1, 1, 1}));\n        System.out.println(minimumArrayLength(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));\n        System.out.println(minimumArrayLength(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}));\n        System.out.println(minimumArrayLength(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}));\n    }\n}"}, {"source_Lan": "python###minRectanglesToCoverPoints.py", "source_code": "def minRectanglesToCoverPoints( points: List[List[int]], w: int) -> int:\n    points.sort(key=lambda p: p[0])\n    ans = 0\n    x2 = -1\n    for x, _ in points:\n        if x > x2:\n            ans += 1\n            x2 = x + w\n    return ans", "trans_code": "public static int minRectanglesToCoverPoints ( List < List < Integer >> points , int w ) throws Exception {\n  Collections . sort ( points , new Comparator < List < Integer >> ( ) {\n    @ Override public int compare ( List < List < Integer >> o1 , List < List < Integer >> o2 ) {\n      int ans = 0 ;\n      int x2 = - 1 ;\n      for ( List < Integer > x : o1 ) {\n        if ( x . get ( 0 ) > x2 ) {\n          ans ++ ;\n          x2 = x . get ( 0 ) + w ;\n        }\n      }\n      return ans ;\n    }\n  }\n  ) ;\n  return ans ;\n}\n", "reference_code": "    public static int minRectanglesToCoverPoints(int[][] points, int w) {\n        Arrays.sort(points, (p, q) -> p[0] - q[0]);\n        int ans = 0;\n        int x2 = -1;\n        for (int[] p : points) {\n            if (p[0] > x2) {\n                ans++;\n                x2 = p[0] + w;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###minRectanglesToCoverPoints_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minRectanglesToCoverPoints_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][] points1 = {{0,0},{1,1},{2,2}};\n    int[][] points2 = {{-1,-1},{-2,-2},{-3,-3}};\n    System.out.println(minRectanglesToCoverPoints(points1, 1));\n    System.out.println(minRectanglesToCoverPoints(points1, 2));\n    System.out.println(minRectanglesToCoverPoints(points1, 0));\n    System.out.println(minRectanglesToCoverPoints(points2, 1));\n    System.out.println(minRectanglesToCoverPoints(points2, 2));\n}\n}"}, {"source_Lan": "python###minimumDistance.py", "source_code": "def minimumDistance( points: List[List[int]]) -> int:\n    sx = SortedList(p[0] - p[1] for p in points)\n    sy = SortedList(p[0] + p[1] for p in points)\n    res = float('inf')\n    for p in points:\n        sx.remove(p[0] - p[1])\n        sy.remove(p[0] + p[1])\n        res = min(res, max(sx[-1] - sx[0], sy[-1] - sy[0]))\n        sx.add(p[0] - p[1])\n        sy.add(p[0] + p[1])\n    return res", "trans_code": "public static int minimumDistance ( List < List < Integer >> points ) throws Exception {\n  SortedList sx = new SortedList ( points . get ( 0 ) . intValue ( ) - points . get ( 1 ) . intValue ( ) ) ;\n  SortedList sy = new SortedList ( points . get ( 0 ) . intValue ( ) + points . get ( 1 ) . intValue ( ) ) ;\n  int res = Integer . MAX_VALUE ;\n  for ( List < Integer > p : points ) {\n    sx . remove ( p . get ( 0 ) . intValue ( ) - p . get ( 1 ) . intValue ( ) ) ;\n    sy . remove ( p . get ( 0 ) . intValue ( ) + p . get ( 1 ) . intValue ( ) ) ;\n    res = Math . min ( res , Math . max ( sx . get ( sx . size ( ) - 1 ) . intValue ( ) - sx . get ( 0 ) . intValue ( ) , sy . get ( sy . size ( ) - 1 ) . intValue ( ) - sy . get ( 0 ) . intValue ( ) ) ) ;\n    sx . add ( p . get ( 0 ) . intValue ( ) - p . get ( 1 ) . intValue ( ) ) ;\n    sy . add ( p . get ( 0 ) . intValue ( ) + p . get ( 1 ) . intValue ( ) ) ;\n  }\n  return res ;\n}\n", "reference_code": "    public static int minimumDistance(int[][] points) {\n        TreeMap<Integer, Integer> sx = new TreeMap<Integer, Integer>();\n        TreeMap<Integer, Integer> sy = new TreeMap<Integer, Integer>();\n        for (int[] p : points) {\n            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);\n            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);\n        }\n        int res = Integer.MAX_VALUE;\n        for (int[] p : points) {\n            sx.put(p[0] - p[1], sx.get(p[0] - p[1]) - 1);\n            if (sx.get(p[0] - p[1]) == 0) {\n                sx.remove(p[0] - p[1]);\n            }\n            sy.put(p[0] + p[1], sy.get(p[0] + p[1]) - 1);\n            if (sy.get(p[0] + p[1]) == 0) {\n                sy.remove(p[0] + p[1]);\n            }\n            res = Math.min(res, Math.max(sx.lastKey() - sx.firstKey(), sy.lastKey() - sy.firstKey()));\n            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);\n            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);\n        }\n        return res;\n    }", "target_Lan": "java###minimumDistance_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minimumDistance_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][] points1 = {{0,0},{1,1},{2,2}};\n    int[][] points2 = {{0,0},{1,1},{1,1}};\n    int[][] points3 = {{0,0},{1,1},{1,2}};\n    int[][] points4 = {{0,0},{1,1},{2,3}};\n    int[][] points5 = {{0,0},{1,1},{3,2}};\n\n    System.out.println(minimumDistance(points1));\n    System.out.println(minimumDistance(points2));\n    System.out.println(minimumDistance(points3));\n    System.out.println(minimumDistance(points4));\n    System.out.println(minimumDistance(points5));\n}\n}"}, {"source_Lan": "python###countAlternatingSubarrays.py", "source_code": "def countAlternatingSubarrays( nums: List[int]) -> int:\n    res = cur = 0\n    pre = -1\n    for a in nums:\n        if pre != a:\n            cur += 1\n        else:\n            cur = 1\n        pre = a\n        res += cur\n    return res", "trans_code": "public static int countAlternatingSubarrays ( int [ ] nums ) throws Exception {\n  int res = cur = 0 ;\n  int pre = - 1 ;\n  for ( int a : nums ) {\n    if ( pre != a ) {\n      cur ++ ;\n    }\n    else {\n      cur = 1 ;\n    }\n    pre = a ;\n    res += cur ;\n  }\n  return res ;\n}\n", "reference_code": "    public static long countAlternatingSubarrays(int[] nums) {\n        long res = 0, cur = 0;\n        int pre = -1;\n        for (int a : nums) {\n            cur = (pre != a) ? cur + 1 : 1;\n            pre = a;\n            res += cur;\n        }\n        return res;\n    }", "target_Lan": "java###countAlternatingSubarrays_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class countAlternatingSubarrays_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(countAlternatingSubarrays(new int[]{1,2,3,4,5}));\n    System.out.println(countAlternatingSubarrays(new int[]{1,1,1,1,1}));\n    System.out.println(countAlternatingSubarrays(new int[]{1,2,1,2,1}));\n    System.out.println(countAlternatingSubarrays(new int[]{1,3,5,7,9}));\n    System.out.println(countAlternatingSubarrays(new int[]{2,4,6,8,10}));\n}\n}"}, {"source_Lan": "python###modifiedMatrix.py", "source_code": "def modifiedMatrix( matrix: List[List[int]]) -> List[List[int]]:\n    n, m = len(matrix), len(matrix[0])\n    for j in range(m):\n        zd = -1\n        for i in range(n):\n            zd = max(zd, matrix[i][j])\n        for i in range(n):\n            if matrix[i][j] == -1:\n                matrix[i][j] = zd\n    return matrix", "trans_code": "public static List < List < Integer >> modifiedMatrix ( List < List < Integer >> matrix ) throws Exception {\n  int n = matrix . size ( ) , m = matrix . get ( 0 ) . size ( ) ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) {\n    int zd = - 1 ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      zd = Math . max ( zd , matrix . get ( i ) . get ( j ) ) ;\n    }\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      if ( matrix . get ( i ) . get ( j ) == - 1 ) {\n        matrix . set ( i , j , zd ) ;\n      }\n    }\n  }\n  return matrix ;\n}\n", "reference_code": "    public static int[][] modifiedMatrix(int[][] matrix) {\n        int n = matrix.length; \n        int m = matrix[0].length; \n        for (int j = 0; j < m; j++) {\n            int zd = -1; \n            for (int i = 0; i < n; i++) {\n                zd = Math.max(zd, matrix[i][j]); \n            }\n            for (int i = 0; i < n; i++) {\n                if (matrix[i][j] == -1) {\n                    matrix[i][j] = zd; \n                }\n            }\n        }\n        return matrix; \n    }", "target_Lan": "java###modifiedMatrix_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class modifiedMatrix_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] matrix1 = {{1,2,3},{4,5,6},{7,8,9}};\n        int[][] matrix2 = {{0,0,0},{0,0,0},{0,0,0}};\n        int[][] matrix3 = {{-1,-2,-3},{-4,-5,-6},{-7,-8,-9}};\n        int[][] matrix4 = {{10,20,30},{40,50,60},{70,80,90}};\n        int[][] matrix5 = {{100,200,300},{400,500,600},{700,800,900}};\n\n        System.out.println(Arrays.deepToString(modifiedMatrix(matrix1)));\n        System.out.println(Arrays.deepToString(modifiedMatrix(matrix2)));\n        System.out.println(Arrays.deepToString(modifiedMatrix(matrix3)));\n        System.out.println(Arrays.deepToString(modifiedMatrix(matrix4)));\n        System.out.println(Arrays.deepToString(modifiedMatrix(matrix5)));\n    }\n}"}, {"source_Lan": "python###paintWalls.py", "source_code": "def paintWalls( cost: List[int], time: List[int]) -> int:\n    n = len(cost)\n    f = [inf] * (n * 2 + 1)\n    f[n] = 0\n    for (cost_i, time_i) in zip(cost, time):\n        g = [inf] * (n * 2 + 1)\n        for j in range(n * 2 + 1):\n            \n            g[min(j + time_i, n * 2)] = min(g[min(j + time_i, n * 2)], f[j] + cost_i)\n            \n            if j > 0:\n                g[j - 1] = min(g[j - 1], f[j])\n        f = g\n    return min(f[n:])", "trans_code": "public static int paintWalls ( int [ ] cost , int [ ] time ) throws Exception {\n  int n = cost . length ;\n  int [ ] f = new int [ n * 2 + 1 ] ;\n  f [ n ] = 0 ;\n  for ( int ( int costI ) : cost ) {\n    int [ ] g = new int [ n * 2 + 1 ] ;\n    for ( int j = 0 ;\n    j < n * 2 + 1 ;\n    j ++ ) {\n      g [ Math . min ( j + costI , n * 2 ) ] = Math . min ( g [ Math . min ( j + costI , n * 2 ) ] , f [ j ] + costI ) ;\n      if ( j > 0 ) g [ j - 1 ] = Math . min ( g [ j - 1 ] , f [ j ] ) ;\n    }\n    f = g ;\n  }\n  return Math . min ( f [ n ] , f [ n ] ) ;\n}\n", "reference_code": "    public static int paintWalls(int[] cost, int[] time) {\n        int n = cost.length;\n        int[] f = new int[n * 2 + 1];\n        Arrays.fill(f, Integer.MAX_VALUE / 2);\n        f[n] = 0;\n        for (int i = 0; i < n; ++i) {\n            int[] g = new int[n * 2 + 1];\n            Arrays.fill(g, Integer.MAX_VALUE / 2);\n            for (int j = 0; j <= n * 2; ++j) {\n                \n                g[Math.min(j + time[i], n * 2)] = Math.min(g[Math.min(j + time[i], n * 2)], f[j] + cost[i]);\n                \n                if (j > 0) {\n                    g[j - 1] = Math.min(g[j - 1], f[j]);\n                }\n            }\n            f = g;\n        }\n        int ans = f[n];\n        for (int i = n + 1; i <= n * 2; i++) {\n            ans = Math.min(ans, f[i]);\n        }\n        return ans;\n    }", "target_Lan": "java###paintWalls_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class paintWalls_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(paintWalls(new int[]{1,2,3}, new int[]{1,2,3}));\n        System.out.println(paintWalls(new int[]{10,20,30}, new int[]{2,3,4}));\n        System.out.println(paintWalls(new int[]{100,200,300}, new int[]{3,4,5}));\n        System.out.println(paintWalls(new int[]{1000,2000,3000}, new int[]{4,5,6}));\n        System.out.println(paintWalls(new int[]{10000,20000,30000}, new int[]{5,6,7}));\n    }\n}"}, {"source_Lan": "python###theMaximumAchievableX.py", "source_code": "def theMaximumAchievableX( num: int, t: int) -> int:\n    return num + 2 * t", "trans_code": "public static int theMaximumAchievableX ( int num , int t ) throws Exception {\n  return num + 2 * t ;\n}\n", "reference_code": "    public static int theMaximumAchievableX(int num, int t) {\n        return num + 2 * t;\n    }", "target_Lan": "java###theMaximumAchievableX_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class theMaximumAchievableX_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(theMaximumAchievableX(0, 0));\n    System.out.println(theMaximumAchievableX(1000000, 1000000));\n    System.out.println(theMaximumAchievableX(-1000000, -1000000));\n    System.out.println(theMaximumAchievableX(1000000, -1000000));\n    System.out.println(theMaximumAchievableX(-1000000, 1000000));\n}\n}"}, {"source_Lan": "python###distinctIntegers.py", "source_code": "def distinctIntegers( n: int) -> int:\n    nums = [0] * (n + 1)\n    nums[n] = 1\n    for _ in range(0, n):\n        for x in range(1, n + 1):\n            if nums[x] == 0:\n                continue\n            for i in range(1, n + 1):\n                if x % i == 1:\n                    nums[i] = 1\n    return sum(nums)", "trans_code": "public static int distinctIntegers ( int n ) throws Exception {\n  int [ ] nums = new int [ n + 1 ] ;\n  nums [ n ] = 1 ;\n  for ( ;\n  ;\n  ) {\n    for ( int x = 1 ;\n    x <= n ;\n    x ++ ) {\n      if ( nums [ x ] == 0 ) continue ;\n      for ( int i = 1 ;\n      i <= n ;\n      i ++ ) {\n        if ( x % i == 1 ) nums [ i ] = 1 ;\n      }\n    }\n  }\n  return Arrays . hashCode ( nums ) ;\n}\n", "reference_code": "    public static int distinctIntegers(int n) {\n        int[] nums = new int[n + 1];\n        nums[n] = 1;\n        for (int k = 0; k < n; k++) {\n            for (int x = 1; x <= n; x++) {\n                if (nums[x] == 0) {\n                    continue;\n                }\n                for (int i = 1; i <= n; i++) {\n                    if (x % i == 1) {\n                        nums[i] = 1;\n                    }\n                }\n            }\n        }\n        return Arrays.stream(nums).sum();\n    }", "target_Lan": "java###distinctIntegers_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class distinctIntegers_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(distinctIntegers(0));\n    System.out.println(distinctIntegers(1));\n    System.out.println(distinctIntegers(2));\n    System.out.println(distinctIntegers(10));\n    System.out.println(distinctIntegers(100));\n}\n}"}, {"source_Lan": "python###maxArrayValue.py", "source_code": "def maxArrayValue( nums: List[int]) -> int:\n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] <= nums[i + 1]:\n            nums[i] += nums[i + 1]\n    return nums[0]", "trans_code": "public static int maxArrayValue ( int [ ] nums ) throws Exception {\n  for ( int i = nums . length - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( nums [ i ] <= nums [ i + 1 ] ) {\n      nums [ i ] += nums [ i + 1 ] ;\n    }\n  }\n  return nums [ 0 ] ;\n}\n", "reference_code": "    public static long maxArrayValue(int[] nums) {\n        long sum = nums[nums.length - 1];\n        for (int i = nums.length - 2; i >= 0; i--) {\n            sum = nums[i] <= sum ? nums[i] + sum : nums[i];\n        }\n        return sum;\n    }", "target_Lan": "java###maxArrayValue_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maxArrayValue_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maxArrayValue(new int[]{1, 2, 3, 4, 5}));\n    System.out.println(maxArrayValue(new int[]{-1, -2, -3, -4, -5}));\n    System.out.println(maxArrayValue(new int[]{0, 0, 0, 0, 0}));\n    System.out.println(maxArrayValue(new int[]{1000000, -1000000, 1000000, -1000000}));\n    System.out.println(maxArrayValue(new int[]{2, -1, 2}));\n}\n}"}, {"source_Lan": "python###frequency.py", "source_code": "def frequency( n ,a):\n    mp=dict()\n    for i in range(n):\n        if a[i] in mp:\n            mp[a[i]]+=1\n        else:\n            mp[a[i]]=1\n    ans=[]\n    for i in range(n):\n        ans.append(mp[a[i]])\n        mp[a[i]]-=1\n    return ans", "trans_code": "public static int [ ] frequency ( int n , int [ ] a ) {\n  Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] < mp . size ( ) ) mp . put ( a [ i ] , ++ mp . size ( ) ) ;\n    else mp . put ( a [ i ] , 1 ) ;\n  }\n  int [ ] ans = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    ans [ i ] = mp . get ( a [ i ] ) ;\n    mp . remove ( a [ i ] ) ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int[] frequency(int n,int a[]) {\n        HashMap<Integer,Integer> hm=new HashMap<>();\n        int ans[]=new int[n];\n        for(int i:a){\n            hm.put(i,hm.getOrDefault(i,0)+1);\n        }\n        for(int i=0;i<n;i++){\n            ans[i]=hm.get(a[i]);\n            hm.put(a[i],hm.get(a[i])-1);\n        }\n        return ans;\n    }", "target_Lan": "java###frequency_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class frequency_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[] freq = frequency(0, new int[]{});\n    for(int i=0; i<freq.length; i++) {\n        System.out.print(freq[i] + \" \");\n    }\n    System.out.println();\n\n    freq = frequency(1, new int[]{1});\n    for(int i=0; i<freq.length; i++) {\n        System.out.print(freq[i] + \" \");\n    }\n    System.out.println();\n\n    freq = frequency(2, new int[]{1, 2});\n    for(int i=0; i<freq.length; i++) {\n        System.out.print(freq[i] + \" \");\n    }\n    System.out.println();\n\n    freq = frequency(3, new int[]{1, 1, 2});\n    for(int i=0; i<freq.length; i++) {\n        System.out.print(freq[i] + \" \");\n    }\n    System.out.println();\n\n    freq = frequency(4, new int[]{1, 2, 2, 3});\n    for(int i=0; i<freq.length; i++) {\n        System.out.print(freq[i] + \" \");\n    }\n    System.out.println();\n}\n}"}, {"source_Lan": "python###bobHappiness.py", "source_code": "def bobHappiness( n: int, k: int, q: int, students: List[List[int]],\n                 queries: List[List[int]]) -> int:\n    \n    unique_x = sorted(set(a[0] for a in students))\n    unique_y = sorted(set(a[1] for a in students))\n    \n    map1 = {val: idx + 1 for idx, val in enumerate(unique_x)}\n    map2 = {val: idx + 1 for idx, val in enumerate(unique_y)}\n    \n    pre = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        x = map1[students[i][0]]\n        y = map2[students[i][1]]\n        pre[x][y] += 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            pre[i][j] += pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1]\n    sum_happiness = 0\n    for X, Y in queries:\n        X -= 1\n        Y -= 1\n        c = map1[students[Y][0]]\n        d = map2[students[Y][1]]\n        a = map1[students[X][0]]\n        b = map2[students[X][1]]\n        \n        if a < c: c, a = a, c\n        if b < d: d, b = b, d\n        \n        people = pre[a][b] - pre[c - 1][b] - pre[a][d - 1] + pre[c - 1][d -\n                                                                        1]\n        \n        if people - 2 <= k:\n            sum_happiness += 1\n    return sum_happiness", "trans_code": "public static int bobHappiness ( int n , int k , int q , List < List < Integer >> students , List < List < Integer >> queries ) throws Exception {\n  List < Integer > uniqueX = Collections . synchronizedList ( new HashSet < Integer > ( students ) ) ;\n  List < Integer > uniqueY = Collections . synchronizedList ( new HashSet < Integer > ( students ) ) ;\n  Map < Integer , Integer > map1 = new HashMap < Integer , Integer > ( ) ;\n  map1 . put ( val , idx + 1 ) ;\n  Map < Integer , Integer > map2 = new HashMap < Integer , Integer > ( ) ;\n  map2 . put ( val , idx + 1 ) ;\n  int [ ] [ ] pre = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = map1 . get ( students [ i ] . get ( 0 ) ) ;\n    int y = map2 . get ( students [ i ] . get ( 1 ) ) ;\n    pre [ x ] [ y ] ++ ;\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      pre [ i ] [ j ] += pre [ i - 1 ] [ j ] + pre [ i ] [ j - 1 ] - pre [ i - 1 ] [ j - 1 ] ;\n    }\n  }\n  int sumHappiness = 0 ;\n  for ( int X = 0 , Y = 0 ;\n  X < n ;\n  X ++ , Y ++ ) {\n    X -- ;\n    Y -- ;\n    int c = map1 . get ( students [ Y ] . get ( 0 ) ) ;\n    int d = map2 . get ( students [ Y ] . get ( 1 ) ) ;\n    int a = map1 . get ( students [ X ] . get ( 0 ) ) ;\n    int b = map2 . get ( students [ X ] . get ( 1 ) ) ;\n    if ( a < c ) {\n      c = a ;\n    }\n    if ( b < d ) {\n      d = b ;\n    }\n    int people = pre [ a ] [ b ] - pre [ c - 1 ] [ b ] - pre [ a ] [ d - 1 ] + pre [ c - 1 ] [ d - 1 ] ;\n    if ( people - 2 <= k ) {\n      sumHappiness ++ ;\n    }\n  }\n  return sumHappiness ;\n}\n", "reference_code": "    public static int bobHappiness(int n, int k, int q, int[][] students,\n                                   int[][] queries) {\n        TreeSet<Integer> set1 = new TreeSet<>();\n        TreeSet<Integer> set2 = new TreeSet<>();\n        for (int[] a : students) {\n            set1.add(a[0]);\n            set2.add(a[1]);\n        }\n        Map<Integer, Integer> map1 = new HashMap<>();\n        Map<Integer, Integer> map2 = new HashMap<>();\n        int idx1 = 1, idx2 = 1;\n        while (!set1.isEmpty()) {\n            map1.put(set1.pollFirst(), idx1++);\n            map2.put(set2.pollFirst(), idx2++);\n        }\n        int[][] pre = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            pre[map1.get(students[i][0]) - 1][map2.get(students[i][1]) - 1]++;\n        }\n        int[][] Arr = new int[n + 1][n + 1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (pre[i - 1][j - 1] == 0) {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] - Arr[i - 1][j - 1];\n                } else {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] + 1 - Arr[i - 1][j - 1];\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < q; i++) {\n            int X = queries[i][0], Y = queries[i][1];\n            X--;\n            Y--;\n            int a = map1.get(students[Y][0]);\n            int b = map2.get(students[Y][1]);\n            int c = map1.get(students[X][0]), d = map2.get(students[X][1]);\n            int temp = a;\n            a = c;\n            c = temp;\n            int people = Arr[c][d] + Arr[a - 1][b - 1] - Arr[a - 1][d] - Arr[c][b - 1];\n            people -= 2;\n            if (people > k) {\n                \n            } else {\n                sum++;\n            }\n        }\n        return sum;\n    }", "target_Lan": "java###bobHappiness_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class bobHappiness_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] students1 = {{1,2},{2,3},{3,4},{4,5},{5,6}};\n        int[][] queries1 = {{2,3},{3,4},{4,5}};\n        System.out.println(bobHappiness(5, 2, 3, students1, queries1));\n\n        int[][] students2 = {{1,2},{2,3},{3,4},{4,5},{5,6},{6,7},{7,8},{8,9},{9,10},{10,11}};\n        int[][] queries2 = {{2,3},{3,4},{4,5},{5,6},{6,7}};\n        System.out.println(bobHappiness(10, 3, 5, students2, queries2));\n\n        int[][] students3 = {};\n        int[][] queries3 = {};\n        System.out.println(bobHappiness(0, 0, 0, students3, queries3));\n\n        int[][] students4 = {{1,1}};\n        int[][] queries4 = {{1,1}};\n        System.out.println(bobHappiness(1, 1, 1, students4, queries4));\n\n        int[][] students5 = {{1,1},{2,2}};\n        int[][] queries5 = {{1,2},{2,1}};\n        System.out.println(bobHappiness(2, 1, 2, students5, queries5));\n    }\n}"}, {"source_Lan": "python###BeautifulBits.py", "source_code": "def BeautifulBits( n : int, arr : List[int], q : int, queries : List[List[int]]) -> List[int]:\n    pref = [[0] * 32 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(32):\n            pref[i][j] = pref[i - 1][j] + ((arr[i - 1] >> j) & 1)\n    ans = [0] * q\n    for i in range(q):\n        for j in range(32):\n            if pref[queries[i][1]][j] - pref[queries[i][0] - 1][j] != 0:\n                ans[i] += 1 << j\n    return ans", "trans_code": "public static int [ ] BeautifulBits ( int n , int [ ] arr , int q , int [ ] [ ] queries ) throws Exception {\n  int [ ] [ ] pref = new int [ n + 1 ] [ 32 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    pref [ i ] [ i ] = 0 ;\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < 32 ;\n    j ++ ) {\n      pref [ i ] [ j ] = pref [ i - 1 ] [ j ] + ( ( arr [ i - 1 ] >> j ) & 1 ) ;\n    }\n  }\n  int [ ] ans = new int [ q ] ;\n  for ( int i = 0 ;\n  i < q ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < 32 ;\n    j ++ ) {\n      if ( pref [ queries [ i ] [ 1 ] ] [ j ] - pref [ queries [ i ] [ 0 ] - 1 ] [ j ] != 0 ) {\n        ans [ i ] += 1 << j ;\n      }\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static ArrayList<Integer> BeautifulBits(int n, int[] arr, int q,\n                                                   int[][] queries) {\n        long[][] pref = new long[n + 1][32];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 32; j++) {\n                pref[i][j] = pref[i - 1][j] + ((arr[i - 1] >> j) & 1);\n            }\n        }\n        ArrayList<Integer> ans = new ArrayList<>(Collections.nCopies(q, 0));\n        for (int i = 0; i < q; i++) {\n            for (int j = 0; j < 32; j++) {\n                if (pref[queries[i][1]][j] - pref[queries[i][0] - 1][j] != 0) {\n                    ans.set(i, ans.get(i) + (1 << j));\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###BeautifulBits_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class BeautifulBits_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int n1 = 5;\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int q1 = 2;\n        int[][] queries1 = {{1, 3}, {2, 4}};\n        System.out.println(BeautifulBits(n1, arr1, q1, queries1));\n\n        int n2 = 10;\n        int[] arr2 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};\n        int q2 = 3;\n        int[][] queries2 = {{1, 5}, {6, 10}, {3, 7}};\n        System.out.println(BeautifulBits(n2, arr2, q2, queries2));\n\n        int n3 = 0;\n        int[] arr3 = {};\n        int q3 = 0;\n        int[][] queries3 = {};\n        System.out.println(BeautifulBits(n3, arr3, q3, queries3));\n\n        int n4 = 1;\n        int[] arr4 = {1};\n        int q4 = 1;\n        int[][] queries4 = {{1, 1}};\n        System.out.println(BeautifulBits(n4, arr4, q4, queries4));\n\n        int n5 = 5;\n        int[] arr5 = {3, 3, 3, 3, 3};\n        int q5 = 1;\n        int[][] queries5 = {{1, 5}};\n        System.out.println(BeautifulBits(n5, arr5, q5, queries5));\n    }\n}"}, {"source_Lan": "python###validStrings.py", "source_code": "def validStrings( n : int, k : int, arr : List[str]) -> int:\n    ans=0\n    for el in arr:\n        C=0\n        for e in el:\n            if e in \"aeiou\":\n                C+=1\n        if C==k:\n            ans+=1\n    return ans", "trans_code": "public static int validStrings ( int n , int k , String [ ] arr ) throws Exception {\n  int ans = 0 ;\n  for ( String el : arr ) {\n    int C = 0 ;\n    for ( int i = 0 ;\n    i < el . length ( ) ;\n    i ++ ) {\n      if ( el . contains ( \"aeiou\" ) ) C ++ ;\n    }\n    if ( C == k ) ans ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int validStrings(int n, int k, String[] arr) \n    {\n        int totalValid = 0;\n        for (String str : arr) {\n            int vowelCount = 0;\n            for (char ch : str.toCharArray()) {\n                if (\"aeiou\".indexOf(ch) >= 0) {\n                    vowelCount++;\n                }\n            }\n            if (vowelCount == k) {\n                totalValid++;\n            }\n        }\n        return totalValid;\n    }", "target_Lan": "java###validStrings_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class validStrings_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(validStrings(0, 0, new String[]{}));\n    System.out.println(validStrings(1, 1, new String[]{\"a\"}));\n    System.out.println(validStrings(2, 2, new String[]{\"ae\", \"io\"}));\n    System.out.println(validStrings(3, 3, new String[]{\"aei\", \"ou\", \"u\"}));\n    System.out.println(validStrings(4, 4, new String[]{\"aeio\", \"u\", \"u\", \"u\"}));\n}\n}"}, {"source_Lan": "python###maximumBattalions.py", "source_code": "def maximumBattalions( N : int, names : List[str]) -> int:\n    d={}\n    for i in range(N):\n        if names[i] not in d:\n            d[names[i]]=[]\n        d[names[i]].append(i)\n    seen=set()\n    ans=0\n    for i in range(N):\n        if names[i] not in seen:\n            seen.add(names[i])\n        if d[names[i]][-1]==i:\n            seen.remove(names[i])\n        if len(seen)==0:\n            ans+=1\n    return ans", "trans_code": "public static int maximumBattalions ( int N , List < String > names ) throws Exception {\n  Map < String , List < Integer >> map = new HashMap < String , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    if ( names . get ( i ) != null ) map . put ( names . get ( i ) , new ArrayList < Integer > ( ) ) ;\n    map . get ( names . get ( i ) ) . add ( i ) ;\n  }\n  Set < String > seen = new HashSet < String > ( ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    if ( names . get ( i ) != null ) seen . add ( names . get ( i ) ) ;\n    if ( map . get ( names . get ( i ) ) . get ( - 1 ) == i ) seen . remove ( names . get ( i ) ) ;\n    if ( seen . size ( ) == 0 ) ans ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maximumBattalions(int N, String[] names) \n    {\n        Map<String, Integer> nameIndexMap = new HashMap<>();\n        for (int i = 0; i < N; i++) \n        {\n            nameIndexMap.put(names[i], i);\n        }\n        int answer = 0;\n        int maxi = 0;\n        int ind = 0;\n        for (String name : names) \n        {\n            maxi = Math.max(maxi, nameIndexMap.get(name));\n            if (maxi == ind) \n            {\n                answer++;\n            }\n            ind++;\n        }\n        return answer;\n    }", "target_Lan": "java###maximumBattalions_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maximumBattalions_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maximumBattalions(0, new String[]{}));\n    System.out.println(maximumBattalions(1, new String[]{\"John\"}));\n    System.out.println(maximumBattalions(2, new String[]{\"John\", \"John\"}));\n    System.out.println(maximumBattalions(3, new String[]{\"John\", \"John\", \"Doe\"}));\n    System.out.println(maximumBattalions(4, new String[]{\"John\", \"Doe\", \"John\", \"Doe\"}));\n}\n}"}, {"source_Lan": "python###maximumSetSize.py", "source_code": "def maximumSetSize( nums1: List[int], nums2: List[int]) -> int:\n    set1 = set(nums1)\n    set2 = set(nums2)\n    common = len(set1 & set2)\n    n1 = len(set1)\n    n2 = len(set2)\n    ans = n1 + n2 - common\n    m = len(nums1) // 2\n    if n1 > m:\n        mn = min(n1 - m, common)\n        ans -= n1 - mn - m\n        common -= mn\n    if n2 > m:\n        n2 -= min(n2 - m, common)\n        ans -= n2 - m\n    return ans", "trans_code": "public static int maximumSetSize ( List < Integer > nums1 , List < Integer > nums2 ) throws Exception {\n  Set < Integer > set1 = new HashSet < Integer > ( nums1 ) ;\n  Set < Integer > set2 = new HashSet < Integer > ( nums2 ) ;\n  int common = set1 . size ( ) & set2 . size ( ) ;\n  int n1 = set1 . size ( ) ;\n  int n2 = set2 . size ( ) ;\n  int ans = n1 + n2 - common ;\n  int m = nums1 . size ( ) / 2 ;\n  if ( n1 > m ) {\n    int mn = Math . min ( n1 - m , common ) ;\n    ans -= n1 - mn - m ;\n    common -= mn ;\n  }\n  if ( n2 > m ) {\n    n2 -= Math . min ( n2 - m , common ) ;\n    ans -= n2 - m ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int maximumSetSize(int[] nums1, int[] nums2) {\n        Set<Integer> set1 = new HashSet<>();\n        for (int x : nums1) {\n            set1.add(x);\n        }\n        Set<Integer> set2 = new HashSet<>();\n        for (int x : nums2) {\n            set2.add(x);\n        }\n        int common = 0;\n        for (int x : set1) {\n            if (set2.contains(x)) {\n                common++;\n            }\n        }\n        int n1 = set1.size();\n        int n2 = set2.size();\n        int ans = n1 + n2 - common;\n        int m = nums1.length / 2;\n        if (n1 > m) {\n            int mn = Math.min(n1 - m, common);\n            ans -= n1 - mn - m;\n            common -= mn;\n        }\n        if (n2 > m) {\n            n2 -= Math.min(n2 - m, common);\n            ans -= n2 - m;\n        }\n        return ans;\n    }", "target_Lan": "java###maximumSetSize_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class maximumSetSize_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(maximumSetSize(new int[]{1,2,3,4,5}, new int[]{3,4,5,6,7}));\n    System.out.println(maximumSetSize(new int[]{1,1,1,1,1}, new int[]{2,2,2,2,2}));\n    System.out.println(maximumSetSize(new int[]{1,2,3,4,5}, new int[]{1,2,3,4,5}));\n    System.out.println(maximumSetSize(new int[]{1,2,3,4,5}, new int[]{6,7,8,9,10}));\n    System.out.println(maximumSetSize(new int[]{1,2,3,4,5}, new int[]{4,5,6,7,8}));\n}\n}"}, {"source_Lan": "python###numberOfSubarrays.py", "source_code": "def numberOfSubarrays( nums: List[int]) -> int:\n    ans = len(nums)\n    st = [[inf, 0]]  \n    for x in nums:\n        while x > st[-1][0]:\n            st.pop()\n        if x == st[-1][0]:\n            ans += st[-1][1]\n            st[-1][1] += 1\n        else:\n            st.append([x, 1])\n    return ans", "trans_code": "public static int numberOfSubarrays ( int [ ] nums ) throws Exception {\n  int ans = nums . length ;\n  Stack < Integer > st = new Stack < Integer > ( ) ;\n  st . push ( new Integer ( inf ) ) ;\n  for ( int x : nums ) {\n    while ( x > st . peek ( ) . intValue ( ) ) {\n      st . pop ( ) ;\n    }\n    if ( x == st . peek ( ) . intValue ( ) ) {\n      ans += st . peek ( ) . intValue ( ) ;\n      st . push ( new Integer ( x ) ) ;\n    }\n    else {\n      st . push ( new Integer ( x ) ) ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static long numberOfSubarrays(int[] nums) {\n        long ans = nums.length;\n        Deque<int[]> st = new ArrayDeque<>();\n        st.push(new int[]{Integer.MAX_VALUE, 0}); \n        for (int x : nums) {\n            while (x > st.peek()[0]) {\n                st.pop();\n            }\n            if (x == st.peek()[0]) {\n                ans += st.peek()[1]++;\n            } else {\n                st.push(new int[]{x, 1});\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###numberOfSubarrays_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class numberOfSubarrays_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(numberOfSubarrays(new int[]{1, 2, 3, 4, 5}));\n    System.out.println(numberOfSubarrays(new int[]{5, 4, 3, 2, 1}));\n    System.out.println(numberOfSubarrays(new int[]{1, 1, 1, 1, 1}));\n    System.out.println(numberOfSubarrays(new int[]{10, 20, 30, 40, 50}));\n    System.out.println(numberOfSubarrays(new int[]{-1, -2, -3, -4, -5}));\n}\n}"}, {"source_Lan": "python###findAnswer.py", "source_code": "def findAnswer( n : int, A : List[int]) -> List[int]:\n    pref=[A[0]]\n    for i in range(1,n):\n        pref.append(pref[-1]+A[i])\n    s=[]\n    res=[0]*(n+1)\n    for i in range(n):\n        if pref[i]>0:\n            res[0]=i+1\n            break\n    for i in range(n-1,-1,-1):\n        while s and pref[s[-1]]<=pref[i]:\n            s.pop()\n        if not s:\n            res[i+1]=0\n        elif i<n-1:\n            res[i+1]=s[-1]-i\n        s.append(i)\n    res.pop()\n    return res", "trans_code": "public static int [ ] findAnswer ( int n , int [ ] A ) throws Exception {\n  List < Integer > pref = new ArrayList < Integer > ( ) ;\n  pref . add ( A [ 0 ] ) ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    pref . add ( pref . get ( pref . size ( ) - 1 ) + A [ i ] ) ;\n  }\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  int [ ] res = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( pref . get ( i ) > 0 ) {\n      res [ 0 ] = i + 1 ;\n      break ;\n    }\n  }\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    while ( s . size ( ) > 0 && pref . get ( s . size ( ) - 1 ) <= pref . get ( i ) ) {\n      s . pop ( ) ;\n    }\n    if ( s . isEmpty ( ) ) {\n      res [ i + 1 ] = 0 ;\n    }\n    else if ( i < n - 1 ) {\n      res [ i + 1 ] = s . size ( ) - 1 - i ;\n    }\n    s . push ( i ) ;\n  }\n  res . pop ( ) ;\n  return res ;\n}\n", "reference_code": "    public static ArrayList<Integer> findAnswer(int n, int[] A) \n    {\n        ArrayList<Long> pref = new ArrayList<>();\n        pref.add((long) A[0]);\n        \n        for (int i = 1; i < n; i++) {\n            pref.add(pref.get(i - 1) + A[i]);\n        }\n        Stack<Integer> s = new Stack<>();\n        ArrayList<Integer> res = new ArrayList<>();\n        for(int i=0;i<=n;i++)\n        {\n            res.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            if (pref.get(i) > 0) \n            {\n                res.set(0,i+1);\n                break;\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) \n        {\n            while (!s.isEmpty() && pref.get(s.peek()) <= pref.get(i)) {\n                s.pop();\n            }\n            if (s.isEmpty()) \n            {\n                res.set(i+1,0);\n            } \n            else if (i < n - 1) \n            {\n                res.set(i + 1, s.peek() - i);\n            }\n            s.push(i);\n        }\n        res.remove(res.size() - 1);\n        return res;\n    }", "target_Lan": "java###findAnswer_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\npublic class findAnswer_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(findAnswer(5, new int[]{1, 2, 3, 4, 5}));\n    System.out.println(findAnswer(10, new int[]{10, -20, 30, -40, 50, -60, 70, -80, 90, -100}));\n    System.out.println(findAnswer(3, new int[]{0, 0, 0}));\n    System.out.println(findAnswer(4, new int[]{1, -1, 1, -1}));\n    System.out.println(findAnswer(2, new int[]{-1, 1}));\n}\n}"}, {"source_Lan": "python###validPairs.py", "source_code": "def validPairs( n: int, val: List[int], edges: List[List[int]]) -> int:\n    lift=[[0]*(32) for _ in range(n+1)]\n    dis=[0]*(n+1)\n    dis2=[0]*(n+1)\n    adj=[[] for _ in range(n+1)]\n    for i in edges:\n        adj[i[0]].append((i[1],i[2]))\n        adj[i[1]].append((i[0],i[2]))\n    dis[0]=-(10**15)\n    st=[[1,0,0,0]]\n    while st:\n        top=st.pop()\n        i,par,d,d2=top[0],top[1],top[2],top[3]\n        lift[i][0]=par\n        dis[i]=d\n        dis2[i]=d2\n        for j in range(1,32):\n            lift[i][j]=lift[lift[i][j-1]][j-1]\n        for j in adj[i]:\n            if j[0]==par:\n                continue\n            st.append([j[0],i,d+j[1],d2+1])\n    ans=0\n    for i in range(1,n+1):\n        v=val[i-1]\n        p=i\n        for j in range(31,-1,-1):\n            if v>=dis[p]-dis[lift[p][j]]:\n                v-=dis[p]-dis[lift[p][j]]\n                p=lift[p][j]\n        ans+=dis2[i]-dis2[p]\n    return ans", "trans_code": "public static int validPairs ( int n , List < Integer > val , List < List < Integer >> edges ) throws Exception {\n  int [ ] [ ] lift = new int [ 32 ] [ n + 1 ] ;\n  int [ ] dis = new int [ n + 1 ] ;\n  int [ ] dis2 = new int [ n + 1 ] ;\n  List < List < Integer >> adj = new ArrayList < List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < edges . size ( ) ;\n  i ++ ) {\n    adj . get ( edges . get ( i ) . get ( 0 ) ) . add ( new Pair < Integer , Integer > ( edges . get ( i ) . get ( 1 ) , edges . get ( i ) . get ( 2 ) ) ) ;\n    adj . get ( edges . get ( i ) . get ( 1 ) ) . add ( new Pair < Integer , Integer > ( edges . get ( i ) . get ( 0 ) , edges . get ( i ) . get ( 2 ) ) ) ;\n  }\n  dis [ 0 ] = - ( 10 * 15 ) ;\n  Stack < Integer > st = new Stack < Integer > ( ) ;\n  st . push ( 1 ) ;\n  st . push ( 0 ) ;\n  while ( st . size ( ) > 0 ) {\n    Integer top = st . pop ( ) ;\n    int i = top . intValue ( ) ;\n    int par = top . intValue ( ) ;\n    int d = top . intValue ( ) ;\n    int d2 = top . intValue ( ) ;\n    lift [ i ] [ 0 ] = par ;\n    dis [ i ] = d ;\n    dis2 [ i ] = d2 ;\n    for ( int j = 1 ;\n    j < 32 ;\n    j ++ ) lift [ i ] [ j ] = lift [ lift [ i ] [ j - 1 ] ] [ j - 1 ] ;\n    for ( List < Integer > j : adj . get ( i ) ) {\n      if ( j . intValue ( ) == par ) continue ;\n      st . push ( j . intValue ( ) ) ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int v = val . get ( i - 1 ) ;\n    int p = i ;\n    for ( int j = 31 ;\n    j >= 1 ;\n    j -- ) {\n      if ( v >= dis [ p ] - dis [ lift [ p ] [ j ] ] ) {\n        v -= dis [ p ] - dis [ lift [ p ] [ j ] ]", "reference_code": "    public static long validPairs(int n, int[] val, int[][] edges) {\n        \n        long[][] lift = new long[n + 1][32];\n        long[] dis = new long[n + 1];\n        long[] dis2 = new long[n + 1];\n        List<List<long[]>> adj = new ArrayList<>();\n        \n        for(int i = 0; i <= n; i++){\n            adj.add(new ArrayList<>());\n        }\n        \n        for (int i = 0; i < edges.length; i++) {\n            adj.get(edges[i][0]).add(new long[]{ edges[i][1], edges[i][2] });\n            adj.get(edges[i][1]).add(new long[]{ edges[i][0], edges[i][2] });\n        }\n        dis[0] = (long)-1e15;\n        \n        Stack<long[]> st = new Stack<>();\n        st.push(new long[]{ 1, 0, 0, 0 }); \n        while (!st.isEmpty()) {\n            long[] top = st.pop();\n            long i = top[0], par = top[1], d = top[2], d2 = top[3];\n            lift[(int)i][0] = par;\n            dis[(int)i] = d;\n            dis2[(int)i] = d2;\n            for (long j = 1; j < 32; j++) {\n                lift[(int)i][(int)j] = lift[(int)lift[(int)i][(int)(j - 1)]][(int)j - 1];\n            }\n            for (long[] j : adj.get((int)i)) {\n                if (j[0] == par) continue;\n                st.push(new long[]{ j[0], i, d + j[1], d2 + 1 });\n            }\n        }\n        \n        long ans = 0;\n        for (long i = 1; i <= n; i++) {\n            long v = val[(int)i - 1];\n            long p = i;\n            for (long j = 31; j >= 0; j--) {\n                if (v >= dis[(int)p] - dis[(int)lift[(int)p][(int)j]]) {\n                    v -= (dis[(int)p] - dis[(int)lift[(int)p][(int)j]]);\n                    p = lift[(int)p][(int)j];\n                }\n            }\n            ans += dis2[(int)i] - dis2[(int)p];\n        }\n        return ans;\n    }", "target_Lan": "java###validPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class validPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(validPairs(3, new int[]{1, 2, 3}, new int[][]{{1, 2, 1}, {2, 3, 2}}));\n    System.out.println(validPairs(4, new int[]{1, 2, 3, 4}, new int[][]{{1, 2, 1}, {2, 3, 2}, {3, 4, 3}}));\n    System.out.println(validPairs(5, new int[]{1, 2, 3, 4, 5}, new int[][]{{1, 2, 1}, {2, 3, 2}, {3, 4, 3}, {4, 5, 4}}));\n    System.out.println(validPairs(6, new int[]{1, 2, 3, 4, 5, 6}, new int[][]{{1, 2, 1}, {2, 3, 2}, {3, 4, 3}, {4, 5, 4}, {5, 6, 5}}));\n    System.out.println(validPairs(7, new int[]{1, 2, 3, 4, 5, 6, 7}, new int[][]{{1, 2, 1}, {2, 3, 2}, {3, 4, 3}, {4, 5, 4}, {5, 6, 5}, {6, 7, 6}}));\n}\n}"}, {"source_Lan": "python###longestMonotonicSubarray.py", "source_code": "def longestMonotonicSubarray( a: List[int]) -> int:\n    ans = 1\n    i, n = 0, len(a)\n    while i < n - 1:\n        if a[i + 1] == a[i]:\n            i += 1  \n            continue\n        i0 = i  \n        inc = a[i + 1] > a[i]  \n        i += 2  \n        while i < n and a[i] != a[i - 1] and (a[i] > a[i - 1]) == inc:\n            i += 1\n        \n        ans = max(ans, i - i0)\n        i -= 1\n    return ans", "trans_code": "public static int longestMonotonicSubarray ( int [ ] a ) throws Exception {\n  int ans = 1 ;\n  int i = 0 , n = a . length ;\n  while ( i < n - 1 ) {\n    if ( a [ i + 1 ] == a [ i ] ) {\n      i ++ ;\n      continue ;\n    }\n    int i0 = i ;\n    boolean inc = a [ i + 1 ] > a [ i ] ;\n    i += 2 ;\n    while ( i < n && a [ i ] != a [ i - 1 ] && ( a [ i ] > a [ i - 1 ] ) == inc ) {\n      i ++ ;\n    }\n    ans = Math . max ( ans , i - i0 ) ;\n    i -- ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int longestMonotonicSubarray(int[] a) {\n        int ans = 1;\n        int i = 0, n = a.length;\n        while (i < n - 1) {\n            if (a[i + 1] == a[i]) {\n                i++; \n                continue;\n            }\n            int i0 = i; \n            boolean inc = a[i + 1] > a[i]; \n            i += 2; \n            while (i < n && a[i] != a[i - 1] && (a[i] > a[i - 1]) == inc) {\n                i++;\n            }\n            \n            ans = Math.max(ans, i - i0);\n            i--;\n        }\n        return ans;\n    }", "target_Lan": "java###longestMonotonicSubarray_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class longestMonotonicSubarray_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(longestMonotonicSubarray(new int[]{1, 2, 3, 4, 5}));\n    System.out.println(longestMonotonicSubarray(new int[]{5, 4, 3, 2, 1}));\n    System.out.println(longestMonotonicSubarray(new int[]{1, 1, 1, 1, 1}));\n    System.out.println(longestMonotonicSubarray(new int[]{1, 2, 3, 2, 1}));\n    System.out.println(longestMonotonicSubarray(new int[]{1, 2, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1}));\n}\n}"}, {"source_Lan": "python###numberOfPairs.py", "source_code": "def numberOfPairs( points: List[List[int]]) -> int:\n    points.sort(key=lambda p: (p[0], -p[1]))\n    ans = 0\n    for i, (_, y0) in enumerate(points):\n        max_y = -inf\n        for (_, y) in points[i + 1:]:\n            if max_y < y <= y0:\n                max_y = y\n                ans += 1\n    return ans", "trans_code": "public static int numberOfPairs ( List < List < Integer >> points ) throws Exception {\n  Collections . sort ( points , new Comparator < List < Integer >> ( ) {\n    @ Override public int compare ( List < Integer > o1 , List < Integer > o2 ) throws Exception {\n      int ans = 0 ;\n      for ( int i = 0 , y0 = - 1 ;\n      i < points . size ( ) ;\n      i ++ ) {\n        int maxY = - Integer . MAX_VALUE ;\n        for ( int j = i + 1 ;\n        j < points . size ( ) ;\n        j ++ ) {\n          int y = points . get ( j ) . get ( 0 ) ;\n          if ( maxY < y && y <= y0 ) {\n            maxY = y ;\n            ans ++ ;\n          }\n        }\n        return ans ;\n      }\n    }\n  }\n  ) ;\n  return ans ;\n}\n", "reference_code": "    public static int numberOfPairs(int[][] points) {\n        Arrays.sort(points, (p, q) -> p[0] != q[0] ? p[0] - q[0] : q[1] - p[1]);\n        int ans = 0;\n        for (int i = 0; i < points.length; i++) {\n            int y0 = points[i][1];\n            int maxY = Integer.MIN_VALUE;\n            for (int j = i + 1; j < points.length; j++) {\n                int y = points[j][1];\n                if (y <= y0 && y > maxY) {\n                    maxY = y;\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###numberOfPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class numberOfPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n    int[][][] testInputs = {\n        {{1,2},{2,3},{3,4},{4,5}},\n        {{1,2},{1,2},{1,2},{1,2}},\n        {{1,2},{2,1},{3,4},{4,3}},\n        {{1,2},{2,3},{3,2},{4,1}},\n        {{1,2},{2,3},{3,4},{4,5},{5,6},{6,7},{7,8},{8,9},{9,10}}\n    };\n\n    for(int[][] points : testInputs) {\n        System.out.println(numberOfPairs(points));\n    }\n}\n}"}, {"source_Lan": "python###substringsAndPermutations.py", "source_code": "def substringsAndPermutations( n: int, m: int, s: str,\n                              arr: List[str]) -> List[int]:\n    vec = [[] for _ in range(10)]\n    for i in range(n):\n        vec[int(s[i])].append(i + 1)\n    fans = []\n    for i in range(m):\n        brr = [0] * 10\n        for j in range(len(arr[i])):\n            brr[int(arr[i][j])] += 1\n        ans = -1\n        f = 0\n        for j in range(10):\n            if brr[j] != 0:\n                if len(vec[j]) < brr[j]:\n                    f = 1\n                else:\n                    ans = max(ans, vec[j][brr[j] - 1])\n        if f == 1:\n            ans = -1\n        fans.append(ans)\n    return fans", "trans_code": "public static int [ ] substringsAndPermutations ( int n , int m , String [ ] s , String [ ] arr ) throws Exception {\n  int [ ] vec = new int [ 10 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) vec [ Integer . parseInt ( s [ i ] ) ] = i + 1 ;\n  int [ ] fans = new int [ m ] ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) {\n    int [ ] brr = new int [ 10 ] ;\n    for ( int j = 0 ;\n    j < arr [ i ] . length ;\n    j ++ ) brr [ Integer . parseInt ( arr [ i ] [ j ] ) ] ++ ;\n    int ans = - 1 ;\n    int f = 0 ;\n    for ( int j = 0 ;\n    j < 10 ;\n    j ++ ) {\n      if ( brr [ j ] != 0 ) {\n        if ( vec [ j ] . length < brr [ j ] ) f = 1 ;\n        else ans = Math . max ( ans , vec [ j ] [ brr [ j ] - 1 ] ) ;\n      }\n    }\n    if ( f == 1 ) ans = - 1 ;\n    fans [ i ] = ans ;\n  }\n  return fans ;\n}\n", "reference_code": "    public static ArrayList<Integer> substringsAndPermutations(int n, int m, String s,\n                                                        String[] arr) {\n        Map<Character, List<Integer>> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            char ch = s.charAt(i);\n            mp.computeIfAbsent(ch, k -> new ArrayList<>()).add(i);\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n        for (int q = 0; q < m; q++) {\n            String query = arr[q];\n            int ma = 0;\n            Map<Character, Integer> ct = new HashMap<>();\n            for (char c : query.toCharArray()) {\n                ct.put(c, ct.getOrDefault(c, 0) + 1);\n            }\n            for (char c : query.toCharArray()) {\n                int ele = ct.get(c);\n                if (ele > mp.getOrDefault(c, Collections.emptyList()).size()) {\n                    ma = -1;\n                    break;\n                } else {\n                    ma = Math.max(ma, mp.get(c).get(ele - 1) + 1);\n                }\n            }\n            ans.add(ma);\n        }\n        return ans;\n    }", "target_Lan": "java###substringsAndPermutations_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class substringsAndPermutations_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int n = 0;\n        int m = 0;\n        String s = \"\";\n        String[] arr = {};\n        System.out.println(substringsAndPermutations(n, m, s, arr));\n    }\n}"}, {"source_Lan": "python###sumOfEncryptedInt.py", "source_code": "def sumOfEncryptedInt( nums: List[int]) -> int:\n    ans = 0\n    for x in nums:\n        mx = base = 0\n        while x:\n            x, d = divmod(x, 10)\n            mx = max(mx, d)\n            base = base * 10 + 1\n        ans += mx * base\n    return ans", "trans_code": "public static int sumOfEncryptedInt ( int [ ] nums ) throws Exception {\n  int ans = 0 ;\n  for ( int x : nums ) {\n    int mx = base = 0 ;\n    while ( x > 0 ) {\n      x = x / 10 ;\n      int d = x % 10 ;\n      mx = Math . max ( mx , d ) ;\n      base = base * 10 + 1 ;\n    }\n    ans += mx * base ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int sumOfEncryptedInt(int[] nums) {\n        int ans = 0;\n        for (int x : nums) {\n            int mx = 0;\n            int base = 0;\n            for (; x > 0; x /= 10) {\n                mx = Math.max(mx, x % 10);\n                base = base * 10 + 1;\n            }\n            ans += mx * base;\n        }\n        return ans;\n    }", "target_Lan": "java###sumOfEncryptedInt_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class sumOfEncryptedInt_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(sumOfEncryptedInt(new int[]{0}));\n    System.out.println(sumOfEncryptedInt(new int[]{1, 2, 3, 4, 5}));\n    System.out.println(sumOfEncryptedInt(new int[]{100, 200, 300, 400, 500}));\n    System.out.println(sumOfEncryptedInt(new int[]{1000, 2000, 3000, 4000, 5000}));\n    System.out.println(sumOfEncryptedInt(new int[]{10000, 20000, 30000, 40000, 50000}));\n}\n}"}, {"source_Lan": "python###maximumPrimeDifference.py", "source_code": "def maximumPrimeDifference( nums: List[int]) -> int:\n    primes = {\n        2, 3, 5, 7, 11,\n        13, 17, 19, 23, 29,\n        31, 37, 41, 43, 47,\n        53, 59, 61, 67, 71,\n        73, 79, 83, 89, 97\n    }\n    first, ans = -1, 0\n    for i, num in enumerate(nums):\n        if num in primes:\n            if first != -1:\n                ans = max(ans, i - first)\n            else:\n                first = i\n    return ans", "trans_code": "public static int maximumPrimeDifference ( int [ ] nums ) throws Exception {\n  int [ ] primes = {\n    2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 , 37 , 41 , 43 , 47 , 53 , 59 , 61 , 67 , 71 , 73 , 79 , 83 , 89 , 97 }\n    ;\n    int first = - 1 , ans = 0 ;\n    for ( int i = 0 , num = nums . length ;\n    i < num ;\n    i ++ ) {\n      if ( nums [ i ] == primes [ i ] ) {\n        if ( first != - 1 ) {\n          ans = Math . max ( ans , i - first ) ;\n        }\n        else {\n          first = i ;\n        }\n      }\n    }\n    return ans ;\n  }\n  ", "reference_code": "    public static int maximumPrimeDifference(int[] nums) {\n        Set<Integer> primes = new HashSet<>(Arrays.asList(\n            2, 3, 5, 7, 11,\n            13, 17, 19, 23, 29,\n            31, 37, 41, 43, 47,\n            53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97\n        ));\n        int n = nums.length;\n        int first = -1, ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (primes.contains(nums[i])) {\n                if (first != -1) {\n                    ans = Math.max(ans, i - first);\n                } else {\n                    first = i;\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###maximumPrimeDifference_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class maximumPrimeDifference_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maximumPrimeDifference(new int[]{2, 3, 5, 7, 11}));\n        System.out.println(maximumPrimeDifference(new int[]{13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n        System.out.println(maximumPrimeDifference(new int[]{4, 6, 8, 9, 10}));\n        System.out.println(maximumPrimeDifference(new int[]{100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110}));\n        System.out.println(maximumPrimeDifference(new int[]{1, 4, 6, 8, 10}));\n    }\n}"}, {"source_Lan": "python###scoreOfString.py", "source_code": "def scoreOfString( s: str) -> int:\n    return sum(abs(x - y) for x, y in pairwise(map(ord, s)))", "trans_code": "public static int scoreOfString ( String s ) throws Exception {\n  return Math . abs ( Math . abs ( s . hashCode ( ) - s . hashCode ( ) ) ) ;\n}\n", "reference_code": "    public static int scoreOfString(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        for (int i = 1; i < s.length; i++) {\n            ans += Math.abs(s[i] - s[i - 1]);\n        }\n        return ans;\n    }", "target_Lan": "java###scoreOfString_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class scoreOfString_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(scoreOfString(\"\"));\n        System.out.println(scoreOfString(\"a\"));\n        System.out.println(scoreOfString(\"abc\"));\n        System.out.println(scoreOfString(\"aa\"));\n        System.out.println(scoreOfString(\"abcdefg\"));\n    }\n}"}, {"source_Lan": "python###canSortArray.py", "source_code": "def canSortArray( nums: List[int]) -> bool:\n    lastCnt = 0\n    lastGroupMax = 0\n    curGroupMax = 0\n    for num in nums:\n        curCnt = num.bit_count()\n        if curCnt == lastCnt:\n            curGroupMax = max(curGroupMax, num)\n        else:\n            lastCnt = curCnt\n            lastGroupMax = curGroupMax\n            curGroupMax = num\n        if num < lastGroupMax:\n            return False\n    return True", "trans_code": "public static boolean canSortArray ( int [ ] nums ) throws Exception {\n  int lastCnt = 0 ;\n  int lastGroupMax = 0 ;\n  int curGroupMax = 0 ;\n  for ( int num : nums ) {\n    int curCnt = num . bitCount ( ) ;\n    if ( curCnt == lastCnt ) {\n      curGroupMax = Math . max ( curGroupMax , num ) ;\n    }\n    else {\n      lastCnt = curCnt ;\n      lastGroupMax = curGroupMax ;\n      curGroupMax = num ;\n    }\n    if ( num < lastGroupMax ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n", "reference_code": "    public static boolean canSortArray(int[] nums) {\n        int lastCnt = 0;\n        int lastGroupMax = 0;\n        int curGroupMax = 0;\n        for (int num : nums) {\n            int curCnt = Integer.bitCount(num);\n            if (curCnt == lastCnt) {\n                curGroupMax = Math.max(curGroupMax, num);\n            } else {\n                lastCnt = curCnt;\n                lastGroupMax = curGroupMax;\n                curGroupMax = num;\n            }\n            if (num < lastGroupMax) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_Lan": "java###canSortArray_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class canSortArray_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] nums = {};\n        System.out.println(canSortArray(nums));\n    }\n}"}, {"source_Lan": "python###MinSize.py", "source_code": "def MinSize(A: List[int],  n: int) -> int:\n    \n    curr = A[0]\n    count = 1\n    for i in range(1, n):\n        if A[i] == curr:\n            count += 1\n        else:\n            count -= 1\n            if count == 0:\n                curr = A[i]\n                count = 1\n    max_f = A.count(curr)\n    if max_f <= (n + 1) // 2:\n        return n & 1\n    else:\n        return 2 * max_f - n", "trans_code": "public static int MinSize ( int [ ] A , int n ) throws Exception {\n  int curr = A [ 0 ] ;\n  int count = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] == curr ) {\n      count ++ ;\n    }\n    else {\n      count -- ;\n      if ( count == 0 ) {\n        curr = A [ i ] ;\n        count = 1 ;\n      }\n    }\n  }\n  int maxF = A . length ;\n  if ( maxF <= ( n + 1 ) / 2 ) {\n    return n & 1 ;\n  }\n  else {\n    return 2 * maxF - n ;\n  }\n}\n", "reference_code": "    public static int MinSize(int[] A, int n) {\n        \n        \n        int curr = A[0];\n        int count = 1;\n        for (int i = 1; i < n; ++i) {\n            if (A[i] == curr) {\n                count += 1;\n            } else {\n                count -= 1;\n                if (count == 0) {\n                    curr = A[i];\n                    count = 1;\n                }\n            }\n        }\n        int max_f = 0;\n        for (int i = 0; i < n; i++) {\n            if (curr == A[i]) {\n                max_f++;\n            }\n        }\n        if (max_f <= (n + 1) / 2) {\n            return n & 1;\n        } else {\n            return 2 * max_f - n;\n        }\n    }", "target_Lan": "java###MinSize_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class MinSize_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(MinSize(new int[]{1}, 1));\n        System.out.println(MinSize(new int[]{1,2,3}, 3));\n        System.out.println(MinSize(new int[]{1,1,2,2,3}, 5));\n        System.out.println(MinSize(new int[]{1,2,1,2,1,2,1}, 7));\n        System.out.println(MinSize(new int[]{1,1,1,2,2,2,3,3,3}, 9));\n    }\n}"}, {"source_Lan": "python###minimumAddedCoins.py", "source_code": "def minimumAddedCoins( coins: List[int], target: int) -> int:\n        coins.sort()\n        ans, x = 0, 1\n        length, index = len(coins), 0\n        while x <= target:\n            if index < length and coins[index] <= x:\n                x += coins[index]\n                index += 1\n            else:\n                x <<= 1\n                ans += 1\n        return ans", "trans_code": "public static int minimumAddedCoins ( int [ ] coins , int target ) throws Exception {\n  Arrays . sort ( coins ) ;\n  int ans = 0 , x = 1 ;\n  int length = coins . length , index = 0 ;\n  while ( x <= target ) {\n    if ( index < length && coins [ index ] <= x ) {\n      x += coins [ index ] ;\n      index ++ ;\n    }\n    else {\n      x <<= 1 ;\n      ans ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int minimumAddedCoins(int[] coins, int target) {\n        Arrays.sort(coins);\n        int ans = 0;\n        int x = 1;\n        int length = coins.length, index = 0;\n        while (x <= target) {\n            if (index < length && coins[index] <= x) {\n                x += coins[index];\n                index++;\n            } else {\n                x *= 2;\n                ans++;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###minimumAddedCoins_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumAddedCoins_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumAddedCoins(new int[]{}, 5)); \n        System.out.println(minimumAddedCoins(new int[]{1, 2, 5}, 0)); \n        System.out.println(minimumAddedCoins(new int[]{1, 2, 3}, 10)); \n        System.out.println(minimumAddedCoins(new int[]{1, 2, 8}, 12)); \n        System.out.println(minimumAddedCoins(new int[]{1, 3, 5, 10}, 15)); \n    }\n}"}, {"source_Lan": "python###findPeakGrid.py", "source_code": "def findPeakGrid( mat: List[List[int]]) -> List[int]:\n       m = len(mat)\n       low, high = 0, m - 1\n       while low <= high:\n           i = (low + high) // 2\n           j = mat[i].index(max(mat[i]))\n           if i - 1 >= 0 and mat[i][j] < mat[i - 1][j]:\n               high = i - 1\n               continue\n           if i + 1 < m and mat[i][j] < mat[i + 1][j]:\n               low = i + 1\n               continue\n           return [i, j]\n       return None", "trans_code": "public static int [ ] findPeakGrid ( List < List < Integer >> mat ) throws Exception {\n  int m = mat . size ( ) ;\n  int low = 0 , high = m - 1 ;\n  while ( low <= high ) {\n    int i = ( low + high ) / 2 ;\n    int j = mat . get ( i ) . indexOf ( Math . max ( mat . get ( i ) ) ) ;\n    if ( i - 1 >= 0 && mat . get ( i ) . get ( j ) < mat . get ( i - 1 ) . get ( j ) ) {\n      high = i - 1 ;\n      continue ;\n    }\n    if ( i + 1 < m && mat . get ( i ) . get ( j ) < mat . get ( i + 1 ) ) {\n      low = i + 1 ;\n      continue ;\n    }\n    return new int [ ] {\n      i , j }\n      ;\n    }\n    return null ;\n  }\n  ", "reference_code": "public static int[] findPeakGrid(int[][] mat) {\n        int m = mat.length, n = mat[0].length;\n        int low = 0, high = m - 1;\n        while (low <= high) {\n            int i = (low + high) / 2;\n            int j = -1, maxElement = -1;\n            for (int k = 0; k < n; k++) {\n                if (mat[i][k] > maxElement) {\n                    j = k;\n                    maxElement = mat[i][k];\n                }\n            }\n            if (i - 1 >= 0 && mat[i][j] < mat[i - 1][j]) {\n                high = i - 1;\n                continue;\n            }\n            if (i + 1 < m && mat[i][j] < mat[i + 1][j]) {\n                low = i + 1;\n                continue;\n            }\n            return new int[]{i, j};\n        }\n        return new int[0]; \n    }", "target_Lan": "java###findPeakGrid_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findPeakGrid_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] mat1 = {{1}};\n        int[][] mat2 = {{1, 2, 3}, {5, 6, 4}, {7, 8, 9}};\n        int[][] mat3 = {{10, 20, 15}, {21, 22, 14}, {7, 16, 3}};\n        int[][] mat4 = {{1, 2, 3, 4}, {1, 2, 3, 4}, {1, 2, 3, 4}};\n        int[][] mat5 = {{1, 2, 1}, {4, 5, 6}, {1, 2, 1}};\n\n        System.out.println(Arrays.toString(findPeakGrid(mat1)));\n        System.out.println(Arrays.toString(findPeakGrid(mat2)));\n        System.out.println(Arrays.toString(findPeakGrid(mat3)));\n        System.out.println(Arrays.toString(findPeakGrid(mat4)));\n        System.out.println(Arrays.toString(findPeakGrid(mat5)));\n    }\n}"}, {"source_Lan": "python###maximumSumOfHeights.py", "source_code": "def maximumSumOfHeights( maxHeights: List[int]) -> int:\n        n = len(maxHeights)\n        res = 0\n        prefix, suffix = [0] * n, [0] * n\n        stack1, stack2 = [], []\n        for i in range(n):\n            while len(stack1) > 0 and maxHeights[i] < maxHeights[stack1[-1]]:\n                stack1.pop()\n            if len(stack1) == 0:\n                prefix[i] = (i + 1) * maxHeights[i]\n            else:\n                prefix[i] = prefix[stack1[-1]] + (i - stack1[-1]) * maxHeights[i]\n            stack1.append(i)\n        for i in range(n - 1, -1, -1):\n            while len(stack2) > 0 and maxHeights[i] < maxHeights[stack2[-1]]:\n                stack2.pop()\n            if len(stack2) == 0:\n                suffix[i] = (n - i) * maxHeights[i]\n            else:\n                suffix[i] = suffix[stack2[-1]] + (stack2[-1] - i) * maxHeights[i]\n            stack2.append(i)\n            res = max(res, prefix[i] + suffix[i] - maxHeights[i])\n        return res", "trans_code": "public static int maximumSumOfHeights ( int [ ] maxHeights ) throws Exception {\n  int n = maxHeights . length ;\n  int res = 0 ;\n  int [ ] prefix = new int [ n ] , suffix = new int [ n ] ;\n  Stack < Integer > stack1 = new Stack < Integer > ( ) , stack2 = new Stack < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( stack1 . size ( ) > 0 && maxHeights [ i ] < maxHeights [ stack1 . peek ( ) ] ) {\n      stack1 . pop ( ) ;\n    }\n    if ( stack1 . size ( ) == 0 ) {\n      prefix [ i ] = ( i + 1 ) * maxHeights [ i ] ;\n    }\n    else {\n      prefix [ i ] = prefix [ stack1 . peek ( ) ] + ( i - stack1 . peek ( ) ) * maxHeights [ i ] ;\n    }\n    stack1 . push ( i ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    while ( stack2 . size ( ) > 0 && maxHeights [ i ] < maxHeights [ stack2 . peek ( ) ] ) {\n      stack2 . pop ( ) ;\n    }\n    if ( stack2 . size ( ) == 0 ) {\n      suffix [ i ] = ( n - i ) * maxHeights [ i ] ;\n    }\n    else {\n      suffix [ i ] = suffix [ stack2 . peek ( ) ] + ( stack2 . peek ( ) - i ) * maxHeights [ i ] ;\n    }\n    stack2 . push ( i ) ;\n    res = Math . max ( res , prefix [ i ] + suffix [ i ] - maxHeights [ i ] ) ;\n  }\n  return res ;\n}\n", "reference_code": "    public static long maximumSumOfHeights(List<Integer> maxHeights) {\n        int n = maxHeights.size();\n        long res = 0;\n        long[] prefix = new long[n];\n        long[] suffix = new long[n];\n        Deque<Integer> stack1 = new ArrayDeque<Integer>();\n        Deque<Integer> stack2 = new ArrayDeque<Integer>();\n        for (int i = 0; i < n; i++) {\n            while (!stack1.isEmpty() && maxHeights.get(i) < maxHeights.get(stack1.peek())) {\n                stack1.pop();\n            }\n            if (stack1.isEmpty()) {\n                prefix[i] = (long) (i + 1) * maxHeights.get(i);\n            } else {\n                prefix[i] = prefix[stack1.peek()] + (long) (i - stack1.peek()) * maxHeights.get(i);\n            }\n            stack1.push(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            while (!stack2.isEmpty() && maxHeights.get(i) < maxHeights.get(stack2.peek())) {\n                stack2.pop();\n            }\n            if (stack2.isEmpty()) {\n                suffix[i] = (long) (n - i) * maxHeights.get(i);\n            } else {\n                suffix[i] = suffix[stack2.peek()] + (long) (stack2.peek() - i) * maxHeights.get(i);\n            }\n            stack2.push(i);\n            res = Math.max(res, prefix[i] + suffix[i] - maxHeights.get(i));\n        }\n        return res;\n    }", "target_Lan": "java###maximumSumOfHeights_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class maximumSumOfHeights_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maximumSumOfHeights(new ArrayList<>()));\n        System.out.println(maximumSumOfHeights(List.of(1)));\n        System.out.println(maximumSumOfHeights(List.of(5, 5, 5, 5)));\n        System.out.println(maximumSumOfHeights(List.of(1, 2, 3, 4, 5)));\n        System.out.println(maximumSumOfHeights(List.of(1000000, 999999, 1000000)));\n    }\n}"}, {"source_Lan": "python###isAcronym.py", "source_code": "def isAcronym( words: List[str], s: str) -> bool:\n        return len(words) == len(s) and all(words[i][0] == s[i] for i in range(len(s)))", "trans_code": "public static boolean isAcronym ( String [ ] words , String s ) throws Exception {\n  return words . length == s . length ( ) && Arrays . equals ( words , s ) ;\n}\n", "reference_code": "public static boolean isAcronym(List<String> words, String s) {\n        if (words.size() != s.length()) {\n            return false;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (words.get(i).charAt(0) != s.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_Lan": "java###isAcronym_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\npublic class isAcronym_Test {\n// TOFILL\npublic static void main(String[] args) {\n        \n        List<String> words1 = new ArrayList<>();\n        String s1 = \"\";\n        System.out.println(isAcronym(words1, s1)); \n\n        \n        List<String> words2 = Arrays.asList(\"Hello\", \"World\");\n        String s2 = \"HW\";\n        System.out.println(isAcronym(words2, s2)); \n\n        \n        List<String> words3 = Arrays.asList(\"Hello\", \"World\");\n        String s3 = \"H\";\n        System.out.println(isAcronym(words3, s3)); \n\n        \n        List<String> words4 = Arrays.asList(\"Good\", \"Luck\");\n        String s4 = \"GL\";\n        System.out.println(isAcronym(words4, s4)); \n\n        \n        List<String> words5 = Arrays.asList(\"Good\", \"Luck\");\n        String s5 = \"GU\";\n        System.out.println(isAcronym(words5, s5)); \n    }\n}"}, {"source_Lan": "python###possibleToStamp.py", "source_code": "def possibleToStamp( grid: List[List[int]], stampHeight: int, stampWidth: int) -> bool:\n    m, n = len(grid), len(grid[0])\n    psum = [[0] *(n + 2) for _ in range(m + 2)]\n    diff = [[0] *(n + 2) for _ in range(m + 2)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            psum[i][j] = psum[i - 1][j] + psum[i][j - 1] - psum[i - 1][j - 1] + grid[i - 1][j - 1]\n    for i in range(1, m + 2 - stampHeight):\n        for j in range(1, n + 2 - stampWidth):\n            x = i + stampHeight - 1 \n            y = j + stampWidth - 1\n            if psum[x][y] - psum[x][j - 1] - psum[i - 1][y] + psum[i - 1][j - 1] == 0:\n                diff[i][j] += 1 \n                diff[i][y + 1] -= 1 \n                diff[x + 1][j] -= 1 \n                diff[x + 1][y + 1] += 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1]\n            if diff[i][j] == 0 and grid[i - 1][j - 1] == 0:\n                return False\n    return True\n", "trans_code": "public static boolean possibleToStamp ( int [ ] [ ] grid , int stampHeight , int stampWidth ) throws Exception {\n  int m = grid . length ;\n  int n = grid [ 0 ] . length ;\n  int [ ] [ ] psum = new int [ m + 2 ] [ n + 2 ] ;\n  int [ ] [ ] diff = new int [ m + 2 ] [ n + 2 ] ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      psum [ i ] [ j ] = psum [ i - 1 ] [ j ] + psum [ i ] [ j - 1 ] - psum [ i - 1 ] [ j - 1 ] + grid [ i - 1 ] [ j - 1 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i <= m + 2 - stampHeight ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n + 2 - stampWidth ;\n    j ++ ) {\n      int x = i + stampHeight - 1 ;\n      int y = j + stampWidth - 1 ;\n      if ( psum [ x ] [ y ] - psum [ x ] [ j - 1 ] - psum [ i - 1 ] [ y ] + psum [ i - 1 ] [ j - 1 ] == 0 ) {\n        diff [ i ] [ j ] ++ ;\n        diff [ i ] [ y + 1 ] -- ;\n        diff [ x + 1 ] [ j ] -- ;\n        diff [ x + 1 ] [ y + 1 ] ++ ;\n      }\n    }\n  }\n  for ( int i = 1 ;\n  i <= m + 1 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n + 1 ;\n    j ++ ) {\n      diff [ i ] [ j ] += diff [ i - 1 ] [ j ] + diff [ i ] [ j - 1 ] - diff [ i - 1 ] [ j - 1 ] ;\n      if ( diff [ i ] [ j ] == 0 && grid [ i - 1 ] [ j - 1 ] == 0 ) {\n        return false ;\n      }\n    }\n  }\n  return true ;\n}\n", "reference_code": "    public static boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {\n        int m = grid.length, n = grid[0].length;\n        int[][] sum = new int[m + 2][n + 2];\n        int[][] diff = new int[m + 2][n + 2];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + grid[i - 1][j - 1];\n            }\n        }\n        for (int i = 1; i + stampHeight - 1 <= m; i++) {\n            for (int j = 1; j + stampWidth - 1 <= n; j++) {\n                int x = i + stampHeight - 1;\n                int y = j + stampWidth - 1;\n                if (sum[x][y] - sum[x][j - 1] - sum[i - 1][y] + sum[i - 1][j - 1] == 0) {\n                    diff[i][j]++;\n                    diff[i][y + 1]--;\n                    diff[x + 1][j]--;\n                    diff[x + 1][y + 1]++;\n                }\n            }\n        }\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n                if (diff[i][j] == 0 && grid[i - 1][j - 1] == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "target_Lan": "java###possibleToStamp_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class possibleToStamp_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] grid1 = {{0}};\n        System.out.println(possibleToStamp(grid1, 1, 1)); \n\n        int[][] grid2 = {{0, 0}, {0, 0}};\n        System.out.println(possibleToStamp(grid2, 2, 2)); \n\n        int[][] grid3 = {{1, 0}, {1, 1}};\n        System.out.println(possibleToStamp(grid3, 1, 1)); \n\n        int[][] grid4 = {{0, 1}, {0, 0}};\n        System.out.println(possibleToStamp(grid4, 1, 2)); \n\n        int[][] grid5 = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};\n        System.out.println(possibleToStamp(grid5, 2, 2)); \n    }\n}"}, {"source_Lan": "python###makeSmallestPalindrome.py", "source_code": "def makeSmallestPalindrome( s: str) -> str:\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            if s[left] != s[right]:\n                s[left] = s[right] = min(s[left], s[right])\n            left += 1\n            right -= 1\n        return \"\".join(s)", "trans_code": "public static String makeSmallestPalindrome ( String s ) throws Exception {\n  StringBuilder sb = new StringBuilder ( s ) ;\n  int left = 0 , right = s . length ( ) - 1 ;\n  while ( left < right ) {\n    if ( sb . charAt ( left ) != sb . charAt ( right ) ) {\n      sb . setCharAt ( left , sb . charAt ( right ) = Math . min ( sb . charAt ( left ) , sb . charAt ( right ) ) ) ;\n    }\n    left ++ ;\n    right -- ;\n  }\n  return sb . toString ( ) ;\n}\n", "reference_code": "    public static String makeSmallestPalindrome(String s) {\n        char[] arr = s.toCharArray();\n        int left = 0, right = arr.length - 1;\n        while (left < right) {\n            if (arr[left] != arr[right]) {\n                arr[left] = arr[right] = (char) Math.min(arr[left], arr[right]);\n            }\n            ++left;\n            --right;\n        }\n        return new String(arr);\n    }", "target_Lan": "java###makeSmallestPalindrome_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class makeSmallestPalindrome_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(makeSmallestPalindrome(\"\"));\n        System.out.println(makeSmallestPalindrome(\"a\"));\n        System.out.println(makeSmallestPalindrome(\"aa\"));\n        System.out.println(makeSmallestPalindrome(\"ab\"));\n        System.out.println(makeSmallestPalindrome(\"abc\"));\n    }\n}"}, {"source_Lan": "python###secondGreaterElement.py", "source_code": "def secondGreaterElement( nums: List[int]) -> List[int]:\n    res = [-1] * len(nums)\n    stack = []\n    q = []\n    for i in range(len(nums)):\n        while len(q) and q[0][0] < nums[i]:\n            res[q[0][1]] = nums[i]\n            heappop(q)\n        while len(stack) and nums[stack[-1]] < nums[i]:\n            heappush(q, (nums[stack[-1]], stack[-1]))\n            stack.pop()\n        stack.append(i)\n    return res", "trans_code": "public static List < Integer > secondGreaterElement ( List < Integer > nums ) throws Exception {\n  List < Integer > res = new ArrayList < Integer > ( nums . size ( ) ) ;\n  res . add ( - 1 ) ;\n  LinkedList < Integer > stack = new LinkedList < Integer > ( ) ;\n  LinkedList < Integer > q = new LinkedList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < nums . size ( ) ;\n  i ++ ) {\n    while ( q . size ( ) > 0 && q . get ( 0 ) . intValue ( ) < nums . get ( i ) . intValue ( ) ) {\n      res . add ( q . get ( 0 ) . intValue ( ) ) ;\n      heappop ( q ) ;\n    }\n    while ( stack . size ( ) > 0 && nums . get ( stack . size ( ) - 1 ) . intValue ( ) < nums . get ( i ) . intValue ( ) ) {\n      heappush ( q , ( Integer ) nums . get ( stack . size ( ) - 1 ) ) ;\n      stack . remove ( stack . size ( ) - 1 ) ;\n    }\n    stack . add ( i ) ;\n  }\n  return res ;\n}\n", "reference_code": "    public static int[] secondGreaterElement(int[] nums) {\n        int[] res = new int[nums.length];\n        Arrays.fill(res, -1);\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n        for (int i = 0; i < nums.length; ++i) {\n            while (!pq.isEmpty() && pq.peek()[0] < nums[i]) {\n                res[pq.poll()[1]] = nums[i];\n            }\n            while (!stack.isEmpty() && nums[stack.peek()] < nums[i]) {\n                pq.offer(new int[]{nums[stack.peek()], stack.peek()});\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        return res;\n    }", "target_Lan": "java###secondGreaterElement_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Deque;\nimport java.util.ArrayDeque;\nimport java.util.PriorityQueue;\npublic class secondGreaterElement_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{})));\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{1})));\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{2, 3})));\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{1, 2, 3, 4, 5})));\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{5, 1, 2, 3, 4})));\n    }\n}"}, {"source_Lan": "python###maxTaxiEarnings.py", "source_code": "def maxTaxiEarnings( n: int, rides: List[List[int]]) -> int:\n        dp = [0] * (n + 1)\n        rideMap = {}\n        for ride in rides:\n            if ride[1] not in rideMap:\n                rideMap[ride[1]] = []\n            rideMap[ride[1]].append(ride)\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            if i not in rideMap:\n                continue\n            for ride in rideMap[i]:\n                dp[i] = max(dp[i], dp[ride[0]] + ride[1] - ride[0] + ride[2])\n        return dp[n]", "trans_code": "public static int maxTaxiEarnings ( int n , List < List < Integer >> rides ) throws Exception {\n  int [ ] dp = new int [ n + 1 ] ;\n  Map < Integer , List < Integer >> rideMap = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( List < Integer > ride : rides ) {\n    if ( ride . get ( 1 ) != null ) {\n      rideMap . put ( ride . get ( 1 ) , new ArrayList < Integer > ( ) ) ;\n    }\n    rideMap . get ( ride . get ( 1 ) ) . add ( ride ) ;\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ] ;\n    if ( i != 0 ) {\n      continue ;\n    }\n    for ( List < Integer > ride : rideMap . get ( i ) ) {\n      dp [ i ] = Math . max ( dp [ i ] , dp [ ride . get ( 0 ) ] + ride . get ( 1 ) - ride . get ( 0 ) + ride . get ( 2 ) ) ;\n    }\n  }\n  return dp [ n ] ;\n}\n", "reference_code": "    public static long maxTaxiEarnings(int n, int[][] rides) {\n        long[] dp = new long[n + 1];\n        Map<Integer, List<int[]>> rideMap = new HashMap<Integer, List<int[]>>();\n        for (int[] ride : rides) {\n            rideMap.putIfAbsent(ride[1], new ArrayList<int[]>());\n            rideMap.get(ride[1]).add(ride);\n        }\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i - 1];\n            for (int[] ride : rideMap.getOrDefault(i, new ArrayList<int[]>())) {\n                dp[i] = Math.max(dp[i], dp[ride[0]] + ride[1] - ride[0] + ride[2]);\n            }\n        }\n        return dp[n];\n    }", "target_Lan": "java###maxTaxiEarnings_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class maxTaxiEarnings_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxTaxiEarnings(1, new int[][]{{0, 1, 5}}));\n        System.out.println(maxTaxiEarnings(5, new int[][]{{0, 2, 10}, {1, 3, 20}, {2, 5, 50}, {4, 5, 10}}));\n        System.out.println(maxTaxiEarnings(3, new int[][]{{0, 3, 10}, {0, 1, 5}, {1, 2, 10}}));\n        System.out.println(maxTaxiEarnings(10, new int[][]{}));\n        System.out.println(maxTaxiEarnings(5, new int[][]{{0, 1, Integer.MAX_VALUE}, {1, 5, Integer.MAX_VALUE}}));\n    }\n}"}, {"source_Lan": "python###carPooling.py", "source_code": "def carPooling( trips: List[List[int]], capacity: int) -> bool:\n        to_max = max(trip[2] for trip in trips)\n        diff = [0] * (to_max + 1)\n        for num_i, from_i, to_i in trips:\n            diff[from_i] += num_i\n            diff[to_i] -= num_i\n        count = 0\n        for i in range(to_max + 1):\n            count += diff[i]\n            if count > capacity:\n                return False\n        return True", "trans_code": "public static boolean carPooling ( List < List < Integer >> trips , int capacity ) throws Exception {\n  int toMax = Math . max ( trip . get ( 2 ) , trip . get ( 3 ) ) ;\n  int [ ] diff = new int [ toMax + 1 ] ;\n  for ( int numI = 0 , fromI = 0 , toI = 0 ;\n  numI < trips . size ( ) ;\n  numI ++ , fromI ++ , toI ++ ) {\n    diff [ fromI ] += numI ;\n    diff [ toI ] -= numI ;\n  }\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < toMax + 1 ;\n  i ++ ) {\n    count += diff [ i ] ;\n    if ( count > capacity ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n", "reference_code": "public static boolean carPooling(int[][] trips, int capacity) {\n        int toMax = 0;\n        for (int[] trip : trips) {\n            toMax = Math.max(toMax, trip[2]);\n        }\n        int[] diff = new int[toMax + 1];\n        for (int[] trip : trips) {\n            diff[trip[1]] += trip[0];\n            diff[trip[2]] -= trip[0];\n        }\n        int count = 0;\n        for (int i = 0; i <= toMax; ++i) {\n            count += diff[i];\n            if (count > capacity) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_Lan": "java###carPooling_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class carPooling_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] trips1 = {{2, 1, 5}, {3, 2, 7}};\n        int capacity1 = 5;\n        System.out.println(carPooling(trips1, capacity1)); \n\n        int[][] trips2 = {{2, 1, 5}, {3, 5, 7}};\n        int capacity2 = 5;\n        System.out.println(carPooling(trips2, capacity2)); \n\n        int[][] trips3 = {{1, 0, 1}, {1, 1, 2}, {1, 2, 3}};\n        int capacity3 = 3;\n        System.out.println(carPooling(trips3, capacity3)); \n\n        int[][] trips4 = {{5, 0, 1}, {5, 1, 2}, {5, 2, 3}};\n        int capacity4 = 10;\n        System.out.println(carPooling(trips4, capacity4)); \n\n        int[][] trips5 = {{4, 0, 3}, {5, 2, 5}};\n        int capacity5 = 6;\n        System.out.println(carPooling(trips5, capacity5)); \n    }\n}"}, {"source_Lan": "python###firstCompleteIndex.py", "source_code": "def firstCompleteIndex( arr: List[int], mat: List[List[int]]) -> int:\n        n, m = len(mat), len(mat[0])\n        mp = {}\n        for i in range(n):\n            for j in range(m):\n                mp[mat[i][j]] = [i, j]\n        rowCnt, colCnt = [0] * n, [0] * m\n        for i in range(len(arr)):\n            v = mp[arr[i]]\n            rowCnt[v[0]] += 1\n            if rowCnt[v[0]] == m:\n                return i\n            colCnt[v[1]] += 1\n            if colCnt[v[1]] == n:\n                return i\n        return -1", "trans_code": "public static int firstCompleteIndex ( int [ ] arr , int [ ] [ ] mat ) throws Exception {\n  int n = mat . length ;\n  int m = mat [ 0 ] . length ;\n  Map < Integer , List < Integer >> mp = new HashMap < Integer , List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      mp . put ( mat [ i ] [ j ] , new ArrayList < Integer > ( ) ) ;\n    }\n  }\n  int [ ] rowCnt = {\n    0 }\n    , colCnt = {\n      0 }\n      ;\n      for ( int i = 0 ;\n      i < arr . length ;\n      i ++ ) {\n        List < Integer > v = mp . get ( arr [ i ] ) ;\n        rowCnt [ v . get ( 0 ) ] ++ ;\n        if ( rowCnt [ v . get ( 0 ) ] == m ) {\n          return i ;\n        }\n        colCnt [ v . get ( 1 ) ] ++ ;\n        if ( colCnt [ v . get ( 1 ) ] == n ) {\n          return i ;\n        }\n      }\n      return - 1 ;\n    }\n    ", "reference_code": "public static int firstCompleteIndex(int[] arr, int[][] mat) {\n        int n = mat.length;\n        int m = mat[0].length;\n        Map<Integer, int[]> map = new HashMap<Integer, int[]>();\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                map.put(mat[i][j], new int[]{i, j});\n            }\n        }\n        int[] rowCnt = new int[n];\n        int[] colCnt = new int[m];\n        for (int i = 0; i < arr.length; ++i) {\n            int[] v = map.get(arr[i]);\n            ++rowCnt[v[0]];\n            if (rowCnt[v[0]] == m) {\n                return i;\n            }\n            ++colCnt[v[1]];\n            if (colCnt[v[1]] == n) {\n                return i;\n            }\n        }\n        return -1;\n    }", "target_Lan": "java###firstCompleteIndex_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class firstCompleteIndex_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(firstCompleteIndex(new int[]{}, new int[][]{{}}));\n        System.out.println(firstCompleteIndex(new int[]{1, 2, 3, 4, 5}, new int[][]{{1, 2, 3}, {4, 5, 6}}));\n        System.out.println(firstCompleteIndex(new int[]{4, 1, 2, 3, 5}, new int[][]{{1, 2, 3}, {4, 5, 6}}));\n        System.out.println(firstCompleteIndex(new int[]{1, 2, 3, 4, 5}, new int[][]{{1, 6}, {2, 3}, {4, 5}}));\n    }\n}"}, {"source_Lan": "python###closeStrings.py", "source_code": "def closeStrings( word1: str, word2: str) -> bool:\n        return Counter(word1).keys() == Counter(word2).keys() and sorted(Counter(word1).values()) == sorted(Counter(word2).values())", "trans_code": "public static boolean closeStrings ( String word1 , String word2 ) throws Exception {\n  return Counter . of ( word1 ) . keySet ( ) . equals ( Counter . of ( word2 ) . keySet ( ) ) && Arrays . asList ( Counter . of ( word1 ) . values ( ) ) . equals ( Arrays . asList ( Counter . of ( word2 ) . values ( ) ) ) ;\n}\n", "reference_code": "public static boolean closeStrings(String word1, String word2) {\n        int[] count1 = new int[26], count2 = new int[26];\n        for (char c : word1.toCharArray()) {\n            count1[c - 'a']++;\n        }\n        for (char c : word2.toCharArray()) {\n            count2[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count1[i] > 0 && count2[i] == 0 || count1[i] == 0 && count2[i] > 0) {\n                return false;\n            }\n        }\n        Arrays.sort(count1);\n        Arrays.sort(count2);\n        return Arrays.equals(count1, count2);\n    }", "target_Lan": "java###closeStrings_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class closeStrings_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(closeStrings(\"\", \"\"));\n        System.out.println(closeStrings(\"abc\", \"cba\"));\n        System.out.println(closeStrings(\"hello\", \"billion\"));\n        System.out.println(closeStrings(\"test\", \"tset\"));\n        System.out.println(closeStrings(\"aabbcc\", \"abcabc\"));\n    }\n}"}, {"source_Lan": "python###minDeletion.py", "source_code": "def minDeletion( nums: List[int]) -> int:\n        n = len(nums)\n        ans, check = 0, True\n        for i in range(n - 1):\n            if nums[i] == nums[i + 1] and check:\n                ans += 1\n            else:\n                check = not check\n        if (n - ans) % 2 != 0:\n            ans += 1\n        return ans", "trans_code": "public static int minDeletion ( int [ ] nums ) throws Exception {\n  int n = nums . length ;\n  int ans = 0 , check = true ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( nums [ i ] == nums [ i + 1 ] && check ) {\n      ans ++ ;\n    }\n    else {\n      check = ! check ;\n    }\n  }\n  if ( ( n - ans ) % 2 != 0 ) {\n    ans ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "public static int minDeletion(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        boolean check = true;\n        for (int i = 0; i + 1 < n; ++i) {\n            if (nums[i] == nums[i + 1] && check) {\n                ++ans;\n            } else {\n                check = !check;\n            }\n        }\n        if ((n - ans) % 2 != 0) {\n            ++ans;\n        }\n        return ans;\n    }", "target_Lan": "java###minDeletion_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minDeletion_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minDeletion(new int[]{})); \n        System.out.println(minDeletion(new int[]{1, 2, 3, 4})); \n        System.out.println(minDeletion(new int[]{5, 5, 5, 5})); \n        System.out.println(minDeletion(new int[]{1, 2, 1, 2, 1})); \n        System.out.println(minDeletion(new int[]{1, 1, 2, 2, 3, 3, 4, 4, 5, 5})); \n    }\n}"}, {"source_Lan": "python###maximumSum.py", "source_code": "def maximumSum( nums: List[int]) -> int:\n        d = defaultdict(int)\n        res = -1\n        for i in nums:\n            digitsSum = sum(int(c) for c in str(i))\n            if digitsSum in d:\n                res = max(res, d[digitsSum] + i)\n                d[digitsSum] = max(d[digitsSum], i)\n            else:\n                d[digitsSum] = i\n        return res", "trans_code": "public static int maximumSum ( List < Integer > nums ) throws Exception {\n  TreeMap < Integer , Integer > map = new TreeMap < Integer , Integer > ( ) ;\n  int res = - 1 ;\n  for ( int i : nums ) {\n    int digitsSum = Integer . parseInt ( String . valueOf ( i ) ) ;\n    if ( digitsSum < map . size ( ) ) {\n      res = Math . max ( res , map . get ( digitsSum ) + i ) ;\n      map . put ( digitsSum , Math . max ( map . get ( digitsSum ) , i ) ) ;\n    }\n    else {\n      map . put ( digitsSum , i ) ;\n    }\n  }\n  return res ;\n}\n", "reference_code": "public static int maximumSum(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        int res = -1;\n        for (int i : nums) {\n            int digitsSum = 0;\n            int temp = i;\n            while (temp > 0) {\n                digitsSum += temp % 10;\n                temp /= 10;\n            }\n            if (map.containsKey(digitsSum)) {\n                res = Math.max(res, map.get(digitsSum) + i);\n                map.put(digitsSum, Math.max(map.get(digitsSum), i));\n            } else {\n                map.put(digitsSum, i);\n            }\n        }\n        return res;\n    }", "target_Lan": "java###maximumSum_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maximumSum_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maximumSum(new int[]{1, 2, 3, 4, 5}));\n        System.out.println(maximumSum(new int[]{12, 21, 33, 24}));\n        System.out.println(maximumSum(new int[]{0, 10, 20, 30}));\n        System.out.println(maximumSum(new int[]{999, 90, 9, 18}));\n        System.out.println(maximumSum(new int[]{5}));\n    }\n}"}, {"source_Lan": "python###minPathCost.py", "source_code": "def minPathCost( grid: List[List[int]], moveCost: List[List[int]]) -> int:\n       m, n = len(grid), len(grid[0])\n       dp = grid[0]\n       for i in range(1, len(grid)):\n           dp = [grid[i][j] + min(dp[k] + moveCost[grid[i - 1][k]][j] for k in range(n)) for j in range(n)]\n       return min(dp)", "trans_code": "public static int minPathCost ( List < List < Integer >> grid , List < List < Integer >> moveCost ) throws Exception {\n  int m = grid . size ( ) , n = grid . get ( 0 ) . size ( ) ;\n  List < Integer > dp = grid . get ( 0 ) ;\n  for ( int i = 1 ;\n  i < grid . size ( ) ;\n  i ++ ) {\n    dp = new ArrayList < Integer > ( ) ;\n    dp . add ( grid . get ( i ) . get ( j ) + Math . min ( dp . get ( k ) + moveCost . get ( grid . get ( i - 1 ) . get ( k ) ) . get ( j ) , moveCost . get ( grid . get ( i - 1 ) . get ( k ) ) ) ) ;\n  }\n  return Math . min ( dp . size ( ) , m ) ;\n}\n", "reference_code": "public static int minPathCost(int[][] grid, int[][] moveCost) {\n        int m = grid.length, n = grid[0].length;\n        int[][] dp = new int[2][n];\n        dp[0] = grid[0].clone();\n        int cur = 0;\n        for (int i = 1; i < m; i++) {\n            int next = 1 - cur;\n            for (int j = 0; j < n; j++) {\n                dp[next][j] = Integer.MAX_VALUE;\n                for (int k = 0; k < n; k++) {\n                    dp[next][j] = Math.min(dp[next][j], dp[cur][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);\n                }\n            }\n            cur = next;\n        }\n        return Arrays.stream(dp[cur]).min().getAsInt();\n    }", "target_Lan": "java###minPathCost_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minPathCost_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] grid1 = {{1}};\n        int[][] moveCost1 = {{0}};\n        System.out.println(minPathCost(grid1, moveCost1));\n\n        int[][] grid2 = {{0, 0}, {0, 0}};\n        int[][] moveCost2 = {{0, 0}, {0, 0}};\n        System.out.println(minPathCost(grid2, moveCost2));\n    }\n}"}, {"source_Lan": "python###maximizeSum.py", "source_code": "def maximizeSum( nums: List[int], k: int) -> int:\n        return (2 * max(nums) + k - 1) * k // 2", "trans_code": "public static int maximizeSum ( int [ ] nums , int k ) throws Exception {\n  return ( 2 * Math . max ( nums ) + k - 1 ) * k / 2 ;\n}\n", "reference_code": "public static int maximizeSum(int[] nums, int k) {\n        int m = Arrays.stream(nums).max().getAsInt();\n        return (2 * m + k - 1) * k / 2;\n    }", "target_Lan": "java###maximizeSum_Test.java", "target_code_shell": "import java.util.Arrays;\npublic class maximizeSum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        \n        int[] nums1 = {1, 2, 3};\n        int k1 = 5;\n        System.out.println(maximizeSum(nums1, k1));  \n\n        \n        int[] nums2 = {-1, -2, -3};\n        int k2 = 3;\n        System.out.println(maximizeSum(nums2, k2));  \n\n        \n        int[] nums3 = {1024 - 1};\n        int k3 = 2;\n        System.out.println(maximizeSum(nums3, k3));  \n\n        \n        int[] nums4 = {10, 5, 3, 2};\n        int k4 = 4;\n        System.out.println(maximizeSum(nums4, k4));  \n\n        \n        int[] nums5 = {100, 200, 300};\n        int k5 = 1;\n        System.out.println(maximizeSum(nums5, k5));  \n    }\n}"}, {"source_Lan": "python###findTheCity.py", "source_code": "def findTheCity( n: int, edges: List[List[int]], distanceThreshold: int) -> int:\n        ans = (inf, -1)\n        mp = [[inf] * n for _ in range(n)]\n        for fr, to, weight in edges:\n            mp[fr][to], mp[to][fr] = weight, weight\n        for k in range(n):\n            mp[k][k] = 0\n            for i in range(n):\n                for j in range(n):\n                    mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j])\n        for i in range(n):\n            cnt = sum(mp[i][j] <= distanceThreshold for j in range(n))\n            if cnt <= ans[0]:\n                ans = (cnt, i)\n        return ans[1]", "trans_code": "public static int findTheCity ( int n , List < List < Integer >> edges , int distanceThreshold ) throws Exception {\n  int ans = ( int ) inf ;\n  int [ ] [ ] mp = new int [ n ] [ n ] ;\n  for ( int fr = 0 , to = 0 , weight = 0 ;\n  fr < n ;\n  fr ++ , to ++ , weight ++ ) {\n    mp [ fr ] [ to ] = weight ;\n    mp [ to ] [ fr ] = weight ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) {\n    mp [ k ] [ k ] = 0 ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      for ( int j = 0 ;\n      j < n ;\n      j ++ ) {\n        mp [ i ] [ j ] = Math . min ( mp [ i ] [ j ] , mp [ i ] [ k ] + mp [ k ] [ j ] ) ;\n      }\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int cnt = Math . abs ( mp [ i ] [ j ] <= distanceThreshold ? mp [ i ] [ j ] : mp [ i ] [ k ] + mp [ k ] [ j ] ) ;\n    if ( cnt <= ans ) {\n      ans = ( cnt ) ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int findTheCity(int n, int[][] edges, int distanceThreshold) {\n        int[] ans = {Integer.MAX_VALUE / 2, -1};\n        int[][] mp = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(mp[i], Integer.MAX_VALUE / 2);\n        }\n        for (int[] eg : edges) {\n            int from = eg[0], to = eg[1], weight = eg[2];\n            mp[from][to] = mp[to][from] = weight;\n        }\n        for (int k = 0; k < n; ++k) {\n            mp[k][k] = 0;\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    mp[i][j] = Math.min(mp[i][j], mp[i][k] + mp[k][j]);\n                }\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            int cnt = 0;\n            for (int j = 0; j < n; ++j) {\n                if (mp[i][j] <= distanceThreshold) {\n                    cnt++;\n                }\n            }\n            if (cnt <= ans[0]) {\n                ans[0] = cnt;\n                ans[1] = i;\n            }\n        }\n        return ans[1];\n    }", "target_Lan": "java###findTheCity_Test.java", "target_code_shell": "import java.util.Arrays;\npublic class findTheCity_Test {\n// TOFILL\n    public static void main(String[] args) {\n        \n        int n1 = 4;\n        int[][] edges1 = {{0, 1, 3}, {1, 2, 1}, {2, 3, 4}, {3, 0, 2}};\n        int distanceThreshold1 = 4;\n        System.out.println(findTheCity(n1, edges1, distanceThreshold1));  \n\n        \n        int n2 = 5;\n        int[][] edges2 = {{0, 1, 2}, {1, 2, 2}, {2, 3, 2}, {3, 4, 2}, {4, 0, 2}};\n        int distanceThreshold2 = 2;\n        System.out.println(findTheCity(n2, edges2, distanceThreshold2));  \n\n        \n        int n3 = 6;\n        int[][] edges3 = {{0, 1, 7}, {1, 2, 6}, {2, 3, 5}, {3, 4, 4}, {4, 5, 3}, {5, 0, 2}};\n        int distanceThreshold3 = 7;\n        System.out.println(findTheCity(n3, edges3, distanceThreshold3));  \n\n        \n        int n4 = 3;\n        int[][] edges4 = {{0, 1, 1}, {1, 2, 2}, {2, 0, 3}};\n        int distanceThreshold4 = 1;\n        System.out.println(findTheCity(n4, edges4, distanceThreshold4));  \n\n        \n        int n5 = 4;\n        int[][] edges5 = {{0, 1, 10}, {1, 2, 10}, {2, 3, 10}};\n        int distanceThreshold5 = 10;\n        System.out.println(findTheCity(n5, edges5, distanceThreshold5));  \n    }\n}"}, {"source_Lan": "python###longestAlternatingSubarray.py", "source_code": "def longestAlternatingSubarray( nums: List[int], threshold: int) -> int:\n        res, dp = 0, 0\n        for l in range(len(nums) - 1, -1, -1):\n            if nums[l] > threshold:\n                dp = 0\n            elif l == len(nums) - 1 or nums[l] % 2 != nums[l + 1] % 2:\n                dp = dp + 1\n            else:\n                dp = 1\n            res = dp if nums[l] % 2 == 0 and dp > res else res\n        return res", "trans_code": "public static int longestAlternatingSubarray ( int [ ] nums , int threshold ) throws Exception {\n  int res = 0 , dp = 0 ;\n  for ( int l = nums . length - 1 ;\n  l >= 0 ;\n  l -- ) {\n    if ( nums [ l ] > threshold ) dp = 0 ;\n    else if ( l == nums . length - 1 || nums [ l ] % 2 != nums [ l + 1 ] % 2 ) dp = dp + 1 ;\n    else dp = 1 ;\n    res = dp == nums . length - 1 && dp > res ? dp : res ;\n  }\n  return res ;\n}\n", "reference_code": "public static int longestAlternatingSubarray(int[] nums, int threshold) {\n        int res = 0, dp = 0;\n        for (int l = nums.length - 1; l >= 0; l--) {\n            if (nums[l] > threshold) {\n                dp = 0;\n            } else if (l == nums.length - 1 || nums[l] % 2 != nums[l + 1] % 2) {\n                dp++;\n            } else {\n                dp = 1;\n            }\n            if (nums[l] % 2 == 0) {\n                res = Math.max(res, dp);\n            }\n        }\n        return res;\n    }", "target_Lan": "java###longestAlternatingSubarray_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class longestAlternatingSubarray_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(longestAlternatingSubarray(new int[]{}, 5)); \n        System.out.println(longestAlternatingSubarray(new int[]{2, 3, 4, 5, 6}, 5)); \n        System.out.println(longestAlternatingSubarray(new int[]{1, 3, 5, 7}, 10)); \n        System.out.println(longestAlternatingSubarray(new int[]{2, 4, 3, 1, 6}, 6)); \n        System.out.println(longestAlternatingSubarray(new int[]{8, 1, 8, 0, 3, 2}, 7)); \n    }\n}"}, {"source_Lan": "python###findTheLongestBalancedSubstring.py", "source_code": "def findTheLongestBalancedSubstring( s: str) -> int:\n        res = 0\n        n = len(s)\n        count = [0, 0]\n        for i in range(n):\n            if s[i] == '1':\n                count[1] += 1\n                res = max(res, 2 * min(count))\n            elif i == 0 or s[i-1] == '1':\n                count[0] = 1\n                count[1] = 0\n            else:\n                count[0] += 1\n        return res", "trans_code": "public static int findTheLongestBalancedSubstring ( String s ) throws Exception {\n  int res = 0 ;\n  int n = s . length ( ) ;\n  int [ ] count = {\n    0 , 0 }\n    ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      if ( s . charAt ( i ) == '1' ) {\n        count [ 1 ] ++ ;\n        res = Math . max ( res , 2 * Math . min ( count [ 1 ] , count [ 0 ] ) ) ;\n      }\n      else if ( i == 0 || s . charAt ( i - 1 ) == '1' ) {\n        count [ 0 ] = 1 ;\n        count [ 1 ] = 0 ;\n      }\n      else {\n        count [ 0 ] ++ ;\n      }\n    }\n    return res ;\n  }\n  ", "reference_code": "public static int findTheLongestBalancedSubstring(String s) {\n        int res = 0;\n        int n = s.length();\n        int[] count = new int[2];\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n                count[1]++;\n                res = Math.max(res, 2 * Math.min(count[0], count[1]));\n            } else if (i == 0 || s.charAt(i - 1) == '1') {\n                count[0] = 1;\n                count[1] = 0;\n            } else {\n                count[0]++;\n            }\n        }\n        return res;\n    }", "target_Lan": "java###findTheLongestBalancedSubstring_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class findTheLongestBalancedSubstring_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(findTheLongestBalancedSubstring(\"\")); \n        System.out.println(findTheLongestBalancedSubstring(\"0000\")); \n        System.out.println(findTheLongestBalancedSubstring(\"1111\")); \n        System.out.println(findTheLongestBalancedSubstring(\"001100\")); \n        System.out.println(findTheLongestBalancedSubstring(\"010101\")); \n    }\n}"}, {"source_Lan": "python###vowelStrings.py", "source_code": "def vowelStrings( words: List[str], left: int, right: int) -> int:\n        vowels = set(\"aeiou\")\n        ans = 0\n        for i in range(left, right + 1):\n            word = words[i]\n            if word[0] in vowels and word[-1] in vowels:\n                ans += 1\n        return ans", "trans_code": "public static int vowelStrings ( List < String > words , int left , int right ) throws Exception {\n  Set < String > vowels = new HashSet < String > ( \"aeiou\" ) ;\n  int ans = 0 ;\n  for ( int i = left ;\n  i <= right ;\n  i ++ ) {\n    String word = words . get ( i ) ;\n    if ( word . startsWith ( vowels ) && word . endsWith ( vowels ) ) {\n      ans ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int vowelStrings(String[] words, int left, int right) {\n        Set<Character> vowels = new HashSet<Character>() {{\n            add('a');\n            add('e');\n            add('i');\n            add('o');\n            add('u');\n        }};\n        int ans = 0;\n        for (int i = left; i <= right; ++i) {\n            String word = words[i];\n            if (vowels.contains(word.charAt(0)) && vowels.contains(word.charAt(word.length() - 1))) {\n                ++ans;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###vowelStrings_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class vowelStrings_Test {\n// TOFILL\npublic static void main(String[] args) {\n        String[] input1 = {\"cat\", \"dog\", \"bat\", \"sky\"};\n        System.out.println(vowelStrings(input1, 0, 3)); \n\n        String[] input2 = {\"apple\", \"banana\", \"kiwi\", \"orange\"};\n        System.out.println(vowelStrings(input2, 0, 3)); \n\n        String[] input3 = {\"a\", \"b\", \"o\"};\n        System.out.println(vowelStrings(input3, 0, 2)); \n\n        String[] input4 = {\"e\", \"f\"};\n        System.out.println(vowelStrings(input4, 0, 1)); \n    }\n}"}, {"source_Lan": "python###categorizeBox.py", "source_code": "def categorizeBox( length, width, height, mass):\n        maxd = max(length, width, height)\n        vol = length * width * height\n        isBulky = maxd >= 10000 or vol >= 10**9\n        isHeavy = mass >= 100\n        if isBulky and isHeavy:\n            return 'Both'\n        if isBulky:\n            return 'Bulky'\n        if isHeavy:\n            return 'Heavy'\n        return 'Neither'", "trans_code": "public static String categorizeBox ( double length , double width , double height , double mass ) {\n  double maxd = Math . max ( length , width , height ) ;\n  double vol = length * width * height ;\n  boolean isBulky = maxd >= 10000 || vol >= 10 * 9 ;\n  boolean isHeavy = mass >= 100 ;\n  if ( isBulky && isHeavy ) return \"Both\" ;\n  if ( isBulky ) return \"Bulky\" ;\n  if ( isHeavy ) return \"Heavy\" ;\n  return \"Neither\" ;\n}\n", "reference_code": "public static String categorizeBox(int length, int width, int height, int mass) {\n        long maxd = Math.max(length, Math.max(width, height)), vol = 1L * length * width * height;\n        boolean isBulky = maxd >= 10000 || vol >= 1000000000, isHeavy = mass >= 100;\n        if (isBulky && isHeavy) {\n             return \"Both\";\n        } else if (isBulky) {\n            return \"Bulky\";\n        } else if (isHeavy) {\n            return \"Heavy\";\n        } else {\n            return \"Neither\";\n        }\n    }", "target_Lan": "java###categorizeBox_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.lang.Math;\npublic class categorizeBox_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(categorizeBox(10000, 10000, 10000, 1000));\n        System.out.println(categorizeBox(10000, 10, 10, 50));\n        System.out.println(categorizeBox(10, 10, 10, 100));\n        System.out.println(categorizeBox(1, 1, 1, 50));\n        System.out.println(categorizeBox(2147483647, 2147483647, 2147483647, 100));\n    }\n}"}, {"source_Lan": "python###pickGifts.py", "source_code": "def pickGifts(gifts: List[int], k: int) -> int:\n    q = [-gift for gift in gifts]\n    heapify(q)\n    while k:\n        x = heappop(q)\n        heappush(q, -int(sqrt(-x)))\n        k -= 1\n    return -sum(q)\n", "trans_code": "public static int pickGifts ( int [ ] gifts , int k ) throws Exception {\n  int [ ] q = new int [ gifts . length ] ;\n  for ( int i = 0 ;\n  i < gifts . length ;\n  i ++ ) {\n    q [ i ] = - gifts [ i ] ;\n  }\n  heapify ( q ) ;\n  while ( k > 0 ) {\n    int x = heappop ( q ) ;\n    heappush ( q , - ( int ) Math . sqrt ( - x ) ) ;\n    k -- ;\n  }\n  return - Arrays . copyOf ( q , q . length ) ;\n}\n", "reference_code": "public static long pickGifts(int[] gifts, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);\n        for (int gift : gifts) {\n            pq.offer(gift);\n        }\n        while (k > 0) {\n            k--;\n            int x = pq.poll();\n            pq.offer((int) Math.sqrt(x));\n        }\n        long res = 0;\n        while (!pq.isEmpty()) {\n            res += pq.poll();\n        }\n        return res;\n    }", "target_Lan": "java###pickGifts_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.PriorityQueue;\npublic class pickGifts_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(pickGifts(new int[]{4, 16, 25}, 0));              \n        System.out.println(pickGifts(new int[]{1, 100, 10000}, 2));         \n        System.out.println(pickGifts(new int[]{9, 8, 7, 6}, 3));            \n        System.out.println(pickGifts(new int[]{100000, 99999, 1000000}, 5)); \n    }\n}"}, {"source_Lan": "python###minimumOneBitOperations.py", "source_code": "def minimumOneBitOperations( n: int) -> int:\n        ans = 0\n        sign = 1\n        for i in range(29, -1, -1):\n            if n & (1 << i):\n                ans += sign * ((1 << (i + 1)) - 1)\n                sign = -sign\n        return ans", "trans_code": "public static int minimumOneBitOperations ( int n ) throws Exception {\n  int ans = 0 ;\n  int sign = 1 ;\n  for ( int i = 29 ;\n  i >= 0 ;\n  i -- ) {\n    if ( n & ( 1 << i ) ) {\n      ans += sign * ( ( 1 << ( i + 1 ) ) - 1 ) ;\n      sign = - sign ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int minimumOneBitOperations(int n) {\n        int ans = 0;\n        int sign = 1;\n        for (int i = 29; i >= 0; --i) {\n            if ((n & (1 << i)) != 0) {\n                ans += sign * ((1 << (i + 1)) - 1);\n                sign = -sign;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###minimumOneBitOperations_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\npublic class minimumOneBitOperations_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumOneBitOperations(0));           \n        System.out.println(minimumOneBitOperations(1));           \n        System.out.println(minimumOneBitOperations(2147483647));  \n        System.out.println(minimumOneBitOperations(16));          \n        System.out.println(minimumOneBitOperations(5));           \n    }\n}"}, {"source_Lan": "python###successfulPairs.py", "source_code": "def successfulPairs( spells: List[int], potions: List[int], success: int) -> List[int]:\n        res = [0] * len(spells)\n        idx = [i for i in range(len(spells))]\n        idx.sort(key = lambda x: spells[x])\n        potions.sort(key = lambda x : -x)\n        j = 0\n        for p in idx:\n            v = spells[p]\n            while j < len(potions) and potions[j] * v >= success:\n                j += 1\n            res[p] = j\n        return res", "trans_code": "public static int [ ] successfulPairs ( int [ ] spells , int [ ] potions , int success ) throws Exception {\n  int [ ] res = new int [ spells . length ] ;\n  int [ ] idx = new int [ spells . length ] ;\n  for ( int i = 0 ;\n  i < res . length ;\n  i ++ ) idx [ i ] = i ;\n  Arrays . sort ( idx ) ;\n  Arrays . sort ( potions ) ;\n  int j = 0 ;\n  for ( int p = 0 ;\n  p < idx . length ;\n  p ++ ) {\n    int v = spells [ p ] ;\n    while ( j < potions . length && potions [ j ] * v >= success ) j ++ ;\n    res [ p ] = j ;\n  }\n  return res ;\n}\n", "reference_code": "public static int[] successfulPairs(int[] spells, int[] potions, long success) {\n        int n = spells.length, m = potions.length;\n        int[] res = new int[n];\n        int[][] idx = new int[n][2];\n        for (int i = 0; i < n; ++i) {\n            idx[i][0] = spells[i];\n            idx[i][1] = i;\n        }\n        Arrays.sort(potions);\n        for (int i = 0, j = m - 1; i < j; ++i, --j) {\n            int temp = potions[i];\n            potions[i] = potions[j];\n            potions[j] = temp;\n        }\n        Arrays.sort(idx, (a, b) -> a[0] - b[0]);\n        for (int i = 0, j = 0; i < n; ++i) {\n            int p = idx[i][1];\n            int v = idx[i][0];\n            while (j < m && (long) potions[j] * v >= success) {\n                ++j;\n            }\n            res[p] = j;\n        }\n        return res;\n    }", "target_Lan": "java###successfulPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class successfulPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] result1 = successfulPairs(new int[]{1, 2, 3}, new int[]{1, 2, 3}, 2);\n        int[] result2 = successfulPairs(new int[]{5}, new int[]{5, 10, 15}, 25);\n        int[] result3 = successfulPairs(new int[]{1, 2, 3}, new int[]{0, 0, 0}, 1);\n        int[] result4 = successfulPairs(new int[]{1000000}, new int[]{1000000}, 1000000000000L);\n        int[] result5 = successfulPairs(new int[]{10, 20, 30}, new int[]{1, 2, 3, 4}, 50);\n        \n        System.out.println(Arrays.toString(result1));\n        System.out.println(Arrays.toString(result2));\n        System.out.println(Arrays.toString(result3));\n        System.out.println(Arrays.toString(result4));\n        System.out.println(Arrays.toString(result5));\n    }\n}"}, {"source_Lan": "python###countPairs2.py", "source_code": "def countPairs2( nums: List[int], target: int) -> int:\n        return sum(x + y < target for x, y in combinations(nums, 2))", "trans_code": "public static int countPairs2 ( int [ ] nums , int target ) throws Exception {\n  return Arrays . stream ( nums ) . filter ( x -> x + y < target ) . count ( ) ;\n}\n", "reference_code": "public static int countPairs2(List<Integer> nums, int target) {\n        int res = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i + 1; j < nums.size(); j++) {\n                if (nums.get(i) + nums.get(j) < target) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }", "target_Lan": "java###countPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class countPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(countPairs2(new ArrayList<>(), 5)); \n        System.out.println(countPairs2(Arrays.asList(1), 5)); \n        System.out.println(countPairs2(Arrays.asList(5, 10, 15), 5)); \n        System.out.println(countPairs2(Arrays.asList(1, 2, 3, 4), 10)); \n        System.out.println(countPairs2(Arrays.asList(1, 2, 5, 10), 10)); \n    }\n}"}, {"source_Lan": "python###tupleSameProduct.py", "source_code": "def tupleSameProduct( nums: List[int]) -> int:\n        n = len(nums)\n        cnt = Counter([nums[i] * nums[j] for i in range(n) for j in range(i + 1, n)])\n        ans = 0\n        for _, v in cnt.items():\n            ans += v * (v - 1) * 4\n        return ans", "trans_code": "public static int tupleSameProduct ( int [ ] nums ) throws Exception {\n  int n = nums . length ;\n  Counter < Integer > cnt = new ClassicCounter < Integer > ( nums [ i ] * nums [ j ] ) ;\n  int ans = 0 ;\n  for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) {\n    ans += nums [ i ] * nums [ j ] * 4 ;\n  }\n  return ans ;\n}\n", "reference_code": "    public static int tupleSameProduct(int[] nums) {\n        int n = nums.length;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                int key = nums[i] * nums[j];\n                cnt.put(key, cnt.getOrDefault(key, 0) + 1);\n            }\n        }\n        int ans = 0;\n        for (Integer v : cnt.values()) {\n            ans += v * (v - 1) * 4;\n        }\n        return ans;\n    }", "target_Lan": "java###tupleSameProduct_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class tupleSameProduct_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(tupleSameProduct(new int[]{1, 2, 2}));\n        System.out.println(tupleSameProduct(new int[]{0, 0, 0}));\n        System.out.println(tupleSameProduct(new int[]{1, 2, 3, 4}));\n        System.out.println(tupleSameProduct(new int[]{-1, 1, -1, 1}));\n        System.out.println(tupleSameProduct(new int[]{1000, 1000, 1000, 1000}));\n    }\n}"}, {"source_Lan": "python###sumOfMultiples.py", "source_code": "def sumOfMultiples( n: int) -> int:\n        return sum(i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0 or i % 7 == 0)", "trans_code": "static int sumOfMultiples ( int n ) throws Exception {\n  return sum ( i -> i % 3 == 0 || i % 5 == 0 || i % 7 == 0 ) ;\n}\n", "reference_code": "public static int sumOfMultiples(int n) {\n        int res = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\n                res += i;\n            }\n        }\n        return res;\n    }", "target_Lan": "java###sumOfMultiples_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\npublic class sumOfMultiples_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(sumOfMultiples(0));       \n        System.out.println(sumOfMultiples(15));      \n        System.out.println(sumOfMultiples(-5));      \n        System.out.println(sumOfMultiples(10000));   \n        System.out.println(sumOfMultiples(20));      \n    }\n}"}, {"source_Lan": "python###topStudents.py", "source_code": "def topStudents( positive_feedback, negative_feedback, report, student_id, k):\n        words = {}\n        for w in positive_feedback:\n            words[w] = 3\n        for w in negative_feedback:\n            words[w] = -1\n        A = []\n        for s, i in zip(report, student_id):\n            score = sum(words.get(w, 0)for w in s.split())\n            A.append([-score, i])\n        A.sort()\n        return [i for v,i in A[:k]]", "trans_code": "public static List < Integer > topStudents ( List < String > positiveFeedback , List < String > negativeFeedback , List < String > report , String studentId , int k ) {\n  Map < String , Integer > words = new HashMap < String , Integer > ( ) ;\n  for ( String w : positiveFeedback ) words . put ( w , 3 ) ;\n  for ( String w : negativeFeedback ) words . put ( w , - 1 ) ;\n  List < Integer > A = new ArrayList < Integer > ( ) ;\n  for ( Map . Entry < String , Integer > s : report ) {\n    int score = Integer . parseInt ( words . get ( w ) ) ;\n    A . add ( - score ) ;\n  }\n  Collections . sort ( A ) ;\n  return new ArrayList < Integer > ( A . subList ( 0 , k ) ) ;\n}\n", "reference_code": "public static List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {\n        Map<String, Integer> words = new HashMap<>();\n        for (String word : positive_feedback) {\n            words.put(word, 3);\n        }\n        for (String word : negative_feedback) {\n            words.put(word, -1);\n        }\n        int n = report.length;\n        int[] scores = new int[n];\n        int[][] A = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            int score = 0;\n            for (String word : report[i].split(\" \")) {\n                score += words.getOrDefault(word, 0);\n            }\n            A[i] = new int[]{-score, student_id[i]};\n        }\n        Arrays.sort(A, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n        List<Integer> topK = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            topK.add(A[i][1]);\n        }\n        return topK;\n    }", "target_Lan": "java###topStudents_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class topStudents_Test {\n// TOFILL\npublic static void main(String[] args) {\n        \n        String[] positive_feedback1 = {\"excellent\", \"good\"};\n        String[] negative_feedback1 = {\"poor\", \"bad\"};\n        String[] report1 = {\"excellent job\", \"good effort\", \"bad work\"};\n        int[] student_id1 = {1, 2, 3};\n        int k1 = 2;\n        System.out.println(topStudents(positive_feedback1, negative_feedback1, report1, student_id1, k1));\n\n        \n        String[] positive_feedback2 = {\"amazing\"};\n        String[] negative_feedback2 = {};\n        String[] report2 = {\"amazing job\"};\n        int[] student_id2 = {1};\n        int k2 = 1;\n        System.out.println(topStudents(positive_feedback2, negative_feedback2, report2, student_id2, k2));\n        \n        \n        String[] positive_feedback3 = {};\n        String[] negative_feedback3 = {\"terrible\"};\n        String[] report3 = {\"terrible performance\"};\n        int[] student_id3 = {1};\n        int k3 = 1;\n        System.out.println(topStudents(positive_feedback3, negative_feedback3, report3, student_id3, k3));\n        \n        \n        String[] positive_feedback4 = {\"great\", \"superb\"};\n        String[] negative_feedback4 = {\"awful\"};\n        String[] report4 = {\"great job\", \"awful work\", \"perfect effort\"};\n        int[] student_id4 = {1, 2, 3};\n        int k4 = 2;\n        System.out.println(topStudents(positive_feedback4, negative_feedback4, report4, student_id4, k4));\n        \n        \n        String[] positive_feedback5 = {\"good\"};\n        String[] negative_feedback5 = {\"bad\"};\n        String[] report5 = {\"this is a good day\", \"what a bad moment\"};\n        int[] student_id5 = {5, 6};\n        int k5 = 1;\n        System.out.println(topStudents(positive_feedback5, negative_feedback5, report5, student_id5, k5));\n    }\n}"}, {"source_Lan": "python###splitNum.py", "source_code": "def splitNum( num: int) -> int:\n    stnum = \"\".join(sorted(str(num)))\n    num1, num2 = int(stnum[::2]), int(stnum[1::2])\n    return num1 + num2", "trans_code": "public static int splitNum ( int num ) throws Exception {\n  String stnum = \"\" . join ( Arrays . asList ( String . valueOf ( num ) ) ) ;\n  int num1 = Integer . parseInt ( stnum . substring ( 0 , 2 ) ) , num2 = Integer . parseInt ( stnum . substring ( 1 , 2 ) ) ;\n  return num1 + num2 ;\n}\n", "reference_code": "public static int splitNum(int num) {\n        char[] stnum = Integer.toString(num).toCharArray();\n        Arrays.sort(stnum);\n        int num1 = 0, num2 = 0;\n        for (int i = 0; i < stnum.length; ++i) {\n            if (i % 2 == 0) {\n                num1 = num1 * 10 + (stnum[i] - '0');\n            } else {\n                num2 = num2 * 10 + (stnum[i] - '0');\n            }\n        }\n        return num1 + num2;\n    }", "target_Lan": "java###splitNum_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class splitNum_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(splitNum(2134));\n        System.out.println(splitNum(7744));\n        System.out.println(splitNum(999999999));\n        System.out.println(splitNum(102340));\n    }\n}"}, {"source_Lan": "python###fullBloomFlowers.py", "source_code": "def fullBloomFlowers( flowers: List[List[int]], people: List[int]) -> List[int]:\n        cnt = collections.defaultdict(int)\n        for start, end in flowers:\n            cnt[start] += 1\n            cnt[end + 1] -= 1\n        arr = sorted(cnt.items())\n        m = len(people)\n        ans = [0] * m\n        j, curr = 0, 0\n        for p, i in sorted(zip(people, range(m))):\n            while j < len(arr) and arr[j][0] <= p:\n                curr += arr[j][1]\n                j += 1\n            ans[i] = curr\n        return ans", "trans_code": "public static int [ ] fullBloomFlowers ( List < List < Integer >> flowers , int [ ] people ) throws Exception {\n  Map < Integer , Integer > cnt = Generics . newHashMap ( ) ;\n  for ( int start = 0 , end = flowers . size ( ) ;\n  start < end ;\n  start ++ ) {\n    cnt . put ( start , flowers . get ( start ) ) ;\n    cnt . put ( end + 1 , flowers . get ( end + 1 ) ) ;\n  }\n  int [ ] arr = new int [ cnt . size ( ) ] ;\n  Arrays . sort ( arr ) ;\n  int m = people . length ;\n  int [ ] ans = new int [ m ] ;\n  int j = 0 , curr = 0 ;\n  for ( int p = 0 , i = 0 ;\n  i < m ;\n  i ++ ) {\n    while ( j < arr . length && arr [ j ] . intValue ( ) <= p ) {\n      curr += arr [ j ] . intValue ( ) ;\n      j ++ ;\n    }\n    ans [ i ] = curr ;\n  }\n  return ans ;\n}\n", "reference_code": " public static int[] fullBloomFlowers(int[][] flowers, int[] persons) {\n        TreeMap<Integer, Integer> cnt = new TreeMap<>();\n        for (int[] flower : flowers) {\n            cnt.put(flower[0], cnt.getOrDefault(flower[0], 0) + 1);\n            cnt.put(flower[1] + 1, cnt.getOrDefault(flower[1] + 1, 0) - 1);\n        }\n        int m = persons.length;\n        Integer[] indices = IntStream.range(0, m).boxed().toArray(Integer[]::new);\n        Arrays.sort(indices, (i, j) -> persons[i] - persons[j]);\n        int[] ans = new int[m];\n        int curr = 0;\n        for (int x : indices) {\n            while (!cnt.isEmpty() && cnt.firstKey() <= persons[x]) {\n                curr += cnt.pollFirstEntry().getValue();\n            }\n            ans[x] = curr;\n        }\n        return ans;\n    }", "target_Lan": "java###fullBloomFlowers_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport java.util.stream.IntStream;\npublic class fullBloomFlowers_Test {\n// TOFILL\n    public static void main(String[] args) {\n        \n        int[][] flowers1 = {};\n        int[] persons1 = {};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers1, persons1)));\n        \n        \n        int[][] flowers2 = {{1, 4}};\n        int[] persons2 = {2};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers2, persons2)));\n        \n        \n        int[][] flowers3 = {{1, 3}, {4, 6}};\n        int[] persons3 = {1, 2, 3, 4, 5};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers3, persons3)));\n        \n        \n        int[][] flowers4 = {{1, 2}, {3, 5}, {6, 8}};\n        int[] persons4 = {0, 3, 6, 7, 9};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers4, persons4)));\n        \n        \n        int[][] flowers5 = {{1, 5}, {2, 3}};\n        int[] persons5 = {1, 2, 3, 4, 5};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers5, persons5)));\n    }\n}"}, {"source_Lan": "python###filterRestaurants.py", "source_code": "def filterRestaurants( restaurants: List[List[int]], veganFriendly: int, maxPrice: int, maxDistance: int) -> List[int]:\n        filtered = [r for r in restaurants if r[3] <= maxPrice and r[4] <= maxDistance and not (veganFriendly and not r[2])]\n        filtered.sort(key=lambda r: (-r[1], -r[0]))\n        return [r[0] for r in filtered]", "trans_code": "public static List < Integer > filterRestaurants ( List < List < Integer >> restaurants , int veganFriendly , int maxPrice , int maxDistance ) throws Exception {\n  List < Integer > filtered = new ArrayList < > ( restaurants ) ;\n  for ( List < Integer > r : restaurants ) {\n    if ( r . get ( 3 ) <= maxPrice && r . get ( 4 ) <= maxDistance && ! ( veganFriendly && ! r . get ( 2 ) ) ) {\n      filtered . add ( r . get ( 0 ) ) ;\n    }\n  }\n  Collections . sort ( filtered ) ;\n  return new ArrayList < > ( filtered ) ;\n}\n", "reference_code": "public static List<Integer> filterRestaurants(int[][] restaurants, int veganFriendly, int maxPrice, int maxDistance) {\n        int n = restaurants.length;\n        List<int[]> filtered = new ArrayList<int[]>();\n        for (int i = 0; i < n; i++) {\n            if (restaurants[i][3] <= maxPrice && restaurants[i][4] <= maxDistance && !(veganFriendly == 1 && restaurants[i][2] == 0)) {\n                filtered.add(restaurants[i]);\n            }\n        }\n        Collections.sort(filtered, (a, b) -> {\n            if (a[1] != b[1]) {\n                return b[1] - a[1];\n            } else {\n                return b[0] - a[0];\n            }\n        });\n        List<Integer> res = new ArrayList<Integer>();\n        for (int[] v : filtered) {\n            res.add(v[0]);\n        }\n        return res;\n    }", "target_Lan": "java###filterRestaurants_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\npublic class filterRestaurants_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] restaurants1 = {{1, 4, 1, 40, 10}, {2, 3, 0, 50, 5}, {3, 5, 1, 25, 15}};\n        System.out.println(filterRestaurants(restaurants1, 1, 50, 15)); \n\n        int[][] restaurants2 = {{1, 4, 1, 40, 10}, {2, 3, 0, 50, 5}, {3, 5, 0, 70, 20}};\n        System.out.println(filterRestaurants(restaurants2, 0, 50, 15)); \n\n        int[][] restaurants3 = {{1, 5, 0, 1000, 100}, {2, 2, 1, 500, 50}};\n        System.out.println(filterRestaurants(restaurants3, 1, 100, 100)); \n\n        int[][] restaurants4 = {{1, 4, 1, 0, 0}};\n        System.out.println(filterRestaurants(restaurants4, 1, 10, 10)); \n\n        int[][] restaurants5 = {{1, 5, 1, Integer.MAX_VALUE, Integer.MAX_VALUE}};\n        System.out.println(filterRestaurants(restaurants5, 1, Integer.MAX_VALUE, Integer.MAX_VALUE)); \n    }\n}"}, {"source_Lan": "python###passThePillow.py", "source_code": "def passThePillow( n: int, time: int) -> int:\n        time %= (n - 1) * 2\n        return time + 1 if time < n else n * 2 - time - 1", "trans_code": "public static int passThePillow ( int n , int time ) throws Exception {\n  time %= ( n - 1 ) * 2 ;\n  return time + 1 < n ? n * 2 - time - 1 : 0 ;\n}\n", "reference_code": "public static int passThePillow(int n, int time) {\n        time %= (n - 1) * 2;\n        return time < n ? time + 1 : n * 2 - time - 1;\n    }", "target_Lan": "java###passThePillow_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\npublic class passThePillow_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(passThePillow(2, 3));  \n        System.out.println(passThePillow(5, 10)); \n        System.out.println(passThePillow(4, 7));  \n        System.out.println(passThePillow(10, 20)); \n    }\n}"}, {"source_Lan": "python###collectTheCoins.py", "source_code": "def collectTheCoins( coins: List[int], edges: List[List[int]]) -> int:\n        n = len(coins)\n        g = defaultdict(list)\n        degree = [0] * n\n        for x, y in edges:\n            g[x].append(y)\n            g[y].append(x)\n            degree[x] += 1\n            degree[y] += 1\n        rest = n\n        \n        q = deque(i for i in range(n) if degree[i] == 1 and coins[i] == 0)\n        while q:\n            u = q.popleft()\n            degree[u] -= 1\n            rest -= 1\n            for v in g[u]:\n                degree[v] -= 1\n                if degree[v] == 1 and coins[v] == 0:\n                    q.append(v)\n        \n        for _ in range(2):\n            q = deque(i for i in range(n) if degree[i] == 1)\n            while q:\n                u = q.popleft()\n                degree[u] -= 1\n                rest -= 1\n                for v in g[u]:\n                    degree[v] -= 1\n        return 0 if rest == 0 else (rest - 1) * 2", "trans_code": "public static int collectTheCoins ( List < Integer > coins , List < List < Integer >> edges ) throws Exception {\n  int n = coins . size ( ) ;\n  Map < Integer , List < Integer >> g = new TreeMap < Integer , List < Integer >> ( ) ;\n  int [ ] degree = new int [ n ] ;\n  for ( int x = 0 , y = 0 ;\n  x < n ;\n  x ++ , y ++ ) {\n    g . put ( x , y ) ;\n    g . get ( y ) . add ( x ) ;\n    degree [ x ] ++ ;\n    degree [ y ] ++ ;\n  }\n  int rest = n ;\n  Deque < Integer > q = new ArrayDeque < Integer > ( i -> degree [ i ] == 1 && coins . get ( i ) == 0 ) ;\n  while ( q . pollLast ( ) != null ) {\n    Integer u = q . pop ( ) ;\n    degree [ u ] -- ;\n    rest -- ;\n    for ( Integer v : g . get ( u ) ) {\n      degree [ v ] -- ;\n      if ( degree [ v ] == 1 && coins . get ( v ) == 0 ) q . push ( v ) ;\n    }\n  }\n  for ( ;\n  rest > 0 ;\n  rest -- ) {\n    q = new ArrayDeque < Integer > ( i -> degree [ i ] == 1 ) ;\n    while ( q . pollLast ( ) != null ) {\n      Integer u = q . pop ( ) ;\n      degree [ u ] -- ;\n      rest -- ;\n      for ( Integer v : g . get ( u ) ) {\n        degree [ v ] -- ;\n      }\n    }\n  }\n  return rest == 0 ? 0 : ( rest - 1 ) * 2 ;\n}\n", "reference_code": "public static int collectTheCoins(int[] coins, int[][] edges) {\n        int n = coins.length;\n        List<Integer>[] g = new List[n];\n        for (int i = 0; i < n; ++i) {\n            g[i] = new ArrayList<Integer>();\n        }\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0], y = edge[1];\n            g[x].add(y);\n            g[y].add(x);\n            ++degree[x];\n            ++degree[y];\n        }\n        int rest = n;\n        \n        Queue<Integer> queue = new ArrayDeque<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (degree[i] == 1 && coins[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            --degree[u];\n            --rest;\n            for (int v : g[u]) {\n                --degree[v];\n                if (degree[v] == 1 && coins[v] == 0) {\n                    queue.offer(v);\n                }\n            }\n        }\n        \n        for (int x = 0; x < 2; ++x) {\n            queue = new ArrayDeque<Integer>();\n            for (int i = 0; i < n; ++i) {\n                if (degree[i] == 1) {\n                    queue.offer(i);\n                }\n            }\n            while (!queue.isEmpty()) {\n                int u = queue.poll();\n                --degree[u];\n                --rest;\n                for (int v : g[u]) {\n                    --degree[v];\n                }\n            }\n        }\n        return rest == 0 ? 0 : (rest - 1) * 2;\n    }", "target_Lan": "java###collectTheCoins_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class collectTheCoins_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(collectTheCoins(new int[]{}, new int[][]{})); \n        System.out.println(collectTheCoins(new int[]{0, 0, 0}, new int[][]{{0, 1}, {1, 2}})); \n        System.out.println(collectTheCoins(new int[]{1, 0, 0}, new int[][]{{0, 1}, {0, 2}})); \n        System.out.println(collectTheCoins(new int[]{1, 1, 0}, new int[][]{{0, 1}, {0, 2}})); \n        System.out.println(collectTheCoins(new int[]{1, 1, 1}, new int[][]{{0, 1}, {0, 2}})); \n    }\n}"}, {"source_Lan": "python###distMoney.py", "source_code": "def distMoney( money: int, children: int) -> int:\n        if money < children:\n            return -1\n        money -= children\n        cnt = min(money // 7, children)\n        money -= cnt * 7\n        children -= cnt\n        if (children == 0 and money > 0) or (children == 1 and money == 3):\n            cnt -= 1\n        return cnt", "trans_code": "public static int distMoney ( int money , int children ) throws Exception {\n  if ( money < children ) {\n    return - 1 ;\n  }\n  money -= children ;\n  int cnt = Math . min ( money / 7 , children ) ;\n  money -= cnt * 7 ;\n  children -= cnt ;\n  if ( ( children == 0 && money > 0 ) || ( children == 1 && money == 3 ) ) {\n    cnt -- ;\n  }\n  return cnt ;\n}\n", "reference_code": "public static int distMoney(int money, int children) {\n        if (money < children) {\n            return -1;\n        }\n        money -= children;\n        int cnt = Math.min(money / 7, children);\n        money -= cnt * 7;\n        children -= cnt;\n        if ((children == 0 && money > 0) || (children == 1 && money == 3)) {\n            cnt--;\n        }\n        return cnt;\n    }", "target_Lan": "java###distMoney_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class distMoney_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(distMoney(0, 1));   \n        System.out.println(distMoney(3, 1));   \n        System.out.println(distMoney(10, 2));  \n        System.out.println(distMoney(17, 3));  \n        System.out.println(distMoney(100, 20)); \n    }\n}"}, {"source_Lan": "python###queensAttacktheKing.py", "source_code": "def queensAttacktheKing( queens: List[List[int]], king: List[int]) -> List[List[int]]:\n        queen_pos = set((x, y) for x, y in queens)\n        ans = list()\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if dx == dy == 0:\n                    continue\n                kx, ky = king[0] + dx, king[1] + dy\n                while 0 <= kx < 8 and 0 <= ky < 8:\n                    if (kx, ky) in queen_pos:\n                        ans.append([kx, ky])\n                        break\n                    kx += dx\n                    ky += dy\n        return ans", "trans_code": "public static List < List < Integer >> queensAttacktheKing ( List < List < Integer >> queens , List < Integer > king ) throws Exception {\n  Set < Integer > queenPos = new HashSet < Integer > ( ) ;\n  for ( int x : queens ) {\n    queenPos . add ( x ) ;\n  }\n  List < List < Integer >> ans = Lists . newArrayList ( ) ;\n  for ( int dx = - 1 ;\n  dx <= 0 ;\n  dx ++ ) {\n    for ( int dy = - 1 ;\n    dy <= 0 ;\n    dy ++ ) {\n      if ( dx == dy == 0 ) {\n        continue ;\n      }\n      int kx = king . get ( 0 ) + dx , ky = king . get ( 1 ) + dy ;\n      while ( 0 <= kx && 0 <= ky ) {\n        if ( ( kx < 8 ) || ( ky < 8 ) ) {\n          ans . add ( new ArrayList < Integer > ( ) ) ;\n          break ;\n        }\n        kx += dx ;\n        ky += dy ;\n      }\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {\n        Set<Integer> queenPos = new HashSet<Integer>();\n        for (int[] queen : queens) {\n            int x = queen[0], y = queen[1];\n            queenPos.add(x * 8 + y);\n        }\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        for (int dx = -1; dx <= 1; ++dx) {\n            for (int dy = -1; dy <= 1; ++dy) {\n                if (dx == 0 && dy == 0) {\n                    continue;\n                }\n                int kx = king[0] + dx, ky = king[1] + dy;\n                while (kx >= 0 && kx < 8 && ky >= 0 && ky < 8) {\n                    int pos = kx * 8 + ky;\n                    if (queenPos.contains(pos)) {\n                        List<Integer> posList = new ArrayList<Integer>();\n                        posList.add(kx);\n                        posList.add(ky);\n                        ans.add(posList);\n                        break;\n                    }\n                    kx += dx;\n                    ky += dy;\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###queensAttacktheKing_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class queensAttacktheKing_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] queens1 = {{0, 1}, {1, 0}, {2, 2}};\n        int[] king1 = {1, 1};\n        System.out.println(queensAttacktheKing(queens1, king1));\n\n        int[][] queens2 = {{3, 3}, {5, 5}, {0, 6}};\n        int[] king2 = {4, 4};\n        System.out.println(queensAttacktheKing(queens2, king2));\n\n        int[][] queens3 = {};\n        int[] king3 = {3, 3};\n        System.out.println(queensAttacktheKing(queens3, king3));\n\n        int[][] queens4 = {{7, 0}, {6, 1}, {5, 3}, {2, 2}, {4, 4}};\n        int[] king4 = {3, 3};\n        System.out.println(queensAttacktheKing(queens4, king4));\n\n        int[][] queens5 = {{1, 3}, {3, 5}, {5, 1}, {6, 7}};\n        int[] king5 = {6, 6};\n        System.out.println(queensAttacktheKing(queens5, king5));\n    }\n}"}, {"source_Lan": "python###giveGem.py", "source_code": "def giveGem( gem: List[int], operations: List[List[int]]) -> int:\n        for x, y in operations:\n            number = gem[x] // 2\n            gem[x] -= number\n            gem[y] += number\n        mn, mx = gem[0], gem[0]\n        for number in gem:\n            mn = min(number, mn)\n            mx = max(number, mx)\n        return mx - mn", "trans_code": "public static int giveGem ( int [ ] gem , int [ ] operations ) throws Exception {\n  for ( int x = 0 , y = 0 ;\n  x < operations . length ;\n  x ++ , y ++ ) {\n    int number = gem [ x ] / 2 ;\n    gem [ x ] -= number ;\n    gem [ y ] += number ;\n  }\n  int mn = gem [ 0 ] , mx = gem [ 0 ] ;\n  for ( int number : gem ) {\n    mn = Math . min ( number , mn ) ;\n    mx = Math . max ( number , mx ) ;\n  }\n  return mx - mn ;\n}\n", "reference_code": "public static int giveGem(int[] gem, int[][] operations) {\n        for (int[] operation : operations) {\n            int x = operation[0], y = operation[1];\n            int number = gem[x] / 2;\n            gem[x] -= number;\n            gem[y] += number;\n        }\n        int mn = gem[0], mx = gem[0];\n        for (int number : gem) {\n            mn = Math.min(number, mn);\n            mx = Math.max(number, mx);\n        }\n        return mx - mn;\n    }", "target_Lan": "java###giveGem_Test.java", "target_code_shell": "import java.util.Arrays;\npublic class giveGem_Test {\n// TOFILL\n    public static void main(String[] args) {\n        \n        int[] gem1 = {10, 5, 15};\n        int[][] operations1 = {{0, 1}, {1, 2}};\n        System.out.println(giveGem(gem1, operations1));  \n\n        \n        int[] gem2 = {0, 0, 0};\n        int[][] operations2 = {};\n        System.out.println(giveGem(gem2, operations2));  \n\n        \n        int[] gem3 = {8, -2, 5};\n        int[][] operations3 = {{0, 1}, {2, 1}};\n        System.out.println(giveGem(gem3, operations3));  \n\n        \n        int[] gem4 = {20, 50, 80};\n        int[][] operations4 = {{1, 0}, {2, 1}, {0, 2}};\n        System.out.println(giveGem(gem4, operations4));  \n\n        \n        int[] gem5 = {1000, 3000, 2000};\n        int[][] operations5 = {{0, 1}, {1, 2}};\n        System.out.println(giveGem(gem5, operations5));  \n    }\n}"}, {"source_Lan": "python###checkValidGrid.py", "source_code": "def checkValidGrid( grid: List[List[int]]) -> bool:\n        if grid[0][0] != 0:\n            return False\n        n = len(grid)\n        indices = [[] for _ in range(n * n)]\n        for i in range(n):\n            for j in range(n):\n                indices[grid[i][j]] = [i, j]\n        for i in range(1, n * n, 1):\n            dx = abs(indices[i][0] - indices[i - 1][0])\n            dy = abs(indices[i][1] - indices[i - 1][1])\n            if dx * dy != 2:\n                return False\n        return True", "trans_code": "public static boolean checkValidGrid ( int [ ] [ ] grid ) throws Exception {\n  if ( grid [ 0 ] [ 0 ] != 0 ) {\n    return false ;\n  }\n  int n = grid . length ;\n  int [ ] [ ] indices = new int [ n * n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      indices [ grid [ i ] [ j ] ] = new int [ n ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n * n ;\n  i ++ ) {\n    int dx = Math . abs ( indices [ i ] [ 0 ] - indices [ i - 1 ] [ 0 ] ) ;\n    int dy = Math . abs ( indices [ i ] [ 1 ] - indices [ i - 1 ] [ 1 ] ) ;\n    if ( dx * dy != 2 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n", "reference_code": "public static boolean checkValidGrid(int[][] grid) {\n        if (grid[0][0] != 0) {\n            return false;\n        }\n        int n = grid.length;\n        int[][] indices = new int[n * n][2];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                indices[grid[i][j]][0] = i;\n                indices[grid[i][j]][1] = j;\n            }\n        }\n        for (int i = 1; i < n * n; i++) {\n            int dx = Math.abs(indices[i][0] - indices[i - 1][0]);\n            int dy = Math.abs(indices[i][1] - indices[i - 1][1]);\n            if (dx * dy != 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_Lan": "java###checkValidGrid_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class checkValidGrid_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] grid1 = {{1, 2}, {0, 3}};\n        int[][] grid2 = {{0, 1}, {3, 2}};\n        int[][] grid3 = {{0, 1}, {2, 3}};\n        int[][] grid4 = {{0, 3}, {1, 2}};\n        \n        System.out.println(checkValidGrid(grid1)); \n        System.out.println(checkValidGrid(grid2)); \n        System.out.println(checkValidGrid(grid3)); \n        System.out.println(checkValidGrid(grid4)); \n    }\n}"}, {"source_Lan": "python###findTheArrayConcVal.py", "source_code": "def findTheArrayConcVal( nums: List[int]) -> int:\n        ans = 0\n        i, j = 0, len(nums) - 1\n        while i <= j:\n            if i != j:\n                ans += int(str(nums[i]) + str(nums[j]))\n            else:\n                ans += nums[i]\n            i += 1\n            j -= 1\n        return ans", "trans_code": "public static int findTheArrayConcVal ( int [ ] nums ) throws Exception {\n  int ans = 0 ;\n  int i = 0 , j = nums . length - 1 ;\n  while ( i <= j ) {\n    if ( i != j ) ans += Integer . parseInt ( String . valueOf ( nums [ i ] ) + String . valueOf ( nums [ j ] ) ) ;\n    else ans += nums [ i ] ;\n    i ++ ;\n    j -- ;\n  }\n  return ans ;\n}\n", "reference_code": "public static long findTheArrayConcVal(int[] nums) {\n        long ans = 0;\n        for (int i = 0, j = nums.length - 1; i <= j; i++, j--) {\n            if (i != j) {\n                ans += Integer.parseInt(Integer.toString(nums[i]) + Integer.toString(nums[j]));\n            } else {\n                ans += nums[i];\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###findTheArrayConcVal_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findTheArrayConcVal_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findTheArrayConcVal(new int[]{})); \n        System.out.println(findTheArrayConcVal(new int[]{5})); \n        System.out.println(findTheArrayConcVal(new int[]{1, 2})); \n        System.out.println(findTheArrayConcVal(new int[]{3, 4, 5})); \n    }\n}"}, {"source_Lan": "python###findDelayedArrivalTime.py", "source_code": "def findDelayedArrivalTime( arrivalTime: int, delayedTime: int) -> int:\n        return (arrivalTime + delayedTime) % 24", "trans_code": "public static int findDelayedArrivalTime ( int arrivalTime , int delayedTime ) throws InterruptedException {\n  return ( arrivalTime + delayedTime ) % 24 ;\n}\n", "reference_code": "public static int findDelayedArrivalTime(int arrivalTime, int delayedTime) {\n        return (arrivalTime + delayedTime) % 24;\n    }", "target_Lan": "java###findDelayedArrivalTime_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\npublic class findDelayedArrivalTime_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(findDelayedArrivalTime(0, 0));    \n        System.out.println(findDelayedArrivalTime(23, 1));   \n        System.out.println(findDelayedArrivalTime(10, 15));  \n        System.out.println(findDelayedArrivalTime(22, 25));  \n        System.out.println(findDelayedArrivalTime(-1, 5));   \n    }\n}"}, {"source_Lan": "python###checkIfPrerequisite.py", "source_code": "def checkIfPrerequisite( numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:\n        g = [[] for _ in range(numCourses)]\n        indgree = [0] * numCourses\n        isPre = [[False] * numCourses for _ in range(numCourses)]\n        for p in prerequisites:\n            indgree[p[1]] += 1\n            g[p[0]].append(p[1])\n        q = []\n        for i in range(numCourses):\n            if indgree[i] == 0:\n                q.append(i)\n        while len(q) > 0:\n            cur = q[0]\n            q.pop(0)\n            for ne in g[cur]:\n                isPre[cur][ne] = True\n                for i in range(numCourses):\n                    isPre[i][ne] = isPre[i][ne] or isPre[i][cur]\n                indgree[ne] -= 1\n                if indgree[ne] == 0:\n                    q.append(ne)\n        res = []\n        for query in queries:\n            res.append(isPre[query[0]][query[1]])\n        return res", "trans_code": "public static boolean [ ] [ ] checkIfPrerequisite ( int numCourses , List < List < Integer >> prerequisites , List < List < Integer >> queries ) throws Exception {\n  ArrayList < ArrayList < Integer >> g = new ArrayList < ArrayList < Integer >> ( numCourses ) ;\n  int [ ] [ ] indgree = new int [ numCourses ] [ numCourses ] ;\n  boolean [ ] [ ] isPre = new boolean [ numCourses ] [ numCourses ] ;\n  for ( int i = 0 ;\n  i < numCourses ;\n  i ++ ) {\n    for ( List < Integer > p : prerequisites ) {\n      indgree [ p . get ( 1 ) ] ++ ;\n      g . get ( p . get ( 0 ) ) . add ( p . get ( 1 ) ) ;\n    }\n  }\n  LinkedList < Integer > q = new LinkedList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < numCourses ;\n  i ++ ) {\n    if ( indgree [ i ] == 0 ) {\n      q . add ( i ) ;\n    }\n  }\n  while ( q . size ( ) > 0 ) {\n    int cur = q . getFirst ( ) ;\n    q . removeFirst ( ) ;\n    for ( int ne : g . get ( cur ) ) {\n      isPre [ cur ] [ ne ] = true ;\n      for ( int i = 0 ;\n      i < numCourses ;\n      i ++ ) {\n        isPre [ i ] [ ne ] = isPre [ i ] [ ne ] || isPre [ i ] [ cur ] ;\n      }\n      indgree [ ne ] -- ;\n      if ( indgree [ ne ] == 0 ) {\n        q . add ( ne ) ;\n      }\n    }\n  }\n  boolean [ ] [ ] res = new boolean [ queries . size ( ) ] [ ] ;\n  for ( int i = 0 ;\n  i < queries . size ( ) ;\n  i ++ ) {\n    res [ i ] = isPre [ queries . get ( i ) . get ( 0 ) ] [ queries . get ( i ) . get ( 1 ) ] ;\n  }\n  return res ;\n}\n", "reference_code": "    public static List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {\n        List<Integer>[] g = new List[numCourses];\n        for (int i = 0; i < numCourses; i++) {\n            g[i] = new ArrayList<Integer>();\n        }\n        int[] indgree = new int[numCourses];\n        boolean[][] isPre = new boolean[numCourses][numCourses];\n        for (int[] p : prerequisites) {\n            ++indgree[p[1]];\n            g[p[0]].add(p[1]);\n        }\n        Queue<Integer> queue = new ArrayDeque<Integer>();\n        for (int i = 0; i < numCourses; ++i) {\n            if (indgree[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int cur = queue.poll();\n            for (int ne : g[cur]) {\n                isPre[cur][ne] = true;\n                for (int i = 0; i < numCourses; ++i) {\n                    isPre[i][ne] = isPre[i][ne] | isPre[i][cur];\n                }\n                --indgree[ne];\n                if (indgree[ne] == 0) {\n                    queue.offer(ne);\n                }\n            }\n        }\n        List<Boolean> res = new ArrayList<Boolean>();\n        for (int[] query : queries) {\n            res.add(isPre[query[0]][query[1]]);\n        }\n        return res;\n    }", "target_Lan": "java###checkIfPrerequisite_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class checkIfPrerequisite_Test {\n// TOFILL\npublic static void main(String[] args) {\n        \n        int numCourses1 = 2;\n        int[][] prerequisites1 = {{0, 1}};\n        int[][] queries1 = {{0, 1}, {1, 0}};\n        System.out.println(checkIfPrerequisite(numCourses1, prerequisites1, queries1));\n\n        \n        int numCourses2 = 3;\n        int[][] prerequisites2 = {{0, 1}, {1, 2}};\n        int[][] queries2 = {{0, 2}, {1, 0}, {2, 1}};\n        System.out.println(checkIfPrerequisite(numCourses2, prerequisites2, queries2));\n        \n        \n        int numCourses3 = 4;\n        int[][] prerequisites3 = {{0, 2}, {2, 3}};\n        int[][] queries3 = {{0, 3}, {3, 0}, {2, 1}};\n        System.out.println(checkIfPrerequisite(numCourses3, prerequisites3, queries3));\n        \n        \n        int numCourses4 = 5;\n        int[][] prerequisites4 = {};\n        int[][] queries4 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};\n        System.out.println(checkIfPrerequisite(numCourses4, prerequisites4, queries4));\n        \n        \n        int numCourses5 = 3;\n        int[][] prerequisites5 = {{0, 1}, {1, 2}, {2, 0}};\n        int[][] queries5 = {{0, 2}, {1, 0}, {2, 0}, {0, 1}};\n        System.out.println(checkIfPrerequisite(numCourses5, prerequisites5, queries5));\n    }\n}"}, {"source_Lan": "python###minTrioDegree.py", "source_code": "def minTrioDegree( n: int, edges: List[List[int]]) -> int:\n    g = [[0] * n for _ in range(n)]\n    degree = [0] * n\n    for x, y in edges:\n        x, y = x - 1, y - 1\n        g[x][y] = g[y][x] = 1\n        degree[x] += 1\n        degree[y] += 1\n    ans = inf\n    for i in range(n):\n        for j in range(i + 1, n):\n            if g[i][j] == 1:\n                for k in range(j + 1, n):\n                    if g[i][k] == g[j][k] == 1:\n                        ans = min(ans, degree[i] + degree[j] + degree[k] - 6)\n    return -1 if ans == inf else ans\n    ", "trans_code": "public static int minTrioDegree ( int n , List < List < Integer >> edges ) throws Exception {\n  int [ ] [ ] g = new int [ n ] [ n ] ;\n  int [ ] degree = new int [ n ] ;\n  for ( int x = 0 , y = 0 ;\n  x < n ;\n  x ++ , y ++ ) {\n    x = x - 1 ;\n    y = y - 1 ;\n    g [ x ] [ y ] = g [ y ] [ x ] = 1 ;\n    degree [ x ] ++ ;\n    degree [ y ] ++ ;\n  }\n  int ans = inf ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( g [ i ] [ j ] == 1 ) {\n        for ( int k = j + 1 ;\n        k < n ;\n        k ++ ) {\n          if ( g [ i ] [ k ] == g [ j ] [ k ] == 1 ) {\n            ans = Math . min ( ans , degree [ i ] + degree [ j ] + degree [ k ] - 6 ) ;\n          }\n        }\n      }\n    }\n  }\n  return - 1 == ans ? inf : ans ;\n}\n", "reference_code": "    public static int minTrioDegree(int n, int[][] edges) {\n        int[][] g = new int[n][n];\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            g[x][y] = g[y][x] = 1;\n            ++degree[x];\n            ++degree[y];\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (g[i][j] == 1) {\n                    for (int k = j + 1; k < n; ++k) {\n                        if (g[i][k] == 1 && g[j][k] == 1) {\n                            ans = Math.min(ans, degree[i] + degree[j] + degree[k] - 6);\n                        }\n                    }\n                }\n            }\n        }\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }", "target_Lan": "java###minTrioDegree_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minTrioDegree_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minTrioDegree(3, new int[][]{{1, 2}, {2, 3}, {1, 3}}));\n        System.out.println(minTrioDegree(4, new int[][]{{1, 2}, {1, 3}, {2, 3}}));\n        System.out.println(minTrioDegree(5, new int[][]{{1, 2}, {2, 3}, {3, 4}}));\n        System.out.println(minTrioDegree(4, new int[][]{{1, 2}, {2, 3}, {1, 3}, {1, 4}}));\n        System.out.println(minTrioDegree(6, new int[][]{{1, 2}, {1, 3}, {2, 3}, {2, 4}, {4, 5}, {5, 6}, {6, 1}}));\n    }\n}"}, {"source_Lan": "python###minTrioDegree2.py", "source_code": "def minTrioDegree2(n: int, edges: List[List[int]]) -> int:\n    g = defaultdict(set)\n\n    h = defaultdict(list)\n    degree = [0] * n\n    for x, y in edges:\n        x, y = x - 1, y - 1\n        g[x].add(y)\n        g[y].add(x)\n        degree[x] += 1\n        degree[y] += 1\n    for x, y in edges:\n        x, y = x - 1, y - 1\n        if degree[x] < degree[y] or (degree[x] == degree[y] and x < y):\n            h[x].append(y)\n        else:\n            h[y].append(x)\n    ans = inf\n    for i in range(n):\n        for j in h[i]:\n            for k in h[j]:\n                if k in g[i]:\n                    ans = min(ans, degree[i] + degree[j] + degree[k] - 6)\n    return -1 if ans == inf else ans\n    ", "trans_code": "public static int minTrioDegree2 ( int n , List < List < Integer >> edges ) throws Exception {\n  Map < Integer , Set < Integer >> g = new TreeMap < Integer , Set < Integer >> ( ) ;\n  Map < Integer , List < Integer >> h = new TreeMap < Integer , List < Integer >> ( ) ;\n  int [ ] degree = new int [ n ] ;\n  for ( int x = 0 , y = 0 ;\n  x < n ;\n  x ++ ) {\n    int x = x - 1 , y = y - 1 ;\n    g . put ( x , y ) ;\n    g . get ( y ) . add ( x ) ;\n    degree [ x ] ++ ;\n    degree [ y ] ++ ;\n  }\n  for ( int x = 0 , y = 0 ;\n  x < n ;\n  x ++ , y ++ ) {\n    int x = x - 1 , y = y - 1 ;\n    if ( degree [ x ] < degree [ y ] || ( degree [ x ] == degree [ y ] && x < y ) ) {\n      h . get ( x ) . add ( y ) ;\n    }\n    else {\n      h . get ( y ) . add ( x ) ;\n    }\n  }\n  int ans = inf ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < h . get ( i ) . size ( ) ;\n    j ++ ) {\n      for ( int k = 0 ;\n      k < h . get ( j ) . size ( ) ;\n      k ++ ) {\n        if ( h . get ( j ) . contains ( i ) ) {\n          ans = Math . min ( ans , degree [ i ] + degree [ j ] + degree [ k ] - 6 ) ;\n        }\n      }\n    }\n  }\n  return - 1 == ans ? 0 : ans ;\n}\n", "reference_code": "public static int minTrioDegree2(int n, int[][] edges) {\n        \n        Set<Integer>[] g = new Set[n];\n        for (int i = 0; i < n; ++i) {\n            g[i] = new HashSet<Integer>();\n        }\n        \n        List<Integer>[] h = new List[n];\n        for (int i = 0; i < n; ++i) {\n            h[i] = new ArrayList<Integer>();\n        }\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            g[x].add(y);\n            g[y].add(x);\n            ++degree[x];\n            ++degree[y];\n        }\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            if (degree[x] < degree[y] || (degree[x] == degree[y] && x < y)) {\n                h[x].add(y);\n            } else {\n                h[y].add(x);\n            }\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; ++i) {\n            for (int j : h[i]) {\n                for (int k : h[j]) {\n                    if (g[i].contains(k)) {\n                        ans = Math.min(ans, degree[i] + degree[j] + degree[k] - 6);\n                    }\n                }\n            }\n        }\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }", "target_Lan": "java###minTrioDegree2_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minTrioDegree2_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minTrioDegree2(3, new int[][]{{1, 2}, {1, 3}, {2, 3}})); \n        System.out.println(minTrioDegree2(4, new int[][]{{1, 2}, {1, 3}}));      \n        System.out.println(minTrioDegree2(5, new int[][]{{1, 2}, {2, 3}, {3, 1}, {1, 4}, {4, 5}})); \n        System.out.println(minTrioDegree2(0, new int[][]{}));                    \n        System.out.println(minTrioDegree2(6, new int[][]{{1, 2}, {2, 3}, {1, 3}, {4, 5}, {5, 6}, {4, 6}})); \n    }\n}"}, {"source_Lan": "python###minimumJumps.py", "source_code": "def minimumJumps( forbidden: List[int], a: int, b: int, x: int) -> int:\n        q, visited = deque([[0, 1, 0]]), set([0])\n        lower, upper = 0, max(max(forbidden) + a, x) + b\n        forbiddenSet = set(forbidden)\n        while q:\n            position, direction, step = q.popleft()\n            if position == x:\n                return step\n            nextPosition = position + a\n            nextDirection = 1\n            if lower <= nextPosition <= upper and nextPosition * nextDirection not in visited and nextPosition not in forbiddenSet:\n                visited.add(nextPosition * nextDirection)\n                q.append([nextPosition, nextDirection, step + 1])\n            if direction == 1:\n                nextPosition = position - b\n                nextDirection = -1\n                if lower <= nextPosition <= upper and nextPosition * nextDirection not in visited and nextPosition not in forbiddenSet:\n                    visited.add(nextPosition * nextDirection)\n                    q.append([nextPosition, nextDirection, step + 1])\n        return -1", "trans_code": "public static int minimumJumps ( int [ ] forbidden , int a , int b , int x ) throws Exception {\n  Deque < Integer > q = new ArrayDeque < > ( ) , visited = new HashSet < > ( ) ;\n  int lower = 0 , upper = Math . max ( Math . max ( forbidden ) + a , x ) + b ;\n  Set < Integer > forbiddenSet = new HashSet < > ( forbidden ) ;\n  while ( q . pollLast ( ) != null ) {\n    int position = q . peekLast ( ) ;\n    int direction = q . peekLast ( ) ;\n    int step = q . peekLast ( ) ;\n    if ( position == x ) {\n      return step ;\n    }\n    int nextPosition = position + a ;\n    int nextDirection = 1 ;\n    if ( lower <= nextPosition && nextPosition * nextDirection != 0 && nextPosition != forbiddenSet . contains ( nextPosition ) ) {\n      visited . add ( nextPosition * nextDirection ) ;\n      q . addLast ( new Integer ( nextPosition ) ) ;\n    }\n    if ( direction == 1 ) {\n      nextPosition = position - b ;\n      nextDirection = - 1 ;\n      if ( lower <= nextPosition && nextPosition * nextDirection != 0 && nextPosition != forbiddenSet . contains ( nextPosition ) ) {\n        visited . add ( nextPosition * nextDirection ) ;\n        q . addLast ( new Integer ( nextPosition ) ) ;\n      }\n    }\n  }\n  return - 1 ;\n}\n", "reference_code": "public static int minimumJumps(int[] forbidden, int a, int b, int x) {\n        Queue<int[]> queue = new ArrayDeque<int[]>();\n        Set<Integer> visited = new HashSet<Integer>();\n        queue.offer(new int[]{0, 1, 0});\n        visited.add(0);\n        int lower = 0, upper = Math.max(Arrays.stream(forbidden).max().getAsInt() + a, x) + b;\n        Set<Integer> forbiddenSet = new HashSet<Integer>();\n        for (int position : forbidden) {\n            forbiddenSet.add(position);\n        }\n        while (!queue.isEmpty()) {\n            int[] arr = queue.poll();\n            int position = arr[0], direction = arr[1], step = arr[2];\n            if (position == x) {\n                return step;\n            }\n            int nextPosition = position + a;\n            int nextDirection = 1;\n            if (lower <= nextPosition && nextPosition <= upper && !visited.contains(nextPosition * nextDirection) && !forbiddenSet.contains(nextPosition)) {\n                visited.add(nextPosition * nextDirection);\n                queue.offer(new int[]{nextPosition, nextDirection, step + 1});\n            }\n            if (direction == 1) {\n                nextPosition = position - b;\n                nextDirection = -1;\n                if (lower <= nextPosition && nextPosition <= upper && !visited.contains(nextPosition * nextDirection) && !forbiddenSet.contains(nextPosition)) {\n                    visited.add(nextPosition * nextDirection);\n                    queue.offer(new int[]{nextPosition, nextDirection, step + 1});\n                }\n            }\n        }\n        return -1;\n    }", "target_Lan": "java###minimumJumps_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayDeque;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Queue;\nimport java.util.Set;\npublic class minimumJumps_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumJumps(new int[]{3}, 2, 1, 5)); \n        System.out.println(minimumJumps(new int[]{1, 4, 6}, 3, 2, 10)); \n        System.out.println(minimumJumps(new int[]{2, 5, 7}, 1, 1, 8)); \n        System.out.println(minimumJumps(new int[]{100, 200, 300}, 100, 50, 350)); \n    }\n}"}, {"source_Lan": "python###numFactoredBinaryTrees.py", "source_code": "def numFactoredBinaryTrees( arr: List[int]) -> int:\n        n = len(arr)\n        arr = sorted(arr)\n        dp = [1] * n\n        res, mod = 0, 10**9 + 7\n        for i in range(n):\n            left, right = 0, i - 1\n            while left <= right:\n                while right >= left and arr[left] * arr[right] > arr[i]:\n                    right -= 1\n                if right >= left and arr[left] * arr[right] == arr[i]:\n                    if right != left:\n                        dp[i] = (dp[i] + dp[left] * dp[right] * 2) % mod\n                    else:\n                        dp[i] = (dp[i] + dp[left] * dp[right]) % mod\n                left += 1\n            res = (res + dp[i]) % mod\n        return res", "trans_code": "public static int numFactoredBinaryTrees ( int [ ] arr ) throws Exception {\n  int n = arr . length ;\n  Arrays . sort ( arr ) ;\n  int [ ] dp = new int [ n ] ;\n  int res = 0 , mod = 10 * 9 + 7 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int left = 0 , right = i - 1 ;\n    while ( left <= right ) {\n      while ( right >= left && arr [ left ] * arr [ right ] > arr [ i ] ) right -- ;\n      if ( right >= left && arr [ left ] * arr [ right ] == arr [ i ] ) {\n        if ( right != left ) dp [ i ] = ( dp [ i ] + dp [ left ] * dp [ right ] * 2 ) % mod ;\n        else dp [ i ] = ( dp [ i ] + dp [ left ] * dp [ right ] ) % mod ;\n      }\n      left ++ ;\n    }\n    res = ( res + dp [ i ] ) % mod ;\n  }\n  return res ;\n}\n", "reference_code": "public static int numFactoredBinaryTrees(int[] arr) {\n        Arrays.sort(arr);\n        int n = arr.length;\n        long[] dp = new long[n];\n        long res = 0, mod = 1000000007;\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            for (int left = 0, right = i - 1; left <= right; left++) {\n                while (right >= left && (long) arr[left] * arr[right] > arr[i]) {\n                    right--;\n                }\n                if (right >= left && (long) arr[left] * arr[right] == arr[i]) {\n                    if (right != left) {\n                        dp[i] = (dp[i] + dp[left] * dp[right] * 2) % mod;\n                    } else {\n                        dp[i] = (dp[i] + dp[left] * dp[right]) % mod;\n                    }\n                }\n            }\n            res = (res + dp[i]) % mod;\n        }\n        return (int) res;\n    }", "target_Lan": "java###numFactoredBinaryTrees_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class numFactoredBinaryTrees_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(numFactoredBinaryTrees(new int[]{})); \n        System.out.println(numFactoredBinaryTrees(new int[]{1})); \n        System.out.println(numFactoredBinaryTrees(new int[]{2, 3, 5, 7})); \n        System.out.println(numFactoredBinaryTrees(new int[]{4, 2, 1, 16})); \n        System.out.println(numFactoredBinaryTrees(new int[]{16, 8, 4, 2, 1})); \n    }\n}"}, {"source_Lan": "python###countPairs.py", "source_code": "def countPairs( n: int, edges: List[List[int]], queries: List[int]) -> List[int]:\n        degree = [0 for _ in range(n)]\n        cnt = collections.defaultdict(int)\n        for edge in edges:\n            x, y = edge[0] - 1, edge[1] - 1\n            if x > y:\n                x, y = y, x\n            degree[x] += 1\n            degree[y] += 1\n            cnt[x * n + y] += 1\n        arr = sorted(degree)\n        ans = []\n        for bound in queries:\n            total = 0\n            j = n - 1\n            for i in range(n):\n                while j > i and arr[i] + arr[j] > bound:\n                    j -= 1\n                total += n - 1 - max(i, j)\n            for val, freq in cnt.items():\n                x, y = val // n, val % n\n                if degree[x] + degree[y] > bound and degree[x] + degree[y] - freq <= bound:\n                    total -= 1\n            ans.append(total)\n        return ans", "trans_code": "public static int [ ] countPairs ( int n , List < List < Integer >> edges , List < Integer > queries ) throws Exception {\n  int [ ] degree = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    degree [ i ] = 0 ;\n  }\n  Map < Integer , Integer > cnt = Generics . newHashMap ( ) ;\n  for ( List < Integer > edge : edges ) {\n    int x = edge . get ( 0 ) - 1 , y = edge . get ( 1 ) - 1 ;\n    if ( x > y ) x = y ;\n    degree [ x ] ++ ;\n    degree [ y ] ++ ;\n    cnt . put ( x * n + y , 1 ) ;\n  }\n  int [ ] arr = Arrays . copyOf ( degree , n ) ;\n  int [ ] ans = new int [ n ] ;\n  for ( int bound : queries ) {\n    int total = 0 ;\n    int j = n - 1 ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      while ( j > i && arr [ i ] + arr [ j ] > bound ) j -- ;\n      total += n - 1 - Math . max ( i , j ) ;\n    }\n    for ( Map . Entry < Integer , Integer > val : cnt . entrySet ( ) ) {\n      int x = val . getKey ( ) / n , y = val . getValue ( ) % n ;\n      if ( degree [ x ] + degree [ y ] > bound && degree [ x ] + degree [ y ] - freq <= bound ) {\n        total -- ;\n      }\n    }\n    ans [ total ] = total ;\n  }\n  return ans ;\n}\n", "reference_code": "public static int[] countPairs(int n, int[][] edges, int[] queries) {\n        int[] degree = new int[n];\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            if (x > y) {\n                int temp = x;\n                x = y;\n                y = temp;\n            }\n            degree[x]++;\n            degree[y]++;\n            cnt.put(x * n + y, cnt.getOrDefault(x * n + y, 0) + 1);\n        }\n        int[] arr = Arrays.copyOf(degree, n);\n        int[] ans = new int[queries.length];\n        Arrays.sort(arr);\n        for (int k = 0; k < queries.length; k++) {\n            int bound = queries[k], total = 0;\n            for (int i = 0, j = n - 1; i < n; i++) {\n                while (j > i && arr[i] + arr[j] > bound) {\n                    j--;\n                }\n                total += n - 1 - Math.max(i, j);\n            }\n            for (Map.Entry<Integer, Integer> entry : cnt.entrySet()) {\n                int val = entry.getKey(), freq = entry.getValue();\n                int x = val / n, y = val % n;\n                if (degree[x] + degree[y] > bound && degree[x] + degree[y] - freq <= bound) {\n                    total--;\n                }\n            }\n            ans[k] = total;\n        }\n        return ans;\n    }", "target_Lan": "java###countPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class countPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        \n        int n1 = 1;\n        int[][] edges1 = {};\n        int[] queries1 = {0};\n        System.out.println(Arrays.toString(countPairs(n1, edges1, queries1)));\n\n        \n        int n2 = 3;\n        int[][] edges2 = {{1, 2}, {2, 3}};\n        int[] queries2 = {2};\n        System.out.println(Arrays.toString(countPairs(n2, edges2, queries2)));\n\n        \n        int n3 = 5;\n        int[][] edges3 = {{1, 2}, {1, 3}, {2, 3}, {3, 4}, {4, 5}, {5, 1}};\n        int[] queries3 = {3, 4};\n        System.out.println(Arrays.toString(countPairs(n3, edges3, queries3)));\n\n        \n        int n4 = 4;\n        int[][] edges4 = {{1, 2}, {3, 4}};\n        int[] queries4 = {1, 2, 3};\n        System.out.println(Arrays.toString(countPairs(n4, edges4, queries4)));\n\n        \n        int n5 = 6;\n        int[][] edges5 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}};\n        int[] queries5 = {5, 6, 10};\n        System.out.println(Arrays.toString(countPairs(n5, edges5, queries5)));\n    }\n}"}, {"source_Lan": "python###captureForts.py", "source_code": "def captureForts( forts: List[int]) -> int:\n        ans, pre = 0, -1\n        for i, fort in enumerate(forts):\n            if fort == -1 or fort == 1:\n                if pre >= 0 and fort != forts[pre]:\n                    ans = max(ans, i - pre - 1)\n                pre = i\n        return ans", "trans_code": "public static int captureForts ( int [ ] forts ) throws Exception {\n  int ans = 0 , pre = - 1 ;\n  for ( int i = 0 , fort = forts . length ;\n  i < forts . length ;\n  i ++ ) {\n    if ( forts [ i ] == - 1 || forts [ i ] == 1 ) {\n      if ( pre >= 0 && forts [ pre ] != forts [ i ] ) {\n        ans = Math . max ( ans , i - pre - 1 ) ;\n      }\n      pre = i ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int captureForts(int[] forts) {\n        int n = forts.length;\n        int ans = 0, pre = -1;\n        for (int i = 0; i < n; i++) {\n            if (forts[i] == 1 || forts[i] == -1) {\n                if (pre >= 0 && forts[i] != forts[pre]) {\n                    ans = Math.max(ans, i - pre - 1);\n                }\n                pre = i;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###captureForts_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class captureForts_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(captureForts(new int[]{})); \n        System.out.println(captureForts(new int[]{0, 0, 0, 0})); \n        System.out.println(captureForts(new int[]{1, 0, -1, 0, 1})); \n        System.out.println(captureForts(new int[]{1, 1, -1, -1, 0, 1})); \n        System.out.println(captureForts(new int[]{1, -1, 0, 0, -1, 1})); \n    }\n}"}, {"source_Lan": "python###maxDistToClosest.py", "source_code": "def maxDistToClosest( seats: List[int]) -> int:\n        res, l = 0, 0\n        while l < len(seats) and seats[l] == 0:\n            l += 1\n        res = max(res, l)\n        while l < len(seats):\n            r = l + 1\n            while r < len(seats) and seats[r] == 0:\n                r += 1\n            if r == len(seats):\n                res = max(res, r - l - 1)\n            else:\n                res = max(res, (r - l) // 2)\n            l = r\n        return res", "trans_code": "public static int maxDistToClosest ( int [ ] seats ) throws Exception {\n  int res = 0 , l = 0 ;\n  while ( l < seats . length && seats [ l ] == 0 ) l ++ ;\n  res = Math . max ( res , l ) ;\n  while ( l < seats . length ) {\n    int r = l + 1 ;\n    while ( r < seats . length && seats [ r ] == 0 ) r ++ ;\n    if ( r == seats . length ) res = Math . max ( res , r - l - 1 ) ;\n    else res = Math . max ( res , ( r - l ) / 2 ) ;\n    l = r ;\n  }\n  return res ;\n}\n", "reference_code": "public static int maxDistToClosest(int[] seats) {\n        int res = 0;\n        int l = 0;\n        while (l < seats.length && seats[l] == 0) {\n            ++l;\n        }\n        res = Math.max(res, l);\n        while (l < seats.length) {\n            int r = l + 1;\n            while (r < seats.length && seats[r] == 0) {\n                ++r;\n            }\n            if (r == seats.length) {\n                res = Math.max(res, r - l - 1);\n            } else {\n                res = Math.max(res, (r - l) / 2);\n            }\n            l = r;\n        }\n        return res;\n    }", "target_Lan": "java###maxDistToClosest_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxDistToClosest_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxDistToClosest(new int[]{1, 1, 1, 1}));\n        System.out.println(maxDistToClosest(new int[]{0, 0, 0, 0}));\n        System.out.println(maxDistToClosest(new int[]{0, 1, 0, 0, 1, 0}));\n        System.out.println(maxDistToClosest(new int[]{1, 0, 1, 0, 1}));\n        System.out.println(maxDistToClosest(new int[]{0, 0, 1, 0, 0, 0}));\n    }\n}"}, {"source_Lan": "python###ways.py", "source_code": "def ways( pizza: List[str], k: int) -> int:\n        m, n, mod = len(pizza), len(pizza[0]), 10 ** 9 + 7\n        apples = [[0] * (n + 1) for _ in range(m + 1)]\n        dp = [[[0 for j in range(n)] for i in range(m)] for _ in range(k + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                apples[i][j] = apples[i][j + 1] + apples[i + 1][j] - apples[i + 1][j + 1] + (pizza[i][j] == 'A')\n                dp[1][i][j] = 1 if apples[i][j] > 0 else 0\n        for k in range(1, k + 1):\n            for i in range(m):\n                for j in range(n):\n                    \n                    for i2 in range(i + 1, m):\n                        if apples[i][j] > apples[i2][j]:\n                            dp[k][i][j] = (dp[k][i][j] + dp[k - 1][i2][j]) % mod\n                    \n                    for j2 in range(j + 1, n):\n                        if apples[i][j] > apples[i][j2]:\n                            dp[k][i][j] = (dp[k][i][j] + dp[k - 1][i][j2]) % mod\n        return dp[k][0][0]", "trans_code": "public static int ways ( List < String > pizza , int k ) throws Exception {\n  int m = pizza . size ( ) , n = pizza . get ( 0 ) . length ( ) , mod = 10 * 9 + 7 ;\n  int [ ] [ ] apples = new int [ m + 1 ] [ n + 1 ] ;\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n - 1 ;\n    j ++ ) {\n      apples [ i ] [ j ] = apples [ i ] [ j + 1 ] + apples [ i + 1 ] [ j ] - apples [ i + 1 ] [ j + 1 ] + ( pizza . get ( i ) . charAt ( j ) == 'A' ) ;\n      dp [ 1 ] [ i ] [ j ] = 1 == apples [ i ] [ j ] ? 0 : 1 ;\n    }\n  }\n  for ( int k = 1 ;\n  k < k ;\n  k ++ ) {\n    for ( int i = 0 ;\n    i < m ;\n    i ++ ) {\n      for ( int j = 0 ;\n      j < n ;\n      j ++ ) {\n        for ( int i2 = i + 1 ;\n        i2 < m ;\n        i2 ++ ) {\n          if ( apples [ i ] [ j ] > apples [ i2 ] [ j ] ) {\n            dp [ k ] [ i ] [ j ] = ( dp [ k ] [ i ] [ j ] + dp [ k - 1 ] [ i2 ] [ j ] ) % mod ;\n          }\n        }\n        for ( int j2 = j + 1 ;\n        j2 < n ;\n        j2 ++ ) {\n          if ( apples [ i ] [ j ] > apples [ i ] [ j2 ] ) {\n            dp [ k ] [ i ] [ j ] = ( dp [ k ] [ i ] [ j ] + dp [ k - 1 ] [ i ] [ j2 ] ) % mod ;\n          }\n        }\n      }\n    }\n  }\n  return dp [ k ] [ 0 ] [ 0 ] ;\n}\n", "reference_code": "public static int ways(String[] pizza, int k) {\n        int m = pizza.length, n = pizza[0].length(), mod = 1_000_000_007;\n        int[][] apples = new int[m + 1][n + 1];\n        int[][][] dp = new int[k + 1][m + 1][n + 1];\n        \n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                apples[i][j] = apples[i][j + 1] + apples[i + 1][j] - apples[i + 1][j + 1] + (pizza[i].charAt(j) == 'A' ? 1 : 0);\n                dp[1][i][j] = apples[i][j] > 0 ? 1 : 0;\n            }\n        }\n        for (int ki = 2; ki <= k; ki++) {\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    \n                    for (int i2 = i + 1; i2 < m; i2++) {\n                        if (apples[i][j] > apples[i2][j]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i2][j]) % mod;\n                        }\n                    }\n                    \n                    for (int j2 = j + 1; j2 < n; j2++) {\n                        if (apples[i][j] > apples[i][j2]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i][j2]) % mod;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[k][0][0];\n    }", "target_Lan": "java###ways_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class ways_Test {\n// TOFILL\npublic static void main(String[] args) {\n        String[][] testInputsPizza = {\n            {\"A\"},\n            {\"A\", \"A\"},\n            {\"AAA\", \"AAA\", \"AAA\"},\n            {\"AA\", \"AA\", \"AA\"},\n            {\"A\", \"A\", \"A\"}\n        };\n        int[] testInputsK = {1, 2, 3, 4, 3};\n\n        for(int i = 0; i < testInputsPizza.length; i++) {\n            System.out.println(ways(testInputsPizza[i], testInputsK[i]));\n        }\n    }\n}"}, {"source_Lan": "python###findReplaceString.py", "source_code": "def findReplaceString( s: str, indices: List[int], sources: List[str], targets: List[str]) -> str:\n        n, m = len(s), len(indices)\n        ops = list(range(m))\n        ops.sort(key=lambda x: indices[x])\n        ans = list()\n        i = pt = 0\n        while i < n:\n            while pt < m and indices[ops[pt]] < i:\n                pt += 1\n            succeed = False\n            while pt < m and indices[ops[pt]] == i:\n                if s[i:i + len(sources[ops[pt]])] == sources[ops[pt]]:\n                    succeed = True\n                    break\n                pt += 1\n            if succeed:\n                ans.append(targets[ops[pt]])\n                i += len(sources[ops[pt]])\n            else:\n                ans.append(s[i])\n                i += 1\n        return \"\".join(ans)", "trans_code": "public static String findReplaceString ( String s , List < Integer > indices , List < String > sources , List < String > targets ) throws Exception {\n  int n = s . length ( ) , m = indices . size ( ) ;\n  List < Integer > ops = Arrays . asList ( indices ) ;\n  Collections . sort ( ops ) ;\n  List < String > ans = Lists . newArrayList ( ) ;\n  int i = pt = 0 ;\n  while ( i < n ) {\n    while ( pt < m && indices . get ( ops . get ( pt ) ) < i ) {\n      pt ++ ;\n    }\n    boolean succeed = false ;\n    while ( pt < m && indices . get ( ops . get ( pt ) ) == i ) {\n      if ( s . substring ( i , i + sources . get ( ops . get ( pt ) ) . length ( ) ) . equals ( sources . get ( ops . get ( pt ) ) ) ) {\n        succeed = true ;\n        break ;\n      }\n      pt ++ ;\n    }\n    if ( succeed ) {\n      ans . add ( targets . get ( ops . get ( pt ) ) ) ;\n      i += sources . get ( ops . get ( pt ) ) . length ( ) ;\n    }\n    else {\n      ans . add ( s . substring ( i ) ) ;\n      i ++ ;\n    }\n  }\n  return ans . toString ( ) ;\n}\n", "reference_code": "public static String findReplaceString(String s, int[] indices, String[] sources, String[] targets) {\n        int n = s.length(), m = indices.length;\n        List<Integer> ops = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            ops.add(i);\n        }\n        ops.sort((i, j) -> indices[i] - indices[j]);\n        StringBuilder ans = new StringBuilder();\n        int pt = 0;\n        for (int i = 0; i < n;) {\n            while (pt < m && indices[ops.get(pt)] < i) {\n                pt++;\n            }\n            boolean succeed = false;\n            while (pt < m && indices[ops.get(pt)] == i) {\n                if (s.substring(i, Math.min(i + sources[ops.get(pt)].length(), n)).equals(sources[ops.get(pt)])) {\n                    succeed = true;\n                    break;\n                }\n                pt++;\n            }\n            if (succeed) {\n                ans.append(targets[ops.get(pt)]);\n                i += sources[ops.get(pt)].length();\n            } else {\n                ans.append(s.charAt(i));\n                i++;\n            }\n        }\n        return ans.toString();\n    }", "target_Lan": "java###findReplaceString_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class findReplaceString_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(findReplaceString(\"abcdef\", new int[]{}, new String[]{}, new String[]{}));\n        System.out.println(findReplaceString(\"abcdef\", new int[]{0}, new String[]{\"a\"}, new String[]{\"x\"}));\n        System.out.println(findReplaceString(\"abcdef\", new int[]{2}, new String[]{\"c\"}, new String[]{\"y\"}));\n        System.out.println(findReplaceString(\"abcdef\", new int[]{0, 2}, new String[]{\"ab\", \"cd\"}, new String[]{\"xy\", \"uv\"}));\n        System.out.println(findReplaceString(\"abcabc\", new int[]{0, 3}, new String[]{\"abc\", \"abc\"}, new String[]{\"x\", \"y\"}));\n    }\n}"}, {"source_Lan": "python###circularGameLosers.py", "source_code": "def circularGameLosers( n: int, k: int) -> List[int]:\n        visit = [False] * n\n        i = k\n        j = 0\n        while not visit[j]:\n            visit[j] = True\n            j = (j + i) % n\n            i += k\n        ans = []\n        for i in range(n):\n            if not visit[i]:\n                ans.append(i + 1)\n        return ans", "trans_code": "public static int [ ] circularGameLosers ( int n , int k ) throws Exception {\n  boolean [ ] visit = new boolean [ n ] ;\n  visit [ 0 ] = false ;\n  int i = k ;\n  int j = 0 ;\n  while ( ! visit [ j ] ) {\n    visit [ j ] = true ;\n    j = ( j + i ) % n ;\n    i += k ;\n  }\n  int [ ] ans = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! visit [ i ] ) {\n      ans [ i ] = i + 1 ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int[] circularGameLosers(int n, int k) {\n        boolean[] visit = new boolean[n];\n        for (int i = k, j = 0; !visit[j]; i += k) {\n            visit[j] = true;\n            j = (j + i) % n;\n        }\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (!visit[i]) {\n                list.add(i + 1);\n            }\n        }\n        int[] ans = new int[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n            ans[i] = list.get(i);\n        }\n        return ans;\n    }", "target_Lan": "java###circularGameLosers_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class circularGameLosers_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] result1 = circularGameLosers(1, 1);\n        int[] result2 = circularGameLosers(5, 2);\n        int[] result3 = circularGameLosers(10, 10);\n        int[] result4 = circularGameLosers(100, 15);\n        int[] result5 = circularGameLosers(7, 8);\n        \n        System.out.println(Arrays.toString(result1)); \n        System.out.println(Arrays.toString(result2)); \n        System.out.println(Arrays.toString(result3)); \n        System.out.println(Arrays.toString(result4)); \n        System.out.println(Arrays.toString(result5)); \n    }\n}"}, {"source_Lan": "python###countSeniors.py", "source_code": "def countSeniors( details: List[str]) -> int:\n        return sum(1 for info in details if int(info[11:13]) > 60)", "trans_code": "public static int countSeniors ( List < String > details ) throws Exception {\n  return Iterables . size ( details ) ;\n}\n", "reference_code": "public static int countSeniors(String[] details) {\n        int count = 0;\n        for (String info : details) {\n            if (Integer.parseInt(info.substring(11, 13)) > 60) {\n                count++;\n            }\n        }\n        return count;\n    }", "target_Lan": "java###countSeniors_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countSeniors_Test {\n// TOFILL\npublic static void main(String[] args) {\n        String[] details1 = {\"Name, Age, 65\", \"Name, Age, 63\", \"Name, Age, 58\"};\n        String[] details2 = {\"Name, Age, 45\", \"Name, Age, 50\", \"Name, Age, 60\"};\n        String[] details3 = {\"Name, Age, 75\", \"Name, Age, 80\", \"Name, Age, 61\"};\n        String[] details4 = {\"Name, Age, 61a\", \"Name, Age, 58\", \"Name, Age, 68\"};\n\n        System.out.println(countSeniors(details1)); \n        System.out.println(countSeniors(details2)); \n        System.out.println(countSeniors(details3)); \n        System.out.println(countSeniors(details4)); \n    }\n}"}, {"source_Lan": "python###maxAbsoluteSum.py", "source_code": "def maxAbsoluteSum( nums: List[int]) -> int:\n        positiveMax, negativeMin = 0, 0\n        positiveSum, negativeSum = 0, 0\n        for n in nums:\n            positiveSum += n\n            positiveMax = max(positiveMax, positiveSum)\n            positiveSum = max(0, positiveSum)\n            negativeSum += n\n            negativeMin = min(negativeMin, negativeSum)\n            negativeSum = min(0, negativeSum)\n        return max(positiveMax, -negativeMin)", "trans_code": "public static int maxAbsoluteSum ( int [ ] nums ) throws Exception {\n  int positiveMax = 0 , negativeMin = 0 ;\n  int positiveSum = 0 , negativeSum = 0 ;\n  for ( int n : nums ) {\n    positiveSum += n ;\n    positiveMax = Math . max ( positiveMax , positiveSum ) ;\n    positiveSum = Math . max ( 0 , positiveSum ) ;\n    negativeSum += n ;\n    negativeMin = Math . min ( negativeMin , negativeSum ) ;\n    negativeSum = Math . min ( 0 , negativeSum ) ;\n  }\n  return Math . max ( positiveMax , - negativeMin ) ;\n}\n", "reference_code": "public static int maxAbsoluteSum(int[] nums) {\n        int positiveMax = 0, negativeMin = 0;\n        int positiveSum = 0, negativeSum = 0;\n        for (int num : nums) {\n            positiveSum += num;\n            positiveMax = Math.max(positiveMax, positiveSum);\n            positiveSum = Math.max(0, positiveSum);\n            negativeSum += num;\n            negativeMin = Math.min(negativeMin, negativeSum);\n            negativeSum = Math.min(0, negativeSum);\n        }\n        return Math.max(positiveMax, -negativeMin);\n    }", "target_Lan": "java###maxAbsoluteSum_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxAbsoluteSum_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxAbsoluteSum(new int[]{})); \n        System.out.println(maxAbsoluteSum(new int[]{1, -2, 3, 4})); \n        System.out.println(maxAbsoluteSum(new int[]{1, 2, 3, 4})); \n        System.out.println(maxAbsoluteSum(new int[]{-1, -2, -3})); \n        System.out.println(maxAbsoluteSum(new int[]{0, -1, 0, 2})); \n    }\n}"}, {"source_Lan": "python###maxScore.py", "source_code": "def maxScore( grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        prerow = [[0] * n for _ in range(m)]\n        precol = [[0] * n for _ in range(m)]\n        f = [[-inf] * n for _ in range(m)]\n        ans = -inf\n        for i in range(m):\n            for j in range(n):\n                if i > 0:\n                    f[i][j] = max(f[i][j], grid[i][j] + precol[i - 1][j])\n                if j > 0:\n                    f[i][j] = max(f[i][j], grid[i][j] + prerow[i][j - 1])\n                ans = max(ans, f[i][j])\n                prerow[i][j] = precol[i][j] = max(f[i][j], 0) - grid[i][j]\n                if i > 0:\n                    precol[i][j] = max(precol[i][j], precol[i - 1][j])\n                if j > 0:\n                    prerow[i][j] = max(prerow[i][j], prerow[i][j - 1])\n        return ans", "trans_code": "public static int maxScore ( int [ ] [ ] grid ) throws Exception {\n  int m = grid . length ;\n  int n = grid [ 0 ] . length ;\n  int [ ] [ ] prerow = new int [ m ] [ n ] ;\n  int [ ] [ ] precol = new int [ m ] [ n ] ;\n  int [ ] [ ] f = new int [ m ] [ n ] ;\n  int ans = - inf ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i > 0 ) f [ i ] [ j ] = Math . max ( f [ i ] [ j ] , grid [ i ] [ j ] + precol [ i - 1 ] [ j ] ) ;\n      if ( j > 0 ) f [ i ] [ j ] = Math . max ( f [ i ] [ j ] , grid [ i ] [ j ] + prerow [ i ] [ j - 1 ] ) ;\n      ans = Math . max ( ans , f [ i ] [ j ] ) ;\n      prerow [ i ] [ j ] = precol [ i ] [ j ] = Math . max ( f [ i ] [ j ] , 0 ) - grid [ i ] [ j ] ;\n      if ( i > 0 ) precol [ i ] [ j ] = Math . max ( precol [ i ] [ j ] , precol [ i - 1 ] [ j ] ) ;\n      if ( j > 0 ) prerow [ i ] [ j ] = Math . max ( prerow [ i ] [ j ] , prerow [ i ] [ j - 1 ] ) ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int maxScore(List<List<Integer>> grid) {\n        int m = grid.size(), n = grid.get(0).size();\n        int[][] prerow = new int[m][n];\n        int[][] precol = new int[m][n];\n        int[][] f = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            Arrays.fill(f[i], Integer.MIN_VALUE);\n        }\n        int ans = Integer.MIN_VALUE;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i > 0) {\n                    f[i][j] = Math.max(f[i][j], grid.get(i).get(j) + precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    f[i][j] = Math.max(f[i][j], grid.get(i).get(j) + prerow[i][j - 1]);\n                }\n                ans = Math.max(ans, f[i][j]);\n                prerow[i][j] = precol[i][j] = Math.max(f[i][j], 0) - grid.get(i).get(j);\n                if (i > 0) {\n                    precol[i][j] = Math.max(precol[i][j], precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    prerow[i][j] = Math.max(prerow[i][j], prerow[i][j - 1]);\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###maxScore_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class maxScore_Test {\n// TOFILL\n    public static void main(String[] args) {\n        List<List<Integer>> input1 = new ArrayList<>();\n        input1.add(Arrays.asList(1, -2));\n        input1.add(Arrays.asList(3, 4));\n        \n        List<List<Integer>> input2 = new ArrayList<>();\n        input2.add(Arrays.asList(0, 0));\n        input2.add(Arrays.asList(0, 0));\n        \n        List<List<Integer>> input3 = new ArrayList<>();\n        input3.add(Arrays.asList(-1, -1));\n        input3.add(Arrays.asList(-1, -1));\n        \n        List<List<Integer>> input4 = new ArrayList<>();\n        input4.add(Arrays.asList(1, 2, 3));\n        input4.add(Arrays.asList(4, -1, 6));\n        input4.add(Arrays.asList(7, 8, 9));\n        \n        List<List<Integer>> input5 = new ArrayList<>();\n        input5.add(Arrays.asList(10, -5, 20));\n        input5.add(Arrays.asList(-1, 5, 2));\n        input5.add(Arrays.asList(6, 3, -10));\n\n        System.out.println(maxScore(input1));\n        System.out.println(maxScore(input2));\n        System.out.println(maxScore(input3));\n        System.out.println(maxScore(input4));\n        System.out.println(maxScore(input5));\n    }\n}"}, {"source_Lan": "python###isArraySpecial.py", "source_code": "def isArraySpecial( nums: List[int], queries: List[List[int]]) -> List[bool]:\n       n = len(nums)\n       dp = [1] * n\n       for i in range(1, n):\n           if (nums[i] ^ nums[i - 1]) & 1 == 1:\n               dp[i] = dp[i - 1] + 1\n       return [dp[y] >= y - x + 1 for x, y in queries]", "trans_code": "public static boolean isArraySpecial ( int [ ] nums , int [ ] queries ) throws Exception {\n  int n = nums . length ;\n  int [ ] dp = new int [ n ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( ( nums [ i ] ^ nums [ i - 1 ] ) & 1 == 1 ) {\n      dp [ i ] = dp [ i - 1 ] + 1 ;\n    }\n  }\n  return Arrays . equals ( dp , queries ) ;\n}\n", "reference_code": "public static boolean[] isArraySpecial(int[] nums, int[][] queries) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for (int i = 1; i < n; i++) {\n            if (((nums[i] ^ nums[i - 1]) & 1) != 0) {\n                dp[i] = dp[i - 1] + 1;\n            }\n        }\n        boolean[] res = new boolean[queries.length];\n        for (int i = 0; i < queries.length; i++) {\n            int x = queries[i][0], y = queries[i][1];\n            res[i] = dp[y] >= y - x + 1;\n        }\n        return res;\n    }", "target_Lan": "java###isArraySpecial_Test.java", "target_code_shell": "import java.util.Arrays;\npublic class isArraySpecial_Test {\n// TOFILL\n    public static void main(String[] args) {\n        \n        int[] nums1 = {2, 3, 4, 5, 6};\n        int[][] queries1 = {{0, 2}};\n        System.out.println(Arrays.toString(isArraySpecial(nums1, queries1)));  \n\n        \n        int[] nums2 = {2};\n        int[][] queries2 = {{0, 0}};\n        System.out.println(Arrays.toString(isArraySpecial(nums2, queries2)));  \n\n        \n        int[] nums3 = {1, 3, 5, 7};\n        int[][] queries3 = {{0, 3}};\n        System.out.println(Arrays.toString(isArraySpecial(nums3, queries3)));  \n\n        \n        int[] nums4 = {2, 4, 6, 8};\n        int[][] queries4 = {{0, 3}};\n        System.out.println(Arrays.toString(isArraySpecial(nums4, queries4)));  \n\n        \n        int[] nums5 = {1, 2, 3, 4, 5, 6};\n        int[][] queries5 = {{0, 5}, {1, 4}, {2, 3}};\n        System.out.println(Arrays.toString(isArraySpecial(nums5, queries5)));  \n    }\n}"}, {"source_Lan": "python###leftmostBuildingQueries.py", "source_code": "def leftmostBuildingQueries(heights: List[int], queries: List[List[int]]) -> List[int]:\n    n = len(heights)\n    m = len(queries)\n    query = [[] for _ in range(n)]\n    ans = [-1] * m\n    st = []\n    for i in range(m):\n        a, b = queries[i]\n        if a > b:\n            a, b = b, a\n        if a == b or heights[a] < heights[b]:\n            ans[i] = b\n            continue\n        query[b].append((i, heights[a]))\n    top = -1\n    for i in range(n - 1, -1, -1):\n        for q, val in query[i]:\n            if top == -1 or heights[st[0]] <= val:\n                ans[q] = -1\n                continue\n            l, r = 0, top\n            while l <= r:\n                mid = (l + r) // 2\n                if heights[st[mid]] > val:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            ans[q] = st[r]\n        while top >= 0 and heights[st[top]] <= heights[i]:\n            st.pop()\n            top -= 1\n        st.append(i)\n        top += 1\n    return ans\n    ", "trans_code": "public static int [ ] leftmostBuildingQueries ( int [ ] heights , int [ ] queries ) throws Exception {\n  int n = heights . length ;\n  int m = queries . length ;\n  ArrayList < ArrayList < Integer >> query = new ArrayList < ArrayList < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    query . add ( new ArrayList < Integer > ( ) ) ;\n  }\n  int [ ] ans = new int [ m ] ;\n  ans [ 0 ] = - 1 ;\n  ArrayList < Integer > st = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) {\n    int a = queries [ i ] ;\n    int b = queries [ i ] ;\n    if ( a > b ) {\n      a = b ;\n      b = a ;\n    }\n    if ( a == b || heights [ a ] < heights [ b ] ) {\n      ans [ i ] = b ;\n      continue ;\n    }\n    query . add ( new ArrayList < Integer > ( ) ) ;\n    query . add ( new ArrayList < Integer > ( ) ) ;\n  }\n  int top = - 1 ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int q = 0 , val = query . get ( i ) . get ( ) ;\n    q < m ;\n    q ++ ) {\n      if ( top == - 1 || heights [ st . get ( 0 ) ] <= val ) {\n        ans [ q ] = - 1 ;\n        continue ;\n      }\n      int l = 0 , r = top ;\n      while ( l <= r ) {\n        int mid = ( l + r ) / 2 ;\n        if ( heights [ st . get ( mid ) ] > val ) {\n          l = mid + 1 ;\n        }\n        else {\n          r = mid - 1 ;\n        }\n      }\n      ans [ q ] = st . get ( r ) ;\n    }\n    while ( top >= 0 && heights [ st . get ( top ) ] <= heights [ i ] ) {\n      st . remove ( top ) ;\n      top -- ;\n    }\n    st . add ( i ) ;\n    top ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "public static int[] leftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.length;\n        int m = queries.length;\n        List<int[]>[] query = new List[n];\n        for (int i = 0; i < n; i++) {\n            query[i] = new ArrayList<int[]>();\n        }\n        int[] ans = new int[m];\n        List<Integer> st = new ArrayList<Integer>();\n        for (int i = 0; i < m; i++) {\n            int a = queries[i][0];\n            int b = queries[i][1];\n            if (a > b) {\n                int temp = a;\n                a = b;\n                b = temp;\n            }\n            if (a == b || heights[a] < heights[b]) {\n                ans[i] = b;\n                continue;\n            }\n            query[b].add(new int[]{i, heights[a]});\n        }\n        int top = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j < query[i].size(); j++) {\n                int q = query[i].get(j)[0];\n                int val = query[i].get(j)[1];\n                if (top == -1 || heights[st.get(0)] <= val) {\n                    ans[q] = -1;\n                    continue;\n                }\n                int l = 0, r = top;\n                while (l <= r) {\n                    int mid = (l + r) >> 1;\n                    if (heights[st.get(mid)] > val) {\n                        l = mid + 1;\n                    } else {\n                        r = mid - 1;\n                    }\n                }\n                ans[q] = st.get(r);\n            }\n            while (top >= 0 && heights[st.get(top)] <= heights[i]) {\n                st.remove(st.size() - 1);\n                top--;\n            }\n            st.add(i);\n            top++;\n        }\n        return ans;\n    }", "target_Lan": "java###leftmostBuildingQueries_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class leftmostBuildingQueries_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] heights1 = {3, 1, 4, 1, 5};\n        int[][] queries1 = {{0, 1}, {1, 2}, {3, 4}};\n        System.out.println(Arrays.toString(leftmostBuildingQueries(heights1, queries1)));\n\n        int[] heights2 = {1, 1, 1, 1};\n        int[][] queries2 = {{0, 1}, {1, 2}};\n        System.out.println(Arrays.toString(leftmostBuildingQueries(heights2, queries2)));\n\n        int[] heights3 = {5, 4, 3, 2, 1};\n        int[][] queries3 = {{0, 4}, {4, 0}};\n        System.out.println(Arrays.toString(leftmostBuildingQueries(heights3, queries3)));\n\n        int[] heights4 = {1, 2, 3, 4, 5};\n        int[][] queries4 = {{0, 1}, {1, 4}};\n        System.out.println(Arrays.toString(leftmostBuildingQueries(heights4, queries4)));\n\n        int[] heights5 = {0, -1, -2, -3};\n        int[][] queries5 = {{0, 1}, {2, 3}, {1, 2}};\n        System.out.println(Arrays.toString(leftmostBuildingQueries(heights5, queries5)));\n    }\n}"}, {"source_Lan": "python###isArraySpecial.py", "source_code": "def isArraySpecial( nums: List[int]) -> bool:\n        n = len(nums)\n        for i in range(1, n):\n            if nums[i - 1] % 2 == nums[i] % 2:\n                return False\n        return True", "trans_code": "public static boolean isArraySpecial ( int [ ] nums ) throws Exception {\n  int n = nums . length ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( nums [ i - 1 ] % 2 == nums [ i ] % 2 ) {\n      return false ;\n    }\n  }\n  return true ;\n}\n", "reference_code": "public static boolean isArraySpecial(int[] nums) {\n        int n = nums.length;\n        for (int i = 1; i < n; ++i) {\n            if (nums[i - 1] % 2 == nums[i] % 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_Lan": "java###isArraySpecial_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isArraySpecial_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(isArraySpecial(new int[]{})); \n        System.out.println(isArraySpecial(new int[]{1})); \n        System.out.println(isArraySpecial(new int[]{1, 2, 3, 4, 5})); \n        System.out.println(isArraySpecial(new int[]{2, 4, 6, 8})); \n        System.out.println(isArraySpecial(new int[]{1, 2, 3, 4, 5, 6, 7, 8})); \n    }\n}"}, {"source_Lan": "python###finalPositionOfSnake.py", "source_code": "def finalPositionOfSnake( n: int, commands: List[str]) -> int:\n        i = j = 0\n        for s in commands:\n            if s[0] == 'U': i -= 1\n            elif s[0] == 'D': i += 1\n            elif s[0] == 'L': j -= 1\n            else: j += 1\n        return i * n + j", "trans_code": "public static int finalPositionOfSnake ( int n , List < String > commands ) throws Exception {\n  int i = j = 0 ;\n  for ( String s : commands ) {\n    if ( s . startsWith ( \"U\" ) ) {\n      i -- ;\n    }\n    else if ( s . startsWith ( \"D\" ) ) {\n      i ++ ;\n    }\n    else if ( s . startsWith ( \"L\" ) ) {\n      j -- ;\n    }\n    else {\n      j ++ ;\n    }\n  }\n  return i * n + j ;\n}\n", "reference_code": "public static int finalPositionOfSnake(int n, List<String> commands) {\n        int i = 0;\n        int j = 0;\n        for (String s : commands) {\n            switch (s.charAt(0)) {\n                case 'U' -> i--;\n                case 'D' -> i++;\n                case 'L' -> j--;\n                default  -> j++;\n            }\n        }\n        return i * n + j;\n    }", "target_Lan": "java###finalPositionOfSnake_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.List;\nimport java.util.Arrays;\npublic class finalPositionOfSnake_Test {\n// TOFILL\npublic static void main(String[] args) {\n        \n        System.out.println(finalPositionOfSnake(1, Arrays.asList())); \n        System.out.println(finalPositionOfSnake(2, Arrays.asList(\"U\", \"D\", \"L\", \"R\"))); \n        System.out.println(finalPositionOfSnake(3, Arrays.asList(\"U\", \"U\", \"D\", \"L\", \"R\", \"R\"))); \n        System.out.println(finalPositionOfSnake(-1, Arrays.asList(\"U\", \"D\", \"L\", \"D\"))); \n        System.out.println(finalPositionOfSnake(1000000, Arrays.asList(\"U\", \"U\", \"R\", \"L\", \"D\", \"R\", \"U\"))); \n    }\n}"}, {"source_Lan": "python###countOfPairs.py", "source_code": "def countOfPairs( nums):\n        MOD = 1_000_000_007\n        m = len(nums)\n        n = max(nums)\n        f = [0] * (n + 1)\n        \n        for v in range(nums[0] + 1):\n            f[v] = 1\n        preSums = []\n        \n        for i in range(1, m + 1):\n            \n            preSums.clear()\n            preSum = 0\n            for v in f:\n                preSum += v\n                preSum %= MOD\n                preSums.append(preSum)\n            \n            if i == m:\n                return preSums[-1]\n            \n            for j in range(nums[i] + 1):\n                ceil = min(j, nums[i-1] - nums[i] + j)\n                if ceil >= 0:\n                    f[j] = preSums[ceil]\n                else:  \n                    f[j] = 0\n            for j in range(nums[i] + 1, len(f)):\n                f[j] = 0\n        \n        return 0", "trans_code": "public static int countOfPairs ( int [ ] nums ) {\n  int MOD = 1_000_000_007 ;\n  int m = nums . length ;\n  int n = Math . max ( nums ) ;\n  int [ ] f = new int [ n + 1 ] ;\n  for ( int v = 0 ;\n  v < nums [ 0 ] + 1 ;\n  v ++ ) f [ v ] = 1 ;\n  int [ ] preSums = new int [ m + 1 ] ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    preSums = new int [ m + 1 ] ;\n    int preSum = 0 ;\n    for ( int v : f ) {\n      preSum += v ;\n      preSum %= MOD ;\n      preSums [ i ] = preSum ;\n    }\n    if ( i == m ) return preSums [ m - 1 ] ;\n    for ( int j = 0 ;\n    j < nums [ i ] + 1 ;\n    j ++ ) {\n      int ceil = Math . min ( j , nums [ i - 1 ] - nums [ i ] + j ) ;\n      if ( ceil >= 0 ) f [ j ] = preSums [ ceil ] ;\n      else f [ j ] = 0 ;\n    }\n    for ( int j = nums [ i ] + 1 ;\n    j < f . length ;\n    j ++ ) f [ j ] = 0 ;\n  }\n  return 0 ;\n}\n", "reference_code": "public static int countOfPairs(int[] nums) {\n        final int MOD = (int)(1e9 + 7);\n        int m = nums.length;\n        int n = Arrays.stream(nums).max().getAsInt();\n        int[] f = new int[n + 1];\n        \n        for (int v = 0; v <= nums[0]; ++v) f[v] = 1;\n        List<Integer> preSums = new ArrayList<>();\n        \n        for (int i = 1; i <= m; ++i) {\n            \n            preSums.clear();\n            int preSum = 0;\n            for(int v : f){\n                preSum += v;\n                preSum %= MOD; \n                preSums.add(preSum);\n            }\n            \n            if (i == m) return preSums.get(preSums.size() - 1);\n            \n            for (int j = 0; j <= nums[i]; ++j) {\n                int ceil = Math.min(j, nums[i-1] - nums[i] + j);\n                if (ceil >= 0)\n                    f[j] = preSums.get(ceil);\n                else \n                    f[j] = 0;\n            }\n            for (int j = nums[i] + 1; j < f.length; ++j) {\n                f[j] = 0;\n            }\n        }\n        \n        return 0;\n    }", "target_Lan": "java###countOfPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class countOfPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(countOfPairs(new int[]{0})); \n        System.out.println(countOfPairs(new int[]{1, 1, 1})); \n        System.out.println(countOfPairs(new int[]{3, 5, 2})); \n        System.out.println(countOfPairs(new int[]{1000000, 999999})); \n    }\n}"}, {"source_Lan": "python###countOfPairs.py", "source_code": "def countOfPairs( nums: List[int]) -> int:\n        MOD = 1_000_000_007\n        n = len(nums)\n        m = max(nums)\n        f = [[0] * (m + 1) for _ in range(n)]\n        for j in range(nums[0] + 1):\n            f[0][j] = 1\n        for i in range(1, n):\n            s = list(accumulate(f[i - 1]))  \n            for j in range(nums[i] + 1):\n                max_k = j + min(nums[i - 1] - nums[i], 0)\n                f[i][j] = s[max_k] % MOD if max_k >= 0 else 0\n        return sum(f[-1][:nums[-1] + 1]) % MOD", "trans_code": "public static int countOfPairs ( List < Integer > nums ) throws Exception {\n  final int MOD = 1_000_000_007 ;\n  int n = nums . size ( ) ;\n  int m = Math . max ( nums . size ( ) , 1 ) ;\n  int [ ] [ ] f = new int [ n ] [ m + 1 ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) f [ 0 ] [ j ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    List < Integer > s = Arrays . asList ( accumulate ( f [ i - 1 ] ) ) ;\n    for ( int j = 0 ;\n    j < nums . get ( i ) + 1 ;\n    j ++ ) {\n      int maxK = j + Math . min ( nums . get ( i - 1 ) - nums . get ( i ) , 0 ) ;\n      f [ i ] [ j ] = s . get ( maxK ) % MOD == 0 ? 0 : 1 ;\n    }\n  }\n  return Arrays . hashCode ( f ) % MOD ;\n}\n", "reference_code": "public static int countOfPairs(int[] nums) {\n        final int MOD = 1_000_000_007;\n        int n = nums.length;\n        int m = Arrays.stream(nums).max().getAsInt();\n        long[][] f = new long[n][m + 1];\n        long[] s = new long[m + 1];\n        Arrays.fill(f[0], 0, nums[0] + 1, 1);\n        for (int i = 1; i < n; i++) {\n            s[0] = f[i - 1][0];\n            for (int k = 1; k <= m; k++) {\n                s[k] = (s[k - 1] + f[i - 1][k]) % MOD; \n            }\n            for (int j = 0; j <= nums[i]; j++) {\n                int maxK = j + Math.min(nums[i - 1] - nums[i], 0);\n                f[i][j] = maxK >= 0 ? s[maxK] % MOD : 0;\n            }\n        }\n        return (int) (Arrays.stream(f[n - 1], 0, nums[n - 1] + 1).sum() % MOD);\n    }", "target_Lan": "java###countOfPairs_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countOfPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(countOfPairs(new int[]{0}));\n        System.out.println(countOfPairs(new int[]{1, 1, 1}));\n        System.out.println(countOfPairs(new int[]{3, 1, 2, 2, 3}));\n        System.out.println(countOfPairs(new int[]{1000000, 999999, 1000000}));\n    }\n}"}, {"source_Lan": "python###shortestDistanceAfterQueries.py", "source_code": "def shortestDistanceAfterQueries(n: int, queries: List[List[int]]) -> List[int]:\n    frm = [[] for _ in range(n)]\n    f = list(range(n))\n    ans = []\n    for l, r in queries:\n        frm[r].append(l)\n        if f[l] + 1 < f[r]:\n            f[r] = f[l] + 1\n            for i in range(r + 1, n):\n                f[i] = min(f[i], f[i - 1] + 1, min((f[j] for j in frm[i]), default=inf) + 1)\n        ans.append(f[-1])\n    return ans\n", "trans_code": "public static int [ ] shortestDistanceAfterQueries ( int n , List < List < Integer >> queries ) throws Exception {\n  List < List < Integer >> frm = new ArrayList < List < Integer >> ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) frm . add ( new ArrayList < Integer > ( ) ) ;\n  List < Integer > f = Lists . newArrayList ( ) ;\n  for ( int l = 0 , r = queries . size ( ) ;\n  l < n ;\n  l ++ , r ++ ) {\n    frm . get ( r ) . add ( l ) ;\n    if ( f . get ( l ) + 1 < f . get ( r ) ) {\n      f . set ( r , f . get ( l ) + 1 ) ;\n      for ( int i = r + 1 ;\n      i < n ;\n      i ++ ) f . set ( i , Math . min ( f . get ( i ) , f . get ( i - 1 ) + 1 , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get ( j ) ) , Math . min ( ( f . get (", "reference_code": "public static int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        List<Integer>[] from = new ArrayList[n];\n        Arrays.setAll(from, i -> new ArrayList<>());\n        int[] f = new int[n];\n        for (int i = 1; i < n; i++) {\n            f[i] = i;\n        }\n        int[] ans = new int[queries.length];\n        for (int qi = 0; qi < queries.length; qi++) {\n            int l = queries[qi][0];\n            int r = queries[qi][1];\n            from[r].add(l);\n            if (f[l] + 1 < f[r]) {\n                f[r] = f[l] + 1;\n                for (int i = r + 1; i < n; i++) {\n                    f[i] = Math.min(f[i], f[i - 1] + 1);\n                    for (int j : from[i]) {\n                        f[i] = Math.min(f[i], f[j] + 1);\n                    }\n                }\n            }\n            ans[qi] = f[n - 1];\n        }\n        return ans;\n    }", "target_Lan": "java###shortestDistanceAfterQueries_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class shortestDistanceAfterQueries_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] queries1 = {{0, 1}, {2, 3}, {1, 4}, {0, 4}, {3, 4}};\n        int[] result1 = shortestDistanceAfterQueries(5, queries1);\n        System.out.println(Arrays.toString(result1));\n\n        int[][] queries2 = {};\n        int[] result2 = shortestDistanceAfterQueries(1, queries2);\n        System.out.println(Arrays.toString(result2));\n\n        int[][] queries3 = {{0, 5}, {2, 4}, {1, 3}, {0, 2}, {3, 5}};\n        int[] result3 = shortestDistanceAfterQueries(6, queries3);\n        System.out.println(Arrays.toString(result3));\n\n        int[][] queries4 = {{0, 2}, {2, 5}, {1, 7}, {4, 9}, {3, 8}};\n        int[] result4 = shortestDistanceAfterQueries(10, queries4);\n        System.out.println(Arrays.toString(result4));\n\n        int[][] queries5 = {{0, 0}, {5, 6}, {0, 6}, {3, 5}, {2, 1}};\n        int[] result5 = shortestDistanceAfterQueries(7, queries5);\n        System.out.println(Arrays.toString(result5));\n    }\n}"}, {"source_Lan": "python###shortestDistanceAfterQueries2.py", "source_code": "def shortestDistanceAfterQueries2(n: int, queries: List[List[int]]) -> List[int]:\n    ans = []\n    nxt = list(range(1, n))\n    cnt = n - 1\n    for l, r in queries:\n        if 0 < nxt[l] < r:\n            i = nxt[l]\n            while i < r:\n                cnt -= 1\n                nxt[i], i = 0, nxt[i]\n            nxt[l] = r\n        ans.append(cnt)\n    return ans\n    ", "trans_code": "public static int [ ] shortestDistanceAfterQueries2 ( int n , List < List < Integer >> queries ) throws Exception {\n  int [ ] ans = new int [ n ] ;\n  List < Integer > nxt = Arrays . asList ( 1 , n ) ;\n  int cnt = n - 1 ;\n  for ( int l = 0 , r = 0 ;\n  l < n ;\n  l ++ , r ++ ) {\n    if ( 0 < nxt . get ( l ) && nxt . get ( l ) < r ) {\n      int i = nxt . get ( l ) ;\n      while ( i < r ) {\n        cnt -- ;\n        nxt . set ( i , 0 ) ;\n        i = nxt . get ( i ) ;\n      }\n      nxt . set ( l , r ) ;\n    }\n    ans [ cnt ] = cnt ;\n  }\n  return ans ;\n}\n", "reference_code": "public static int[] shortestDistanceAfterQueries2(int n, int[][] queries) {\n        int[] nxt = new int[n - 1];\n        for (int i = 0; i < n - 1; i++) {\n            nxt[i] = i + 1;\n        }\n        int[] ans = new int[queries.length];\n        int cnt = n - 1;\n        for (int qi = 0; qi < queries.length; qi++) {\n            int l = queries[qi][0];\n            int r = queries[qi][1];\n            if (nxt[l] > 0 && nxt[l] < r) {\n                for (int i = nxt[l]; i < r;) {\n                    cnt--;\n                    int tmp = nxt[i];\n                    nxt[i] = 0;\n                    i = tmp;\n                }\n                nxt[l] = r;\n            }\n            ans[qi] = cnt;\n        }\n        return ans;\n    }", "target_Lan": "java###shortestDistanceAfterQueries2_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class shortestDistanceAfterQueries2_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] queries1 = {{0, 1}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(2, queries1))); \n\n        int[][] queries2 = {{0, 2}, {1, 3}, {2, 4}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(5, queries2))); \n\n        int[][] queries3 = {{0, 3}, {0, 4}, {1, 4}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(5, queries3))); \n\n        int[][] queries4 = {{0, 5}, {2, 6}, {1, 9}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(10, queries4))); \n\n        int[][] queries5 = {{0, 2}, {1, 3}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(3, queries5))); \n    }\n}"}, {"source_Lan": "python###winningPlayerCount.py", "source_code": "def winningPlayerCount( n: int, pick: List[List[int]]) -> int:\n        cnts = [[0] * 11 for _ in range(n)]\n        for x, y in pick:\n            cnts[x][y] += 1\n        ans = 0\n        for i, cnt in enumerate(cnts):\n            if any(c > i for c in cnt):\n                ans += 1\n        return ans", "trans_code": "public static int winningPlayerCount ( int n , List < List < Integer >> pick ) throws Exception {\n  int [ ] [ ] cnts = new int [ 11 ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int x = 0 , y = 0 ;\n    x < pick . size ( ) ;\n    x ++ , y ++ ) {\n      cnts [ x ] [ y ] ++ ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 , cnt = cnts . length ;\n  i < cnt ;\n  i ++ ) {\n    if ( Arrays . binarySearch ( cnts [ i ] , pick . get ( i ) ) > 0 ) {\n      ans ++ ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int winningPlayerCount(int n, int[][] pick) {\n        int[][] cnts = new int[n][11];\n        for (int[] p : pick) {\n            cnts[p[0]][p[1]]++;\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int c : cnts[i]) {\n                if (c > i) {\n                    ans++;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###winningPlayerCount_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class winningPlayerCount_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(winningPlayerCount(3, new int[][]{{0, 1}, {1, 2}, {2, 2}}));\n        System.out.println(winningPlayerCount(3, new int[][]{{0, 1}, {0, 1}, {2, 2}}));\n        System.out.println(winningPlayerCount(5, new int[][]{{0, 1}, {1, 1}, {2, 2}, {3, 3}, {4, 4}}));\n        System.out.println(winningPlayerCount(3, new int[][]{}));\n        System.out.println(winningPlayerCount(4, new int[][]{{0, 1}, {1, 1}, {1, 2}, {2, 2}, {3, 1}}));\n    }\n}"}, {"source_Lan": "python###minFlips.py", "source_code": "def minFlips( grid: List[List[int]]) -> int:\n        diff_row = 0\n        for row in grid:\n            for j in range(len(row) // 2):\n                if row[j] != row[-1 - j]:\n                    diff_row += 1\n        diff_col = 0\n        for col in zip(*grid):\n            for i in range(len(grid) // 2):\n                if col[i] != col[-1 - i]:\n                    diff_col += 1\n        return min(diff_row, diff_col)", "trans_code": "public static int minFlips ( List < List < Integer >> grid ) throws Exception {\n  int diffRow = 0 ;\n  for ( List < Integer > row : grid ) {\n    for ( int j = 0 ;\n    j < row . size ( ) / 2 ;\n    j ++ ) {\n      if ( row . get ( j ) != row . get ( grid . size ( ) - 1 - j ) ) {\n        diffRow ++ ;\n      }\n    }\n  }\n  int diffCol = 0 ;\n  for ( List < Integer > col : zip ( grid ) ) {\n    for ( int i = 0 ;\n    i < grid . size ( ) / 2 ;\n    i ++ ) {\n      if ( col . get ( i ) != col . get ( grid . size ( ) - 1 - i ) ) {\n        diffCol ++ ;\n      }\n    }\n  }\n  return Math . min ( diffRow , diffCol ) ;\n}\n", "reference_code": "    public static int minFlips(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int diffRow = 0;\n        for (int[] row : grid) {\n            for (int j = 0; j < n / 2; j++) {\n                if (row[j] != row[n - 1 - j]) {\n                    diffRow++;\n                }\n            }\n        }\n        int diffCol = 0;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][j] != grid[m - 1 - i][j]) {\n                    diffCol++;\n                }\n            }\n        }\n        return Math.min(diffRow, diffCol);\n    }", "target_Lan": "java###minFlips_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minFlips_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minFlips(new int[][]{{0, 0}, {0, 0}}));\n        System.out.println(minFlips(new int[][]{{1, 0}, {0, 1}}));\n        System.out.println(minFlips(new int[][]{{1, 1, 0}, {0, 1, 1}, {1, 0, 1}}));\n        System.out.println(minFlips(new int[][]{{1}}));\n        System.out.println(minFlips(new int[][]{{1, 1}, {1, 1}, {1, 1}}));\n    }\n}"}, {"source_Lan": "python###minFlips.py", "source_code": "def minFlips( a: List[List[int]]) -> int:\n        ans = 0\n        m, n = len(a), len(a[0])\n        for i in range(m // 2):\n            row, row2 = a[i], a[-1 - i]\n            for j in range(n // 2):\n                cnt1 = row[j] + row[-1 - j] + row2[j] + row2[-1 - j]\n                ans += min(cnt1, 4 - cnt1)  \n        if m % 2 and n % 2:\n            \n            ans += a[m // 2][n // 2]\n        diff = cnt1 = 0\n        if m % 2:\n            \n            row = a[m // 2]\n            for j in range(n // 2):\n                if row[j] != row[-1 - j]:\n                    diff += 1\n                else:\n                    cnt1 += row[j] * 2\n        if n % 2:\n            \n            for i in range(m // 2):\n                if a[i][n // 2] != a[- 1 - i][n // 2]:\n                    diff += 1\n                else:\n                    cnt1 += a[i][n // 2] * 2\n        return ans + (diff if diff else cnt1 % 4)", "trans_code": "public static int minFlips ( List < List < Integer >> a ) throws Exception {\n  int ans = 0 ;\n  int m = a . size ( ) , n = a . get ( 0 ) . size ( ) ;\n  for ( int i = 0 ;\n  i < m / 2 ;\n  i ++ ) {\n    List < Integer > row = a . get ( i ) , row2 = a . get ( a . size ( ) - 1 - i ) ;\n    for ( int j = 0 ;\n    j < n / 2 ;\n    j ++ ) {\n      int cnt1 = row . get ( j ) + row . get ( a . size ( ) - 1 - j ) + row2 . get ( j ) + row2 . get ( a . size ( ) - 1 - j ) ;\n      ans += Math . min ( cnt1 , 4 - cnt1 ) ;\n    }\n  }\n  if ( m % 2 > 0 && n % 2 > 0 ) ans += a . get ( m / 2 ) . get ( n / 2 ) ;\n  int diff = cnt1 = 0 ;\n  if ( m % 2 > 0 ) {\n    List < Integer > row = a . get ( m / 2 ) ;\n    for ( int j = 0 ;\n    j < n / 2 ;\n    j ++ ) {\n      if ( row . get ( j ) != row . get ( a . size ( ) - 1 - j ) ) diff ++ ;\n      else cnt1 += row . get ( j ) * 2 ;\n    }\n  }\n  if ( n % 2 > 0 ) {\n    for ( int i = 0 ;\n    i < m / 2 ;\n    i ++ ) {\n      if ( a . get ( i ) . get ( n / 2 ) != a . get ( a . size ( ) - 1 - i ) . get ( n / 2 ) ) diff ++ ;\n      else cnt1 += a . get ( i ) . get ( n / 2 ) * 2 ;\n    }\n  }\n  return ans + ( diff == 0 ? cnt1 % 4 : cnt1 % 4 ) ;\n}\n", "reference_code": "    public static int minFlips(int[][] a) {\n        int ans = 0;\n        int m = a.length;\n        int n = a[0].length;\n        for (int i = 0; i < m / 2; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int cnt1 = a[i][j] + a[i][n - 1 - j] + a[m - 1 - i][j] + a[m - 1 - i][n - 1 - j];\n                ans += Math.min(cnt1, 4 - cnt1); \n            }\n        }\n        if (m % 2 > 0 && n % 2 > 0) {\n            \n            ans += a[m / 2][n / 2];\n        }\n        int diff = 0, cnt1 = 0;\n        if (m % 2 > 0) {\n            \n            for (int j = 0; j < n / 2; j++) {\n                if (a[m / 2][j] != a[m / 2][n - 1 - j]) {\n                    diff++;\n                } else {\n                    cnt1 += a[m / 2][j] * 2;\n                }\n            }\n        }\n        if (n % 2 > 0) {\n            \n            for (int i = 0; i < m / 2; i++) {\n                if (a[i][n / 2] != a[m - 1 - i][n / 2]) {\n                    diff++;\n                } else {\n                    cnt1 += a[i][n / 2] * 2;\n                }\n            }\n        }\n        return ans + (diff > 0 ? diff : cnt1 % 4);\n    }", "target_Lan": "java###minFlips_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minFlips_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minFlips(new int[][]{{0, 0}, {0, 0}}));\n        System.out.println(minFlips(new int[][]{{1, 0, 1}, {0, 1, 0}, {1, 0, 1}}));\n        System.out.println(minFlips(new int[][]{{1, 0, 1}, {1, 1, 1}}));\n        System.out.println(minFlips(new int[][]{{1, 0, 1, 0}, {0, 1, 0, 1}, {1, 0, 1, 0}, {0, 1, 0, 1}}));\n        System.out.println(minFlips(new int[][]{{1}}));\n    }\n}"}, {"source_Lan": "python###canAliceWin.py", "source_code": "def canAliceWin( nums: List[int]) -> bool:\n        return sum(x if x < 10 else -x for x in nums) != 0", "trans_code": "public static boolean canAliceWin ( int [ ] nums ) throws Exception {\n  return Arrays . equals ( nums , 10 ) ;\n}\n", "reference_code": "public static boolean canAliceWin(int[] nums) {\n        int s = 0;\n        for (int x : nums) {\n            s += x < 10 ? x : -x;\n        }\n        return s != 0;\n    }", "target_Lan": "java###canAliceWin_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class canAliceWin_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(canAliceWin(new int[]{1, 2, 3})); \n        System.out.println(canAliceWin(new int[]{10, 20, 30})); \n        System.out.println(canAliceWin(new int[]{5, 15, -5})); \n        System.out.println(canAliceWin(new int[]{})); \n        System.out.println(canAliceWin(new int[]{9, 9, 9, 9, 9})); \n    }\n}"}, {"source_Lan": "python###numberOfSubstrings.py", "source_code": "def numberOfSubstrings( s: str) -> int:\n        n = len(s)\n        a = [i for i, b in enumerate(s) if b == '0']\n        tot1 = n - len(a)\n        a.append(n)  \n        ans = i = 0  \n        for left, b in enumerate(s):\n            if b == '1':\n                ans += a[i] - left  \n            for k in range(i, len(a) - 1):\n                cnt0 = k - i + 1\n                if cnt0 * cnt0 > tot1:\n                    break\n                cnt1 = a[k] - left - (k - i)\n                \n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0)\n            if b == '0':\n                i += 1  \n        return ans", "trans_code": "public static int numberOfSubstrings ( String s ) throws Exception {\n  int n = s . length ( ) ;\n  int [ ] a = new int [ n ] ;\n  for ( int i = 0 , b = s . charAt ( 0 ) ;\n  b == '0' ;\n  b = s . charAt ( 1 ) ) ;\n  int tot1 = n - a . length ;\n  a [ 0 ] = n ;\n  int ans = i = 0 ;\n  for ( int left = 0 , b = s . charAt ( 0 ) ;\n  b == '1' ;\n  b = s . charAt ( 1 ) ) {\n    if ( b == '1' ) ans += a [ i ] - left ;\n    for ( int k = i ;\n    k < a . length - 1 ;\n    k ++ ) {\n      int cnt0 = k - i + 1 ;\n      if ( cnt0 * cnt0 > tot1 ) break ;\n      int cnt1 = a [ k ] - left - ( k - i ) ;\n      ans += Math . max ( a [ k + 1 ] - a [ k ] - Math . max ( cnt0 * cnt0 - cnt1 , 0 ) , 0 ) ;\n    }\n    if ( b == '0' ) i ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "public static int numberOfSubstrings(String S) {\n        char[] s = S.toCharArray();\n        int n = s.length;\n        int m = 0;\n        int[] a = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                a[m++] = i;\n            }\n        }\n        int tot1 = n - m;\n        a[m] = n; \n        int ans = 0;\n        int i = 0; \n        for (int left = 0; left < n; left++) {\n            if (s[left] == '1') {\n                ans += a[i] - left; \n            }\n            for (int k = i; k < m; k++) {\n                int cnt0 = k - i + 1;\n                if (cnt0 * cnt0 > tot1) {\n                    break;\n                }\n                int cnt1 = a[k] - left - (k - i);\n                ans += Math.max(a[k + 1] - a[k] - Math.max(cnt0 * cnt0 - cnt1, 0), 0);\n            }\n            if (s[left] == '0') {\n                i++; \n            }\n        }\n        return ans;\n    }", "target_Lan": "java###numberOfSubstrings_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Scanner;\npublic class numberOfSubstrings_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(numberOfSubstrings(\"111111\")); \n        System.out.println(numberOfSubstrings(\"000000\")); \n        System.out.println(numberOfSubstrings(\"101010\")); \n        System.out.println(numberOfSubstrings(\"000011111111\")); \n        System.out.println(numberOfSubstrings(\"\")); \n    }\n}"}, {"source_Lan": "python###mostFrequent.py", "source_code": "def mostFrequent(n,arr):\n    dic={}\n    for ele in arr:\n        if ele in dic:\n            dic[ele]+=1\n        else:\n            dic[ele]=1\n    mx=0\n    for ele in dic.values():\n        mx=max(mx,ele)\n    ans=0\n    for key in sorted(dic):\n        if dic[key]==mx:\n            ans=key\n    return ans", "trans_code": "public static int mostFrequent ( int n , int [ ] arr ) {\n  HashMap < Integer , Integer > dic = new HashMap < Integer , Integer > ( ) ;\n  for ( int ele : arr ) {\n    if ( ele < n ) {\n      dic . put ( ele , 1 ) ;\n    }\n    else {\n      dic . put ( ele , 1 ) ;\n    }\n  }\n  int mx = 0 ;\n  for ( int ele : dic . values ( ) ) {\n    mx = Math . max ( mx , ele ) ;\n  }\n  int ans = 0 ;\n  for ( Integer key : new TreeSet < Integer > ( dic ) ) {\n    if ( dic . get ( key ) == mx ) {\n      ans = key ;\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int mostFrequent(int a[], int n)\n    {\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        for(int i=0;i<n;i++)\n        {\n            if(mp.containsKey(a[i]))\n                mp.put(a[i], mp.get(a[i])+1);\n            else\n                mp.put(a[i],1);\n        }\n        int ans=-1,res=0;\n        for(Entry<Integer,Integer> val : mp.entrySet())\n            res=Math.max(res,val.getValue());\n        for(Entry<Integer,Integer> val : mp.entrySet())\n        {\n            if (val.getValue()==res&&val.getKey()>ans)\n                ans=val.getKey();\n        }\n        return ans;\n    }", "target_Lan": "java###mostFrequent_Test.java", "target_code_shell": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\npublic class mostFrequent_Test {\n// TOFILL\n    public static void main(String[] args) {\n        \n        int[] arr1 = {0};\n        int n1 = 1;\n        System.out.println(mostFrequent(arr1, n1));  \n\n        \n        int[] arr2 = {1};\n        int n2 = 1;\n        System.out.println(mostFrequent(arr2, n2));  \n\n        \n        int[] arr3 = {1, 2};\n        int n3 = 2;\n        System.out.println(mostFrequent(arr3, n3));  \n\n        \n        int[] arr4 = {1, 2, 2, 3, 3, 3};\n        int n4 = 6;\n        System.out.println(mostFrequent(arr4, n4));  \n\n        \n        int[] arr5 = {3, 3, 1, 1, 1, 3, 2, 2, 2};\n        int n5 = 9;\n        System.out.println(mostFrequent(arr5, n5));  \n    }\n}"}, {"source_Lan": "python###getMax.py", "source_code": "def getMax( x: int) -> int:\n        \n        flag = False\n        prev = -1\n        cnt = 0\n        for i in range(30, -1, -1):\n            if cnt >= 2:\n                break\n            if not flag and (x & (1 << i)) > 0:\n                flag = True\n                continue\n            if flag:\n                if (x & (1 << i)) == 0 and prev == -1:\n                    prev = i\n                    x |= (1 << i)\n                    cnt += 1\n                if (x & (1 << i)) == 0 and prev - i > 1:\n                    x |= (1 << i)\n                    cnt += 1\n        return x", "trans_code": "public static int getMax ( int x ) throws Exception {\n  boolean flag = false ;\n  int prev = - 1 ;\n  int cnt = 0 ;\n  for ( int i = 30 ;\n  i >= 0 ;\n  i -- ) {\n    if ( cnt >= 2 ) break ;\n    if ( ! flag && ( x & ( 1 << i ) ) > 0 ) {\n      flag = true ;\n      continue ;\n    }\n    if ( flag ) {\n      if ( ( x & ( 1 << i ) ) == 0 && prev == - 1 ) {\n        prev = i ;\n        x |= ( 1 << i ) ;\n        cnt ++ ;\n      }\n      if ( ( x & ( 1 << i ) ) == 0 && prev - i > 1 ) {\n        x |= ( 1 << i ) ;\n        cnt ++ ;\n      }\n    }\n  }\n  return x ;\n}\n", "reference_code": "public static int getMax(int x) {\n        \n        boolean flag = false;\n        int prev = -1;\n        int cnt = 0;\n        for (int i = 30; i >= 0; i--) {\n            if (cnt >= 2) break;\n            if (!flag && (x & (1 << i)) > 0) {\n                flag = true;\n                continue;\n            }\n            if (flag) {\n                if ((x & (1 << i)) == 0 && prev == -1) {\n                    prev = i;\n                    x |= (1 << i);\n                    cnt++;\n                }\n                if ((x & (1 << i)) == 0 && prev - i > 1) {\n                    x |= (1 << i);\n                    cnt++;\n                }\n            }\n        }\n        return x;\n    }", "target_Lan": "java###getMax_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\npublic class getMax_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(getMax(0));\n        System.out.println(getMax(1));\n        System.out.println(getMax(2147483647));\n        System.out.println(getMax(-1));\n        System.out.println(getMax(5));\n    }\n}"}, {"source_Lan": "python###getMaxProductivity.py", "source_code": "def getMaxProductivity( n: int, productivity: List[int]) -> int:\n        total_sum = sum(productivity)\n        \n        dp = [0] * (total_sum + 1)\n        dp[0] = 1\n        \n        for prod in productivity:\n            for j in range(total_sum, prod - 1, -1):\n                dp[j] = dp[j] or dp[j - prod]\n        \n        max_productivity = 0\n        for i in range(1, total_sum):\n            if dp[i]:\n                max_productivity = max(max_productivity, i * (total_sum - i))\n        return max_productivity", "trans_code": "public static int getMaxProductivity ( int n , int [ ] productivity ) throws Exception {\n  int totalSum = Arrays . sum ( productivity ) ;\n  int [ ] dp = new int [ totalSum + 1 ] ;\n  dp [ 0 ] = 1 ;\n  for ( int prod : productivity ) {\n    for ( int j = totalSum ;\n    j >= prod - 1 ;\n    j -- ) {\n      dp [ j ] = dp [ j ] > 0 ? dp [ j - prod ] : dp [ j ] ;\n    }\n  }\n  int maxProductivity = 0 ;\n  for ( int i = 1 ;\n  i < totalSum ;\n  i ++ ) {\n    if ( dp [ i ] > 0 ) {\n      maxProductivity = Math . max ( maxProductivity , i * ( totalSum - i ) ) ;\n    }\n  }\n  return maxProductivity ;\n}\n", "reference_code": "public static int getMaxProductivity(int n, int[] productivity) {\n        int totalSum = 0;\n        for (int val : productivity) {\n            totalSum += val;\n        }\n        int halfSum = totalSum / 2;\n        int[] dp = new int[halfSum + 1];\n        dp[0] = 1;\n        for (int prod : productivity) {\n            for (int j = halfSum; j >= prod; j--) {\n                dp[j] = dp[j] | dp[j - prod];\n            }\n        }\n        int maxProductivity = 0;\n        for (int i = 1; i <= halfSum; i++) {\n            if (dp[i] == 1) {\n                maxProductivity = Math.max(maxProductivity, i * (totalSum - i));\n            }\n        }\n        return maxProductivity;\n    }", "target_Lan": "java###getMaxProductivity_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class getMaxProductivity_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(getMaxProductivity(0, new int[]{}));\n        System.out.println(getMaxProductivity(3, new int[]{1, 2, 3}));\n        System.out.println(getMaxProductivity(4, new int[]{2, 2, 2, 2}));\n        System.out.println(getMaxProductivity(3, new int[]{1, 1000000, 1}));\n        System.out.println(getMaxProductivity(5, new int[]{5, 5, 5, 5, 5}));\n    }\n}"}, {"source_Lan": "python###getCount.py", "source_code": "def getCount( n : int, arr : List[int], a : int, b : int) -> int:\n        \n        ans = 0\n        for i in range(n):\n            for j in range(i, n):\n                flag = False\n                for k in range(i, j + 1):\n                    for l in range(k + 1, j + 1):\n                        if arr[k] + arr[l] < a or arr[k] + arr[l] > b:\n                            flag = True\n                if not flag:\n                    ans += 1\n        return ans", "trans_code": "public static int getCount ( int n , int [ ] arr , int a , int b ) throws Exception {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      boolean flag = false ;\n      for ( int k = i ;\n      k <= j ;\n      k ++ ) {\n        for ( int l = k + 1 ;\n        l <= j ;\n        l ++ ) {\n          if ( arr [ k ] + arr [ l ] < a || arr [ k ] + arr [ l ] > b ) {\n            flag = true ;\n          }\n        }\n      }\n      if ( ! flag ) {\n        ans ++ ;\n      }\n    }\n  }\n  return ans ;\n}\n", "reference_code": "    public static long getCount(int n, int[] arr, int a, int b) {\n        \n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                boolean flag = false;\n                for (int k = i; k <= j; k++) {\n                    for (int l = k + 1; l <= j; l++) {\n                        if (arr[k] + arr[l] < a || arr[k] + arr[l] > b) {\n                            flag = true;\n                        }\n                    }\n                }\n                if (!flag) ans++;\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###getCount_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class getCount_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(getCount(0, new int[]{}, 1, 3)); \n        System.out.println(getCount(3, new int[]{1, 2, 3}, 1, 3)); \n        System.out.println(getCount(4, new int[]{1, 1, 1, 1}, 1, 3)); \n        System.out.println(getCount(2, new int[]{1000000, 1000000}, 1999999, 2000001)); \n        System.out.println(getCount(4, new int[]{1, 2, 3, 4}, 1, 6)); \n    }\n}"}, {"source_Lan": "python###minSwaps.py", "source_code": "def minSwaps( S):\n        even_sum, odd_sum = 0, 0\n        n = len(S)\n        \n        for i in range(n):\n            if i % 2 == 1:\n                odd_sum += (S[i] == '1')\n            else:\n                even_sum += (S[i] == '1')\n        \n        difference = abs(odd_sum - even_sum)\n        \n        if difference % 2 == 1:\n            return -1\n        \n        return difference // 2", "trans_code": "public static int minSwaps ( String S ) {\n  int evenSum = 0 , oddSum = 0 ;\n  int n = S . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 1 ) oddSum += ( S . charAt ( i ) == '1' ? 1 : 0 ) ;\n    else evenSum += ( S . charAt ( i ) == '1' ? 1 : 0 ) ;\n  }\n  int difference = Math . abs ( oddSum - evenSum ) ;\n  if ( difference % 2 == 1 ) return - 1 ;\n  return difference / 2 ;\n}\n", "reference_code": "public static int minSwaps(String S) {\n        int evenSum = 0, oddSum = 0;\n        int n = S.length();\n        \n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 1)\n                oddSum += (S.charAt(i) == '1') ? 1 : 0;\n            else\n                evenSum += (S.charAt(i) == '1') ? 1 : 0;\n        }\n        \n        int difference = Math.abs(oddSum - evenSum);\n        \n        if (difference % 2 == 1) return -1;\n        \n        return difference / 2;\n    }", "target_Lan": "java###minSwaps_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minSwaps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minSwaps(\"\"));           \n        System.out.println(minSwaps(\"1001\"));       \n        System.out.println(minSwaps(\"1100\"));       \n        System.out.println(minSwaps(\"111000\"));     \n        System.out.println(minSwaps(\"1111\"));       \n    }\n}"}, {"source_Lan": "python###countUniques.py", "source_code": "def countUniques( a, k, l, r):\n        \n        set_ = set()\n        dup = 0\n        for i in a:\n            if i in set_:\n                dup += 1\n            else:\n                set_.add(i)\n        unique = len(set_)\n        for i in range(l, r + 1):\n            if k > 0 and dup > 0 and i not in set_:\n                unique += 1\n                k -= 1\n                dup -= 1\n        return unique", "trans_code": "public static int countUniques ( int [ ] a , int k , int l , int r ) {\n  HashSet < Integer > set_ = new HashSet < Integer > ( ) ;\n  int dup = 0 ;\n  for ( int i : a ) {\n    if ( i < 0 ) dup ++ ;\n    else set_ . add ( i ) ;\n  }\n  int unique = set_ . size ( ) ;\n  for ( int i = l ;\n  i <= r ;\n  i ++ ) {\n    if ( k > 0 && dup > 0 && i != 0 ) {\n      unique ++ ;\n      k -- ;\n      dup -- ;\n    }\n  }\n  return unique ;\n}\n", "reference_code": "public static int countUniques(int[] a, int k, int l, int r) {\n        Set<Integer> set = new HashSet<>();\n        int dup = 0;\n        for(int i : a) if(!set.add(i)) dup++;\n        int unique = set.size();\n        for(int i = l ; i <= r ; i++)\n            if(k>0 && dup>0 && !set.contains(i)){\n                unique++; k--; dup--;\n            }\n        return unique;\n    }", "target_Lan": "java###countUniques_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class countUniques_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(countUniques(new int[]{}, 2, 1, 5));\n        System.out.println(countUniques(new int[]{1, 2, 3, 3, 4}, 3, 1, 5));\n        System.out.println(countUniques(new int[]{5, 6, 7}, 0, 4, 10));\n        System.out.println(countUniques(new int[]{2, 2, 3, 3, 3, 5}, 2, 1, 6));\n        System.out.println(countUniques(new int[]{8, 8, 9, 10}, 1, 7, 10));\n    }\n}"}, {"source_Lan": "python###maxLength.py", "source_code": "def maxLength( arr):\n        \n        N = len(arr)\n        ans = 0\n        for i in range(N):\n            or_val = 0\n            for j in range(i, n):\n                or_val |= arr[j]\n                x = bin(or_val).count('1')\n                if x == len(bin(or_val)) - 2:  \n                    ans = max(ans, j - i + 1)\n        return ans", "trans_code": "public static int maxLength ( int [ ] arr ) {\n  int N = arr . length ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int orVal = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      orVal |= arr [ j ] ;\n      int x = bin ( orVal ) . indexOf ( '1' ) ;\n      if ( x == bin ( orVal ) . length - 2 ) {\n        ans = Math . max ( ans , j - i + 1 ) ;\n      }\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int maxLength(int N, int[] arr) {\n        int ans = 0;\n        for(int i = 0 ; i < N; i++){\n            int or = 0;\n            for(int j = i ; j < N; j++){\n                or = or | arr[j];\n                int x = Integer.bitCount(or);\n                if(x == Integer.toBinaryString(or).length()){\n                    ans = Math.max(ans , j - i + 1);\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###maxLength_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxLength_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] arr = {};\n        System.out.println(maxLength(arr.length, arr));\n    }\n}"}, {"source_Lan": "python###firstWord.py", "source_code": "def firstWord( n: int, dictionary: List[str]) -> str:\n        dictionary.sort()\n        seen_words = set()\n        for word in dictionary:\n            if word in seen_words:\n                return \"Invalid\"\n            seen_words.add(word)\n        return dictionary[0]", "trans_code": "public static String firstWord ( int n , List < String > dictionary ) throws Exception {\n  Collections . sort ( dictionary ) ;\n  Set < String > seenWords = new HashSet < > ( ) ;\n  for ( String word : dictionary ) {\n    if ( word . contains ( \" \" ) ) {\n      return \"Invalid\" ;\n    }\n    seenWords . add ( word ) ;\n  }\n  return dictionary . get ( 0 ) ;\n}\n", "reference_code": "public static String firstWord(int n, String[] dictionary) {\n        \n        Arrays.sort(dictionary);\n        Set<String> seenWords = new HashSet<>();\n        for (String word : dictionary) {\n            if (seenWords.contains(word)) {\n                return \"Invalid\";\n            }\n            seenWords.add(word);\n        }\n        return dictionary[0];\n    }", "target_Lan": "java###firstWord_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class firstWord_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(firstWord(1, new String[]{\"apple\"}));\n        System.out.println(firstWord(5, new String[]{\"banana\", \"apple\", \"cherry\", \"date\", \"fig\"}));\n        System.out.println(firstWord(3, new String[]{\"grape\", \"apple\", \"grape\"}));\n        System.out.println(firstWord(4, new String[]{\"Lemon\", \"lemon\", \"Mango\", \"mango\"}));\n    }\n}"}, {"source_Lan": "python###longestSubarray.py", "source_code": "def longestSubarray( n: int, arr: List[int]) -> int:\n        ans = -1\n        for i in range(n):\n            count = 0\n            total_sum = 0\n            for j in range(i, n):\n                count += 1\n                total_sum += arr[j]\n                if count == total_sum:\n                    ans = max(ans, count)\n        return ans", "trans_code": "public static int longestSubarray ( int n , int [ ] arr ) throws Exception {\n  int ans = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int count = 0 ;\n    int totalSum = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      count ++ ;\n      totalSum += arr [ j ] ;\n      if ( count == totalSum ) {\n        ans = Math . max ( ans , count ) ;\n      }\n    }\n  }\n  return ans ;\n}\n", "reference_code": "public static int longestSubarray(int n, int[] arr) {\n        int ans = -1;\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                count++;\n                sum += arr[j];\n                if (count == sum) {\n                    ans = Math.max(ans, count);\n                }\n            }\n        }\n        return ans;\n    }", "target_Lan": "java###longestSubarray_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class longestSubarray_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        System.out.println(longestSubarray(5, arr1));  \n        \n        int[] arr2 = {1, 1, 1, 1, 1};\n        System.out.println(longestSubarray(5, arr2));  \n        \n        int[] arr3 = {2, 2, 2, 3, 3, 1, 0};\n        System.out.println(longestSubarray(7, arr3));  \n        \n        int[] arr4 = {1};\n        System.out.println(longestSubarray(1, arr4));  \n        \n        int[] arr5 = {4, 1, 0, 0};\n        System.out.println(longestSubarray(4, arr5));  \n    }\n}"}, {"source_Lan": "python###minDifference.py", "source_code": "def minDifference( n: int, arr: List[int], x: int) -> int:\n        ans = n + 1\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if (arr[i] ^ arr[j]) <= x:\n                    ans = min(ans, j - i)\n        return -1 if ans == n + 1 else ans", "trans_code": "public static int minDifference ( int n , int [ ] arr , int x ) throws Exception {\n  int ans = n + 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( ( arr [ i ] ^ arr [ j ] ) <= x ) {\n        ans = Math . min ( ans , j - i ) ;\n      }\n    }\n  }\n  return - 1 == ans ? n + 1 : ans ;\n}\n", "reference_code": "public static int minDifference(int n, int[] arr, int x) {\n        int ans = n + 1;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((arr[i] ^ arr[j]) <= x) {\n                    ans = Math.min(ans, j - i);\n                }\n            }\n        }\n        return (ans == n + 1) ? -1 : ans;\n    }", "target_Lan": "java###minDifference_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minDifference_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minDifference(0, new int[]{}, 5)); \n        System.out.println(minDifference(2, new int[]{3, 2}, 1)); \n        System.out.println(minDifference(5, new int[]{1, 2, 3, 4, 5}, 3)); \n        System.out.println(minDifference(4, new int[]{5, 6, 7, 8}, 2)); \n        System.out.println(minDifference(3, new int[]{10, 15, 20}, 5)); \n    }\n}"}, {"source_Lan": "python###reachAlice.py", "source_code": "def reachAlice(d: int, x: int, y: int, k: int) -> str:\n    p = d // x\n    q = d // y\n    q += k\n    return \"Walk\" if p <= q else \"Bike\"\n    ", "trans_code": "public static String reachAlice ( int d , int x , int y , int k ) throws Exception {\n  int p = d / x ;\n  int q = d / y ;\n  q += k ;\n  return p <= q ? \"Walk\" : \"Bike\" ;\n}\n", "reference_code": "public static String reachAlice(int d, int x, int y, int k) {\n        int p = d / x;\n        int q = d / y;\n        q += k;\n        return (p <= q) ? \"Walk\" : \"Bike\";\n    }", "target_Lan": "java###reachAlice_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class reachAlice_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(reachAlice(10, 2, 5, 0));\n        System.out.println(reachAlice(10, 5, 2, 0));\n        System.out.println(reachAlice(0, 1, 1, 0));\n        System.out.println(reachAlice(1000000, 1000, 2000, 1000));\n        System.out.println(reachAlice(50, 10, 5, -5));\n    }\n}"}, {"source_Lan": "python###removeOrder.py", "source_code": "def removeOrder( n: int, arr: List[int], str: str) -> List[int]:\n        \n        arr.sort()\n        i = 0\n        j = n - 1\n        ans = [0] * n\n        idx = 0\n        for ch in str:\n            if ch == '0':\n                ans[idx] = arr[i]\n                i += 1\n            else:\n                ans[idx] = arr[j]\n                j -= 1\n            idx += 1\n        return ans", "trans_code": "public static int [ ] removeOrder ( int n , int [ ] arr , String str ) throws Exception {\n  Arrays . sort ( arr ) ;\n  int i = 0 ;\n  int j = n - 1 ;\n  int [ ] ans = new int [ n ] ;\n  int idx = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    char ch = str . charAt ( i ) ;\n    if ( ch == '0' ) {\n      ans [ idx ] = arr [ i ] ;\n      i ++ ;\n    }\n    else {\n      ans [ idx ] = arr [ j ] ;\n      j -- ;\n    }\n    idx ++ ;\n  }\n  return ans ;\n}\n", "reference_code": "public static int[] removeOrder(int n, int[] arr, String str) {\n        Arrays.sort(arr);\n        int i = 0, j = n - 1;\n        int[] ans = new int[n];\n        int idx = 0;\n        for (char ch : str.toCharArray()) {\n            if (ch == '0')\n                ans[idx++] = arr[i++];\n            else\n                ans[idx++] = arr[j--];\n        }\n        return ans;\n    }", "target_Lan": "java###removeOrder_Test.java", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class removeOrder_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] result1 = removeOrder(5, new int[]{5, 3, 1, 4, 2}, \"01010\");\n        System.out.println(Arrays.toString(result1)); \n\n        int[] result2 = removeOrder(4, new int[]{10, 20, 30, 40}, \"0000\");\n        System.out.println(Arrays.toString(result2)); \n\n        int[] result3 = removeOrder(5, new int[]{1, 2, 3, 4, 5}, \"11111\");\n        System.out.println(Arrays.toString(result3)); \n\n        int[] result4 = removeOrder(6, new int[]{5, 5, 5, 5, 5, 2}, \"101010\");\n        System.out.println(Arrays.toString(result4)); \n\n        int[] result5 = removeOrder(0, new int[]{}, \"\");\n        System.out.println(Arrays.toString(result5)); \n    }\n}"}]