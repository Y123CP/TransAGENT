{"source_Lan": "java###ANDequalOR_Test.java", "source_code_str": "    public static long ANDequalOR(int n, int[] arr) {\n        long ans = 0;\n        int pre = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == arr[pre]) {\n                count++;\n            } else {\n                ans += (count * (count + 1)) / 2;\n                pre = i;\n                count = 1;\n            }\n        }\n        ans += (count * (count + 1)) / 2;\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class ANDequalOR_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(ANDequalOR(0, new int[]{})); // Test case 1\n        System.out.println(ANDequalOR(1, new int[]{5})); // Test case 2\n        System.out.println(ANDequalOR(5, new int[]{1, 1, 1, 1, 1})); // Test case 3\n        System.out.println(ANDequalOR(4, new int[]{1, 2, 1, 2})); // Test case 4\n        System.out.println(ANDequalOR(6, new int[]{3, 3, 2, 2, 2, 3})); // Test case 5\n        System.out.println(ANDequalOR(3, new int[]{1, 2, 3})); // Test case 6\n        System.out.println(ANDequalOR(5, new int[]{5, 5, 5, 5, 4})); // Test case 7\n        System.out.println(ANDequalOR(5, new int[]{4, 4, 5, 5, 5})); // Test case 8\n        System.out.println(ANDequalOR(7, new int[]{1, 1, 2, 2, 2, 1, 1})); // Test case 9\n        System.out.println(ANDequalOR(6, new int[]{1, 1, 2, 1, 1, 1})); // Test case 10\n    }\n}"}
{"source_Lan": "java###MinSize_Test.java", "source_code_str": "    public static int MinSize(int[] A,int n) {\n        \n        \n        int curr = A[0];\n        int count = 1;\n        for (int i = 1; i < n; ++i) {\n            if (A[i] == curr) {\n                count += 1;\n            } else {\n                count -= 1;\n                if (count == 0) {\n                    curr = A[i];\n                    count = 1;\n                }\n            }\n        }\n        int max_f = 0;\n        for (int i = 0; i < n; i++) {\n            if (curr == A[i]) {\n                max_f++;\n            }\n        }\n        if (max_f <= (n + 1) / 2) {\n            return n & 1;\n        } else {\n            return 2 * max_f - n;\n        }\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class MinSize_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(MinSize(new int[]{1, 2, 1, 2, 1}, 5)); // Majority element exists(1); expected output: 2 * 3 - 5 = 1\n        System.out.println(MinSize(new int[]{1, 1, 1, 2, 3}, 5)); // Majority element(1); expected output: 2 * 3 - 5 = 1\n        System.out.println(MinSize(new int[]{1, 2, 3, 4, 5}, 5)); // No majority; expected output: 5 & 1 = 1\n        System.out.println(MinSize(new int[]{1, 1, 2, 2, 2, 3}, 6)); // Majority element(2); expected output: 2 * 3 - 6 = 0\n        System.out.println(MinSize(new int[]{1, 1}, 2)); // Single element majority; expected output: 1\n        System.out.println(MinSize(new int[]{1, 2, 3}, 3)); // No majority; expected output: 3 & 1 = 1\n        System.out.println(MinSize(new int[]{5, 5, 5, 5}, 4)); // All same; expected output: 2 * 4 - 4 = 4\n        System.out.println(MinSize(new int[]{10, 10, 20, 10, 30}, 5)); // Majority element(10); expected output: 2 * 3 - 5 = 1\n        System.out.println(MinSize(new int[]{5, 5, 5, 1, 2, 1}, 6)); // Majority by 5; expected output: 2 * 3 - 6 = 0\n    }\n}"}
{"source_Lan": "java###lastFairyStanding_Test.java", "source_code_str": "    public static int lastFairyStanding(int n, int k) {\n        int i = 1, ans = 0;\n        while (i <= n)\n            ans = (ans + k) % i++;\n        return ans + 1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class lastFairyStanding_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(lastFairyStanding(1, 1));\n        System.out.println(lastFairyStanding(5, 2));\n        System.out.println(lastFairyStanding(10, 3));\n        System.out.println(lastFairyStanding(7, 5));\n        System.out.println(lastFairyStanding(20, 1));\n        System.out.println(lastFairyStanding(6, 6));\n        System.out.println(lastFairyStanding(15, 4));\n        System.out.println(lastFairyStanding(100, 10));\n        System.out.println(lastFairyStanding(99, 99));\n        System.out.println(lastFairyStanding(25, 13));\n    }\n}"}
{"source_Lan": "java###equality_Test.java", "source_code_str": "    public static int equality(int A, int B) {\n        \n        if (B < A) return 0;\n        \n        if (A == B) return 1;\n        \n        if (B % 2 == 0) return 1;\n        \n        return 0;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class equality_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(equality(2, 1));   // should return 0\n        System.out.println(equality(5, 5));   // should return 1\n        System.out.println(equality(3, 6));   // should return 1\n        System.out.println(equality(4, 7));   // should return 0\n        System.out.println(equality(-1, -1)); // should return 1\n        System.out.println(equality(-1, 1));  // should return 0\n        System.out.println(equality(0, 2));   // should return 1\n        System.out.println(equality(10, 5));  // should return 0\n        System.out.println(equality(1, 2));   // should return 1\n        System.out.println(equality(3, 3));   // should return 1\n    }\n}"}
{"source_Lan": "java###smallestString_Test.java", "source_code_str": "    public static String smallestString(int n, String s) {\n        \n        StringBuilder answer = new StringBuilder(s);\n        int odd = n % 2; \n        if (n == 1) {\n            return \"-1\"; \n        }\n        for (int i = 0; i < n / 2; i++) {\n            if (s.charAt(i) != 'a') {\n                answer.setCharAt(i, 'a'); \n                return answer.toString(); \n            }\n        }\n        answer.setCharAt(answer.length() - 1, 'b'); \n        return answer.toString(); \n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class smallestString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(smallestString(1, \"b\"));          // should return \"-1\"\n        System.out.println(smallestString(4, \"bbbb\"));       // should change first 'b' to 'a'\n        System.out.println(smallestString(4, \"aaaa\"));       // should change last 'a' to 'b'\n        System.out.println(smallestString(5, \"bcdef\"));      // should change 'b' at index 0 to 'a'\n        System.out.println(smallestString(6, \"abcfde\"));     // should change 'c' at index 2 to 'a'\n        System.out.println(smallestString(3, \"xyz\"));        // should change 'x' to 'a'\n        System.out.println(smallestString(8, \"hgfedcba\"));   // should change 'h' to 'a'\n        System.out.println(smallestString(7, \"abcdefg\"));    // should change 'b' to 'a'\n        System.out.println(smallestString(5, \"aaaaa\"));      // should convert last 'a' to 'b'\n        System.out.println(smallestString(2, \"zz\"));         // should change first 'z' to 'a'\n    }\n}"}
{"source_Lan": "java###AreEqual_Test.java", "source_code_str": "    public static boolean AreEqual(String a, String b) {\n        int n = a.length();\n        boolean flag = false;\n        for (int i = 0; i < n - 1; i++) {\n            if (a.charAt(i) == '0' && b.charAt(i + 1) == '1') {\n                if (a.charAt(i) == b.charAt(i) && a.charAt(i + 1) == b.charAt(i + 1)) {\n                    flag = true;\n                }\n            }\n        }\n        return flag;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class AreEqual_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(AreEqual(\"\", \"\"));          // Both strings are empty.\n        System.out.println(AreEqual(\"0\", \"1\"));        // Short strings, no valid pair for comparison.\n        System.out.println(AreEqual(\"00\", \"11\"));      // Both chars are equal, should return false regardless.\n        System.out.println(AreEqual(\"01\", \"01\"));      // Characters match, should return false.\n        System.out.println(AreEqual(\"010\", \"110\"));    // Should return true as conditions hold for i=0.\n        System.out.println(AreEqual(\"001\", \"101\"));    // Should return false, characters don't match at i=1.\n        System.out.println(AreEqual(\"100\", \"110\"));    // Should return false, while 0 matches with 1, i+1 mismatch.\n        System.out.println(AreEqual(\"0000\", \"1111\"));  // Multiple characters, but should return false.\n        System.out.println(AreEqual(\"0101\", \"1101\"));  // Should return true at i=0.\n        System.out.println(AreEqual(\"1001\", \"1101\"));  // Should return false, only the i+1 match is present.\n    }\n}"}
{"source_Lan": "java###isPossible_Test.java", "source_code_str": "    public static String isPossible(int a, int b, int c) {\n        \n        if ((a + b) > c && (a + c) > b && (b + c) > a)\n            return \"YES\";\n        else\n            return \"NO\";\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class isPossible_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(isPossible(3, 4, 5));  // YES\n        System.out.println(isPossible(1, 1, 2));  // NO\n        System.out.println(isPossible(5, 5, 10)); // NO\n        System.out.println(isPossible(2, 2, 3));  // YES\n        System.out.println(isPossible(0, 0, 0));  // NO\n        System.out.println(isPossible(-1, 2, 2)); // NO\n        System.out.println(isPossible(7, 10, 5)); // YES\n        System.out.println(isPossible(1, 1, 3));  // NO\n        System.out.println(isPossible(10, 15, 20)); // YES\n        System.out.println(isPossible(5, 5, -1)); // NO\n    }\n}"}
{"source_Lan": "java###totalCount_Test.java", "source_code_str": "    public static int totalCount(int n, String s) {\n        int ans = 0, mod = (int)(1e9 + 7);\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == s.charAt(0))\n                ans = (ans + s.length() - i) % mod;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class totalCount_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = {\"\", \"a\", \"aaaaa\", \"abcde\", \"abaaaa\", \"aaaaaa\", \"ababababab\", \"xyzxyzxyz\", \"abcdefghij\", \"zzzzzzzzzzzzz\"};\n        \n        for(String s : testInputs) {\n            System.out.println(totalCount(s.length(), s));\n        }\n    }\n}"}
{"source_Lan": "java###minJumps2_Test.java", "source_code_str": "    public static int minJumps2(int n, int[] arr) {\n        int[] rightGreater = new int[n];\n        int[] rightLesser = new int[n];\n        Arrays.fill(rightGreater, n);\n        Arrays.fill(rightLesser, n);\n        \n        Deque<Integer> stack = new ArrayDeque<>();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && arr[stack.peek()] < arr[i]) {\n                rightGreater[stack.peek()] = i;\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        \n        stack.clear();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {\n                rightLesser[stack.peek()] = i;\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        Deque<int[]> queue = new ArrayDeque<>();\n        queue.offer(new int[]{0, 0});\n        boolean[] visited = new boolean[n];\n        while (!queue.isEmpty()) {\n            int[] p = queue.poll();\n            int idx = p[0];\n            int d = p[1];\n            if (visited[idx]) {\n                continue;\n            }\n            visited[idx] = true;\n            if (idx == n - 1) {\n                return d;\n            }\n            int temp = idx + 1;\n            if (arr[temp] > arr[idx]) {\n                while (temp < n && arr[temp] > arr[idx]) {\n                    queue.offer(new int[]{temp, d + 1});\n                    temp = rightLesser[temp];\n                }\n                if (temp < n) {\n                    queue.offer(new int[]{temp, d + 1});\n                }\n            } else {\n                while (temp < n && arr[temp] < arr[idx]) {\n                    queue.offer(new int[]{temp, d + 1});\n                    temp = rightGreater[temp];\n                }\n                if (temp < n) {\n                    queue.offer(new int[]{temp, d + 1});\n                }\n            }\n        }\n        return -1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minJumps2_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input: single element\n        int[] test1 = {1};\n        System.out.println(minJumps2(test1.length, test1));  // Expected output: 0\n        \n        // Test input: array with increasing values\n        int[] test2 = {2, 3, 4};\n        System.out.println(minJumps2(test2.length, test2));  // Expected output: 2\n        \n        // Test input: array with decreasing values\n        int[] test3 = {5, 4, 3};\n        System.out.println(minJumps2(test3.length, test3));  // Expected output: 2\n        \n        // Test input: mixed values\n        int[] test4 = {1, 3, 2, 4, 6, 5};\n        System.out.println(minJumps2(test4.length, test4));  // Expected output: 3\n        \n        // Test input: array with all equal values\n        int[] test5 = {2, 2, 2, 2};\n        System.out.println(minJumps2(test5.length, test5));  // Expected output: 0\n        \n        // Test input: alternating pattern\n        int[] test6 = {0, 1, 0, 1, 0, 1, 0, 1};\n        System.out.println(minJumps2(test6.length, test6));  // Expected output: 4\n        \n        // Test input: unsorted array\n        int[] test7 = {5, 3, 1, 2, 4, 6};\n        System.out.println(minJumps2(test7.length, test7));  // Expected output: 5\n        \n        // Test input: two elements, increasing\n        int[] test8 = {6};\n        System.out.println(minJumps2(test8.length, test8));  // Expected output: 0\n        \n        // Test input: two elements, decreasing\n        int[] test9 = {3, 2};\n        System.out.println(minJumps2(test9.length, test9));  // Expected output: 1\n        \n        // Test input: contains duplicates, leading to a jump\n        int[] test10 = {1, 4, 3, 4};\n        System.out.println(minJumps2(test10.length, test10));  // Expected output: 2\n    }\n}"}
{"source_Lan": "java###majorityWins_Test.java", "source_code_str": "    public static int majorityWins(int arr[], int n, int x, int y) {\n        int count_x = 0;\n        int count_y = 0;\n        \n        \n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) count_x++;\n            if (arr[i] == y) count_y++;\n        }\n        \n        if (count_x > count_y)\n            \n            return x;\n        else if (count_y > count_x)\n            \n            return y;\n        \n        else if (x < y)\n            return x;\n        else\n            return y;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class majorityWins_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(majorityWins(new int[]{1, 1, 1, 1, 1}, 5, 1, 2)); // 1\n        System.out.println(majorityWins(new int[]{3, 3, 2, 3}, 4, 2, 3));    // 3\n        System.out.println(majorityWins(new int[]{4, 4, 4, 5}, 4, 4, 5));    // 4\n        System.out.println(majorityWins(new int[]{1, 1, -1, 1}, 4, 1, -1));  // 1\n        System.out.println(majorityWins(new int[]{-1, -1, -1, 0}, 4, -1, 0));// -1\n        System.out.println(majorityWins(new int[]{1, 2, 3, 4}, 4, 1, 2));    // 1\n        System.out.println(majorityWins(new int[]{1, 1, 1, 2}, 4, 1, 2));    // 1\n        System.out.println(majorityWins(new int[]{5, 6, 7, 5}, 4, 5, 6));    // 5\n        System.out.println(majorityWins(new int[]{2, 2, 2, 5}, 4, 2, 5));    // 2\n        System.out.println(majorityWins(new int[]{0, 0, 0, 1}, 4, 0, 1));    // 0\n    }\n}"}
{"source_Lan": "java###minJumps_Test.java", "source_code_str": "    public static int minJumps(int n, int[] arr) {\n        \n        \n        HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n        \n        int ans = n - 1;\n        \n        for (int i = n - 1; i >= 0; i--) {\n            \n            if (m.containsKey(arr[i])) {\n                \n                \n                ans = Math.min(ans, n - (m.get(arr[i]) - i));\n            } else {\n                \n                m.put(arr[i], i);\n            }\n        }\n        \n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\npublic class minJumps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minJumps(5, new int[]{1, 3, 5, 1, 3}));\n        System.out.println(minJumps(6, new int[]{1, 3, 5, 6, 3, 1}));\n        System.out.println(minJumps(4, new int[]{0, 0, 0, 0}));\n        System.out.println(minJumps(3, new int[]{-1, -2, -3}));\n        System.out.println(minJumps(2, new int[]{1, 2}));\n        System.out.println(minJumps(1, new int[]{5}));\n        System.out.println(minJumps(5, new int[]{1, 1, 1, 1, 1}));\n        System.out.println(minJumps(7, new int[]{1, 2, 3, 4, 5, 6, 7}));\n        System.out.println(minJumps(10, new int[]{5, 3, 1, 3, 5, 3, 1, 2, 4, 6}));\n        System.out.println(minJumps(10, new int[]{10, 20, 30, 20, 10, 30, 20, 40, 10, 20}));\n    }\n}"}
{"source_Lan": "java###maximumSetSize_Test.java", "source_code_str": "    public static int maximumSetSize(int[] nums1, int[] nums2) {\n        Set<Integer> set1 = new HashSet<>();\n        for (int x : nums1) {\n            set1.add(x);\n        }\n        Set<Integer> set2 = new HashSet<>();\n        for (int x : nums2) {\n            set2.add(x);\n        }\n        int common = 0;\n        for (int x : set1) {\n            if (set2.contains(x)) {\n                common++;\n            }\n        }\n        int n1 = set1.size();\n        int n2 = set2.size();\n        int ans = n1 + n2 - common;\n        int m = nums1.length / 2;\n        if (n1 > m) {\n            int mn = Math.min(n1 - m, common);\n            ans -= n1 - mn - m;\n            common -= mn;\n        }\n        if (n2 > m) {\n            n2 -= Math.min(n2 - m, common);\n            ans -= n2 - m;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class maximumSetSize_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumSetSize(new int[]{1, 2, 3}, new int[]{3, 4, 5})); // Expected output: 5\n        System.out.println(maximumSetSize(new int[]{1, 2, 3}, new int[]{1, 2, 3})); // Expected output: 3\n        System.out.println(maximumSetSize(new int[]{1, 1, 1}, new int[]{2, 2, 2})); // Expected output: 3\n        System.out.println(maximumSetSize(new int[]{1, 2, 3}, new int[]{}));        // Expected output: 3\n        System.out.println(maximumSetSize(new int[]{}, new int[]{1, 2, 3}));        // Expected output: 3\n        System.out.println(maximumSetSize(new int[]{1, 2, 2, 2, 3}, new int[]{2, 3, 4})); // Expected output: 5\n        System.out.println(maximumSetSize(new int[]{5, 6, 7}, new int[]{8, 9, 10})); // Expected output: 6\n        System.out.println(maximumSetSize(new int[]{1, 2, 3, 4, 5}, new int[]{2, 3})); // Expected output: 6\n        System.out.println(maximumSetSize(new int[]{1, 2, 2, 2}, new int[]{1, 2})); // Expected output: 3 or 4\n        System.out.println(maximumSetSize(new int[]{4, 5, 6}, new int[]{1, 2, 3})); // Expected output: 6\n    }\n}"}
{"source_Lan": "java###countKeyChanges_Test.java", "source_code_str": "    public static int countKeyChanges(String s) {\n        int ans = 0;\n        for (int i = 1; i < s.length(); i++) {\n            if ((s.charAt(i - 1) & 31) != (s.charAt(i) & 31)) {\n                ans++;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countKeyChanges_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countKeyChanges(\"\"));             // Test input 1: Empty string\n        System.out.println(countKeyChanges(\"a\"));            // Test input 2: Only one character\n        System.out.println(countKeyChanges(\"abcd\"));         // Test input 3: No case changes, should return 0\n        System.out.println(countKeyChanges(\"aAbB\"));         // Test input 4: Four case changes\n        System.out.println(countKeyChanges(\"aaAAaa\"));       // Test input 5: Mixed case\n        System.out.println(countKeyChanges(\"xyzXYZ\"));       // Test input 6: Three changes\n        System.out.println(countKeyChanges(\"HelloWorld\"));   // Test input 7: Mixed case, 9 changes\n        System.out.println(countKeyChanges(\"abcABC\"));       // Test input 8: Three changes\n        System.out.println(countKeyChanges(\"123456\"));       // Test input 9: Non-letter characters, should return 0\n        System.out.println(countKeyChanges(\"a1B3c\"));        // Test input 10: Mixed alphanumeric, should count changes\n    }\n}"}
{"source_Lan": "java###countSubmatrices_Test.java", "source_code_str": "    public static int countSubmatrices(int[][] grid, int k) {\n        int ans = 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][] sum = new int[m + 1][n + 1];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1] = sum[i + 1][j] + sum[i][j + 1] - sum[i][j] + grid[i][j];\n                if (sum[i + 1][j + 1] <= k) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countSubmatrices_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 2}, {3, 4}};\n        int k1 = 10;\n        System.out.println(countSubmatrices(input1, k1));\n        \n        int[][] input2 = {{}, {}};\n        int k2 = 5;\n        System.out.println(countSubmatrices(input2, k2));\n\n        int[][] input3 = {{1}};\n        int k3 = 1;\n        System.out.println(countSubmatrices(input3, k3));\n\n        int[][] input4 = {{1, 2}, {2, 1}};\n        int k4 = 5;\n        System.out.println(countSubmatrices(input4, k4));\n\n        int[][] input5 = {{1, 2}, {3, 4}};\n        int k5 = 15;\n        System.out.println(countSubmatrices(input5, k5));\n\n        int[][] input6 = {{-1, 2}, {3, -4}};\n        int k6 = 2;\n        System.out.println(countSubmatrices(input6, k6));\n\n        int[][] input7 = {{10, 20}, {30, 40}};\n        int k7 = 50;\n        System.out.println(countSubmatrices(input7, k7));\n\n        int[][] input8 = {{1, 2}, {2, 1}};\n        int k8 = 3;\n        System.out.println(countSubmatrices(input8, k8));\n\n        int[][] input9 = {{0, 0}, {0, 0}};\n        int k9 = 1;\n        System.out.println(countSubmatrices(input9, k9));\n\n        int[][] input10 = {{5, 6}, {7, 8}};\n        int k10 = 5;\n        System.out.println(countSubmatrices(input10, k10));\n    }\n}"}
{"source_Lan": "java###isSubstringPresent_Test.java", "source_code_str": "    public static boolean isSubstringPresent(String S) {\n        char[] s = S.toCharArray();\n        boolean[][] vis = new boolean[26][26];\n        for (int i = 1; i < s.length; i++) {\n            int x = s[i - 1] - 'a';\n            int y = s[i] - 'a';\n            vis[x][y] = true;\n            if (vis[y][x]) {\n                return true;\n            }\n        }\n        return false;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isSubstringPresent_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = {\"\", \"a\", \"abcde\", \"abccba\", \"abcdef\", \"xyyx\", \"aabbc\", \"mnopq\", \"zzxy\", \"mnopnod\"};\n        \n        for(String input : testInputs) {\n            System.out.println(\"Input: \\\"\" + input + \"\\\", Output: \" + isSubstringPresent(input));\n        }\n    }\n}"}
{"source_Lan": "java###maximumLengthSubstring_Test.java", "source_code_str": "    public static int maximumLengthSubstring(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        int left = 0;\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length; i++) {\n            int b = s[i] - 'a';\n            cnt[b]++;\n            while (cnt[b] > 2) {\n                cnt[s[left++] - 'a']--;\n            }\n            ans = Math.max(ans, i - left + 1);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumLengthSubstring_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumLengthSubstring(\"\")); // Test input 1\n        System.out.println(maximumLengthSubstring(\"abcde\")); // Test input 2\n        System.out.println(maximumLengthSubstring(\"aaaaa\")); // Test input 3\n        System.out.println(maximumLengthSubstring(\"abccba\")); // Test input 4\n        System.out.println(maximumLengthSubstring(\"aabbcc\")); // Test input 5\n        System.out.println(maximumLengthSubstring(\"abcabcabc\")); // Test input 6\n        System.out.println(maximumLengthSubstring(\"aabbccddee\")); // Test input 7\n        System.out.println(maximumLengthSubstring(\"ababab\")); // Test input 8\n        System.out.println(maximumLengthSubstring(\"abcdeedcba\")); // Test input 9\n        System.out.println(maximumLengthSubstring(\"aaabbbcc\")); // Test input 10\n    }\n}"}
{"source_Lan": "java###maxBottlesDrunk_Test.java", "source_code_str": "    public static int maxBottlesDrunk(int numBottles, int numExchange) {\n        int ans = numBottles; \n        while (numBottles >= numExchange) { \n            ans++; \n            numBottles += 1 - numExchange++;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxBottlesDrunk_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] testInputs = {\n            {0, 1},\n            {1, 2},\n            {5, 10},\n            {6, 3},\n            {100, 50},\n            {1000, 10},\n            {15, 5},\n        };\n\n        for(int[] input : testInputs) {\n            int numBottles = input[0];\n            int numExchange = input[1];\n            System.out.println(\"maxBottlesDrunk(\" + numBottles + \", \" + numExchange + \") = \" + maxBottlesDrunk(numBottles, numExchange));\n        }\n    }\n}"}
{"source_Lan": "java###getSmallestString_Test.java", "source_code_str": "    public static String getSmallestString(String s, int k) {\n        char[] t = s.toCharArray();\n        for (int i = 0; i < t.length; i++) {\n            int dis = Math.min(t[i] - 'a', 'z' - t[i] + 1);\n            if (dis > k) {\n                t[i] -= k;\n                break;\n            }\n            t[i] = 'a';\n            k -= dis;\n        }\n        return new String(t);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class getSmallestString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(getSmallestString(\"abc\", 0));\n        System.out.println(getSmallestString(\"xyz\", 6));\n        System.out.println(getSmallestString(\"d\", 3));\n        System.out.println(getSmallestString(\"abcdef\", 2));\n        System.out.println(getSmallestString(\"a\", 5));\n        System.out.println(getSmallestString(\"cba\", 1));\n        System.out.println(getSmallestString(\"zzzz\", 10));\n        System.out.println(getSmallestString(\"\", 0));\n        System.out.println(getSmallestString(\"z\", 1));\n        System.out.println(getSmallestString(\"fghz\", 6));\n    }\n}"}
{"source_Lan": "java###compressedString_Test.java", "source_code_str": "    public static String compressedString(String word) {\n        StringBuilder t = new StringBuilder();\n        char[] s = word.toCharArray();\n        int i0 = -1;\n        for (int i = 0; i < s.length; i++) {\n            char c = s[i];\n            if (i + 1 == s.length || c != s[i + 1]) {\n                int k = i - i0;\n                for (int j = 0; j < k / 9; j++) {\n                    t.append('9').append(c);\n                }\n                if (k % 9 > 0) {\n                    t.append((char) ('0' + (k % 9))).append(c);\n                }\n                i0 = i;\n            }\n        }\n        return t.toString();\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class compressedString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = {\n            \"\",              // Empty string\n            \"a\",             // Single character\n            \"abc\",           // No repeated characters\n            \"aaaaaaa\",       // Single character repeated(7 times)\n            \"aabbbcccc\",     // Multiple characters with repetitions\n            \"aabbccdd\",      // Characters occurring exactly twice\n            \"aaaaaaaaaa\",    // Exactly 10 characters(overflow for first batch)\n            \"abcdeeefffggg\", // Mixed characters with grouped repetitions\n            \"xxxxxxxxxxxxxx\", // 14 times a character\n            \"zzzzyyyyyyyyyyyzz\" // Multiple groups with large counts\n        };\n\n        for(String input : testInputs) {\n            System.out.println(compressedString(input));\n        }\n    }\n}"}
{"source_Lan": "java###countCompleteDayPairs_Test.java", "source_code_str": "    public static long countCompleteDayPairs(int[] hours) {\n        long ans = 0;\n        int[] cnt = new int[24];\n        for (int t : hours) {\n            \n            \n            ans += cnt[(24 - t % 24) % 24];\n            cnt[t % 24]++;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countCompleteDayPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countCompleteDayPairs(new int[]{0, 0, 0}));               // Test Input 1\n        System.out.println(countCompleteDayPairs(new int[]{12, 12, 6, 18}));        // Test Input 2\n        System.out.println(countCompleteDayPairs(new int[]{5, 19, 7, 17}));         // Test Input 4\n        System.out.println(countCompleteDayPairs(new int[]{24, 0, 12, 12}));       // Test Input 5\n        System.out.println(countCompleteDayPairs(new int[]{13, 11, 0}));            // Test Input 6\n        System.out.println(countCompleteDayPairs(new int[]{6, 18, 12, 12}));        // Test Input 7\n        System.out.println(countCompleteDayPairs(new int[]{1, 2, 3, 4, 5}));        // Test Input 8\n        System.out.println(countCompleteDayPairs(new int[]{}));                      // Test Input 9\n        System.out.println(countCompleteDayPairs(new int[]{15, 9, 0, 9}));          // Test Input 10\n    }\n}"}
{"source_Lan": "java###minimumArea_Test.java", "source_code_str": "    public static int minimumArea(int[][] grid) {\n        int left = grid[0].length;\n        int right = 0;\n        int top = grid.length;\n        int bottom = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    left = Math.min(left, j);\n                    right = Math.max(right, j);\n                    top = Math.min(top, i);\n                    bottom = i;\n                }\n            }\n        }\n        return (right - left + 1) * (bottom - top + 1);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumArea_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumArea(new int[][]{{0}})); // expected output: 0\n        System.out.println(minimumArea(new int[][]{{1}})); // expected output: 1\n        System.out.println(minimumArea(new int[][]{{0, 0}, {0, 1}})); // expected output: 1\n        System.out.println(minimumArea(new int[][]{{1, 0}, {1, 0}})); // expected output: 2\n        System.out.println(minimumArea(new int[][]{{0, 1, 0}, {0, 1, 0}})); // expected output: 5\n        System.out.println(minimumArea(new int[][]{{0, 0, 0}, {1, 1, 1}, {0, 0, 0}})); // expected output: 3\n        System.out.println(minimumArea(new int[][]{{1, 1}, {1, 1}})); // expected output: 4\n        System.out.println(minimumArea(new int[][]{{1, 0, 0}, {0, 0, 0}, {0, 0, 1}})); // expected output: 6\n        System.out.println(minimumArea(new int[][]{{0, 1, 0}, {1, 1, 1}, {0, 1, 0}})); // expected output: 8\n    }\n}"}
{"source_Lan": "java###sumOfPower_Test.java", "source_code_str": "    public static int sumOfPower(int[] nums, int k) {\n        final int MOD = 1_000_000_007;\n        int n = nums.length;\n        int[][] f = new int[k + 1][n + 1];\n        f[0][0] = 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = k; j >= nums[i]; j--) {\n                for (int c = i + 1; c > 0; c--) {\n                    f[j][c] = (f[j][c] + f[j - nums[i]][c - 1]) % MOD;\n                }\n            }\n        }\n        long ans = 0;\n        int pow2 = 1;\n        for (int i = n; i > 0; i--) {\n            ans = (ans + (long) f[k][i] * pow2) % MOD;\n            pow2 = pow2 * 2 % MOD;\n        }\n        return (int) ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class sumOfPower_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(sumOfPower(new int[]{}, 1)); // Test input 1: nums = [], k = 1\n        System.out.println(sumOfPower(new int[]{1, 2, 3}, 0)); // Test input 2: nums = [1, 2, 3], k = 0\n        System.out.println(sumOfPower(new int[]{1}, 1)); // Test input 3: nums = [1], k = 1\n        System.out.println(sumOfPower(new int[]{1, 2}, 2)); // Test input 4: nums = [1, 2], k = 2\n        System.out.println(sumOfPower(new int[]{2, 3, 5}, 3)); // Test input 5: nums = [2, 3, 5], k = 3\n        System.out.println(sumOfPower(new int[]{1, 1, 1, 1}, 4)); // Test input 6: nums = [1, 1, 1, 1], k = 4\n        System.out.println(sumOfPower(new int[]{4, 5}, 5)); // Test input 7: nums = [4, 5], k = 5\n        System.out.println(sumOfPower(new int[]{10, 1, 2}, 10)); // Test input 8: nums = [10, 1, 2], k = 10\n        System.out.println(sumOfPower(new int[]{0, 1, 2}, 2)); // Test input 9: nums = [0, 1, 2], k = 2\n        System.out.println(sumOfPower(new int[]{1000, 1000, 1000}, 3)); // Test input 10: nums = [1000, 1000, 1000], k = 3\n    }\n}"}
{"source_Lan": "java###scoreOfString_Test.java", "source_code_str": "    public static int scoreOfString(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        for (int i = 1; i < s.length; i++) {\n            ans += Math.abs(s[i] - s[i - 1]);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class scoreOfString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(scoreOfString(\"\"));            // Test input 1\n        System.out.println(scoreOfString(\"a\"));           // Test input 2\n        System.out.println(scoreOfString(\"aa\"));          // Test input 3\n        System.out.println(scoreOfString(\"ab\"));          // Test input 4\n        System.out.println(scoreOfString(\"abc\"));         // Test input 5\n        System.out.println(scoreOfString(\"a1b2\"));        // Test input 6\n        System.out.println(scoreOfString(\"!@#$%\"));       // Test input 7\n        System.out.println(scoreOfString(\"cba\"));         // Test input 8\n        System.out.println(scoreOfString(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // Test input 9\n        System.out.println(scoreOfString(\"zzzzzz\"));      // Test input 10\n    }\n}"}
{"source_Lan": "java###satisfiesConditions_Test.java", "source_code_str": "    public static boolean satisfiesConditions(int[][] grid) {\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (j > 0 && grid[i][j] == grid[i][j - 1] || i > 0 && grid[i][j] != grid[i - 1][j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class satisfiesConditions_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{0, 1}, {1, 2}};\n        int[][] input2 = {{1, 1}, {1, 2}, {1, 1}, {2}};\n        int[][] input3 = {{0, 0, 0}};\n        int[][] input4 = {{1, 2}, {2, 3}};\n        int[][] input5 = {{1}};\n        int[][] input6 = {{1, 1, 1}};\n\n        System.out.println(satisfiesConditions(input1));\n        System.out.println(satisfiesConditions(input2));\n        System.out.println(satisfiesConditions(input3));\n        System.out.println(satisfiesConditions(input4));\n        System.out.println(satisfiesConditions(input5));\n        System.out.println(satisfiesConditions(input6));\n    }\n}"}
{"source_Lan": "java###accountBalanceAfterPurchase_Test.java", "source_code_str": "    public static int accountBalanceAfterPurchase(int purchaseAmount) {\n        int r = purchaseAmount % 10;\n        if (r < 5) {\n            purchaseAmount -= r;\n        } else {\n            purchaseAmount += 10 - r;\n        }\n        return 100 - purchaseAmount;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class accountBalanceAfterPurchase_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInputs = {0, 5, 10, 14, 19, 25, 99, 100, 104, 109};\n        for(int amount : testInputs) {\n            System.out.println(accountBalanceAfterPurchase(amount));\n        }\n    }\n}"}
{"source_Lan": "java###maxOperations_Test.java", "source_code_str": "    public static int maxOperations(int[] nums) {\n        int n = nums.length, t = 0;\n        for (int i = 1; i < n; i += 2) {\n            if (nums[i] + nums[i - 1] != nums[1] + nums[0]) {\n                break;\n            }\n            t++;\n        }\n        return t;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxOperations(new int[]{1, 2, 3, 4, 5, 6, 7}));\n        System.out.println(maxOperations(new int[]{0, 0, 0, 0, 0, 0}));\n        System.out.println(maxOperations(new int[]{1, 1, 2, 2, 3, 3}));\n        System.out.println(maxOperations(new int[]{1, 2, 3, 4}));\n        System.out.println(maxOperations(new int[]{5, 5, 5, 5, 5, 5, 5}));\n        System.out.println(maxOperations(new int[]{2, 3, 5, 2, 3, 5, 7}));\n        System.out.println(maxOperations(new int[]{9, 9, 18, 18, 9}));\n        System.out.println(maxOperations(new int[]{-1, -1, -2, -1, -1}));\n        System.out.println(maxOperations(new int[]{1000, 1000, 2000, 2000}));\n        System.out.println(maxOperations(new int[]{2, 2, 4, 4, 6}));\n    }\n}"}
{"source_Lan": "java###minimumSteps_Test.java", "source_code_str": "    public static long minimumSteps(String s) {\n        long ans = 0;\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                sum++;\n            } else {\n                ans += sum;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minimumSteps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumSteps(\"\")); // Test input 1\n        System.out.println(minimumSteps(\"00000\")); // Test input 2\n        System.out.println(minimumSteps(\"11111\")); // Test input 3\n        System.out.println(minimumSteps(\"000111\")); // Test input 4\n        System.out.println(minimumSteps(\"111000\")); // Test input 5\n        System.out.println(minimumSteps(\"1010101010\")); // Test input 6\n        System.out.println(minimumSteps(\"11100000\")); // Test input 7\n        System.out.println(minimumSteps(\"00011111\")); // Test input 8\n        System.out.println(minimumSteps(\"110000111\")); // Test input 9\n        System.out.println(minimumSteps(\"101010101010101010\")); // Test input 10\n    }\n}"}
{"source_Lan": "java###findMissingAndRepeatedValues_Test.java", "source_code_str": "    public static int[] findMissingAndRepeatedValues(int[][] grid) {\n        int n = grid.length;\n        int[] count = new int[n * n + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count[grid[i][j]]++;\n            }\n        }\n        int[] res = new int[2];\n        for (int i = 1; i <= n * n; i++) {\n            if (count[i] == 2) {\n                res[0] = i;\n            }\n            if (count[i] == 0) {\n                res[1] = i;\n            }\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findMissingAndRepeatedValues_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] test1 = {{1, 2}, {2, 3}}; // Missing: 4, Repeated: 2\n        int[][] test2 = {{1, 1}, {3, 4}}; // Missing: 2, Repeated: 1\n        int[][] test3 = {{3, 2}, {1, 4}}; // Missing: 2, Repeated: 5(value out of range)\n        int[][] test4 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; // Complete grid(missing: 10, no repeat)\n        int[][] test5 = {{1}}; // Edge Case: Missing: 2, Repeated: Must handle correctly\n        int[][] test6 = {{2, 2}, {1, 3}}; // Missing: 4, Repeated: 2\n        int[][] test7 = {{1, 2, 2}, {4, 5, 6}, {7, 8, 9}}; // Missing: 3, Repeated: 2\n        int[][] test8 = {{1, 2, 3, 4}, {5, 6, 6, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; // Missing: 7, Repeated: 6\n        int[][] test9 = {{1, 2, 3, 5}, {4, 4, 6, 7}, {8, 9, 11, 12}, {13, 14, 15, 16}}; // Missing: 10, Repeated: 4\n        int[][] test10 = {{1, 3, 4, 5, 5}, {2, 6, 7, 8, 9}, {10, 11, 12, 13, 14}, {15, 16, 17, 18, 19}, {20, 21, 22, 23, 24}}; // Missing: 25, Repeated: 5\n\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test1)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test2)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test3)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test4)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test5)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test6)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test7)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test8)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test9)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test10)));\n    }\n}"}
{"source_Lan": "java###distributeCandies2_Test.java", "source_code_str": "    public static long distributeCandies2(int n, int limit) {\n        long ans = 0;\n        for (int i = 0; i <= Math.min(limit, n); i++) {\n            if (n - i > 2 * limit) {\n                continue;\n            }\n            ans += Math.min(n - i, limit) - Math.max(0, n - i - limit) + 1;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class distributeCandies2_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(distributeCandies2(0, 0));\n        System.out.println(distributeCandies2(5, 10));\n        System.out.println(distributeCandies2(10, 10));\n        System.out.println(distributeCandies2(10, 2));\n        System.out.println(distributeCandies2(20, 5));\n        System.out.println(distributeCandies2(25, 25));\n        System.out.println(distributeCandies2(15, 7));\n        System.out.println(distributeCandies2(30, 0));\n        System.out.println(distributeCandies2(50, 3));\n        System.out.println(distributeCandies2(100, 10));\n    }\n}"}
{"source_Lan": "java###distributeCandies_Test.java", "source_code_str": "    public static int distributeCandies(int n, int limit) {\n        int ans = 0;\n        for (int i = 0; i <= limit; i++) {\n            for (int j = 0; j <= limit; j++) {\n                if (i + j > n) {\n                    break;\n                }\n                if (n - i - j <= limit) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class distributeCandies_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInputs = {1, 0, 5, 10, 15, 30, 100, 50, 1, 2};\n        \n        for(int i = 0; i < testInputs.length; i += 2) {\n            int n = testInputs[i];\n            int limit = testInputs[i + 1];\n            System.out.println(\"distributeCandies(\" + n + \", \" + limit + \") = \" + distributeCandies(n, limit));\n        }\n    }\n}"}
{"source_Lan": "java###findIndices_Test.java", "source_code_str": "    public static int[] findIndices(int[] nums, int indexDifference, int valueDifference) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i; j < nums.length; j++) {\n                if (j - i >= indexDifference && Math.abs(nums[j] - nums[i]) >= valueDifference) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return new int[]{-1, -1};\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findIndices_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Inputs\n        int[] result1 = findIndices(new int[]{1, 2, 3, 4, 5}, 2, 2);\n        int[] result2 = findIndices(new int[]{1, 3, 5, 7, 8}, 2, 4);\n        int[] result3 = findIndices(new int[]{10, 10, 10}, 1, 1);\n        int[] result4 = findIndices(new int[]{1, 1, 1}, 1, 0);\n        int[] result5 = findIndices(new int[]{4, 5, 6, 10}, 3, 5);\n        int[] result6 = findIndices(new int[]{-1, 0, 1}, 1, 2);\n        int[] result7 = findIndices(new int[]{0, 0, 3, 0}, 1, 2);\n        int[] result8 = findIndices(new int[]{10}, 1, 5);\n        int[] result9 = findIndices(new int[]{}, 1, 1);\n        int[] result10 = findIndices(new int[]{2, 1}, 1, 0);\n\n        // Printing results\n        System.out.println(Arrays.toString(result1));\n        System.out.println(Arrays.toString(result2));\n        System.out.println(Arrays.toString(result3));\n        System.out.println(Arrays.toString(result4));\n        System.out.println(Arrays.toString(result5));\n        System.out.println(Arrays.toString(result6));\n        System.out.println(Arrays.toString(result7));\n        System.out.println(Arrays.toString(result8));\n        System.out.println(Arrays.toString(result9));\n        System.out.println(Arrays.toString(result10));\n    }\n}"}
{"source_Lan": "java###theMaximumAchievableX_Test.java", "source_code_str": "    public static int theMaximumAchievableX(int num, int t) {\n        return num + 2 * t;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.lang.Integer;\npublic class theMaximumAchievableX_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(theMaximumAchievableX(10, 0)); // Baseline case\n        System.out.println(theMaximumAchievableX(5, 3));  // Positive case\n        System.out.println(theMaximumAchievableX(0, 0));  // Edge case, neutral value\n        System.out.println(theMaximumAchievableX(-5, 2)); // Negative num, positive t\n        System.out.println(theMaximumAchievableX(Integer.MAX_VALUE, 1)); // Boundary case, potential overflow\n        System.out.println(theMaximumAchievableX(0, 5));  // Positive t, neutral num\n        System.out.println(theMaximumAchievableX(Integer.MIN_VALUE, 3)); // Boundary case, negative num\n        System.out.println(theMaximumAchievableX(-10, -5)); // Both negative\n        System.out.println(theMaximumAchievableX(4, -1));  // Positive num, negative t\n        System.out.println(theMaximumAchievableX(100, 50)); // Both positive, larger values\n    }\n}"}
{"source_Lan": "java###numberOfEmployeesWhoMetTarget_Test.java", "source_code_str": "    public static int numberOfEmployeesWhoMetTarget(int[] hours, int target) {\n        int ans = 0;\n        for (int i = 0; i < hours.length; i++) {\n            if (hours[i] >= target) {\n                ans++;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class numberOfEmployeesWhoMetTarget_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{0, 0, 0, 0}, 1)); // Input_1\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{50, 60, 70, 80}, 50)); // Input_2\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{20, 30, 40, 50}, 60)); // Input_3\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{}, 10)); // Input_4\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{-5, -3, -1}, -2)); // Input_5\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{8, 9, 10, 11}, 0)); // Input_6\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{40, 50, 60}, 40)); // Input_7\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{10, 20, 30}, 15)); // Input_8\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{45, 30, 15, 60, 90}, 45)); // Input_9\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{5, 5, 5, 5, 5}, 5)); // Input_10\n    }\n}"}
{"source_Lan": "java###distanceTraveled_Test.java", "source_code_str": "    public static int distanceTraveled(int mainTank, int additionalTank) {\n        int ans = 0;\n        while (mainTank >= 5) {\n            mainTank -= 5;\n            ans += 50;\n            if (additionalTank > 0) {\n                additionalTank--;\n                mainTank++;\n            }\n        }\n        return ans + mainTank * 10;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class distanceTraveled_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(distanceTraveled(10, 2));\n        System.out.println(distanceTraveled(5, 1));\n        System.out.println(distanceTraveled(4, 2));\n        System.out.println(distanceTraveled(0, 3));\n        System.out.println(distanceTraveled(8, 0));\n        System.out.println(distanceTraveled(12, 1));\n        System.out.println(distanceTraveled(7, 3));\n        System.out.println(distanceTraveled(10, 0));\n        System.out.println(distanceTraveled(15, 2));\n        System.out.println(distanceTraveled(5, 0));\n    }\n}"}
{"source_Lan": "java###maximumBinaryString_Test.java", "source_code_str": "    public static String maximumBinaryString(String binary) {\n        int n = binary.length();\n        char[] s = binary.toCharArray();\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                while (j <= i || (j < n && s[j] == '1')) {\n                    j++;\n                }\n                if (j < n) {\n                    s[j] = '1';\n                    s[i] = '1';\n                    s[i + 1] = '0';\n                }\n            }\n        }\n        return new String(s);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumBinaryString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = {\n            \"0000\",\n            \"0011\",\n            \"1111\",\n            \"110010\",\n            \"101010\",\n            \"\",\n            \"111000\",\n            \"0\",\n            \"1001\",\n            \"011\"\n        };\n\n        for(String input : testInputs) {\n            System.out.println(maximumBinaryString(input));\n        }\n    }\n}"}
{"source_Lan": "java###divisibilityArray_Test.java", "source_code_str": "    public static int[] divisibilityArray(String word, int m) {\n        int[] res = new int[word.length()];\n        long cur = 0;\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            cur = (cur * 10 + (c - '0')) % m;\n            res[i] = (cur == 0) ? 1 : 0;\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class divisibilityArray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(divisibilityArray(\"12345\", 3))); // Test Input 1\n        System.out.println(Arrays.toString(divisibilityArray(\"\", 5))); // Test Input 2\n        System.out.println(Arrays.toString(divisibilityArray(\"7\", 7))); // Test Input 3\n        System.out.println(Arrays.toString(divisibilityArray(\"9876543210\", 9))); // Test Input 4\n        System.out.println(Arrays.toString(divisibilityArray(\"00001234\", 7))); // Test Input 5\n        System.out.println(Arrays.toString(divisibilityArray(\"999999999999999999\", 2))); // Test Input 6\n        System.out.println(Arrays.toString(divisibilityArray(\"54321\", 10))); // Test Input 7\n        System.out.println(Arrays.toString(divisibilityArray(\"13579\", 6))); // Test Input 8\n        System.out.println(Arrays.toString(divisibilityArray(\"0000\", 1))); // Test Input 9\n        System.out.println(Arrays.toString(divisibilityArray(\"12345678901234567890\", 100))); // Test Input 10\n    }\n}"}
{"source_Lan": "java###alternatingSubarray_Test.java", "source_code_str": "    public static int alternatingSubarray(int[] nums) {\n        int res = -1;\n        int n = nums.length;\n        for (int firstIndex = 0; firstIndex < n; firstIndex++) {\n            for (int i = firstIndex + 1; i < n; i++) {\n                int length = i - firstIndex + 1;\n                if (nums[i] - nums[firstIndex] == (length - 1) % 2) {\n                    res = Math.max(res, length);\n                } else {\n                    break;\n                }\n            }\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class alternatingSubarray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(alternatingSubarray(new int[]{1, 2, 1, 2})); // Clear alternating pattern\n        System.out.println(alternatingSubarray(new int[]{1, 3, 2, 4})); // No alternating\n        System.out.println(alternatingSubarray(new int[]{5}));          // Single element\n        System.out.println(alternatingSubarray(new int[]{5, 5}));       // Two elements, no alternation\n        System.out.println(alternatingSubarray(new int[]{-1, 0, -2, 1})); // Array with negative numbers\n        System.out.println(alternatingSubarray(new int[]{}));           // Empty array\n        System.out.println(alternatingSubarray(new int[]{0, 1, 0, 1, 0, 1})); // Longer alternating pattern\n        System.out.println(alternatingSubarray(new int[]{2, 3, 2, 3, 2})); // Contiguous alternating\n        System.out.println(alternatingSubarray(new int[]{4, 4, 4, 4})); // All elements the same\n        System.out.println(alternatingSubarray(new int[]{1, 2, 1, 0, 1, 2})); // Alternating at start, then non-alternating\n    }\n}"}
{"source_Lan": "java###maximumRows_Test.java", "source_code_str": "    public static int maximumRows(int[][] matrix, int numSelect) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int[] mask = new int[m];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++){\n                mask[i] += matrix[i][j] << (n - j - 1);\n            }\n        }\n        int res = 0;\n        int cur = 0;\n        int limit = (1 << n);\n        while (++cur < limit) {\n            if (Integer.bitCount(cur) != numSelect) {\n                continue;\n            }\n            int t = 0;\n            for (int j = 0; j < m; j++) {\n                if ((mask[j] & cur) == mask[j]) {\n                    ++t;\n                }\n            }\n            res = Math.max(res, t);\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumRows_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumRows(new int[][]{{0, 0}, {0, 0}}, 1));\n        System.out.println(maximumRows(new int[][]{{1, 0}, {0, 1}}, 1));\n        System.out.println(maximumRows(new int[][]{{1, 1}, {0, 1}}, 0));\n        System.out.println(maximumRows(new int[][]{{1, 0, 0}, {1, 0, 1}, {1, 1, 1}}, 2));\n        System.out.println(maximumRows(new int[][]{{1, 1}, {1, 1}, {1, 1}}, 2));\n        System.out.println(maximumRows(new int[][]{{1}}, 1));\n        System.out.println(maximumRows(new int[][]{{0, 1, 1}}, 1));\n        System.out.println(maximumRows(new int[][]{{1, 1}, {1, 1}}, 2));\n        System.out.println(maximumRows(new int[][]{{1, 0}, {0, 1}}, 3));\n        System.out.println(maximumRows(new int[][]{{1, 0, 1}, {0, 1, 0}, {1, 1, 1}}, 2));\n    }\n}"}
{"source_Lan": "java###countOperations_Test.java", "source_code_str": "    public static int countOperations(String s) {\n        final int mod = 1000000007;\n        int ans = 0;\n        int count_b = 0;\n        for (int i = s.length() - 1; i >= 0; --i) {\n            if (s.charAt(i) == 'b') {\n                count_b = (count_b + 1) % mod;\n            } else {\n                ans = (ans + count_b) % mod;\n                count_b = (count_b + count_b) % mod;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\npublic class countOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = { \"\", \"a\", \"b\", \"ab\", \"ba\", \"abab\", \"bb\", \"aaa\", \"aabb\", \"bbbb\" };\n        \n        for(String input : testInputs) {\n            System.out.println(\"Input: \\\"\" + input + \"\\\" - Count Operations: \" + countOperations(input));\n        }\n    }\n}"}
{"source_Lan": "java###minimumOperationsToWriteY_Test.java", "source_code_str": "    public static int minimumOperationsToWriteY(int[][] grid) {\n        int[] cnt1 = new int[3];\n        int[] cnt2 = new int[3];\n        int n = grid.length;\n        int m = n / 2;\n        for (int i = 0; i < m; i++) {\n            cnt1[grid[i][i]]++;\n            cnt1[grid[i][n - 1 - i]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != i && j != n - 1 - i) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        for (int i = m; i < n; i++) {\n            cnt1[grid[i][m]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != m) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        int maxNotChange = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (i != j) {\n                    maxNotChange = Math.max(maxNotChange, cnt1[i] + cnt2[j]);\n                }\n            }\n        }\n        return n * n - maxNotChange;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumOperationsToWriteY_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{1, 2}, {2, 1}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 0, 0}, {0, 1, 0}, {0, 0, 0}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{1, 1, 1}, {1, 0, 1}, {1, 1, 1}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 1, 0}, {1, 1, 1}, {0, 1, 0}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 0, 1}, {0, 2, 0}, {2, 0, 0}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{1, 2, 1}, {2, 2, 2}, {1, 2, 1}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 1}, {1, 2}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{2, 2, 2, 2}, {2, 1, 2, 2}, {2, 2, 2, 2}, {2, 2, 2, 2}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 1, 2, 0}, {0, 2, 1, 0}, {1, 0, 2, 1}, {2, 0, 1, 0}}));\n    }\n}"}
{"source_Lan": "java###isArraySpecial_Test.java", "source_code_str": "    public static boolean isArraySpecial(int[] nums) {\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i - 1] % 2 == nums[i] % 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isArraySpecial_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(isArraySpecial(new int[]{}));               // Test input 1: Empty array\n        System.out.println(isArraySpecial(new int[]{1}));             // Test input 2: Single element(odd)\n        System.out.println(isArraySpecial(new int[]{2}));             // Test input 3: Single element(even)\n        System.out.println(isArraySpecial(new int[]{1, 2}));          // Test input 4: Alternating(odd, even)\n        System.out.println(isArraySpecial(new int[]{2, 3}));          // Test input 5: Alternating(even, odd)\n        System.out.println(isArraySpecial(new int[]{1, 3}));          // Test input 6: Consecutive odds\n        System.out.println(isArraySpecial(new int[]{4, 2}));          // Test input 7: Consecutive evens\n        System.out.println(isArraySpecial(new int[]{1, 2, 3}));       // Test input 8: Odd, even, odd\n        System.out.println(isArraySpecial(new int[]{2, 1, 4, 3}));    // Test input 9: Even, odd, even, odd\n        System.out.println(isArraySpecial(new int[]{1, 0, 1, 0}));    // Test input 10: Odd, even, odd, even\n    }\n}"}
{"source_Lan": "java###sumOfEncryptedInt_Test.java", "source_code_str": "    public static int sumOfEncryptedInt(int[] nums) {\n        int ans = 0;\n        for (int x : nums) {\n            int mx = 0;\n            int base = 0;\n            for (; x > 0; x /= 10) {\n                mx = Math.max(mx, x % 10);\n                base = base * 10 + 1;\n            }\n            ans += mx * base;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class sumOfEncryptedInt_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(sumOfEncryptedInt(new int[]{0}));                     // Tests zero case\n        System.out.println(sumOfEncryptedInt(new int[]{5}));                     // Single digit\n        System.out.println(sumOfEncryptedInt(new int[]{1, 3, 7, 9}));            // Multiple single digits, max = 9\n        System.out.println(sumOfEncryptedInt(new int[]{12, 56, 34}));            // Multi-digit numbers, varying max\n        System.out.println(sumOfEncryptedInt(new int[]{99, 22, 77}));            // All two-digit numbers with max 9\n        System.out.println(sumOfEncryptedInt(new int[]{1024, 2048}));            // Test numbers with digits 0-4\n        System.out.println(sumOfEncryptedInt(new int[]{1111}));                   // All same digit, tests if it correctly handles repeated max\n        System.out.println(sumOfEncryptedInt(new int[]{54321}));                  // Descending numbers\n        System.out.println(sumOfEncryptedInt(new int[]{-1, -100, 250}));         // Negative numbers and zero to test robustness\n    }\n}"}
{"source_Lan": "java###findGoodPairs_Test.java", "source_code_str": "    static long findGoodPairs(int a[], int n, int k){\n        \n        long ans = 0;\n        Map<Integer, Integer> hm = new HashMap<>();\n        for(int i = k; i < n; i++){\n            hm.put(a[i - k], hm.getOrDefault(a[i - k], 0) + 1);\n            ans += hm.getOrDefault(a[i], 0);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class findGoodPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findGoodPairs(new int[]{1, 2, 3, 4, 5}, 5, 2)); // Input 1\n        System.out.println(findGoodPairs(new int[]{1, 1, 1, 1, 1}, 5, 2)); // Input 2\n        System.out.println(findGoodPairs(new int[]{1, 2, 1, 2, 1}, 5, 2)); // Input 3\n        System.out.println(findGoodPairs(new int[]{1, 3, 2, 1, 4, 5}, 6, 3)); // Input 4\n        System.out.println(findGoodPairs(new int[]{1, 2, 3}, 3, 4)); // Input 5\n        System.out.println(findGoodPairs(new int[]{}, 0, 2)); // Input 6\n        System.out.println(findGoodPairs(new int[]{1, 2, 3}, 3, 0)); // Input 7\n        System.out.println(findGoodPairs(new int[]{1, 2, 2, 3, 3}, 5, 1)); // Input 8\n        System.out.println(findGoodPairs(new int[]{5, 5, 5, 5, 5}, 5, 1)); // Input 9\n        System.out.println(findGoodPairs(new int[]{1, 1, 2, 2, 1, 1}, 6, 2)); // Input 10\n    }\n}"}
{"source_Lan": "java###ForYou_Test.java", "source_code_str": "    public static long ForYou(int n, int[] arr, int m, int[][] order) {\n        \n        int[] diff = new int[n + 1];\n        \n        for (int[] it : order) {\n            diff[it[0] - 1]++;\n            diff[it[1]]--;\n        }\n        \n        for (int i = 1; i <= n; i++) {\n            diff[i] += diff[i - 1];\n        }\n        \n        diff = Arrays.copyOf(diff, n);\n        Arrays.sort(diff);\n        \n        Arrays.sort(arr);\n        long ans = 0;\n        int mod = (int)1e9 + 7;\n        \n        for (int i = 0; i < n; i++) {\n            ans += ((long)diff[i]) * ((long)arr[i]);\n            ans %= mod;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class ForYou_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(ForYou(1, new int[]{5}, 1, new int[][]{{1, 1}}));\n        System.out.println(ForYou(3, new int[]{5, 1, 3}, 1, new int[][]{{1, 3}}));\n        System.out.println(ForYou(3, new int[]{-2, 0, 6}, 1, new int[][]{{1, 2}, {2, 3}}));\n        System.out.println(ForYou(4, new int[]{4, 3, 2, 1}, 1, new int[][]{{1, 4}, {2, 3}, {1, 2}}));\n        System.out.println(ForYou(5, new int[]{0, 0, 0, 0, 0}, 1, new int[][]{{1, 5}}));\n        System.out.println(ForYou(2, new int[]{10, 20}, 1, new int[][]{{1, 1}, {2, 2}}));\n        System.out.println(ForYou(3, new int[]{-1, -3, -2}, 1, new int[][]{{1, 3}, {1, 2}}));\n        System.out.println(ForYou(4, new int[]{1, 2, 3, 4}, 1, new int[][]{{1, 2}, {3, 4}, {2, 3}}));\n        System.out.println(ForYou(5, new int[]{1, 2, 3, 4, 5}, 1, new int[][]{{1, 5}, {2, 4}, {1, 2}, {3, 5}}));\n        System.out.println(ForYou(4, new int[]{7, 5, 3, 1}, 1, new int[][]{{3, 4}, {1, 2}, {1, 3}}));\n    }\n}"}
{"source_Lan": "java###validStrings_Test.java", "source_code_str": "    public static int validStrings(int n, int k, String[] arr) \n    {\n        int totalValid = 0;\n        for (String str : arr) {\n            int vowelCount = 0;\n            for (char ch : str.toCharArray()) {\n                if (\"aeiou\".indexOf(ch) >= 0) {\n                    vowelCount++;\n                }\n            }\n            if (vowelCount == k) {\n                totalValid++;\n            }\n        }\n        return totalValid;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class validStrings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(validStrings(5, 2, new String[]{\"hello\", \"world\", \"java\", \"code\", \"test\"}));\n        System.out.println(validStrings(4, 3, new String[]{\"aeiou\", \"xyz\", \"aaa\", \"bcd\"}));\n        System.out.println(validStrings(3, 1, new String[]{\"cat\", \"dog\", \"bird\"}));\n        System.out.println(validStrings(6, 0, new String[]{\"bcdfg\", \"\", \"xyz\", \"123\", \"!!!\", \"a\"}));\n        System.out.println(validStrings(5, 4, new String[]{\"ape\", \"beet\", \"feed\", \"mood\", \"greet\"}));\n        System.out.println(validStrings(2, 2, new String[]{\"\", \"a\"}));\n        System.out.println(validStrings(0, 1, new String[]{}));\n        System.out.println(validStrings(3, 2, new String[]{\"aabb\", \"cc\", \"ddeee\"}));\n        System.out.println(validStrings(4, 5, new String[]{\"aaaaa\", \"bb\", \"ccc\", \"ddddd\"}));\n        System.out.println(validStrings(3, 2, new String[]{\"two\", \"vowels\", \"here\"}));\n    }\n}"}
{"source_Lan": "java###maximumBattalions_Test.java", "source_code_str": "    public static int maximumBattalions(int N, String[] names) \n    {\n        Map<String, Integer> nameIndexMap = new HashMap<>();\n        for (int i = 0; i < N; i++) \n        {\n            nameIndexMap.put(names[i], i);\n        }\n        int answer = 0;\n        int maxi = 0;\n        int ind = 0;\n        for (String name : names) \n        {\n            maxi = Math.max(maxi, nameIndexMap.get(name));\n            if (maxi == ind) \n            {\n                answer++;\n            }\n            ind++;\n        }\n        return answer;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maximumBattalions_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumBattalions(5, new String[]{\"A\", \"B\", \"C\", \"D\", \"E\"})); // Test Input 1\n        System.out.println(maximumBattalions(4, new String[]{\"A\", \"B\", \"A\", \"C\"})); // Test Input 2\n        System.out.println(maximumBattalions(6, new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"})); // Test Input 3\n        System.out.println(maximumBattalions(4, new String[]{\"B\", \"A\", \"C\", \"D\"})); // Test Input 4\n        System.out.println(maximumBattalions(0, new String[]{})); // Test Input 5\n        System.out.println(maximumBattalions(1, new String[]{\"A\"})); // Test Input 6\n        System.out.println(maximumBattalions(3, new String[]{\"X\", \"X\", \"X\"})); // Test Input 7\n        System.out.println(maximumBattalions(6, new String[]{\"Z\", \"Y\", \"X\", \"W\", \"Y\", \"Z\"})); // Test Input 8\n        System.out.println(maximumBattalions(5, new String[]{\"M\", \"M\", \"N\", \"O\", \"O\"})); // Test Input 9\n        System.out.println(maximumBattalions(3, new String[]{\"A\", \"C\", \"B\"})); // Test Input 10\n    }\n}"}
{"source_Lan": "java###minimumDis_Test.java", "source_code_str": "    public static int minimumDis(int N, int[] X) {\n        Arrays.sort(X);\n        return X[(N - 1) / 2];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumDis_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Inputs\n        System.out.println(minimumDis(1, new int[]{5})); // Single element\n        System.out.println(minimumDis(3, new int[]{3, 1, 2})); // Odd size array\n        System.out.println(minimumDis(4, new int[]{7, 5, 6, 4})); // Even size array\n        System.out.println(minimumDis(5, new int[]{-1, -3, -2, 0, 1})); // Negative elements\n        System.out.println(minimumDis(5, new int[]{1000000, 3000000, 2000000, 4000000, 5000000})); // Large positive integers\n        System.out.println(minimumDis(5, new int[]{2, 2, 2, 2, 2})); // Identical elements\n        System.out.println(minimumDis(5, new int[]{10, 20, 30, 40, 50})); // Already sorted\n        System.out.println(minimumDis(5, new int[]{50, 40, 30, 20, 10})); // Reverse order\n        // Note: The input for N=1_000_000 requires specific randomization to create a large size array\n        // Example with random elements - Uncomment below if needed and implement accordingly.\n        /*\n        int largeSize = 1000000;\n        int[] largeArray = new int[largeSize];\n        for(int i = 0; i < largeSize; i++) {\n            largeArray[i] =(int)(Math.random() * 10000000); // Random numbers up to 10 million\n        }\n        System.out.println(minimumDis(largeSize, largeArray)); // Large size array with randomized elements\n        */\n    }\n}"}
{"source_Lan": "java###maxAlternatingSubstring_Test.java", "source_code_str": "    public static long maxAlternatingSubstring(int N, String S) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < N;) {\n            int j = i + 1;\n            while (j < N && S.charAt(j) != S.charAt(j - 1)) j++;\n            diff.add(j - i);\n            i = j;\n        }\n        diff.add(0);\n        long ans_before = 0;\n        for (int x : diff) {\n            ans_before += ((x * 1L * (x + 1)) / 2);\n        }\n        long ans = 0;\n        for (int i = 0; i < diff.size() - 1; i++) {\n            long a = diff.get(i);\n            long b = diff.get(i + 1);\n            long currAns = ans_before - ((a * (a + 1)) / 2) - ((b * (b + 1)) / 2) +\n                           ((a + b + 1) * (a + b + 2)) / 2;\n            ans = Math.max(ans, currAns);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class maxAlternatingSubstring_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxAlternatingSubstring(0, \"\"));             // Edge case: empty string\n        System.out.println(maxAlternatingSubstring(1, \"a\"));            // Single character\n        System.out.println(maxAlternatingSubstring(2, \"aa\"));           // Two identical characters\n        System.out.println(maxAlternatingSubstring(2, \"ab\"));           // Two alternating characters\n        System.out.println(maxAlternatingSubstring(5, \"abcde\"));        // Longer string with unique characters\n        System.out.println(maxAlternatingSubstring(5, \"aaaab\"));        // Long sequence followed by alternate character\n        System.out.println(maxAlternatingSubstring(6, \"ababab\"));       // Maximum alternation\n        System.out.println(maxAlternatingSubstring(6, \"aaaaaa\"));       // All identical characters\n        System.out.println(maxAlternatingSubstring(10, \"aabbaabbaa\"));  // Complex pattern with multiple alternates\n        System.out.println(maxAlternatingSubstring(7, \"abababa\"));      // More alternation but with odd length\n    }\n}"}
{"source_Lan": "java###countSuperPalindrome_Test.java", "source_code_str": "    public static int countSuperPalindrome(int l, int r) {\n        int count = 0;\n        \n        int start = (int)Math.ceil(Math.sqrt(l));\n        \n        while (start * start <= r) {\n            \n            int square = start * start;\n            String s = Integer.toString(square);\n            \n            if (s.equals(new StringBuilder(s).reverse().toString())) {\n                count++;\n            }\n            start++;\n        }\n        return count;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.lang.Math;\npublic class countSuperPalindrome_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countSuperPalindrome(1, 100));        // Small range, contains many palindromic squares.\n        System.out.println(countSuperPalindrome(10, 1000));      // A range where some numbers are palindromic squares.\n        System.out.println(countSuperPalindrome(4, 100));        // Testing the lower boundary with a perfect square.\n        System.out.println(countSuperPalindrome(1, 1));          // A range with the smallest possible values.\n        System.out.println(countSuperPalindrome(20, 80));        // Changing the range to avoid perfect squares.\n        System.out.println(countSuperPalindrome(1000, 10000));   // Larger range, checking for more palindromic squares.\n        System.out.println(countSuperPalindrome(900, 1100));     // Range that includes adjacent squares.\n        System.out.println(countSuperPalindrome(0, 0));          // Testing with zero as both the lower and upper bound.\n        System.out.println(countSuperPalindrome(36, 36));        // Testing with a perfect square.\n        System.out.println(countSuperPalindrome(300, 500));      // Larger range, with no palindromic squares.\n    }\n}"}
{"source_Lan": "java###candyShop_Test.java", "source_code_str": "    public static int candyShop(int n, int candies[]) {\n        int ans = Integer.MAX_VALUE;\n        int sum = 0;\n        int low = 0, high = 0;\n        Set<Integer> hs = new HashSet<>();\n        for(int x : candies)\n            hs.add(x);\n        Map<Integer, Integer> hm = new HashMap<>();\n        while(high < n){\n            hm.put(candies[high], hm.getOrDefault(candies[high], 0) + 1);\n            sum += candies[high++];\n            while(low < high && hm.get(candies[low]) > 1){\n                hm.put(candies[low], hm.get(candies[low]) - 1);\n                sum -= candies[low++];\n            }\n            if(hm.size() == hs.size())\n                ans = Math.min(ans, sum);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\npublic class candyShop_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(candyShop(5, new int[]{1, 2, 3, 4, 5})); // All distinct candies\n        System.out.println(candyShop(5, new int[]{1, 1, 2, 3, 4})); // Duplicates\n        System.out.println(candyShop(0, new int[]{}));               // No candies\n        System.out.println(candyShop(3, new int[]{1, 1, 1}));       // Only one type of candy\n        System.out.println(candyShop(6, new int[]{1, 2, 2, 3, 4, 5})); // More duplicates with multiple types\n        System.out.println(candyShop(4, new int[]{1, 2, 3, 3}));    // Some duplicates at the end\n        System.out.println(candyShop(10, new int[]{1, 2, 1, 3, 2, 3, 4, 5, 5, 6})); // Large size with multiple types\n        System.out.println(candyShop(2, new int[]{2, 2}));           // Edge case with two identical candies\n        System.out.println(candyShop(3, new int[]{1, 2, 1}));       // Two types with duplicate\n        System.out.println(candyShop(4, new int[]{1, 2, 3, 1}));    // All types present minimally\n    }\n}"}
{"source_Lan": "java###numOfWays_Test.java", "source_code_str": "    public static long numOfWays(int n) {\n        if(n%2==1)\n            return 0;\n        long k = (long)((n-1)/2);\n        k/=2;\n        k*=6;\n        return k;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class numOfWays_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInputs = {0, 1, 2, 3, 4, 10, 11, 12, 100, 101};\n        for(int input : testInputs) {\n            System.out.println(numOfWays(input));\n        }\n    }\n}"}
{"source_Lan": "java###chocolateDistribution_Test.java", "source_code_str": "    public static int chocolateDistribution(int N, int M, int[] arr, int[] brr) {\n        Arrays.sort(arr);\n        Arrays.sort(brr);\n        int ans = 0;\n        int i = 0, j = 0;\n        while (i < N && j < M) {\n            if (arr[i] <= brr[j]) {\n                ans++;\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class chocolateDistribution_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test case 1: both arrays are empty\n        System.out.println(chocolateDistribution(0, 0, new int[]{}, new int[]{})); // Output: 0\n        \n        // Test case 2: first array is empty, second has elements\n        System.out.println(chocolateDistribution(0, 3, new int[]{}, new int[]{1, 2, 3})); // Output: 0\n        \n        // Test case 3: first array has elements, second is empty\n        System.out.println(chocolateDistribution(3, 0, new int[]{1, 2, 3}, new int[]{})); // Output: 0\n        \n        // Test case 4: all elements match, maximum distribution\n        System.out.println(chocolateDistribution(3, 3, new int[]{1, 2, 3}, new int[]{1, 2, 3})); // Output: 3\n        \n        // Test case 5: no matches, all elements in brr are greater\n        System.out.println(chocolateDistribution(3, 3, new int[]{1, 2, 3}, new int[]{4, 5, 6})); // Output: 0\n        \n        // Test case 6: arr elements are all greater than brr\n        System.out.println(chocolateDistribution(5, 2, new int[]{5, 6, 7, 8, 9}, new int[]{1, 2})); // Output: 0\n        \n        // Test case 7: mixed elements, some matches\n        System.out.println(chocolateDistribution(4, 4, new int[]{4, 1, 6, 2}, new int[]{3, 5, 2, 4})); // Output: 3\n        \n        // Test case 8: partial matches\n        System.out.println(chocolateDistribution(3, 5, new int[]{10, 20, 30}, new int[]{15, 25, 35, 5, 0})); // Output: 2\n        \n        // Test case 9: duplicate values, testing distribution\n        System.out.println(chocolateDistribution(3, 3, new int[]{1, 2, 2}, new int[]{2, 2, 3})); // Output: 3\n        \n        // Test case 10: all elements are equal, testing out of order\n        System.out.println(chocolateDistribution(4, 4, new int[]{0, 1, 2, 3}, new int[]{3, 2, 1, 0})); // Output: 4\n    }\n}"}
{"source_Lan": "java###minElements_Test.java", "source_code_str": "    public static int minElements(int n, int m, int[] arr1, int[] arr2) {\n        long sum = 0;\n        \n        for (int num : arr1) {\n            sum += num;\n        }\n        Arrays.sort(arr2); \n        long currentSum = 0;\n        int count = 0;\n        \n        for (int i = m - 1; i >= 0; i--) {\n            currentSum += arr2[i];\n            count++;\n            \n            if (currentSum >= sum) {\n                break;\n            }\n        }\n        \n        return currentSum >= sum ? count : -1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minElements_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minElements(0, 0, new int[]{}, new int[]{})); // Case with empty arrays\n        System.out.println(minElements(3, 3, new int[]{1, 2, 3}, new int[]{1, 2, 3})); // Exact match\n        System.out.println(minElements(2, 4, new int[]{4, 5}, new int[]{1, 2, 3, 7})); // Should return 1(element 7)\n        System.out.println(minElements(3, 5, new int[]{1, 2, 2}, new int[]{4, 5, 6, 1, 1})); // One element needed\n        System.out.println(minElements(3, 4, new int[]{10, 15, 5}, new int[]{1, 1, 1, 1})); // Not possible\n        System.out.println(minElements(4, 6, new int[]{5, 10, 15, 20}, new int[]{5, 10, 15, 20, 30, 50})); // Sufficient from multiple options\n        System.out.println(minElements(5, 5, new int[]{1, 1, 1, 1}, new int[]{1, 1, 1, 1, 10})); // Test with duplicates\n        System.out.println(minElements(2, 3, new int[]{20, 30}, new int[]{10, 10, 5})); // Should return -1\n        System.out.println(minElements(3, 2, new int[]{100, 150, 50}, new int[]{200, 100})); // Test for larger numbers\n    }\n}"}
{"source_Lan": "java###canTrade_Test.java", "source_code_str": "    public static int[] canTrade(int n, int[] beautifulness, int q, int[][] queries) {\n        int prev = beautifulness[0];\n        beautifulness[0] = 0;\n        for (int i = 1; i < n; i++) {\n            int curr = beautifulness[i];\n            if (beautifulness[i] == prev) {\n                beautifulness[i] = beautifulness[i - 1];\n            } else {\n                beautifulness[i] = i;\n            }\n            prev = curr;\n        }\n        int[] ans = new int[q];\n        for (int i = 0; i < q; i++) {\n            int u = queries[i][0] - 1, v = queries[i][1] - 1;\n            ans[i] = beautifulness[v] <= u ? 1 : 0;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class canTrade_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] result1 = canTrade(1, new int[]{5}, 1, new int[][]{{1, 1}}); // Single element case\n        System.out.println(Arrays.toString(result1));\n\n        int[] result2 = canTrade(5, new int[]{1, 1, 1, 2, 3}, 2, new int[][]{{1, 3}, {2, 4}}); // All same, and then different\n        System.out.println(Arrays.toString(result2));\n\n        int[] result3 = canTrade(3, new int[]{3, 2, 2}, 1, new int[][]{{2, 3}}); // Repeating values in the middle\n        System.out.println(Arrays.toString(result3));\n\n        int[] result4 = canTrade(5, new int[]{0, 1, 0, 1, 0}, 1, new int[][]{{1, 5}}); // Alternating values\n        System.out.println(Arrays.toString(result4));\n\n        int[] result5 = canTrade(4, new int[]{4, 4, 4, 4}, 3, new int[][]{{1, 2}, {3, 4}, {1, 4}}); // All same\n        System.out.println(Arrays.toString(result5));\n\n        int[] result6 = canTrade(6, new int[]{10, 20, 30, 20, 10, 10}, 1, new int[][]{{1, 6}}); // Peaks and valleys\n        System.out.println(Arrays.toString(result6));\n\n        int[] result7 = canTrade(5, new int[]{5, 10, 15, 20, 25}, 2, new int[][]{{1, 5}, {1, 3}}); // Increasing values\n        System.out.println(Arrays.toString(result7));\n\n        int[] result8 = canTrade(3, new int[]{1, 5, 3}, 1, new int[][]{{1, 2}}); // Mixed values\n        System.out.println(Arrays.toString(result8));\n\n        int[] result9 = canTrade(4, new int[]{10, 20, 20, 30}, 1, new int[][]{{2, 3}}); // Duplicate in the middle\n        System.out.println(Arrays.toString(result9));\n\n        int[] result10 = canTrade(5, new int[]{2, 2, 5, 2, 2}, 1, new int[][]{{3, 5}}); // Middle value different\n        System.out.println(Arrays.toString(result10));\n    }\n}"}
{"source_Lan": "java###minimumOperationsToMakeKPeriodic_Test.java", "source_code_str": "    public static int minimumOperationsToMakeKPeriodic(String word, int k) {\n        int n = word.length();\n        int mx = 0;\n        HashMap<String, Integer> cnt = new HashMap<>();\n        for (int i = k; i <= n; i += k) {\n            String sub = word.substring(i - k, i);\n            int c = cnt.merge(sub, 1, Integer::sum); \n            mx = Math.max(mx, c);\n        }\n        return n / k - mx;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\npublic class minimumOperationsToMakeKPeriodic_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumOperationsToMakeKPeriodic(\"abc\", 2));             // expected output: 1\n        System.out.println(minimumOperationsToMakeKPeriodic(\"abababab\", 4));       // expected output: 0\n        System.out.println(minimumOperationsToMakeKPeriodic(\"aaaaaa\", 3));         // expected output: 2\n        System.out.println(minimumOperationsToMakeKPeriodic(\"\", 1));               // expected output: 0\n        System.out.println(minimumOperationsToMakeKPeriodic(\"a\", 1));              // expected output: 0\n        System.out.println(minimumOperationsToMakeKPeriodic(\"abcdefgh\", 2));      // expected output: 4\n        System.out.println(minimumOperationsToMakeKPeriodic(\"thisisaverylongword\", 25)); // expected output: 1\n        System.out.println(minimumOperationsToMakeKPeriodic(\"xyz\", 3));           // expected output: 0\n        System.out.println(minimumOperationsToMakeKPeriodic(\"dddddddddddddddddd\", 16)); // expected output: 1\n        System.out.println(minimumOperationsToMakeKPeriodic(\"abcdefg\", 1));       // expected output: 6\n    }\n}"}
{"source_Lan": "java###maximumSubarraySum_Test.java", "source_code_str": "    public static long maximumSubarraySum(int[] nums, int k) {\n        long ans = Long.MIN_VALUE;\n        long sum = 0;\n        Map<Integer, Long> minS = new HashMap<>();\n        for (int x : nums) {\n            long s1 = minS.getOrDefault(x - k, Long.MAX_VALUE / 2);\n            long s2 = minS.getOrDefault(x + k, Long.MAX_VALUE / 2);\n            ans = Math.max(ans, sum + x - Math.min(s1, s2));\n            minS.merge(x, sum, Math::min);\n            sum += x;\n        }\n        return ans > Long.MIN_VALUE / 4 ? ans : 0;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maximumSubarraySum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumSubarraySum(new int[]{}, 1)); // Test with an empty array\n        System.out.println(maximumSubarraySum(new int[]{1, 2, 3}, 1)); // Simple case with small positive integers\n        System.out.println(maximumSubarraySum(new int[]{-1, -2, -3}, 2)); // All negative numbers to check negative sums\n        System.out.println(maximumSubarraySum(new int[]{5, 5, 5, 5}, 0)); // Test with identical positive integers and k=0\n        System.out.println(maximumSubarraySum(new int[]{1, -1, 2, -2}, 1)); // Alternating positive and negative values\n        System.out.println(maximumSubarraySum(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE}, 1000)); // Large values to test overflow\n        System.out.println(maximumSubarraySum(new int[]{1, 2, 3, 4, 5}, 3)); // A case where sums will be larger\n        System.out.println(maximumSubarraySum(new int[]{-5, 5, -10, 10}, 5)); // Mix of negatives and positives\n        System.out.println(maximumSubarraySum(new int[]{3, 1, 4, 1, 5}, 10)); // Large k that won't affect elements\n        System.out.println(maximumSubarraySum(new int[]{10, -5, 5, 10, -1}, 5)); // Mixed values to check various scenarios\n    }\n}"}
{"source_Lan": "java###minimumDistance_Test.java", "source_code_str": "    public static int minimumDistance(int[][] points) {\n        TreeMap<Integer, Integer> sx = new TreeMap<Integer, Integer>();\n        TreeMap<Integer, Integer> sy = new TreeMap<Integer, Integer>();\n        for (int[] p : points) {\n            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);\n            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);\n        }\n        int res = Integer.MAX_VALUE;\n        for (int[] p : points) {\n            sx.put(p[0] - p[1], sx.get(p[0] - p[1]) - 1);\n            if (sx.get(p[0] - p[1]) == 0) {\n                sx.remove(p[0] - p[1]);\n            }\n            sy.put(p[0] + p[1], sy.get(p[0] + p[1]) - 1);\n            if (sy.get(p[0] + p[1]) == 0) {\n                sy.remove(p[0] + p[1]);\n            }\n            res = Math.min(res, Math.max(sx.lastKey() - sx.firstKey(), sy.lastKey() - sy.firstKey()));\n            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);\n            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.TreeMap;\npublic class minimumDistance_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{0, 0}, {0, 0}, {0, 0}};\n        int[][] input2 = {{1, 1}, {2, 2}, {3, 3}};\n        int[][] input3 = {{1, -1}, {-1, 1}, {2, 2}};\n        int[][] input4 = {{0, 1}, {1, 0}, {-1, -1}, {1, 1}};\n        int[][] input5 = {{10, 10}, {20, 20}, {30, 30}};\n        int[][] input6 = {{5, 5}, {5, 5}, {5, 5}, {-5, -5}};\n        int[][] input7 = {{0, 0}, {3, 0}, {0, 4}};\n        int[][] input8 = {{-1, -1}, {-1, 1}, {1, -1}, {1, 1}};\n        int[][] input9 = {{3, 3}, {4, 4}, {4, 3}, {3, 4}};\n        int[][] input10 = {{Integer.MAX_VALUE, Integer.MAX_VALUE}, {-Integer.MAX_VALUE, -Integer.MAX_VALUE}};\n        \n        System.out.println(minimumDistance(input1));\n        System.out.println(minimumDistance(input2));\n        System.out.println(minimumDistance(input3));\n        System.out.println(minimumDistance(input4));\n        System.out.println(minimumDistance(input5));\n        System.out.println(minimumDistance(input6));\n        System.out.println(minimumDistance(input7));\n        System.out.println(minimumDistance(input8));\n        System.out.println(minimumDistance(input9));\n        System.out.println(minimumDistance(input10));\n    }\n}"}
{"source_Lan": "java###goodSubsetofBinaryMatrix_Test.java", "source_code_str": "    public static List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {\n        List<Integer> ans = new ArrayList<Integer>();\n        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();\n        int m = grid.length;\n        int n = grid[0].length;\n        for (int j = 0; j < m; j++) {\n            int st = 0;\n            for (int i = 0; i < n; i++) {\n                st |= (grid[j][i] << i);\n            }\n            mp.put(st, j);\n        }\n        if (mp.containsKey(0)) {\n            ans.add(mp.get(0));\n            return ans;\n        }\n        for (Map.Entry<Integer, Integer> entry1 : mp.entrySet()) {\n            int x = entry1.getKey(), i = entry1.getValue();\n            for (Map.Entry<Integer, Integer> entry2 : mp.entrySet()) {\n                int y = entry2.getKey(), j = entry2.getValue();\n                if ((x & y) == 0) {\n                    List<Integer> list = new ArrayList<Integer>();\n                    list.add(Math.min(i, j));\n                    list.add(Math.max(i, j));\n                    return list;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\npublic class goodSubsetofBinaryMatrix_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 1, 0, 0}, {0, 0, 0, 0}};\n        int[][] input2 = {{1, 0}, {0, 1}};\n        int[][] input3 = {{1, 1, 1, 1}};\n        int[][] input4 = {{0, 0, 0, 1}};\n        int[][] input5 = {{1, 1, 0, 1}};\n        int[][] input6 = {};\n\n        System.out.println(goodSubsetofBinaryMatrix(input1));\n        System.out.println(goodSubsetofBinaryMatrix(input2));\n        System.out.println(goodSubsetofBinaryMatrix(input3));\n        System.out.println(goodSubsetofBinaryMatrix(input4));\n        System.out.println(goodSubsetofBinaryMatrix(input5));\n    }\n}"}
{"source_Lan": "java###findMaximumElegance_Test.java", "source_code_str": "    public static long findMaximumElegance(int[][] items, int k) {\n        Arrays.sort(items, (item0, item1) -> item1[0] - item0[0]);\n        var categorySet = new HashSet<Integer>();\n        long profit = 0, res = 0;\n        var st = new ArrayDeque<Integer>();\n        for (int i = 0; i < items.length; i++) {\n            if (i < k) {\n                profit += items[i][0];\n                if (!categorySet.add(items[i][1])) {\n                    st.push(items[i][0]);\n                }\n            } else if (!st.isEmpty() && categorySet.add(items[i][1])) {\n                profit += items[i][0] - st.pop();\n            }\n            res = Math.max(res, profit + (long)categorySet.size() * categorySet.size());\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.ArrayDeque;\npublic class findMaximumElegance_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findMaximumElegance(new int[][]{{1, 1}, {2, 2}, {3, 3}}, 2)); // Test input 1\n        System.out.println(findMaximumElegance(new int[][]{{5, 1}, {5, 1}, {5, 1}}, 3)); // Test input 2\n        System.out.println(findMaximumElegance(new int[][]{{10, 1}, {5, 2}, {15, 1}, {10, 3}}, 2)); // Test input 3\n        System.out.println(findMaximumElegance(new int[][]{{2, 1}, {3, 2}, {4, 3}, {5, 4}}, 0)); // Test input 4\n        System.out.println(findMaximumElegance(new int[][]{{1, 1}, {2, 1}, {3, 3}, {4, 2}}, 3)); // Test input 5\n        System.out.println(findMaximumElegance(new int[][]{{8, 1}, {6, 2}, {4, 3}, {12, 1}}, 2)); // Test input 6\n        System.out.println(findMaximumElegance(new int[][]{{10, 1}, {25, 2}, {5, 1}}, 1)); // Test input 7\n        System.out.println(findMaximumElegance(new int[][]{{20, 1}, {10, 1}, {15, 2}}, 2)); // Test input 8\n        System.out.println(findMaximumElegance(new int[][]{{5, 2}, {10, 2}, {15, 1}}, 2)); // Test input 9\n        System.out.println(findMaximumElegance(new int[][]{{1, 2}}, 1)); // Test input 10\n    }\n}"}
{"source_Lan": "java###totalCost_Test.java", "source_code_str": "    public static long totalCost(int[] costs, int k, int candidates) {\n        int n = costs.length;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);\n        int left = candidates - 1, right = n - candidates;\n        if (left + 1 < right) {\n            for (int i = 0; i <= left; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n            for (int i = right; i < n; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n        } else {\n            for (int i = 0; i < n; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < k; ++i) {\n            int[] arr = pq.poll();\n            int cost = arr[0], id = arr[1];\n            ans += cost;\n            if (left + 1 < right) {\n                if (id <= left) {\n                    ++left;\n                    pq.offer(new int[]{costs[left], left});\n                } else {\n                    --right;\n                    pq.offer(new int[]{costs[right], right});\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.PriorityQueue;\npublic class totalCost_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(totalCost(new int[]{}, 0, 0)); // Edge case: empty costs array with no candidates\n        System.out.println(totalCost(new int[]{5, 3, 2, 8}, 2, 2)); // Standard case with k within the range of costs\n        System.out.println(totalCost(new int[]{100, 200, 300, 400, 500}, 3, 5)); // All candidates eligible\n        System.out.println(totalCost(new int[]{10, 20, 30, 40, 50}, 3, 1)); // Only one candidate with higher k\n        System.out.println(totalCost(new int[]{1, 2, 3, 4, 5}, 1, 2)); // Testing minimum k\n        System.out.println(totalCost(new int[]{6, 7, 8, 9, 10, 2, 1}, 4, 3)); // Mixed costs with more k\n        System.out.println(totalCost(new int[]{2, 2, 2, 2}, 3, 2)); // All identical costs\n        System.out.println(totalCost(new int[]{10, 20, 30}, 3, 3)); // All elements in costs are selected\n        System.out.println(totalCost(new int[]{1000, 2000, 3000}, 2, 1)); // Higher cost values with limited candidates\n    }\n}"}
{"source_Lan": "java###distinctIntegers_Test.java", "source_code_str": "    public static int distinctIntegers(int n) {\n        int[] nums = new int[n + 1];\n        nums[n] = 1;\n        for (int k = 0; k < n; k++) {\n            for (int x = 1; x <= n; x++) {\n                if (nums[x] == 0) {\n                    continue;\n                }\n                for (int i = 1; i <= n; i++) {\n                    if (x % i == 1) {\n                        nums[i] = 1;\n                    }\n                }\n            }\n        }\n        return Arrays.stream(nums).sum();\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class distinctIntegers_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(distinctIntegers(0));\n        System.out.println(distinctIntegers(1));\n        System.out.println(distinctIntegers(2));\n        System.out.println(distinctIntegers(5));\n        System.out.println(distinctIntegers(10));\n        System.out.println(distinctIntegers(15));\n        System.out.println(distinctIntegers(20));\n        System.out.println(distinctIntegers(25));\n        System.out.println(distinctIntegers(50));\n        System.out.println(distinctIntegers(100));\n    }\n}"}
{"source_Lan": "java###minimumTime_Test.java", "source_code_str": "    public static int minimumTime(List<Integer> nums1, List<Integer> nums2, int x) {\n        int n = nums1.size(), s1 = 0, s2 = 0;\n        int[][] dp = new int[n + 1][n + 1];\n        List<List<Integer>> nums = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int a = nums1.get(i), b = nums2.get(i);\n            nums.add(Arrays.asList(b, a));\n            s1 += a;\n            s2 += b;\n        }\n        Collections.sort(nums, (o1, o2) -> Integer.compare(o1.get(0), o2.get(0)));\n        for (int j = 1; j <= n; ++j) {\n            int b = nums.get(j - 1).get(0), a = nums.get(j - 1).get(1);\n            for (int i = j; i > 0; --i) {\n                dp[j][i] = Math.max(dp[j - 1][i], dp[j - 1][i - 1] + i * b + a);\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            if (s2 * i + s1 - dp[n][i] <= x) {\n                return i;\n            }\n        }\n        return -1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\npublic class minimumTime_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumTime(Arrays.asList(1, 2), Arrays.asList(3, 4), 10));\n        System.out.println(minimumTime(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0), 0));\n        System.out.println(minimumTime(Arrays.asList(5, 6, 7), Arrays.asList(1, 2, 3), 100));\n        System.out.println(minimumTime(Arrays.asList(10, 20, 30), Arrays.asList(10, 20, 30), 250));\n        System.out.println(minimumTime(Arrays.asList(100000, 200000), Arrays.asList(300000, 400000), 1000000));\n        System.out.println(minimumTime(Arrays.asList(1, 7, 10), Arrays.asList(1, 3, 5), 60));\n        System.out.println(minimumTime(Arrays.asList(2, 4, 6), Arrays.asList(5, 7, 9), 100));\n        System.out.println(minimumTime(Arrays.asList(-1, -2, -3), Arrays.asList(-1, -2, -3), 10));\n        System.out.println(minimumTime(Arrays.asList(99999, 88888), Arrays.asList(77777, 66666), 10000000));\n        System.out.println(minimumTime(Arrays.asList(1, 3, 5), Arrays.asList(2, 4, 6), 20));\n    }\n}"}
{"source_Lan": "java###minLength_Test.java", "source_code_str": "    public static int minLength(String s) {\n        List<Character> stack = new ArrayList<Character>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            stack.add(c);\n            int m = stack.size();\n            if (m >= 2 &&\n                (stack.get(m - 2) == 'A' && stack.get(m - 1) == 'B' ||\n                stack.get(m - 2) == 'C' && stack.get(m - 1) == 'D')) {\n                stack.remove(m - 1);\n                stack.remove(m - 2);\n            }\n        }\n        return stack.size();\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class minLength_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minLength(\"\"));\n        System.out.println(minLength(\"AB\"));\n        System.out.println(minLength(\"AAB\"));\n        System.out.println(minLength(\"BAAC\"));\n        System.out.println(minLength(\"AABBCCDD\"));\n        System.out.println(minLength(\"AAA\"));\n        System.out.println(minLength(\"CC\"));\n        System.out.println(minLength(\"AABBCD\"));\n        System.out.println(minLength(\"ACBD\"));\n        System.out.println(minLength(\"BACDABCD\"));\n    }\n}"}
{"source_Lan": "java###addMinimum_Test.java", "source_code_str": "    public static int addMinimum(String word) {\n        int n = word.length();\n        int[] d = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            d[i] = d[i - 1] + 2;\n            if (i > 1 && word.charAt(i - 1) > word.charAt(i - 2)) {\n                d[i] = d[i - 1] - 1;\n            }\n        }\n        return d[n];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class addMinimum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(addMinimum(\"\"));           // Edge case: empty string\n        System.out.println(addMinimum(\"a\"));          // Single character input\n        System.out.println(addMinimum(\"abc\"));        // Increasing order\n        System.out.println(addMinimum(\"cba\"));        // Decreasing order\n        System.out.println(addMinimum(\"aaa\"));        // All characters the same\n        System.out.println(addMinimum(\"abcabc\"));     // Mixed characters, but still an increasing sequence\n        System.out.println(addMinimum(\"aab\"));        // Characters cause a dip\n        System.out.println(addMinimum(\"aaab\"));       // Increasing sequence from duplicates\n        System.out.println(addMinimum(\"xyzuy\"));      // Mixed order\n        System.out.println(addMinimum(\"zyx\"));        // Strictly decreasing\n    }\n}"}
{"source_Lan": "java###matchingCnt_Test.java", "source_code_str": "    public static int[] matchingCnt(int n, String[] X) {\n        Map<Integer, int[]> map = new HashMap<>();\n        int[] ans = new int[n];\n        for (int i = n - 1; i >= 0; i--) {\n            String x = X[i];\n            int cans = 0;\n            for (int j = 0; j < x.length(); j++) {\n                if (!map.containsKey(j)) {\n                    map.put(j, new int[26]);\n                }\n                cans = cans + map.get(j)[x.charAt(j) - 'a'];\n                map.get(j)[x.charAt(j) - 'a']++;\n            }\n            ans[i] = cans;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class matchingCnt_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(java.util.Arrays.toString(matchingCnt(0, new String[]{})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(1, new String[]{\"a\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(2, new String[]{\"a\", \"a\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(3, new String[]{\"abc\", \"cab\", \"abc\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(3, new String[]{\"abcd\", \"abdc\", \"abcd\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(1, new String[]{\"abcdefghijklmnopqrstuvwxyz\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(3, new String[]{\"xyz\", \"abc\", \"def\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(4, new String[]{\"aaa\", \"aaa\", \"aaa\", \"aaa\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(5, new String[]{\"abcdef\", \"ghijkl\", \"mnopqr\", \"stuvwx\", \"yzabcd\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(2, new String[]{\"abcd\", \"xyzzy\"})));\n    }\n}"}
{"source_Lan": "java###garbageCollection_Test.java", "source_code_str": "    public static int garbageCollection(String[] garbage, int[] travel) {\n        Map<Character, Integer> distance = new HashMap<>();\n        int res = 0, curDis = 0;\n        for (int i = 0; i < garbage.length; i++) {\n            res += garbage[i].length();\n            if (i > 0) {\n                curDis += travel[i - 1];\n            }\n            for (char c : garbage[i].toCharArray()) {\n                distance.put(c, curDis);\n            }\n        }\n        return res + distance.values().stream().reduce(0, Integer::sum);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class garbageCollection_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(garbageCollection(new String[]{\"G\", \"P\", \"M\"}, new int[]{1, 2})); // Example Test Input 1\n        System.out.println(garbageCollection(new String[]{\"G\"}, new int[]{}));                // Example Test Input 2\n        System.out.println(garbageCollection(new String[]{\"G\", \"G\", \"G\"}, new int[]{10, 10})); // Example Test Input 3\n        System.out.println(garbageCollection(new String[]{\"P\", \"G\", \"M\", \"P\"}, new int[]{5, 5, 5})); // Example Test Input 4\n        System.out.println(garbageCollection(new String[]{\"G\", \"P\", \"M\", \"M\", \"G\"}, new int[]{1, 2, 3, 4})); // Example Test Input 5\n        System.out.println(garbageCollection(new String[]{\"M\", \"M\", \"M\"}, new int[]{0, 0})); // Example Test Input 6\n        System.out.println(garbageCollection(new String[]{\"G\", \"P\", \"G\"}, new int[]{0, 0})); // Example Test Input 7\n        System.out.println(garbageCollection(new String[]{}, new int[]{})); // Example Test Input 8\n        System.out.println(garbageCollection(new String[]{\"G\", \"P\"}, new int[]{1})); // Example Test Input 9\n        System.out.println(garbageCollection(new String[]{\"G\", \"G\", \"P\", \"M\", \"M\"}, new int[]{1, 2, 3, 4})); // Example Test Input 10\n    }\n}"}
{"source_Lan": "java###arrangingHorses_Test.java", "source_code_str": "    public static ArrayList<Integer> arrangingHorses(int n, int m, int[][] data) {\n        int[] inDegree = new int[n];\n        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();\n        for (int i = 0; i < n; i++) adjList.add(new ArrayList<>());\n        for (int[] edge : data) {\n            int a = edge[0], b = edge[1];\n            adjList.get(b).add(a); \n            ++inDegree[a];\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(); \n        for (int i = 0; i < n; ++i) {\n            if (inDegree[i] == 0) pq.add(i);\n        }\n        ArrayList<Integer> order = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            int horse = pq.poll();\n            order.add(horse);\n            for (int neigh : adjList.get(horse)) {\n                --inDegree[neigh];\n                if (inDegree[neigh] == 0) pq.add(neigh);\n            }\n        }\n        return order;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\npublic class arrangingHorses_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test case 1: Single horse, no edges\n        int[][] data1 = {};\n        System.out.println(arrangingHorses(1, 0, data1));\n        \n        // Test case 2: Three horses, no edges\n        int[][] data2 = {};\n        System.out.println(arrangingHorses(3, 0, data2));\n        \n        // Test case 3: Valid edges forming a DAG\n        int[][] data3 = {{0, 1}, {1, 2}, {0, 2}};\n        System.out.println(arrangingHorses(3, 3, data3));\n        \n        // Test case 4: Chain of edges\n        int[][] data4 = {{0, 1}, {1, 2}, {2, 3}};\n        System.out.println(arrangingHorses(4, 3, data4));\n        \n        // Test case 5: Longer chain\n        int[][] data5 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};\n        System.out.println(arrangingHorses(5, 4, data5));\n        \n        // Test case 6: Branching edges\n        int[][] data6 = {{0, 1}, {0, 2}, {1, 3}};\n        System.out.println(arrangingHorses(5, 3, data6));\n        \n        // Test case 7: Contains cycle(edge cases not handled)\n        int[][] data7 = {{0, 1}, {1, 2}, {2, 0}, {3, 4}, {4, 3}};\n        System.out.println(arrangingHorses(5, 5, data7));\n        \n        // Test case 8: No horses, no edges\n        int[][] data8 = {};\n        System.out.println(arrangingHorses(0, 0, data8));\n        \n        // Test case 9: Two horses with one edge\n        int[][] data9 = {{0, 1}};\n        System.out.println(arrangingHorses(2, 1, data9));\n        \n        // Test case 10: DAG with multiple edges\n        int[][] data10 = {{5, 1}, {1, 2}, {1, 3}, {2, 4}, {3, 4}};\n        System.out.println(arrangingHorses(6, 5, data10));\n    }\n}"}
{"source_Lan": "java###substringsAndPermutations_Test.java", "source_code_str": "    public static ArrayList<Integer> substringsAndPermutations(int n, int m, String s,\n                                                        String[] arr) {\n        Map<Character, List<Integer>> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            char ch = s.charAt(i);\n            mp.computeIfAbsent(ch, k -> new ArrayList<>()).add(i);\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n        for (int q = 0; q < m; q++) {\n            String query = arr[q];\n            int ma = 0;\n            Map<Character, Integer> ct = new HashMap<>();\n            for (char c : query.toCharArray()) {\n                ct.put(c, ct.getOrDefault(c, 0) + 1);\n            }\n            for (char c : query.toCharArray()) {\n                int ele = ct.get(c);\n                if (ele > mp.getOrDefault(c, Collections.emptyList()).size()) {\n                    ma = -1;\n                    break;\n                } else {\n                    ma = Math.max(ma, mp.get(c).get(ele - 1) + 1);\n                }\n            }\n            ans.add(ma);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class substringsAndPermutations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Input 1\n        int n1 = 5, m1 = 3;\n        String s1 = \"abcde\";\n        String[] arr1 = {\"a\", \"cd\", \"f\"};\n        System.out.println(substringsAndPermutations(n1, m1, s1, arr1));\n        \n        // Test Input 2\n        int n2 = 6, m2 = 2;\n        String s2 = \"fghijk\";\n        String[] arr2 = {\"fg\", \"xyz\"};\n        System.out.println(substringsAndPermutations(n2, m2, s2, arr2));\n        \n        // Test Input 3\n        int n3 = 3, m3 = 4;\n        String s3 = \"aaaaa\";\n        String[] arr3 = {\"a\", \"aa\", \"aaa\", \"b\"};\n        System.out.println(substringsAndPermutations(n3, m3, s3, arr3));\n        \n        // Test Input 4\n        int n4 = 0, m4 = 1;\n        String s4 = \"\";\n        String[] arr4 = {\"a\"};\n        System.out.println(substringsAndPermutations(n4, m4, s4, arr4));\n        \n        // Test Input 5\n        int n5 = 3, m5 = 1;\n        String s5 = \"abc\";\n        String[] arr5 = {\"abc\"};\n        System.out.println(substringsAndPermutations(n5, m5, s5, arr5));\n        \n        // Test Input 6\n        int n6 = 10, m6 = 3;\n        String s6 = \"abcdefghij\";\n        String[] arr6 = {\"ab\", \"hj\", \"zz\"};\n        System.out.println(substringsAndPermutations(n6, m6, s6, arr6));\n        \n        // Test Input 7\n        int n7 = 5, m7 = 2;\n        String s7 = \"abcab\";\n        String[] arr7 = {\"abc\", \"acb\"};\n        System.out.println(substringsAndPermutations(n7, m7, s7, arr7));\n        \n        // Test Input 8\n        int n8 = 7, m8 = 3;\n        String s8 = \"abcdefg\";\n        String[] arr8 = {\"gbd\", \"caf\", \"abcdefg\"};\n        System.out.println(substringsAndPermutations(n8, m8, s8, arr8));\n        \n        // Test Input 9\n        int n9 = 6, m9 = 2;\n        String s9 = \"aabbcc\";\n        String[] arr9 = {\"abc\", \"abcde\"};\n        System.out.println(substringsAndPermutations(n9, m9, s9, arr9));\n        \n        // Test Input 10\n        int n10 = 4, m10 = 1;\n        String s10 = \"zxyz\";\n        String[] arr10 = {\"zy\"};\n        System.out.println(substringsAndPermutations(n10, m10, s10, arr10));\n    }\n}"}
{"source_Lan": "java###prefixDistinct_Test.java", "source_code_str": "    public static int[] prefixDistinct(int n, int arr[]){\n        int ans[] = new int[n];\n        Set<Integer> hs = new HashSet<>();\n        for(int i = 0; i < n; i++){\n            hs.add(arr[i]);\n            ans[i] = hs.size();\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.Arrays;\npublic class prefixDistinct_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Inputs\n        int[] result1 = prefixDistinct(0, new int[]{});\n        System.out.println(Arrays.toString(result1));\n\n        int[] result2 = prefixDistinct(5, new int[]{1, 2, 3, 4, 5});\n        System.out.println(Arrays.toString(result2));\n\n        int[] result3 = prefixDistinct(5, new int[]{2, 2, 2, 2, 2});\n        System.out.println(Arrays.toString(result3));\n\n        int[] result4 = prefixDistinct(6, new int[]{1, 2, 1, 3, 4, 2});\n        System.out.println(Arrays.toString(result4));\n\n        int[] result5 = prefixDistinct(5, new int[]{-1, -2, -3, -1, -2});\n        System.out.println(Arrays.toString(result5));\n\n        int[] result6 = prefixDistinct(7, new int[]{0, 1, 0, 2, 1, 0, 3});\n        System.out.println(Arrays.toString(result6));\n\n        int[] result7 = prefixDistinct(5, new int[]{1, 1, 2, 2, 3});\n        System.out.println(Arrays.toString(result7));\n\n        int[] result8 = prefixDistinct(4, new int[]{1, 0, 1, 0});\n        System.out.println(Arrays.toString(result8));\n\n        int[] result9 = prefixDistinct(3, new int[]{1, 2, 2});\n        System.out.println(Arrays.toString(result9));\n\n        int[] result10 = prefixDistinct(5, new int[]{5, 5, 5, 5, 5});\n        System.out.println(Arrays.toString(result10));\n    }\n}"}
{"source_Lan": "java###numberGame_Test.java", "source_code_str": "    public static int[] numberGame(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i += 2) {\n            int tmp = nums[i];\n            nums[i] = nums[i + 1];\n            nums[i + 1] = tmp;\n        }\n        return nums;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class numberGame_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(numberGame(new int[]{})));\n        System.out.println(Arrays.toString(numberGame(new int[]{8, 3})));\n        System.out.println(Arrays.toString(numberGame(new int[]{7, -2})));\n        System.out.println(Arrays.toString(numberGame(new int[]{4, -5, 2, 1})));\n        System.out.println(Arrays.toString(numberGame(new int[]{1, 2, 3, 4, 5, 6})));\n        System.out.println(Arrays.toString(numberGame(new int[]{1, -1, 2, -2, 3, -3})));\n    }\n}"}
{"source_Lan": "java###maxResult_Test.java", "source_code_str": "    public static int maxResult(int[] nums, int k) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        dp[0] = nums[0];\n        Deque<Integer> queue = new ArrayDeque<>();\n        queue.offerLast(0);\n        for (int i = 1; i < n; i++) {\n            while (queue.peekFirst() < i - k) {\n                queue.pollFirst();\n            }\n            dp[i] = dp[queue.peekFirst()] + nums[i];\n            while (!queue.isEmpty() && dp[queue.peekLast()] <= dp[i]) {\n                queue.pollLast();\n            }\n            queue.offerLast(i);\n        }\n        return dp[n - 1];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Deque;\nimport java.util.ArrayDeque;\npublic class maxResult_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxResult(new int[]{1, 2, 3}, 1)); // Expected output: 6\n        System.out.println(maxResult(new int[]{5, -1, 2, 10}, 2)); // Expected output: 16\n        System.out.println(maxResult(new int[]{-5, -1, -2, -3}, 3)); // Expected output: -1\n        System.out.println(maxResult(new int[]{1}, 1)); // Expected output: 1\n        System.out.println(maxResult(new int[]{2, 3, 4, 5, 6}, 5)); // Expected output: 20\n        System.out.println(maxResult(new int[]{10, -1, 10, -1, 10}, 3)); // Expected output: 29\n        System.out.println(maxResult(new int[]{0, 0, 0, 0}, 2)); // Expected output: 0\n        System.out.println(maxResult(new int[]{1, 3, -2, 4, -1}, 1)); // Expected output: 6\n        System.out.println(maxResult(new int[]{1, 0, 0, 1, 0, 1}, 2)); // Expected output: 3\n    }\n}"}
{"source_Lan": "java###distinctDifferenceArray_Test.java", "source_code_str": "    public static int[] distinctDifferenceArray(int[] nums) {\n        int n = nums.length;\n        Set<Integer> set = new HashSet<Integer>();\n        int[] sufCnt = new int[n + 1];\n        for (int i = n - 1; i > 0; i--) {\n            set.add(nums[i]);\n            sufCnt[i] = set.size();\n        }\n        int[] res = new int[n];\n        set.clear();\n        for (int i = 0; i < n; i++) {\n            set.add(nums[i]);\n            res[i] = set.size() - sufCnt[i + 1];\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class distinctDifferenceArray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] testInputs = {\n            {},                       // Edge case: empty array\n            {1},                      // Edge case: single element\n            {1, 1},                   // Edge case: two identical elements\n            {1, 2, 3},                // Case: all distinct elements\n            {1, 2, 2, 3},             // Mixed case: some duplicates\n            {3, 3, 3, 3, 3},          // Case: all identical elements\n            {1, 2, 3, 1, 2, 3},       // Cycle of distinct values\n            {1, 2, 1, 2, 1, 2},       // Alternating duplicates\n            {2, 2, 4, 5, 4},          // Mixed values with several duplicates\n            {5, 5, 5, 4, 4, 3, 2, 1}  // Descending values with repeated elements\n        };\n\n        for(int[] input : testInputs) {\n            int[] result = distinctDifferenceArray(input);\n            System.out.print(\"Input: \");\n            for(int num : input) {\n                System.out.print(num + \" \");\n            }\n            System.out.print(\" -> Output: \");\n            for(int res : result) {\n                System.out.print(res + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"source_Lan": "java###findAnswer_Test.java", "source_code_str": "    public static ArrayList<Integer> findAnswer(int n, int[] A) \n    {\n        ArrayList<Long> pref = new ArrayList<>();\n        pref.add((long) A[0]);\n        \n        for (int i = 1; i < n; i++) {\n            pref.add(pref.get(i - 1) + A[i]);\n        }\n        Stack<Integer> s = new Stack<>();\n        ArrayList<Integer> res = new ArrayList<>();\n        for(int i=0;i<=n;i++)\n        {\n            res.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            if (pref.get(i) > 0) \n            {\n                res.set(0,i+1);\n                break;\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) \n        {\n            while (!s.isEmpty() && pref.get(s.peek()) <= pref.get(i)) {\n                s.pop();\n            }\n            if (s.isEmpty()) \n            {\n                res.set(i+1,0);\n            } \n            else if (i < n - 1) \n            {\n                res.set(i + 1, s.peek() - i);\n            }\n            s.push(i);\n        }\n        res.remove(res.size() - 1);\n        return res;\n    }", "source_code_shell": "import java.util.ArrayList;\nimport java.util.Stack;\nimport java.util.ArrayList;\nimport java.util.Stack;\npublic class findAnswer_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] input1_A = {};\n\n        int[] input2_A = {-1, -2, -3, -4, -5};\n        System.out.println(findAnswer(5, input2_A));\n\n        int[] input3_A = {1, 2, 3, 4, 5};\n        System.out.println(findAnswer(5, input3_A));\n\n        int[] input4_A = {1, -2, 3, -4, 5};\n        System.out.println(findAnswer(5, input4_A));\n\n        int[] input5_A = {-1, 2, 3, -2, 1};\n        System.out.println(findAnswer(5, input5_A));\n\n        int[] input6_A = {0, 0, 0, 0, 0};\n        System.out.println(findAnswer(5, input6_A));\n\n        int[] input7_A = {10};\n        System.out.println(findAnswer(1, input7_A));\n\n        int[] input8_A = {-1, 0, 1};\n        System.out.println(findAnswer(3, input8_A));\n\n        int[] input9_A = {5, 5, -10, 5};\n        System.out.println(findAnswer(4, input9_A));\n\n        int[] input10_A = {10, -5, -5, 10, 10, -10};\n        System.out.println(findAnswer(6, input10_A));\n    }\n}"}
{"source_Lan": "java###buyChoco_Test.java", "source_code_str": "    public static int buyChoco(int[] prices, int money) {\n        int fi = Integer.MAX_VALUE, se = Integer.MAX_VALUE;\n        for (int price : prices) {\n            if (price < fi) {\n                se = fi;\n                fi = price;\n            } else if (price < se) {\n                se = price;\n            }\n        }\n        return money < fi + se ? money : money - fi - se;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class buyChoco_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(buyChoco(new int[]{1, 2, 3}, 5)); // Expected output: 0\n        System.out.println(buyChoco(new int[]{1, 2}, 3));     // Expected output: 0\n        System.out.println(buyChoco(new int[]{1, 1, 1}, 2));  // Expected output: 2\n        System.out.println(buyChoco(new int[]{5, 10, 15}, 4)); // Expected output: 4\n        System.out.println(buyChoco(new int[]{10}, 10));      // Expected output: 10\n        System.out.println(buyChoco(new int[]{1, 3, 4}, 3));   // Expected output: 0\n        System.out.println(buyChoco(new int[]{}, 10));         // Expected output: 10\n        System.out.println(buyChoco(new int[]{3, 2, 1}, 6));   // Expected output: 0\n        System.out.println(buyChoco(new int[]{1, 2, 1}, 4));   // Expected output: 2\n        System.out.println(buyChoco(new int[]{5, 5, 5}, 12));  // Expected output: 2\n    }\n}"}
{"source_Lan": "java###findPeakGrid_Test.java", "source_code_str": "public static int[] findPeakGrid(int[][] mat) {\n        int m = mat.length, n = mat[0].length;\n        int low = 0, high = m - 1;\n        while (low <= high) {\n            int i = (low + high) / 2;\n            int j = -1, maxElement = -1;\n            for (int k = 0; k < n; k++) {\n                if (mat[i][k] > maxElement) {\n                    j = k;\n                    maxElement = mat[i][k];\n                }\n            }\n            if (i - 1 >= 0 && mat[i][j] < mat[i - 1][j]) {\n                high = i - 1;\n                continue;\n            }\n            if (i + 1 < m && mat[i][j] < mat[i + 1][j]) {\n                low = i + 1;\n                continue;\n            }\n            return new int[]{i, j};\n        }\n        return new int[0]; \n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class findPeakGrid_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 2, 3}, {6, 5, 4}, {7, 8, 9}};\n        int[][] input2 = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};\n        int[][] input3 = {{10, 20, 30}};\n        int[][] input4 = {{10}, {20}, {30}};\n        int[][] input5 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {1, 2, 3, 4}};\n        int[][] input6 = {{5, 10, 5}, {10, 15, 10}, {5, 10, 5}};\n        int[][] input7 = {{10, 8, 5}, {7, 6, 9}, {8, 9, 10}};\n        int[][] input8 = {{1, 3, 5}, {7, 9, 11}, {12, 14, 16}};\n        int[][] input9 = {{2, 1}, {3, 4}};\n        int[][] input10 = {{6, 7, 8, 9}, {7, 8, 9, 6}, {6, 7, 5, 8}};\n\n        System.out.println(Arrays.toString(findPeakGrid(input1)));\n        System.out.println(Arrays.toString(findPeakGrid(input2)));\n        System.out.println(Arrays.toString(findPeakGrid(input3)));\n        System.out.println(Arrays.toString(findPeakGrid(input4)));\n        System.out.println(Arrays.toString(findPeakGrid(input5)));\n        System.out.println(Arrays.toString(findPeakGrid(input6)));\n        System.out.println(Arrays.toString(findPeakGrid(input7)));\n        System.out.println(Arrays.toString(findPeakGrid(input8)));\n        System.out.println(Arrays.toString(findPeakGrid(input9)));\n        System.out.println(Arrays.toString(findPeakGrid(input10)));\n    }\n}"}
{"source_Lan": "java###isAcronym_Test.java", "source_code_str": "public static boolean isAcronym(List<String> words, String s) {\n        if (words.size() != s.length()) {\n            return false;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (words.get(i).charAt(0) != s.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.List;\npublic class isAcronym_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(isAcronym(Arrays.asList(), \"\")); // input1\n        System.out.println(isAcronym(Arrays.asList(\"hello\"), \"h\")); // input2\n        System.out.println(isAcronym(Arrays.asList(\"hello\", \"world\"), \"h\")); // input3\n        System.out.println(isAcronym(Arrays.asList(\"hello\", \"world\"), \"hw\")); // input4\n        System.out.println(isAcronym(Arrays.asList(\"happy\", \"birthday\"), \"hb\")); // input5\n        System.out.println(isAcronym(Arrays.asList(\"java\", \"is\", \"fun\"), \"jif\")); // input6\n        System.out.println(isAcronym(Arrays.asList(\"java\", \"is\", \"awesome\"), \"jia\")); // input7\n        System.out.println(isAcronym(Arrays.asList(\"function\", \"are\", \"cool\"), \"fac\")); // input8\n        System.out.println(isAcronym(Arrays.asList(\"small\", \"steps\"), \"ss\")); // input9\n        System.out.println(isAcronym(Arrays.asList(\"long\", \"journey\", \"begins\", \"with\", \"one\"), \"ljbwo\")); // input10\n    }\n}"}
{"source_Lan": "java###possibleToStamp_Test.java", "source_code_str": "    public static boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {\n        int m = grid.length, n = grid[0].length;\n        int[][] sum = new int[m + 2][n + 2];\n        int[][] diff = new int[m + 2][n + 2];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + grid[i - 1][j - 1];\n            }\n        }\n        for (int i = 1; i + stampHeight - 1 <= m; i++) {\n            for (int j = 1; j + stampWidth - 1 <= n; j++) {\n                int x = i + stampHeight - 1;\n                int y = j + stampWidth - 1;\n                if (sum[x][y] - sum[x][j - 1] - sum[i - 1][y] + sum[i - 1][j - 1] == 0) {\n                    diff[i][j]++;\n                    diff[i][y + 1]--;\n                    diff[x + 1][j]--;\n                    diff[x + 1][y + 1]++;\n                }\n            }\n        }\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n                if (diff[i][j] == 0 && grid[i - 1][j - 1] == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class possibleToStamp_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(possibleToStamp(new int[][]{{0}}, 1, 1));\n        System.out.println(possibleToStamp(new int[][]{{0, 0}, {0, 0}}, 2, 2));\n        System.out.println(possibleToStamp(new int[][]{{1}}, 1, 1));\n        System.out.println(possibleToStamp(new int[][]{{0, 1}, {0, 0}}, 1, 2));\n        System.out.println(possibleToStamp(new int[][]{{0, 0, 1}, {0, 0, 0}}, 1, 3));\n        System.out.println(possibleToStamp(new int[][]{{0, 0, 0}, {0, 0, 0}}, 2, 3));\n        System.out.println(possibleToStamp(new int[][]{{0, 0}, {0, 1}}, 2, 1));\n        System.out.println(possibleToStamp(new int[][]{{1, 1}, {1, 1}}, 1, 1));\n        System.out.println(possibleToStamp(new int[][]{{0, 0, 0}, {0, 1, 0}}, 2, 1));\n        System.out.println(possibleToStamp(new int[][]{{0}}, 2, 2));\n    }\n}"}
{"source_Lan": "java###makeSmallestPalindrome_Test.java", "source_code_str": "    public static String makeSmallestPalindrome(String s) {\n        char[] arr = s.toCharArray();\n        int left = 0, right = arr.length - 1;\n        while (left < right) {\n            if (arr[left] != arr[right]) {\n                arr[left] = arr[right] = (char) Math.min(arr[left], arr[right]);\n            }\n            ++left;\n            --right;\n        }\n        return new String(arr);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.Arrays;\npublic class makeSmallestPalindrome_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(makeSmallestPalindrome(\"\"));        // Test input 1\n        System.out.println(makeSmallestPalindrome(\"a\"));       // Test input 2\n        System.out.println(makeSmallestPalindrome(\"abc\"));     // Test input 3\n        System.out.println(makeSmallestPalindrome(\"race\"));    // Test input 4\n        System.out.println(makeSmallestPalindrome(\"abba\"));    // Test input 5\n        System.out.println(makeSmallestPalindrome(\"abcba\"));   // Test input 6\n        System.out.println(makeSmallestPalindrome(\"xyz\"));     // Test input 7\n        System.out.println(makeSmallestPalindrome(\"aabb\"));    // Test input 8\n        System.out.println(makeSmallestPalindrome(\"abcd\"));    // Test input 9\n        System.out.println(makeSmallestPalindrome(\"madam\"));   // Test input 10\n    }\n}"}
{"source_Lan": "java###maxTaxiEarnings_Test.java", "source_code_str": "    public static long maxTaxiEarnings(int n, int[][] rides) {\n        long[] dp = new long[n + 1];\n        Map<Integer, List<int[]>> rideMap = new HashMap<Integer, List<int[]>>();\n        for (int[] ride : rides) {\n            rideMap.putIfAbsent(ride[1], new ArrayList<int[]>());\n            rideMap.get(ride[1]).add(ride);\n        }\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i - 1];\n            for (int[] ride : rideMap.getOrDefault(i, new ArrayList<int[]>())) {\n                dp[i] = Math.max(dp[i], dp[ride[0]] + ride[1] - ride[0] + ride[2]);\n            }\n        }\n        return dp[n];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.*;\npublic class maxTaxiEarnings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxTaxiEarnings(5, new int[][]{})); // Test Input 1\n        System.out.println(maxTaxiEarnings(5, new int[][]{{1, 2, 5}, {2, 3, 10}})); // Test Input 2\n        System.out.println(maxTaxiEarnings(5, new int[][]{{1, 3, 10}, {3, 5, 20}, {1, 5, 15}})); // Test Input 3\n        System.out.println(maxTaxiEarnings(4, new int[][]{{1, 2, 5}, {2, 4, 10}, {3, 4, 15}})); // Test Input 4\n        System.out.println(maxTaxiEarnings(10, new int[][]{{1, 5, 10}, {2, 6, 15}, {3, 7, 5}})); // Test Input 5\n        System.out.println(maxTaxiEarnings(6, new int[][]{{1, 6, 10}, {2, 6, 20}, {4, 6, 10}})); // Test Input 6\n        System.out.println(maxTaxiEarnings(7, new int[][]{{1, 2, 5}, {1, 3, 20}, {1, 4, 10}})); // Test Input 7\n        System.out.println(maxTaxiEarnings(8, new int[][]{{1, 4, 10}, {2, 5, 20}, {3, 6, 30}, {4, 7, 15}})); // Test Input 8\n        System.out.println(maxTaxiEarnings(10, new int[][]{{1, 3, 10}, {1, 5, 30}, {5, 10, 25}})); // Test Input 9\n        System.out.println(maxTaxiEarnings(1000, new int[][]{{1, 500, 100}, {200, 600, 250}, {400, 800, 400}})); // Test Input 10\n    }\n}"}
{"source_Lan": "java###carPooling_Test.java", "source_code_str": "public static boolean carPooling(int[][] trips, int capacity) {\n        int toMax = 0;\n        for (int[] trip : trips) {\n            toMax = Math.max(toMax, trip[2]);\n        }\n        int[] diff = new int[toMax + 1];\n        for (int[] trip : trips) {\n            diff[trip[1]] += trip[0];\n            diff[trip[2]] -= trip[0];\n        }\n        int count = 0;\n        for (int i = 0; i <= toMax; ++i) {\n            count += diff[i];\n            if (count > capacity) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class carPooling_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(carPooling(new int[][]{{2, 1, 5}, {3, 3, 7}}, 4)); // false\n        System.out.println(carPooling(new int[][]{{2, 1, 5}, {3, 5, 6}}, 4)); // true\n        System.out.println(carPooling(new int[][]{{1, 2, 4}, {4, 3, 5}, {2, 3, 8}}, 4)); // false\n        System.out.println(carPooling(new int[][]{{1, 0, 5}}, 1)); // false\n        System.out.println(carPooling(new int[][]{{5, 0, 5}, {3, 5, 10}, {2, 7, 9}}, 10)); // true\n        System.out.println(carPooling(new int[][]{{1, 1, 2}}, 1)); // true\n        System.out.println(carPooling(new int[][]{{1, 0, 1}, {2, 1, 2}, {3, 1, 3}}, 3)); // false\n        System.out.println(carPooling(new int[][]{{4, 1, 5}, {5, 2, 5}}, 7)); // true\n        System.out.println(carPooling(new int[][]{{2, 0, 3}, {3, 4, 6}, {1, 0, 4}}, 5)); // true\n        System.out.println(carPooling(new int[][]{{3, 1, 7}, {2, 4, 6}, {5, 2, 5}}, 10)); // true\n    }\n}"}
{"source_Lan": "java###firstCompleteIndex_Test.java", "source_code_str": "public static int firstCompleteIndex(int[] arr, int[][] mat) {\n        int n = mat.length;\n        int m = mat[0].length;\n        Map<Integer, int[]> map = new HashMap<Integer, int[]>();\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                map.put(mat[i][j], new int[]{i, j});\n            }\n        }\n        int[] rowCnt = new int[n];\n        int[] colCnt = new int[m];\n        for (int i = 0; i < arr.length; ++i) {\n            int[] v = map.get(arr[i]);\n            ++rowCnt[v[0]];\n            if (rowCnt[v[0]] == m) {\n                return i;\n            }\n            ++colCnt[v[1]];\n            if (colCnt[v[1]] == n) {\n                return i;\n            }\n        }\n        return -1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class firstCompleteIndex_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(firstCompleteIndex(new int[]{1, 2, 3, 4, 5}, new int[][]{{1, 2}, {3, 4}})); // Input_1\n        System.out.println(firstCompleteIndex(new int[]{1, 3, 2, 5, 4}, new int[][]{{1, 2}, {3, 4}})); // Input_2\n        System.out.println(firstCompleteIndex(new int[]{1, 1, 2, 2, 3}, new int[][]{{1, 2}, {3, 4}})); // Input_4\n        System.out.println(firstCompleteIndex(new int[]{}, new int[][]{{1, 2}, {3, 4}})); // Input_5\n        System.out.println(firstCompleteIndex(new int[]{1, 2, 3, 4}, new int[][]{{1, 20, 3}, {2, 4, 5}})); // Input_7\n        System.out.println(firstCompleteIndex(new int[]{10, 12, 13}, new int[][]{{10, 11, 12}, {13, 14, 15}})); // Input_8\n        System.out.println(firstCompleteIndex(new int[]{7, 8, 5, 6}, new int[][]{{8, 7}, {6, 5}})); // Input_9\n        System.out.println(firstCompleteIndex(new int[]{5, 4}, new int[][]{{5, 3, 2}, {1, 0, 4}})); // Input_10\n    }\n}"}
{"source_Lan": "java###closeStrings_Test.java", "source_code_str": "public static boolean closeStrings(String word1, String word2) {\n        int[] count1 = new int[26], count2 = new int[26];\n        for (char c : word1.toCharArray()) {\n            count1[c - 'a']++;\n        }\n        for (char c : word2.toCharArray()) {\n            count2[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count1[i] > 0 && count2[i] == 0 || count1[i] == 0 && count2[i] > 0) {\n                return false;\n            }\n        }\n        Arrays.sort(count1);\n        Arrays.sort(count2);\n        return Arrays.equals(count1, count2);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class closeStrings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(closeStrings(\"abc\", \"bac\"));        // True\n        System.out.println(closeStrings(\"aabb\", \"bbaa\"));      // True\n        System.out.println(closeStrings(\"aabbcc\", \"abc\"));     // False\n        System.out.println(closeStrings(\"abc\", \"def\"));        // False\n        System.out.println(closeStrings(\"\", \"\"));               // True\n        System.out.println(closeStrings(\"aa\", \"a\"));            // False\n        System.out.println(closeStrings(\"a\", \"aa\"));            // False\n        System.out.println(closeStrings(\"aabbcc\", \"ccbbbaaa\")); // False\n        System.out.println(closeStrings(\"xyz\", \"zyx\"));         // True\n        System.out.println(closeStrings(\"hello\", \"billion\"));   // False\n    }\n}"}
{"source_Lan": "java###findTheCity_Test.java", "source_code_str": "public static int findTheCity(int n, int[][] edges, int distanceThreshold) {\n        int[] ans = {Integer.MAX_VALUE / 2, -1};\n        int[][] mp = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(mp[i], Integer.MAX_VALUE / 2);\n        }\n        for (int[] eg : edges) {\n            int from = eg[0], to = eg[1], weight = eg[2];\n            mp[from][to] = mp[to][from] = weight;\n        }\n        for (int k = 0; k < n; ++k) {\n            mp[k][k] = 0;\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    mp[i][j] = Math.min(mp[i][j], mp[i][k] + mp[k][j]);\n                }\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            int cnt = 0;\n            for (int j = 0; j < n; ++j) {\n                if (mp[i][j] <= distanceThreshold) {\n                    cnt++;\n                }\n            }\n            if (cnt <= ans[0]) {\n                ans[0] = cnt;\n                ans[1] = i;\n            }\n        }\n        return ans[1];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class findTheCity_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findTheCity(3, new int[][]{{0,1,5},{1,2,10}}, 10));\n        System.out.println(findTheCity(4, new int[][]{{0,1,3},{0,2,6},{1,2,2},{1,3,4}}, 5));\n        System.out.println(findTheCity(5, new int[][]{{0,1,1},{1,2,2},{2,3,3},{3,4,4}}, 1));\n        System.out.println(findTheCity(5, new int[][]{{0,1,2},{1,2,3},{0,3,4},{3,4,5},{4,2,1}}, 5));\n        System.out.println(findTheCity(6, new int[][]{{0,1,10},{2,3,15},{4,5,25}}, 30));\n        System.out.println(findTheCity(2, new int[][]{}, 5));\n        System.out.println(findTheCity(4, new int[][]{{0,1,1},{1,2,1},{2,3,1},{3,0,10}}, 5));\n        System.out.println(findTheCity(5, new int[][]{{0,1,2},{1,2,2},{2,3,2},{3,4,2},{4,0,10}}, 6));\n        System.out.println(findTheCity(3, new int[][]{{0,1,2},{0,2,8},{1,2,5}}, 10));\n        System.out.println(findTheCity(5, new int[][]{{0,1,1},{1,2,1},{2,3,1},{3,4,1},{4,0,3}}, 2));\n    }\n}"}
{"source_Lan": "java###longestAlternatingSubarray_Test.java", "source_code_str": "public static int longestAlternatingSubarray(int[] nums, int threshold) {\n        int res = 0, dp = 0;\n        for (int l = nums.length - 1; l >= 0; l--) {\n            if (nums[l] > threshold) {\n                dp = 0;\n            } else if (l == nums.length - 1 || nums[l] % 2 != nums[l + 1] % 2) {\n                dp++;\n            } else {\n                dp = 1;\n            }\n            if (nums[l] % 2 == 0) {\n                res = Math.max(res, dp);\n            }\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class longestAlternatingSubarray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(longestAlternatingSubarray(new int[]{1, 2, 3, 4, 5}, 5)); // Test input 1\n        System.out.println(longestAlternatingSubarray(new int[]{2, 3, 4, 5, 6}, 3)); // Test input 2\n        System.out.println(longestAlternatingSubarray(new int[]{1, 2, 1, 2, 1}, 2)); // Test input 3\n        System.out.println(longestAlternatingSubarray(new int[]{10, 9, 8, 7, 6}, 10)); // Test input 4\n        System.out.println(longestAlternatingSubarray(new int[]{1, 3, 2, 4, 6}, 6)); // Test input 5\n        System.out.println(longestAlternatingSubarray(new int[]{5, 1, 2, 3}, 4)); // Test input 6\n        System.out.println(longestAlternatingSubarray(new int[]{7, 8, 9, 10}, 10)); // Test input 7\n        System.out.println(longestAlternatingSubarray(new int[]{0, 2, 4, 6, 8}, 3)); // Test input 8\n        System.out.println(longestAlternatingSubarray(new int[]{3}, 5)); // Test input 9\n        System.out.println(longestAlternatingSubarray(new int[]{}, 5)); // Test input 10\n    }\n}"}
{"source_Lan": "java###findTheLongestBalancedSubstring_Test.java", "source_code_str": "public static int findTheLongestBalancedSubstring(String s) {\n        int res = 0;\n        int n = s.length();\n        int[] count = new int[2];\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n                count[1]++;\n                res = Math.max(res, 2 * Math.min(count[0], count[1]));\n            } else if (i == 0 || s.charAt(i - 1) == '1') {\n                count[0] = 1;\n                count[1] = 0;\n            } else {\n                count[0]++;\n            }\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.Arrays;\npublic class findTheLongestBalancedSubstring_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findTheLongestBalancedSubstring(\"\"));\n        System.out.println(findTheLongestBalancedSubstring(\"0011\"));\n        System.out.println(findTheLongestBalancedSubstring(\"111\"));\n        System.out.println(findTheLongestBalancedSubstring(\"000\"));\n        System.out.println(findTheLongestBalancedSubstring(\"0101\"));\n        System.out.println(findTheLongestBalancedSubstring(\"0\"));\n        System.out.println(findTheLongestBalancedSubstring(\"1\"));\n        System.out.println(findTheLongestBalancedSubstring(\"000011111000011111\"));\n        System.out.println(findTheLongestBalancedSubstring(\"00001111\"));\n        System.out.println(findTheLongestBalancedSubstring(\"01\"));\n    }\n}"}
{"source_Lan": "java###countDigits_Test.java", "source_code_str": "public static int countDigits(int num) {\n        int t = num;\n        int res = 0;\n        while (t != 0) {\n            if (num % (t % 10) == 0) {\n                res++;\n            }\n            t /= 10;\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.lang.Math;\n\npublic class countDigits_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countDigits(0));\n        System.out.println(countDigits(5));\n        System.out.println(countDigits(12));\n        System.out.println(countDigits(24));\n        System.out.println(countDigits(36));\n        System.out.println(countDigits(-42));\n        System.out.println(countDigits(7));\n    }\n}"}
{"source_Lan": "java###categorizeBox_Test.java", "source_code_str": "public static String categorizeBox(int length, int width, int height, int mass) {\n        long maxd = Math.max(length, Math.max(width, height)), vol = 1L * length * width * height;\n        boolean isBulky = maxd >= 10000 || vol >= 1000000000, isHeavy = mass >= 100;\n        if (isBulky && isHeavy) {\n             return \"Both\";\n        } else if (isBulky) {\n            return \"Bulky\";\n        } else if (isHeavy) {\n            return \"Heavy\";\n        } else {\n            return \"Neither\";\n        }\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class categorizeBox_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(categorizeBox(10001, 1, 1, 100));   // Both\n        System.out.println(categorizeBox(10001, 1, 1, 50));    // Bulky\n        System.out.println(categorizeBox(1, 1, 1, 100));        // Heavy\n        System.out.println(categorizeBox(1, 1, 1, 50));         // Neither\n        System.out.println(categorizeBox(100, 100, 100, 150));  // Both\n        System.out.println(categorizeBox(100, 100, 100, 50));   // Bulky\n        System.out.println(categorizeBox(1, 1, 1, 200));         // Heavy\n        System.out.println(categorizeBox(9999, 9999, 9999, 99)); // Neither\n        System.out.println(categorizeBox(9999, 9999, 9999, 100)); // Heavy\n        System.out.println(categorizeBox(10000, 10000, 10000, 100)); // Both\n    }\n}"}
{"source_Lan": "java###maxKelements_Test.java", "source_code_str": "public static long maxKelements(int[] nums, int k) {\n        PriorityQueue<Integer> q = new PriorityQueue<Integer>((a, b) -> b - a);\n        for (int num : nums) {\n            q.offer(num);\n        }\n        long ans = 0;\n        for (int i = 0; i < k; ++i) {\n            int x = q.poll();\n            ans += x;\n            q.offer((x + 2) / 3);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.PriorityQueue;\nimport java.util.PriorityQueue;\npublic class maxKelements_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxKelements(new int[]{1, 2, 3}, 2));\n        System.out.println(maxKelements(new int[]{-1, -2, -3}, 3));\n        System.out.println(maxKelements(new int[]{5, 10, 15}, 3));\n        System.out.println(maxKelements(new int[]{0}, 1));\n        System.out.println(maxKelements(new int[]{7, 7, 7}, 2));\n        System.out.println(maxKelements(new int[]{100000, 200000, 300000}, 2));\n        System.out.println(maxKelements(new int[]{1, 0, -1}, 2));\n        System.out.println(maxKelements(new int[]{10}, 0));\n        System.out.println(maxKelements(new int[]{-1, 4, 7, 0}, 4));\n    }\n}"}
{"source_Lan": "java###minimumOneBitOperations_Test.java", "source_code_str": "public static int minimumOneBitOperations(int n) {\n        int ans = 0;\n        int sign = 1;\n        for (int i = 29; i >= 0; --i) {\n            if ((n & (1 << i)) != 0) {\n                ans += sign * ((1 << (i + 1)) - 1);\n                sign = -sign;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.Arrays;\npublic class minimumOneBitOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInputs = {0, 1, 2, 3, 4, 5, 15, 16, 2147483647, 31};\n        \n        for(int n : testInputs) {\n            System.out.println(minimumOneBitOperations(n));\n        }\n    }\n}"}
{"source_Lan": "java###successfulPairs_Test.java", "source_code_str": "public static int[] successfulPairs(int[] spells, int[] potions, long success) {\n        int n = spells.length, m = potions.length;\n        int[] res = new int[n];\n        int[][] idx = new int[n][2];\n        for (int i = 0; i < n; ++i) {\n            idx[i][0] = spells[i];\n            idx[i][1] = i;\n        }\n        Arrays.sort(potions);\n        for (int i = 0, j = m - 1; i < j; ++i, --j) {\n            int temp = potions[i];\n            potions[i] = potions[j];\n            potions[j] = temp;\n        }\n        Arrays.sort(idx, (a, b) -> a[0] - b[0]);\n        for (int i = 0, j = 0; i < n; ++i) {\n            int p = idx[i][1];\n            int v = idx[i][0];\n            while (j < m && (long) potions[j] * v >= success) {\n                ++j;\n            }\n            res[p] = j;\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class successfulPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1\n        int[] result1 = successfulPairs(new int[]{}, new int[]{}, 5);\n        System.out.println(Arrays.toString(result1));\n\n        // Test input 2\n        int[] result2 = successfulPairs(new int[]{10}, new int[]{2}, 15);\n        System.out.println(Arrays.toString(result2));\n\n        // Test input 3\n        int[] result3 = successfulPairs(new int[]{5}, new int[]{4}, 20);\n        System.out.println(Arrays.toString(result3));\n\n        // Test input 4\n        int[] result4 = successfulPairs(new int[]{3, 1, 4}, new int[]{1, 2, 3}, 8);\n        System.out.println(Arrays.toString(result4));\n\n        // Test input 5\n        int[] result5 = successfulPairs(new int[]{0, 0, 0}, new int[]{1, 2, 3}, 0);\n        System.out.println(Arrays.toString(result5));\n\n        // Test input 6\n        int[] result6 = successfulPairs(new int[]{1, 2}, new int[]{1, 2, 3}, 3);\n        System.out.println(Arrays.toString(result6));\n\n        // Test input 7\n        int[] result7 = successfulPairs(new int[]{1000, 2000}, new int[]{1, 1, 1}, 1000);\n        System.out.println(Arrays.toString(result7));\n\n        // Test input 8\n        int[] result8 = successfulPairs(new int[]{1, 2, 3}, new int[]{10, 20, 30}, 50);\n        System.out.println(Arrays.toString(result8));\n\n        // Test input 9\n        int[] result9 = successfulPairs(new int[]{-5, -3}, new int[]{1, 2, 3}, -10);\n        System.out.println(Arrays.toString(result9));\n\n        // Test input 10\n        int[] result10 = successfulPairs(new int[]{1, 2, 3, 4, 5}, new int[]{5, 4, 3, 2, 1}, 10);\n        System.out.println(Arrays.toString(result10));\n    }\n}"}
{"source_Lan": "java###tupleSameProduct_Test.java", "source_code_str": "    public static int tupleSameProduct(int[] nums) {\n        int n = nums.length;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                int key = nums[i] * nums[j];\n                cnt.put(key, cnt.getOrDefault(key, 0) + 1);\n            }\n        }\n        int ans = 0;\n        for (Integer v : cnt.values()) {\n            ans += v * (v - 1) * 4;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class tupleSameProduct_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(tupleSameProduct(new int[]{1})); // Test Input 1\n        System.out.println(tupleSameProduct(new int[]{1, 2})); // Test Input 2\n        System.out.println(tupleSameProduct(new int[]{2, 2, 4})); // Test Input 3\n        System.out.println(tupleSameProduct(new int[]{1, -1, 2, -2})); // Test Input 4\n        System.out.println(tupleSameProduct(new int[]{1, 2, 3, 4, 6})); // Test Input 5\n        System.out.println(tupleSameProduct(new int[]{0, 0, 0})); // Test Input 6\n        System.out.println(tupleSameProduct(new int[]{1, 1, 1, 1})); // Test Input 7\n        System.out.println(tupleSameProduct(new int[]{2, 2, 2, 3, 4, 6})); // Test Input 8\n        System.out.println(tupleSameProduct(new int[]{-1, 1, -1, 1, 1})); // Test Input 9\n        System.out.println(tupleSameProduct(new int[]{3, 3, 6, 6})); // Test Input 10\n    }\n}"}
{"source_Lan": "java###sumOfMultiples_Test.java", "source_code_str": "public static int sumOfMultiples(int n) {\n        int res = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\n                res += i;\n            }\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\n\npublic class sumOfMultiples_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(sumOfMultiples(0));\n        System.out.println(sumOfMultiples(1));\n        System.out.println(sumOfMultiples(3));\n        System.out.println(sumOfMultiples(5));\n        System.out.println(sumOfMultiples(7));\n        System.out.println(sumOfMultiples(10));\n        System.out.println(sumOfMultiples(15));\n        System.out.println(sumOfMultiples(20));\n        System.out.println(sumOfMultiples(30));\n        System.out.println(sumOfMultiples(-5));\n    }\n}"}
{"source_Lan": "java###splitNum_Test.java", "source_code_str": "public static int splitNum(int num) {\n        char[] stnum = Integer.toString(num).toCharArray();\n        Arrays.sort(stnum);\n        int num1 = 0, num2 = 0;\n        for (int i = 0; i < stnum.length; ++i) {\n            if (i % 2 == 0) {\n                num1 = num1 * 10 + (stnum[i] - '0');\n            } else {\n                num2 = num2 * 10 + (stnum[i] - '0');\n            }\n        }\n        return num1 + num2;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class splitNum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(splitNum(0));               // edge case for zero\n        System.out.println(splitNum(5));               // single digit\n        System.out.println(splitNum(12345));           // all distinct digits\n        System.out.println(splitNum(112233));          // repeating digits\n        System.out.println(splitNum(987654321));       // all distinct digits in descending order\n        System.out.println(splitNum(10));              // two digits with zero\n        System.out.println(splitNum(1001));            // leading zeros in formed numbers\n        System.out.println(splitNum(22));              // same digit case\n        System.out.println(splitNum(999));             // large digits, not unique\n        System.out.println(splitNum(2147483647));      // maximum value for a 32-bit integer\n    }\n}"}
{"source_Lan": "java###filterRestaurants_Test.java", "source_code_str": "public static List<Integer> filterRestaurants(int[][] restaurants, int veganFriendly, int maxPrice, int maxDistance) {\n        int n = restaurants.length;\n        List<int[]> filtered = new ArrayList<int[]>();\n        for (int i = 0; i < n; i++) {\n            if (restaurants[i][3] <= maxPrice && restaurants[i][4] <= maxDistance && !(veganFriendly == 1 && restaurants[i][2] == 0)) {\n                filtered.add(restaurants[i]);\n            }\n        }\n        Collections.sort(filtered, (a, b) -> {\n            if (a[1] != b[1]) {\n                return b[1] - a[1];\n            } else {\n                return b[0] - a[0];\n            }\n        });\n        List<Integer> res = new ArrayList<Integer>();\n        for (int[] v : filtered) {\n            res.add(v[0]);\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\npublic class filterRestaurants_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 4, 1, 40, 10}, {2, 3, 0, 50, 5}, {3, 5, 1, 30, 3}, {4, 2, 1, 20, 2}};\n        System.out.println(filterRestaurants(input1, 1, 50, 10));\n        \n        int[][] input2 = {{1, 4, 0, 20, 5}, {2, 3, 1, 30, 10}, {3, 5, 0, 60, 7}, {4, 2, 0, 15, 5}};\n        System.out.println(filterRestaurants(input2, 0, 25, 10));\n        \n        int[][] input3 = {{1, 5, 1, 10, 10}, {2, 3, 1, 20, 5}};\n        System.out.println(filterRestaurants(input3, 1, 15, 10));\n        \n        int[][] input4 = {{1, 4, 1, 30, 5}, {2, 3, 1, 20, 3}, {3, 5, 0, 70, 8}};\n        System.out.println(filterRestaurants(input4, 1, 25, 9));\n        \n        int[][] input5 = {{1, 3, 1, 15, 1}, {2, 4, 1, 40, 20}};\n        System.out.println(filterRestaurants(input5, 1, 50, 25));\n        \n        int[][] input6 = {{1, 1, 0, 90, 100}, {2, 2, 0, 50, 50}};\n        System.out.println(filterRestaurants(input6, 0, 100, 100));\n        \n        int[][] input7 = {{1, 5, 1, 50, 50}, {2, 3, 1, 20, 5}, {3, 4, 1, 20, 5}};\n        System.out.println(filterRestaurants(input7, 1, 50, 50));\n        \n        int[][] input8 = {{1, 5, 0, 40, 40}, {2, 4, 1, 25, 25}, {3, 3, 0, 15, 15}};\n        System.out.println(filterRestaurants(input8, 0, 30, 30));\n        \n        int[][] input9 = {{1, 5, 0, 20, 20}, {2, 1, 0, 100, 100}, {3, 2, 1, 0, 50}};\n        System.out.println(filterRestaurants(input9, 1, 10, 10));\n        \n        int[][] input10 = {};\n        System.out.println(filterRestaurants(input10, 0, 10, 10));\n    }\n}"}
{"source_Lan": "java###minCapability_Test.java", "source_code_str": "public static int minCapability(int[] nums, int k) {\n        int lower = Arrays.stream(nums).min().getAsInt();\n        int upper = Arrays.stream(nums).max().getAsInt();\n        while (lower <= upper) {\n            int middle = (lower + upper) / 2;\n            int count = 0;\n            boolean visited = false;\n            for (int x : nums) {\n                if (x <= middle && !visited) {\n                    count++;\n                    visited = true;\n                } else {\n                    visited = false;\n                }\n            }\n            if (count >= k) {\n                upper = middle - 1;\n            } else {\n                lower = middle + 1;\n            }\n        }\n        return lower;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minCapability_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minCapability(new int[]{1, 2, 3, 4, 5}, 2));\n        System.out.println(minCapability(new int[]{5, 5, 5, 5, 5}, 3));\n        System.out.println(minCapability(new int[]{1, 3, 2, 5, 4}, 1));\n        System.out.println(minCapability(new int[]{10, 20, 30}, 2));\n        System.out.println(minCapability(new int[]{1, 1, 1, 1, 1}, 1));\n        System.out.println(minCapability(new int[]{1, 2, 2, 3}, 2));\n        System.out.println(minCapability(new int[]{7, 1, 5, 2, 3}, 4));\n        System.out.println(minCapability(new int[]{-5, -1, 0, 1, 2}, 3));\n        System.out.println(minCapability(new int[]{10, 9, 8, 7, 6}, 3));\n        System.out.println(minCapability(new int[]{1, 1000000, 500000}, 3));\n    }\n}"}
{"source_Lan": "java###distMoney_Test.java", "source_code_str": "public static int distMoney(int money, int children) {\n        if (money < children) {\n            return -1;\n        }\n        money -= children;\n        int cnt = Math.min(money / 7, children);\n        money -= cnt * 7;\n        children -= cnt;\n        if ((children == 0 && money > 0) || (children == 1 && money == 3)) {\n            cnt--;\n        }\n        return cnt;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class distMoney_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(distMoney(0, 1));   // Expected output: -1\n        System.out.println(distMoney(10, 2));  // Expected output: 1\n        System.out.println(distMoney(20, 3));  // Expected output: 2\n        System.out.println(distMoney(7, 1));   // Expected output: 1\n        System.out.println(distMoney(14, 3));  // Expected output: 2\n        System.out.println(distMoney(3, 1));   // Expected output: -1\n        System.out.println(distMoney(16, 3));  // Expected output: 2\n        System.out.println(distMoney(11, 2));  // Expected output: 1\n        System.out.println(distMoney(18, 5));  // Expected output: 2\n        System.out.println(distMoney(10, 3));  // Expected output: 1\n    }\n}"}
{"source_Lan": "java###queensAttacktheKing_Test.java", "source_code_str": "public static List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {\n        Set<Integer> queenPos = new HashSet<Integer>();\n        for (int[] queen : queens) {\n            int x = queen[0], y = queen[1];\n            queenPos.add(x * 8 + y);\n        }\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        for (int dx = -1; dx <= 1; ++dx) {\n            for (int dy = -1; dy <= 1; ++dy) {\n                if (dx == 0 && dy == 0) {\n                    continue;\n                }\n                int kx = king[0] + dx, ky = king[1] + dy;\n                while (kx >= 0 && kx < 8 && ky >= 0 && ky < 8) {\n                    int pos = kx * 8 + ky;\n                    if (queenPos.contains(pos)) {\n                        List<Integer> posList = new ArrayList<Integer>();\n                        posList.add(kx);\n                        posList.add(ky);\n                        ans.add(posList);\n                        break;\n                    }\n                    kx += dx;\n                    ky += dy;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.*;\npublic class queensAttacktheKing_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] queens1 = {{0, 1}};\n        int[] king1 = {0, 0};\n        System.out.println(queensAttacktheKing(queens1, king1));\n\n        int[][] queens2 = {{1, 0}};\n        int[] king2 = {0, 0};\n        System.out.println(queensAttacktheKing(queens2, king2));\n\n        int[][] queens3 = {{1, 1}};\n        int[] king3 = {0, 0};\n        System.out.println(queensAttacktheKing(queens3, king3));\n\n        int[][] queens4 = {};\n        int[] king4 = {4, 4};\n        System.out.println(queensAttacktheKing(queens4, king4));\n\n        int[][] queens5 = {{2, 2}, {3, 3}, {5, 5}};\n        int[] king5 = {4, 4};\n        System.out.println(queensAttacktheKing(queens5, king5));\n\n        int[][] queens6 = {{0, 7}, {4, 4}, {7, 0}};\n        int[] king6 = {4, 0};\n        System.out.println(queensAttacktheKing(queens6, king6));\n\n        int[][] queens7 = {{5, 5}, {5, 6}, {6, 5}};\n        int[] king7 = {6, 6};\n        System.out.println(queensAttacktheKing(queens7, king7));\n\n        int[][] queens8 = {{3, 3}, {1, 5}, {5, 1}};\n        int[] king8 = {4, 4};\n        System.out.println(queensAttacktheKing(queens8, king8));\n\n        int[][] queens9 = {{6, 0}, {0, 6}};\n        int[] king9 = {4, 4};\n        System.out.println(queensAttacktheKing(queens9, king9));\n\n        int[][] queens10 = {{2, 4}, {3, 0}, {7, 7}};\n        int[] king10 = {4, 4};\n        System.out.println(queensAttacktheKing(queens10, king10));\n    }\n}"}
{"source_Lan": "java###checkValidGrid_Test.java", "source_code_str": "public static boolean checkValidGrid(int[][] grid) {\n        if (grid[0][0] != 0) {\n            return false;\n        }\n        int n = grid.length;\n        int[][] indices = new int[n * n][2];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                indices[grid[i][j]][0] = i;\n                indices[grid[i][j]][1] = j;\n            }\n        }\n        for (int i = 1; i < n * n; i++) {\n            int dx = Math.abs(indices[i][0] - indices[i - 1][0]);\n            int dy = Math.abs(indices[i][1] - indices[i - 1][1]);\n            if (dx * dy != 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class checkValidGrid_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(checkValidGrid(new int[][]{{0}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1}, {2, 3}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1, 2}, {7, 6, 3}, {8, 5, 4}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 2}, {1, 3}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1}, {3, 2}}));\n        System.out.println(checkValidGrid(new int[][]{{0}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1, 2}, {5, 4, 3}, {6, 7, 8}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1, 2}, {3, 5, 4}, {7, 8, 6}}));\n    }\n}"}
{"source_Lan": "java###findTheArrayConcVal_Test.java", "source_code_str": "public static long findTheArrayConcVal(int[] nums) {\n        long ans = 0;\n        for (int i = 0, j = nums.length - 1; i <= j; i++, j--) {\n            if (i != j) {\n                ans += Integer.parseInt(Integer.toString(nums[i]) + Integer.toString(nums[j]));\n            } else {\n                ans += nums[i];\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class findTheArrayConcVal_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findTheArrayConcVal(new int[]{})); // Test input 1: []\n        System.out.println(findTheArrayConcVal(new int[]{5})); // Test input 2: [5]\n        System.out.println(findTheArrayConcVal(new int[]{3, 7})); // Test input 3: [3, 7]\n        System.out.println(findTheArrayConcVal(new int[]{4, 2, 6})); // Test input 4: [4, 2, 6]\n        System.out.println(findTheArrayConcVal(new int[]{2, 4, 8, 1, 3})); // Test input 5: [2, 4, 8, 1, 3]\n        System.out.println(findTheArrayConcVal(new int[]{1, 2, 3, 4, 5, 6, 7})); // Test input 6: [1, 2, 3, 4, 5, 6, 7]\n        System.out.println(findTheArrayConcVal(new int[]{9, 9})); // Test input 7: [9, 9]\n        System.out.println(findTheArrayConcVal(new int[]{10, 20, 30})); // Test input 8: [10, 20, 30]\n        System.out.println(findTheArrayConcVal(new int[]{-1, 0, 1})); // Test input 9: [-1, 0, 1]\n    }\n}"}
{"source_Lan": "java###minTrioDegree_Test.java", "source_code_str": "    public static int minTrioDegree(int n, int[][] edges) {\n        int[][] g = new int[n][n];\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            g[x][y] = g[y][x] = 1;\n            ++degree[x];\n            ++degree[y];\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (g[i][j] == 1) {\n                    for (int k = j + 1; k < n; ++k) {\n                        if (g[i][k] == 1 && g[j][k] == 1) {\n                            ans = Math.min(ans, degree[i] + degree[j] + degree[k] - 6);\n                        }\n                    }\n                }\n            }\n        }\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minTrioDegree_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minTrioDegree(3, new int[][]{{1, 2}, {2, 3}})); // Test Input 1\n        System.out.println(minTrioDegree(4, new int[][]{{1, 2}, {3, 4}})); // Test Input 2\n        System.out.println(minTrioDegree(5, new int[][]{{1, 2}, {2, 3}, {3, 1}, {4, 5}})); // Test Input 3\n        System.out.println(minTrioDegree(5, new int[][]{{1, 2}, {2, 3}, {3, 1}, {1, 4}, {2, 4}, {3, 4}})); // Test Input 4\n        System.out.println(minTrioDegree(6, new int[][]{{1, 2}, {2, 3}, {1, 3}, {4, 5}, {5, 6}, {4, 6}})); // Test Input 5\n        System.out.println(minTrioDegree(5, new int[][]{})); // Test Input 6\n        System.out.println(minTrioDegree(2, new int[][]{{1, 2}})); // Test Input 7\n        System.out.println(minTrioDegree(7, new int[][]{{1, 2}, {1, 3}, {2, 4}, {4, 5}, {1, 6}, {6, 7}, {2, 5}})); // Test Input 8\n        System.out.println(minTrioDegree(6, new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 5}, {2, 6}})); // Test Input 9\n        System.out.println(minTrioDegree(5, new int[][]{{1, 2}, {1, 3}, {2, 3}, {1, 4}, {2, 4}, {4, 5}})); // Test Input 10\n    }\n}"}
{"source_Lan": "java###minimumJumps_Test.java", "source_code_str": "public static int minimumJumps(int[] forbidden, int a, int b, int x) {\n        Queue<int[]> queue = new ArrayDeque<int[]>();\n        Set<Integer> visited = new HashSet<Integer>();\n        queue.offer(new int[]{0, 1, 0});\n        visited.add(0);\n        int lower = 0, upper = Math.max(Arrays.stream(forbidden).max().getAsInt() + a, x) + b;\n        Set<Integer> forbiddenSet = new HashSet<Integer>();\n        for (int position : forbidden) {\n            forbiddenSet.add(position);\n        }\n        while (!queue.isEmpty()) {\n            int[] arr = queue.poll();\n            int position = arr[0], direction = arr[1], step = arr[2];\n            if (position == x) {\n                return step;\n            }\n            int nextPosition = position + a;\n            int nextDirection = 1;\n            if (lower <= nextPosition && nextPosition <= upper && !visited.contains(nextPosition * nextDirection) && !forbiddenSet.contains(nextPosition)) {\n                visited.add(nextPosition * nextDirection);\n                queue.offer(new int[]{nextPosition, nextDirection, step + 1});\n            }\n            if (direction == 1) {\n                nextPosition = position - b;\n                nextDirection = -1;\n                if (lower <= nextPosition && nextPosition <= upper && !visited.contains(nextPosition * nextDirection) && !forbiddenSet.contains(nextPosition)) {\n                    visited.add(nextPosition * nextDirection);\n                    queue.offer(new int[]{nextPosition, nextDirection, step + 1});\n                }\n            }\n        }\n        return -1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.*;\npublic class minimumJumps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumJumps(new int[]{1, 2}, 1, 2, 5)); // Test input 2\n        System.out.println(minimumJumps(new int[]{4}, 4, 1, 8)); // Test input 3\n        System.out.println(minimumJumps(new int[]{2, 4, 6}, 2, 3, 5)); // Test input 4\n        System.out.println(minimumJumps(new int[]{0, 1}, 1, 2, 5)); // Test input 5\n        System.out.println(minimumJumps(new int[]{1, 3, 5, 7}, 3, 1, 10)); // Test input 6\n        System.out.println(minimumJumps(new int[]{5, 10}, 2, 3, 11)); // Test input 7\n        System.out.println(minimumJumps(new int[]{1, 4, 7}, 3, 2, 5)); // Test input 8\n        System.out.println(minimumJumps(new int[]{0, 2, 3}, 1, 1, 3)); // Test input 9\n        System.out.println(minimumJumps(new int[]{5}, 5, 5, 10)); // Test input 10\n    }\n}"}
{"source_Lan": "java###countPairs_Test.java", "source_code_str": "public static int[] countPairs(int n, int[][] edges, int[] queries) {\n        int[] degree = new int[n];\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            if (x > y) {\n                int temp = x;\n                x = y;\n                y = temp;\n            }\n            degree[x]++;\n            degree[y]++;\n            cnt.put(x * n + y, cnt.getOrDefault(x * n + y, 0) + 1);\n        }\n        int[] arr = Arrays.copyOf(degree, n);\n        int[] ans = new int[queries.length];\n        Arrays.sort(arr);\n        for (int k = 0; k < queries.length; k++) {\n            int bound = queries[k], total = 0;\n            for (int i = 0, j = n - 1; i < n; i++) {\n                while (j > i && arr[i] + arr[j] > bound) {\n                    j--;\n                }\n                total += n - 1 - Math.max(i, j);\n            }\n            for (Map.Entry<Integer, Integer> entry : cnt.entrySet()) {\n                int val = entry.getKey(), freq = entry.getValue();\n                int x = val / n, y = val % n;\n                if (degree[x] + degree[y] > bound && degree[x] + degree[y] - freq <= bound) {\n                    total--;\n                }\n            }\n            ans[k] = total;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class countPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Inputs\n        int n1 = 1, n2 = 2, n3 = 3, n4 = 4, n5 = 5, n6 = 5, n7 = 5, n8 = 4, n9 = 6, n10 = 6;\n        int[][] edges1 = {};\n        int[][] edges2 = {{1, 2}};\n        int[][] edges3 = {{1, 2}, {2, 3}};\n        int[][] edges4 = {{1, 2}, {2, 3}, {3, 4}};\n        int[][] edges5 = {{1, 2}, {1, 3}, {2, 4}, {3, 5}};\n        int[][] edges6 = {{1, 2}, {2, 3}, {3, 4}, {1, 4}, {4, 5}};\n        int[][] edges7 = {{1, 2}, {2, 3}, {3, 4}, {3, 5}};\n        int[][] edges8 = {{1, 2}, {1, 3}, {2, 3}, {2, 4}};\n        int[][] edges9 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {1, 6}};\n        int[][] edges10 = {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}};\n        \n        int[] queries1 = {0};\n        int[] queries2 = {1};\n        int[] queries3 = {2};\n        int[] queries4 = {3};\n        int[] queries5 = {4};\n        int[] queries6 = {5};\n        int[] queries7 = {6};\n        int[] queries8 = {4};\n        int[] queries9 = {5};\n        int[] queries10 = {10};\n        \n        // Execute test cases\n        System.out.println(Arrays.toString(countPairs(n1, edges1, queries1)));\n        System.out.println(Arrays.toString(countPairs(n2, edges2, queries2)));\n        System.out.println(Arrays.toString(countPairs(n3, edges3, queries3)));\n        System.out.println(Arrays.toString(countPairs(n4, edges4, queries4)));\n        System.out.println(Arrays.toString(countPairs(n5, edges5, queries5)));\n        System.out.println(Arrays.toString(countPairs(n6, edges6, queries6)));\n        System.out.println(Arrays.toString(countPairs(n7, edges7, queries7)));\n        System.out.println(Arrays.toString(countPairs(n8, edges8, queries8)));\n        System.out.println(Arrays.toString(countPairs(n9, edges9, queries9)));\n        System.out.println(Arrays.toString(countPairs(n10, edges10, queries10)));\n    }\n}"}
{"source_Lan": "java###captureForts_Test.java", "source_code_str": "public static int captureForts(int[] forts) {\n        int n = forts.length;\n        int ans = 0, pre = -1;\n        for (int i = 0; i < n; i++) {\n            if (forts[i] == 1 || forts[i] == -1) {\n                if (pre >= 0 && forts[i] != forts[pre]) {\n                    ans = Math.max(ans, i - pre - 1);\n                }\n                pre = i;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class captureForts_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(captureForts(new int[]{}));  // No forts\n        System.out.println(captureForts(new int[]{0, 0, 0, 0}));  // All empty\n        System.out.println(captureForts(new int[]{1}));  // Single occupied fort\n        System.out.println(captureForts(new int[]{1, 0, -1}));  // Two different sides with one empty between\n        System.out.println(captureForts(new int[]{0, 1, 0, -1}));  // One empty between occupied\n        System.out.println(captureForts(new int[]{1, 0, 0, 0, -1}));  // Valid pair with multiple spaces in between\n        System.out.println(captureForts(new int[]{1, -1}));  // Adjacent different occupied forts\n        System.out.println(captureForts(new int[]{1, 0, 0, -1, 0, 0, 1}));  // Multiple valid pairs with different sizes of empty forts\n        System.out.println(captureForts(new int[]{1, 0, 0, 0}));  // Only one side occupied at the start\n        System.out.println(captureForts(new int[]{-1, -1, -1}));  // All occupied by the same side\n    }\n}"}
{"source_Lan": "java###ways_Test.java", "source_code_str": "public static int ways(String[] pizza, int k) {\n        int m = pizza.length, n = pizza[0].length(), mod = 1_000_000_007;\n        int[][] apples = new int[m + 1][n + 1];\n        int[][][] dp = new int[k + 1][m + 1][n + 1];\n        \n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                apples[i][j] = apples[i][j + 1] + apples[i + 1][j] - apples[i + 1][j + 1] + (pizza[i].charAt(j) == 'A' ? 1 : 0);\n                dp[1][i][j] = apples[i][j] > 0 ? 1 : 0;\n            }\n        }\n        for (int ki = 2; ki <= k; ki++) {\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    \n                    for (int i2 = i + 1; i2 < m; i2++) {\n                        if (apples[i][j] > apples[i2][j]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i2][j]) % mod;\n                        }\n                    }\n                    \n                    for (int j2 = j + 1; j2 < n; j2++) {\n                        if (apples[i][j] > apples[i][j2]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i][j2]) % mod;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[k][0][0];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class ways_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(ways(new String[]{\"A\"}, 1));\n        System.out.println(ways(new String[]{\"AAA\", \"AAA\"}, 1));\n        System.out.println(ways(new String[]{\"AA\", \"AA\"}, 2));\n        System.out.println(ways(new String[]{\"AA\", \"AA\"}, 3));\n        System.out.println(ways(new String[]{\"A\", \"A\"}, 2));\n        System.out.println(ways(new String[]{\"AB\", \"AA\", \"AA\"}, 2));\n        System.out.println(ways(new String[]{\"A\", \"B\"}, 1));\n        System.out.println(ways(new String[]{\"A\"}, 1));\n        System.out.println(ways(new String[]{\"AAA\", \"BBB\", \"AAA\"}, 2));\n    }\n}"}
{"source_Lan": "java###findReplaceString_Test.java", "source_code_str": "public static String findReplaceString(String s, int[] indices, String[] sources, String[] targets) {\n        int n = s.length(), m = indices.length;\n        List<Integer> ops = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            ops.add(i);\n        }\n        ops.sort((i, j) -> indices[i] - indices[j]);\n        StringBuilder ans = new StringBuilder();\n        int pt = 0;\n        for (int i = 0; i < n;) {\n            while (pt < m && indices[ops.get(pt)] < i) {\n                pt++;\n            }\n            boolean succeed = false;\n            while (pt < m && indices[ops.get(pt)] == i) {\n                if (s.substring(i, Math.min(i + sources[ops.get(pt)].length(), n)).equals(sources[ops.get(pt)])) {\n                    succeed = true;\n                    break;\n                }\n                pt++;\n            }\n            if (succeed) {\n                ans.append(targets[ops.get(pt)]);\n                i += sources[ops.get(pt)].length();\n            } else {\n                ans.append(s.charAt(i));\n                i++;\n            }\n        }\n        return ans.toString();\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class findReplaceString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findReplaceString(\"abcd\", new int[]{0}, new String[]{\"a\"}, new String[]{\"x\"}));\n        System.out.println(findReplaceString(\"hello world\", new int[]{6}, new String[]{\"world\"}, new String[]{\"universe\"}));\n        System.out.println(findReplaceString(\"test input\", new int[]{0, 5}, new String[]{\"test\", \"input\"}, new String[]{\"exam\", \"data\"}));\n        System.out.println(findReplaceString(\"replace a b c\", new int[]{8, 0}, new String[]{\"a\", \"replace\"}, new String[]{\"x\", \"y\"}));\n        System.out.println(findReplaceString(\"banana\", new int[]{0, 2}, new String[]{\"ba\", \"na\"}, new String[]{\"xy\", \"zz\"}));\n        System.out.println(findReplaceString(\"abcd\", new int[]{0, 1, 2}, new String[]{\"a\", \"b\", \"c\"}, new String[]{\"1\", \"2\", \"3\"}));\n        System.out.println(findReplaceString(\"abcabc\", new int[]{0, 3}, new String[]{\"abc\", \"abc\"}, new String[]{\"xyz\", \"123\"}));\n        System.out.println(findReplaceString(\"abcabc\", new int[]{0}, new String[]{\"ab\"}, new String[]{\"XY\"}));\n        System.out.println(findReplaceString(\"testing\", new int[]{0, 4}, new String[]{\"test\", \"ing\"}, new String[]{\"done\", \"complete\"}));\n        System.out.println(findReplaceString(\"matrix\", new int[]{0, 1}, new String[]{\"m\", \"at\"}, new String[]{\"M\", \"A\"}));\n    }\n}"}
{"source_Lan": "java###circularGameLosers_Test.java", "source_code_str": "public static int[] circularGameLosers(int n, int k) {\n        boolean[] visit = new boolean[n];\n        for (int i = k, j = 0; !visit[j]; i += k) {\n            visit[j] = true;\n            j = (j + i) % n;\n        }\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (!visit[i]) {\n                list.add(i + 1);\n            }\n        }\n        int[] ans = new int[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n            ans[i] = list.get(i);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class circularGameLosers_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] result1 = circularGameLosers(1, 1);\n        System.out.println(java.util.Arrays.toString(result1));\n\n        int[] result2 = circularGameLosers(5, 1);\n        System.out.println(java.util.Arrays.toString(result2));\n\n        int[] result3 = circularGameLosers(5, 2);\n        System.out.println(java.util.Arrays.toString(result3));\n\n        int[] result4 = circularGameLosers(10, 3);\n        System.out.println(java.util.Arrays.toString(result4));\n\n        int[] result5 = circularGameLosers(6, 6);\n        System.out.println(java.util.Arrays.toString(result5));\n\n        int[] result6 = circularGameLosers(10, 10);\n        System.out.println(java.util.Arrays.toString(result6));\n\n        int[] result7 = circularGameLosers(3, 2);\n        System.out.println(java.util.Arrays.toString(result7));\n\n        int[] result8 = circularGameLosers(4, 5);\n        System.out.println(java.util.Arrays.toString(result8));\n\n\n        int[] result10 = circularGameLosers(7, 3);\n        System.out.println(java.util.Arrays.toString(result10));\n    }\n}"}
{"source_Lan": "java###maxScore_Test.java", "source_code_str": "public static int maxScore(List<List<Integer>> grid) {\n        int m = grid.size(), n = grid.get(0).size();\n        int[][] prerow = new int[m][n];\n        int[][] precol = new int[m][n];\n        int[][] f = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            Arrays.fill(f[i], Integer.MIN_VALUE);\n        }\n        int ans = Integer.MIN_VALUE;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i > 0) {\n                    f[i][j] = Math.max(f[i][j], grid.get(i).get(j) + precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    f[i][j] = Math.max(f[i][j], grid.get(i).get(j) + prerow[i][j - 1]);\n                }\n                ans = Math.max(ans, f[i][j]);\n                prerow[i][j] = precol[i][j] = Math.max(f[i][j], 0) - grid.get(i).get(j);\n                if (i > 0) {\n                    precol[i][j] = Math.max(precol[i][j], precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    prerow[i][j] = Math.max(prerow[i][j], prerow[i][j - 1]);\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class maxScore_Test {\n// TOFILL\n    public static void main(String[] args) {\n        List<List<Integer>> input1 = new ArrayList<>(Arrays.asList(Arrays.asList(0)));\n        List<List<Integer>> input2 = new ArrayList<>(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)));\n        List<List<Integer>> input3 = new ArrayList<>(Arrays.asList(Arrays.asList(5, -2), Arrays.asList(-1, 6)));\n        List<List<Integer>> input4 = new ArrayList<>(Arrays.asList(Arrays.asList(-1, -1), Arrays.asList(-1, -1)));\n        List<List<Integer>> input5 = new ArrayList<>(Arrays.asList(Arrays.asList(10)));\n        List<List<Integer>> input6 = new ArrayList<>(Arrays.asList(Arrays.asList(1), Arrays.asList(2), Arrays.asList(3)));\n        List<List<Integer>> input7 = new ArrayList<>(Arrays.asList(Arrays.asList(3, 1, 2), Arrays.asList(4, -1, 5), Arrays.asList(1, 2, 3)));\n        List<List<Integer>> input8 = new ArrayList<>(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(-1, -2), Arrays.asList(3, 4)));\n        List<List<Integer>> input9 = new ArrayList<>(Arrays.asList(Arrays.asList(10, 20, 30), Arrays.asList(1, 2, 1), Arrays.asList(5, 10, 15)));\n        \n        System.out.println(maxScore(input1)); // Output: 0\n        System.out.println(maxScore(input2)); // Output: 10\n        System.out.println(maxScore(input3)); // Output: 11\n        System.out.println(maxScore(input4)); // Output: -1\n        System.out.println(maxScore(input5)); // Output: 10\n        System.out.println(maxScore(input6)); // Output: 6\n        System.out.println(maxScore(input7)); // Output: 14\n        System.out.println(maxScore(input8)); // Output: 9\n        System.out.println(maxScore(input9)); // Output: 65\n    }\n}"}
{"source_Lan": "java###leftmostBuildingQueries_Test.java", "source_code_str": "public static int[] leftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.length;\n        int m = queries.length;\n        List<int[]>[] query = new List[n];\n        for (int i = 0; i < n; i++) {\n            query[i] = new ArrayList<int[]>();\n        }\n        int[] ans = new int[m];\n        List<Integer> st = new ArrayList<Integer>();\n        for (int i = 0; i < m; i++) {\n            int a = queries[i][0];\n            int b = queries[i][1];\n            if (a > b) {\n                int temp = a;\n                a = b;\n                b = temp;\n            }\n            if (a == b || heights[a] < heights[b]) {\n                ans[i] = b;\n                continue;\n            }\n            query[b].add(new int[]{i, heights[a]});\n        }\n        int top = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j < query[i].size(); j++) {\n                int q = query[i].get(j)[0];\n                int val = query[i].get(j)[1];\n                if (top == -1 || heights[st.get(0)] <= val) {\n                    ans[q] = -1;\n                    continue;\n                }\n                int l = 0, r = top;\n                while (l <= r) {\n                    int mid = (l + r) >> 1;\n                    if (heights[st.get(mid)] > val) {\n                        l = mid + 1;\n                    } else {\n                        r = mid - 1;\n                    }\n                }\n                ans[q] = st.get(r);\n            }\n            while (top >= 0 && heights[st.get(top)] <= heights[i]) {\n                st.remove(st.size() - 1);\n                top--;\n            }\n            st.add(i);\n            top++;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class leftmostBuildingQueries_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] heights1 = {3, 5, 2, 8, 4};\n        int[][] queries1 = {{0, 1}, {1, 3}, {2, 4}, {4, 0}, {1, 1}};\n        int[] result1 = leftmostBuildingQueries(heights1, queries1);\n        for(int res : result1) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n        \n        int[] heights2 = {1, 2, 3, 4};\n        int[][] queries2 = {{0, 3}, {3, 0}, {1, 2}, {2, 2}, {0, 0}};\n        int[] result2 = leftmostBuildingQueries(heights2, queries2);\n        for(int res : result2) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights3 = {5, 1, 4, 2};\n        int[][] queries3 = {{2, 3}, {3, 2}, {0, 1}, {1, 0}, {1, 3}};\n        int[] result3 = leftmostBuildingQueries(heights3, queries3);\n        for(int res : result3) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights4 = {10, 20, 5, 15};\n        int[][] queries4 = {{0, 3}, {3, 2}, {2, 1}, {1, 0}, {0, 0}};\n        int[] result4 = leftmostBuildingQueries(heights4, queries4);\n        for(int res : result4) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights5 = {1};\n        int[][] queries5 = {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};\n        int[] result5 = leftmostBuildingQueries(heights5, queries5);\n        for(int res : result5) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights6 = {4, 2, 5, 3, 1};\n        int[][] queries6 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {0, 4}};\n        int[] result6 = leftmostBuildingQueries(heights6, queries6);\n        for(int res : result6) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights7 = {7, 6, 5, 4, 3, 2, 1};\n        int[][] queries7 = {{0, 6}, {1, 5}, {2, 4}, {3, 3}, {6, 0}};\n        int[] result7 = leftmostBuildingQueries(heights7, queries7);\n        for(int res : result7) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights8 = {0, 0, 0};\n        int[][] queries8 = {{0, 1}, {1, 2}, {2, 0}, {0, 0}, {1, 1}};\n        int[] result8 = leftmostBuildingQueries(heights8, queries8);\n        for(int res : result8) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights9 = {6, 3, 8, 2, 7};\n        int[][] queries9 = {{0, 2}, {0, 3}, {2, 4}, {3, 1}, {1, 0}};\n        int[] result9 = leftmostBuildingQueries(heights9, queries9);\n        for(int res : result9) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights10 = {10, 9, 10, 10};\n        int[][] queries10 = {{0, 1}, {1, 2}, {2, 3}, {3, 0}, {1, 1}};\n        int[] result10 = leftmostBuildingQueries(heights10, queries10);\n        for(int res : result10) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n    }\n}"}
{"source_Lan": "java###shortestDistanceAfterQueries_Test.java", "source_code_str": "public static int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        List<Integer>[] from = new ArrayList[n];\n        Arrays.setAll(from, i -> new ArrayList<>());\n        int[] f = new int[n];\n        for (int i = 1; i < n; i++) {\n            f[i] = i;\n        }\n        int[] ans = new int[queries.length];\n        for (int qi = 0; qi < queries.length; qi++) {\n            int l = queries[qi][0];\n            int r = queries[qi][1];\n            from[r].add(l);\n            if (f[l] + 1 < f[r]) {\n                f[r] = f[l] + 1;\n                for (int i = r + 1; i < n; i++) {\n                    f[i] = Math.min(f[i], f[i - 1] + 1);\n                    for (int j : from[i]) {\n                        f[i] = Math.min(f[i], f[j] + 1);\n                    }\n                }\n            }\n            ans[qi] = f[n - 1];\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class shortestDistanceAfterQueries_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(1, new int[][]{{0, 0}}))); // Minimal case\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(2, new int[][]{{0, 1}}))); // Simple connection\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(3, new int[][]{{0, 1}, {1, 2}}))); // Sequential connections\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(4, new int[][]{{0, 2}, {1, 3}, {2, 3}}))); // Overlapping ranges\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(5, new int[][]{{0, 1}, {1, 4}, {3, 4}}))); // Mixed connections\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(5, new int[][]{{0, 4}, {0, 3}, {2, 4}}))); // Wide-ranging connections\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(6, new int[][]{{0, 1}, {4, 5}, {2, 5}, {3, 4}}))); // Different endpoints\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(10, new int[][]{{0, 5}, {2, 8}, {5, 9}}))); // Larger size with non-sequential\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(10, new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}}))); // Chained connections\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(10, new int[][]{{0, 1}, {1, 1}, {1, 8}, {4, 5}}))); // Multiple same and different connections\n    }\n}"}
{"source_Lan": "java###minFlips_Test.java", "source_code_str": "    public static int minFlips(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int diffRow = 0;\n        for (int[] row : grid) {\n            for (int j = 0; j < n / 2; j++) {\n                if (row[j] != row[n - 1 - j]) {\n                    diffRow++;\n                }\n            }\n        }\n        int diffCol = 0;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][j] != grid[m - 1 - i][j]) {\n                    diffCol++;\n                }\n            }\n        }\n        return Math.min(diffRow, diffCol);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minFlips_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{0}}; \n        int[][] input2 = {{0, 0}, {0, 0}}; \n        int[][] input3 = {{0, 1}, {1, 0}}; \n        int[][] input4 = {{1, 1, 1}, {1, 0, 1}, {1, 1, 1}}; \n        int[][] input5 = {{1, 0}, {1, 0}, {0, 1}}; \n        int[][] input6 = {{1, 0, 1}, {0, 1, 0}, {1, 0, 1}}; \n        int[][] input7 = {{1, 1}, {1, 0}, {0, 0}}; \n        int[][] input8 = {{0, 0, 1, 1}, {1, 1, 0, 0}, {0, 1, 0, 1}}; \n        int[][] input9 = {{1, 0}, {0, 1}, {1, 0}, {0, 1}}; \n        int[][] input10 = {{0, 1, 0}, {1, 0, 1}, {0, 1, 0}}; \n        \n        System.out.println(minFlips(input1)); // Expected output: 0\n        System.out.println(minFlips(input2)); // Expected output: 0\n        System.out.println(minFlips(input3)); // Expected output: 1\n        System.out.println(minFlips(input4)); // Expected output: 1\n        System.out.println(minFlips(input5)); // Expected output: 2\n        System.out.println(minFlips(input6)); // Expected output: 0\n        System.out.println(minFlips(input7)); // Expected output: 1\n        System.out.println(minFlips(input8)); // Expected output: 2\n        System.out.println(minFlips(input9)); // Expected output: 0\n        System.out.println(minFlips(input10)); // Expected output: 0\n    }\n}"}
{"source_Lan": "java###canAliceWin_Test.java", "source_code_str": "public static boolean canAliceWin(int[] nums) {\n        int s = 0;\n        for (int x : nums) {\n            s += x < 10 ? x : -x;\n        }\n        return s != 0;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class canAliceWin_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(canAliceWin(new int[]{0})); // Test Input 1\n        System.out.println(canAliceWin(new int[]{8, 1})); // Test Input 2\n        System.out.println(canAliceWin(new int[]{10, 20})); // Test Input 3\n        System.out.println(canAliceWin(new int[]{5, 15, 3})); // Test Input 4\n        System.out.println(canAliceWin(new int[]{8, 2, 2, 10})); // Test Input 5\n        System.out.println(canAliceWin(new int[]{})); // Test Input 6\n        System.out.println(canAliceWin(new int[]{10})); // Test Input 7\n        System.out.println(canAliceWin(new int[]{5, 5, 5, 5})); // Test Input 8\n        System.out.println(canAliceWin(new int[]{10, 10, 10})); // Test Input 9\n        System.out.println(canAliceWin(new int[]{1, 9, 20, 5})); // Test Input 10\n    }\n}"}
{"source_Lan": "java###numberOfSubstrings_Test.java", "source_code_str": "public static int numberOfSubstrings(String S) {\n        char[] s = S.toCharArray();\n        int n = s.length;\n        int m = 0;\n        int[] a = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                a[m++] = i;\n            }\n        }\n        int tot1 = n - m;\n        a[m] = n; \n        int ans = 0;\n        int i = 0; \n        for (int left = 0; left < n; left++) {\n            if (s[left] == '1') {\n                ans += a[i] - left; \n            }\n            for (int k = i; k < m; k++) {\n                int cnt0 = k - i + 1;\n                if (cnt0 * cnt0 > tot1) {\n                    break;\n                }\n                int cnt1 = a[k] - left - (k - i);\n                ans += Math.max(a[k + 1] - a[k] - Math.max(cnt0 * cnt0 - cnt1, 0), 0);\n            }\n            if (s[left] == '0') {\n                i++; \n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class numberOfSubstrings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(numberOfSubstrings(\"\"));               // Edge case: empty string\n        System.out.println(numberOfSubstrings(\"0\"));              // Single character: just '0'\n        System.out.println(numberOfSubstrings(\"1\"));              // Single character: just '1'\n        System.out.println(numberOfSubstrings(\"0000\"));           // All '0's\n        System.out.println(numberOfSubstrings(\"1111\"));           // All '1's\n        System.out.println(numberOfSubstrings(\"010101\"));         // Alternating pattern\n        System.out.println(numberOfSubstrings(\"00001111\"));       // Segregated groups of '0's and '1's\n        System.out.println(numberOfSubstrings(\"11110000\"));       // Another segregated groups\n        System.out.println(numberOfSubstrings(\"10101010\"));       // Equal number of '0's and '1's, alternating\n        System.out.println(numberOfSubstrings(\"0110101110\"));     // A complex example with mixed characters\n    }\n}"}
{"source_Lan": "java###minSwaps_Test.java", "source_code_str": "public static int minSwaps(String S) {\n        int evenSum = 0, oddSum = 0;\n        int n = S.length();\n        \n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 1)\n                oddSum += (S.charAt(i) == '1') ? 1 : 0;\n            else\n                evenSum += (S.charAt(i) == '1') ? 1 : 0;\n        }\n        \n        int difference = Math.abs(oddSum - evenSum);\n        \n        if (difference % 2 == 1) return -1;\n        \n        return difference / 2;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minSwaps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minSwaps(\"1010\"));     // Expected output: 0\n        System.out.println(minSwaps(\"1100\"));     // Expected output: 1\n        System.out.println(minSwaps(\"0000\"));     // Expected output: 0\n        System.out.println(minSwaps(\"1111\"));     // Expected output: 2\n        System.out.println(minSwaps(\"0101\"));     // Expected output: 0\n        System.out.println(minSwaps(\"0110\"));     // Expected output: 1\n        System.out.println(minSwaps(\"1001\"));     // Expected output: 1\n        System.out.println(minSwaps(\"111000\"));   // Expected output: 1\n        System.out.println(minSwaps(\"000111\"));   // Expected output: -1\n        System.out.println(minSwaps(\"10101\"));    // Expected output: 0\n    }\n}"}
{"source_Lan": "java###countUniques_Test.java", "source_code_str": "public static int countUniques(int[] a, int k, int l, int r) {\n        Set<Integer> set = new HashSet<>();\n        int dup = 0;\n        for(int i : a) if(!set.add(i)) dup++;\n        int unique = set.size();\n        for(int i = l ; i <= r ; i++)\n            if(k>0 && dup>0 && !set.contains(i)){\n                unique++; k--; dup--;\n            }\n        return unique;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class countUniques_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countUniques(new int[]{}, 2, 1, 5)); // Test input 1\n        System.out.println(countUniques(new int[]{1, 2, 3}, 2, 4, 6)); // Test input 2\n        System.out.println(countUniques(new int[]{1, 2, 2, 2}, 1, 1, 5)); // Test input 3\n        System.out.println(countUniques(new int[]{5, 5, 5}, 0, 1, 3)); // Test input 4\n        System.out.println(countUniques(new int[]{3, 3, 3, 3}, 2, 4, 4)); // Test input 5\n        System.out.println(countUniques(new int[]{7, 8, 9}, 1, 1, 10)); // Test input 6\n        System.out.println(countUniques(new int[]{4, 4, 4, 4}, 3, -1, 2)); // Test input 7\n        System.out.println(countUniques(new int[]{1, 2, 3, 4, 5}, 0, 1, 5)); // Test input 8\n        System.out.println(countUniques(new int[]{10, 10, 10}, 5, 11, 15)); // Test input 9\n        System.out.println(countUniques(new int[]{1, 2, 3, 3, 4}, 1, 1, 4)); // Test input 10\n    }\n}"}
{"source_Lan": "java###maxLength_Test.java", "source_code_str": "public static int maxLength(int N, int[] arr) {\n        int ans = 0;\n        for(int i = 0 ; i < N; i++){\n            int or = 0;\n            for(int j = i ; j < N; j++){\n                or = or | arr[j];\n                int x = Integer.bitCount(or);\n                if(x == Integer.toBinaryString(or).length()){\n                    ans = Math.max(ans , j - i + 1);\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class maxLength_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxLength(0, new int[]{}));\n        System.out.println(maxLength(1, new int[]{1}));\n        System.out.println(maxLength(5, new int[]{2, 2, 2, 2, 2}));\n        System.out.println(maxLength(4, new int[]{1, 2, 4, 8}));\n        System.out.println(maxLength(6, new int[]{1, 1, 2, 3, 5, 8}));\n        System.out.println(maxLength(3, new int[]{15, 14, 13}));\n        System.out.println(maxLength(3, new int[]{1, 3, 2}));\n        System.out.println(maxLength(5, new int[]{1, 2, 3, 4, 5}));\n        System.out.println(maxLength(5, new int[]{7, 7, 7, 1, 2}));\n        System.out.println(maxLength(4, new int[]{9, 6, 3, 15}));\n    }\n}"}
{"source_Lan": "java###firstWord_Test.java", "source_code_str": "public static String firstWord(int n, String[] dictionary) {\n        \n        Arrays.sort(dictionary);\n        Set<String> seenWords = new HashSet<>();\n        for (String word : dictionary) {\n            if (seenWords.contains(word)) {\n                return \"Invalid\";\n            }\n            seenWords.add(word);\n        }\n        return dictionary[0];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class firstWord_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(firstWord(1, new String[]{\"apple\"}));\n        System.out.println(firstWord(3, new String[]{\"banana\", \"apple\", \"cherry\"}));\n        System.out.println(firstWord(4, new String[]{\"banana\", \"apple\", \"apple\", \"cherry\"}));\n        System.out.println(firstWord(5, new String[]{\"cat\", \"bat\", \"rat\", \"ant\", \"dog\"}));\n        System.out.println(firstWord(2, new String[]{\"hello\", \"hi\"}));\n        System.out.println(firstWord(6, new String[]{\"zebra\", \"elephant\", \"ant\", \"lion\", \"tiger\", \"monkey\"}));\n        System.out.println(firstWord(3, new String[]{\"zebra\", \"ant\", \"ant\"}));\n        System.out.println(firstWord(4, new String[]{\"hello\", \"world\", \"hello\", \"java\"}));\n        System.out.println(firstWord(7, new String[]{\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abc\", \"abcde\"}));\n    }\n}"}
{"source_Lan": "java###longestSubarray_Test.java", "source_code_str": "public static int longestSubarray(int n, int[] arr) {\n        int ans = -1;\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                count++;\n                sum += arr[j];\n                if (count == sum) {\n                    ans = Math.max(ans, count);\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class longestSubarray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(longestSubarray(4, new int[]{1, 2, 3, 0})); // Expected output: 3\n        System.out.println(longestSubarray(5, new int[]{1, 1, 1, 1, 4})); // Expected output: 4\n        System.out.println(longestSubarray(3, new int[]{0, 0, 0})); // Expected output: 1\n        System.out.println(longestSubarray(5, new int[]{1, 1, 1, 1, 1})); // Expected output: 3\n        System.out.println(longestSubarray(6, new int[]{1, 0, 1, 2, 3, 4})); // Expected output: 3\n        System.out.println(longestSubarray(5, new int[]{2, 2, 2, 2, 2})); // Expected output: -1\n        System.out.println(longestSubarray(0, new int[]{})); // Expected output: -1\n        System.out.println(longestSubarray(2, new int[]{4, 5})); // Expected output: -1\n        System.out.println(longestSubarray(3, new int[]{-1, -2, -3})); // Expected output: -1\n        System.out.println(longestSubarray(1, new int[]{1})); // Expected output: 1\n    }\n}"}
{"source_Lan": "java###reachAlice_Test.java", "source_code_str": "public static String reachAlice(int d, int x, int y, int k) {\n        int p = d / x;\n        int q = d / y;\n        q += k;\n        return (p <= q) ? \"Walk\" : \"Bike\";\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\n\npublic class reachAlice_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(reachAlice(0, 1, 1, 0));    // Expected output: \"Walk\"\n        System.out.println(reachAlice(10, 2, 5, 1));    // Expected output: \"Walk\"\n        System.out.println(reachAlice(10, 5, 2, 0));    // Expected output: \"Bike\"\n        System.out.println(reachAlice(15, 3, 3, 0));    // Expected output: \"Walk\"\n        System.out.println(reachAlice(20, 1, 1, 20));   // Expected output: \"Bike\"\n        System.out.println(reachAlice(20, 4, 5, 0));    // Expected output: \"Walk\"\n        System.out.println(reachAlice(100, 10, 5, 10)); // Expected output: \"Bike\"\n        System.out.println(reachAlice(50, 5, 10, 5));   // Expected output: \"Walk\"\n        System.out.println(reachAlice(30, 3, 1, 0));    // Expected output: \"Bike\"\n    }\n}"}
{"source_Lan": "java###removeOrder_Test.java", "source_code_str": "public static int[] removeOrder(int n, int[] arr, String str) {\n        Arrays.sort(arr);\n        int i = 0, j = n - 1;\n        int[] ans = new int[n];\n        int idx = 0;\n        for (char ch : str.toCharArray()) {\n            if (ch == '0')\n                ans[idx++] = arr[i++];\n            else\n                ans[idx++] = arr[j--];\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class removeOrder_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] result1 = removeOrder(3, new int[]{3, 1, 2}, \"001\");\n        System.out.println(Arrays.toString(result1)); // Expected output: [1, 2, 3]\n        \n        int[] result2 = removeOrder(4, new int[]{10, 20, 30, 40}, \"0101\");\n        System.out.println(Arrays.toString(result2)); // Expected output: [20, 30, 10, 40]\n        \n        int[] result3 = removeOrder(5, new int[]{-10, -20, 0, 20, 10}, \"00000\");\n        System.out.println(Arrays.toString(result3)); // Expected output: [-20, -10, 0, 10, 20]\n        \n        int[] result4 = removeOrder(5, new int[]{-5, -1, 1, 2, 3}, \"11111\");\n        System.out.println(Arrays.toString(result4)); // Expected output: [3, 2, 1, -1, -5]\n        \n        int[] result5 = removeOrder(6, new int[]{5, 3, 8, 6, 2, 4}, \"001101\");\n        System.out.println(Arrays.toString(result5)); // Expected output: [2, 3, 4, 8, 6, 5]\n        \n        int[] result6 = removeOrder(1, new int[]{42}, \"0\");\n        System.out.println(Arrays.toString(result6)); // Expected output: [42]\n        \n        int[] result7 = removeOrder(2, new int[]{1, 100}, \"10\");\n        System.out.println(Arrays.toString(result7)); // Expected output: [100, 1]\n        \n        int[] result8 = removeOrder(4, new int[]{50, 30, 20, 10}, \"1110\");\n        System.out.println(Arrays.toString(result8)); // Expected output: [30, 20, 10, 50]\n        \n        int[] result9 = removeOrder(0, new int[]{}, \"\");\n        System.out.println(Arrays.toString(result9)); // Expected output: []\n        \n        int[] result10 = removeOrder(3, new int[]{-100, -50, -200}, \"010\");\n        System.out.println(Arrays.toString(result10)); // Expected output: [-100, -200, -50]\n    }\n}"}
{"source_Lan": "java###timeTravel_Test.java", "source_code_str": "    public static int timeTravel(int n, int[] arr) {\n        int ans = 0;\n        for(int i = 1; i < n; i++)\n            ans += (arr[i] > arr[i - 1] ? 1 : (arr[i] < arr[i - 1] ? 2 : 0));\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class timeTravel_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(timeTravel(1, new int[]{5})); // Test input 1\n        System.out.println(timeTravel(5, new int[]{1, 2, 3, 4, 5})); // Test input 2\n        System.out.println(timeTravel(5, new int[]{5, 4, 3, 2, 1})); // Test input 3\n        System.out.println(timeTravel(5, new int[]{1, 3, 2, 4, 2})); // Test input 4\n        System.out.println(timeTravel(3, new int[]{10, 10, 10})); // Test input 5\n    }\n}"}
{"source_Lan": "java###isMagicArray_Test.java", "source_code_str": "    public static boolean isMagicArray(int n, int[] arr) {\n        \n        for (int i = 1; i < n; i++) {\n            \n            if ((arr[i] % 2 == 0 && arr[i - 1] % 2 == 0) || (arr[i] % 2 != 0 && arr[i - 1] % 2 != 0)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isMagicArray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1: alternating odd and even\n        int[] arr1 = {1, 2, 1, 2};\n        System.out.println(isMagicArray(arr1.length, arr1));\n        \n        // Test input 2: consecutive evens\n        int[] arr2 = {2, 4, 6, 1, 3};\n        System.out.println(isMagicArray(arr2.length, arr2));\n        \n        // Test input 3: consecutive odds\n        int[] arr3 = {1, 3, 5, 7};\n        System.out.println(isMagicArray(arr3.length, arr3));\n        \n        // Test input 4: single element\n        int[] arr4 = {2};\n        System.out.println(isMagicArray(arr4.length, arr4));\n        \n        // Test input 5: empty array\n        int[] arr5 = {};\n        System.out.println(isMagicArray(arr5.length, arr5));\n    }\n}"}
{"source_Lan": "java###matrixConundrum_Test.java", "source_code_str": "    public static boolean matrixConundrum(int n, int m, List<String> mat) {\n        String play = \"play\";\n        int fnd = 0;\n        for (int i = 0; i < m; ++i) {\n            boolean check = false;\n            for (int j = 0; j < n; ++j) {\n                if (mat.get(j).charAt(i) == play.charAt(fnd)) {\n                    check = true;\n                }\n            }\n            if (check) {\n                ++fnd;\n                if (fnd == 4) {\n                    break;\n                }\n            }\n        }\n        return fnd == 4;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\npublic class matrixConundrum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        List<String> input1 = Arrays.asList(\"paaa\", \"llaa\", \"yyyy\", \"aaaa\");\n        System.out.println(matrixConundrum(4, 4, input1)); // should return true\n\n        List<String> input2 = Arrays.asList(\"abcde\", \"fghij\", \"klmno\");\n        System.out.println(matrixConundrum(3, 5, input2)); // should return false\n\n        List<String> input3 = Arrays.asList(\"pxyz\", \"lqrs\", \"abct\", \"deut\");\n        System.out.println(matrixConundrum(4, 4, input3)); // should return true\n\n        List<String> input4 = Arrays.asList(\"ppp\", \"lll\", \"aaa\", \"yyy\");\n        System.out.println(matrixConundrum(4, 3, input4)); // should return true\n\n        List<String> input5 = Arrays.asList(\"pm\", \"al\");\n        System.out.println(matrixConundrum(2, 2, input5)); // should return false\n    }\n}"}
{"source_Lan": "java###isFriend_Test.java", "source_code_str": "    public static String isFriend(int n, int x, int y, int[] arr) {\n        for(int e : arr)\n            if(x + e == y)\n                return \"yes\";\n        return \"no\";\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isFriend_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(isFriend(3, 5, 8, new int[]{3, 1, 2}));  // Should return \"yes\"\n        System.out.println(isFriend(3, 5, 10, new int[]{1, 1, 2})); // Should return \"no\"\n        System.out.println(isFriend(0, 5, 5, new int[]{}));         // Should return \"no\"\n        System.out.println(isFriend(2, 10, 15, new int[]{5, 10})); // Should return \"yes\"\n        System.out.println(isFriend(4, -2, 0, new int[]{-1, 1, 0, 2})); // Should return \"yes\"\n    }\n}"}
{"source_Lan": "java###geekTasks_Test.java", "source_code_str": "    public static long geekTasks(int n, int m, int q, int[][] tasks) {\n        long total = 0;\n        long minA = Long.MAX_VALUE, minB = Long.MAX_VALUE;\n        \n        for (int i = 0; i < q; i++) {\n            int a = tasks[i][0] + 1;\n            int b = tasks[i][1] + 1;\n            minA = Math.min(minA, a);\n            minB = Math.min(minB, b);\n        }\n        int[] col = new int[n]; \n        \n        for (int[] task : tasks) {\n            int x = task[1] + 1;\n            col[task[0]] = Math.max(col[task[0]], x);\n        }\n        long maxColValue = 0;\n        \n        for (int i = n - 1; i >= 0; i--) {\n            maxColValue = Math.max(maxColValue, col[i]);\n            total += maxColValue;\n        }\n        long cellsWithMaxValue = minA * minB;\n        \n        return total - cellsWithMaxValue;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class geekTasks_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] tasks1 = {{0, 0}};\n        System.out.println(geekTasks(1, 1, 1, tasks1));\n\n        int[][] tasks2 = {{0, 1}, {1, 0}};\n        System.out.println(geekTasks(2, 2, 2, tasks2));\n\n        int[][] tasks3 = {{0, 1}, {1, 2}, {2, 0}};\n        System.out.println(geekTasks(3, 3, 3, tasks3));\n\n        int[][] tasks4 = {{0, 4}, {1, 3}, {0, 3}, {1, 7}};\n        System.out.println(geekTasks(2, 5, 4, tasks4));\n\n        int[][] tasks5 = {{0, 0}, {0, 1}, {2, 2}, {3, 4}, {0, 3}};\n        System.out.println(geekTasks(5, 5, 5, tasks5));\n    }\n}"}
{"source_Lan": "java###areaOfMaxDiagonal_Test.java", "source_code_str": "    public static int areaOfMaxDiagonal(int[][] dimensions) {\n        int ans = 0, maxL = 0;\n        for (int[] d : dimensions) {\n            int x = d[0], y = d[1];\n            int l = x * x + y * y;\n            if (l > maxL || (l == maxL && x * y > ans)) {\n                maxL = l;\n                ans = x * y;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class areaOfMaxDiagonal_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{0, 0}, {1, 1}, {2, 3}, {3, 4}, {5, 5}};\n        int[][] input2 = {{-1, 2}, {2, 3}, {3, -4}, {4, 5}, {5, 5}};\n        int[][] input3 = {{1, 1}, {1, 2}, {2, 1}};\n        int[][] input4 = {{3, 4}, {4, 3}, {5, 5}};\n        int[][] input5 = {{10, 10}, {20, 20}, {10, 25}};\n\n        System.out.println(areaOfMaxDiagonal(input1));\n        System.out.println(areaOfMaxDiagonal(input2));\n        System.out.println(areaOfMaxDiagonal(input3));\n        System.out.println(areaOfMaxDiagonal(input4));\n        System.out.println(areaOfMaxDiagonal(input5));\n    }\n}"}
{"source_Lan": "java###minOrAfterOperations_Test.java", "source_code_str": "    public static int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; \n            int and = -1; \n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; \n                } else {\n                    and = -1; \n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; \n                mask ^= 1 << b; \n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minOrAfterOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minOrAfterOperations(new int[]{1, 2, 3}, 1));\n        System.out.println(minOrAfterOperations(new int[]{10, 20, 30, 40}, 2));\n        System.out.println(minOrAfterOperations(new int[]{0, 0, 0}, 1));\n        System.out.println(minOrAfterOperations(new int[]{-1, -2, -3, -4}, 3));\n        System.out.println(minOrAfterOperations(new int[]{15, 7, 8, 16}, 4));\n    }\n}"}
{"source_Lan": "java###longestMonotonicSubarray_Test.java", "source_code_str": "    public static int longestMonotonicSubarray(int[] a) {\n        int ans = 1;\n        int i = 0, n = a.length;\n        while (i < n - 1) {\n            if (a[i + 1] == a[i]) {\n                i++; \n                continue;\n            }\n            int i0 = i; \n            boolean inc = a[i + 1] > a[i]; \n            i += 2; \n            while (i < n && a[i] != a[i - 1] && (a[i] > a[i - 1]) == inc) {\n                i++;\n            }\n            \n            ans = Math.max(ans, i - i0);\n            i--;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class longestMonotonicSubarray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(longestMonotonicSubarray(new int[]{1, 2, 3, 4, 5}));          // Regular increasing sequence\n        System.out.println(longestMonotonicSubarray(new int[]{5, 4, 3, 2, 1}));          // Regular decreasing sequence\n        System.out.println(longestMonotonicSubarray(new int[]{2, 2, 2, 2, 2}));          // All equal elements\n        System.out.println(longestMonotonicSubarray(new int[]{1, 3, 2, 4, 5, 4, 3}));    // Mixed increasing and decreasing\n        System.out.println(longestMonotonicSubarray(new int[]{}));                        // Edge case: empty array\n    }\n}"}
{"source_Lan": "java###sumDigitDifferences_Test.java", "source_code_str": "    public static long sumDigitDifferences(int[] nums) {\n        long ans = 0;\n        int[][] cnt = new int[Integer.toString(nums[0]).length()][10];\n        for (int k = 0; k < nums.length; k++) {\n            int x = nums[k];\n            for (int i = 0; x > 0; x /= 10, i++) {\n                int d = x % 10;\n                ans += k - cnt[i][d]++;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class sumDigitDifferences_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(sumDigitDifferences(new int[]{1}));                // Single element case\n        System.out.println(sumDigitDifferences(new int[]{12, 34}));          // Two different numbers with unique digits\n        System.out.println(sumDigitDifferences(new int[]{11, 11}));          // Identical numbers to see if differences are counted correctly\n        System.out.println(sumDigitDifferences(new int[]{123, 456, 789}));   // Multiple numbers for complexity\n        System.out.println(sumDigitDifferences(new int[]{100, 200, 300}));    // Leading zeros represented as integers\n    }\n}"}
{"source_Lan": "java###maximumLength_Test.java", "source_code_str": "    public static int maximumLength(int[] nums, int k) {\n        int ans = 0;\n        int[][] f = new int[k][k];\n        for (int x : nums) {\n            x %= k;\n            for (int y = 0; y < k; y++) {\n                f[y][x] = f[x][y] + 1;\n                ans = Math.max(ans, f[y][x]);\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumLength_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumLength(new int[]{}, 3)); // Test input 1\n        System.out.println(maximumLength(new int[]{1, 1, 1}, 2)); // Test input 2\n        System.out.println(maximumLength(new int[]{3, 6, 9, 12}, 3)); // Test input 4\n        System.out.println(maximumLength(new int[]{7, 8, 16, 23}, 1)); // Test input 5\n    }\n}"}
{"source_Lan": "java###triangleType_Test.java", "source_code_str": "    public static String triangleType(int[] nums) {\n        Arrays.sort(nums);\n        int x = nums[0];\n        int y = nums[1];\n        int z = nums[2];\n        if (x + y <= z) { \n            return \"none\";\n        }\n        if (x == z) { \n            return \"equilateral\";\n        }\n        if (x == y || y == z) {\n            return \"isosceles\";\n        }\n        return \"scalene\";\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class triangleType_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(triangleType(new int[]{1, 2, 3})); // Output: none\n        System.out.println(triangleType(new int[]{3, 3, 3})); // Output: equilateral\n        System.out.println(triangleType(new int[]{3, 3, 5})); // Output: isosceles\n        System.out.println(triangleType(new int[]{3, 4, 5})); // Output: scalene\n        System.out.println(triangleType(new int[]{0, 0, 0})); // Output: equilateral\n    }\n}"}
{"source_Lan": "java###countAlternatingSubarrays_Test.java", "source_code_str": "    public static long countAlternatingSubarrays(int[] nums) {\n        long res = 0, cur = 0;\n        int pre = -1;\n        for (int a : nums) {\n            cur = (pre != a) ? cur + 1 : 1;\n            pre = a;\n            res += cur;\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countAlternatingSubarrays_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countAlternatingSubarrays(new int[]{})); // Test case with an empty array\n        System.out.println(countAlternatingSubarrays(new int[]{1, 1, 1, 1})); // Test case with a constant array\n        System.out.println(countAlternatingSubarrays(new int[]{1, 0, 1, 0, 1})); // Test case with alternate integers\n        System.out.println(countAlternatingSubarrays(new int[]{1, 2, 1, 2, 1, 2})); // Test case with a large alternating sequence\n        System.out.println(countAlternatingSubarrays(new int[]{-1, 1, -1, 1, -1})); // Test case with negative and positive integers\n    }\n}"}
{"source_Lan": "java###modifiedMatrix_Test.java", "source_code_str": "    public static int[][] modifiedMatrix(int[][] matrix) {\n        int n = matrix.length; \n        int m = matrix[0].length; \n        for (int j = 0; j < m; j++) {\n            int zd = -1; \n            for (int i = 0; i < n; i++) {\n                zd = Math.max(zd, matrix[i][j]); \n            }\n            for (int i = 0; i < n; i++) {\n                if (matrix[i][j] == -1) {\n                    matrix[i][j] = zd; \n                }\n            }\n        }\n        return matrix; \n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class modifiedMatrix_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int[][] input2 = {{1, -1, 3}, {4, 5, -1}, {7, 8, 9}};\n        int[][] input3 = {{-1, -1, -1}, {-1, -1, -1}, {-1, -1, -1}};\n        int[][] input4 = {{-5, -3, -1}, {-2, -4, -6}};\n        int[][] input5 = {{1, -1, 3}, {-4, 5, -1}, {7, -1, 9}};\n\n        System.out.println(\"Modified input 1: \" + Arrays.deepToString(modifiedMatrix(input1)));\n        System.out.println(\"Modified input 2: \" + Arrays.deepToString(modifiedMatrix(input2)));\n        System.out.println(\"Modified input 3: \" + Arrays.deepToString(modifiedMatrix(input3)));\n        System.out.println(\"Modified input 4: \" + Arrays.deepToString(modifiedMatrix(input4)));\n        System.out.println(\"Modified input 5: \" + Arrays.deepToString(modifiedMatrix(input5)));\n    }\n}"}
{"source_Lan": "java###findChampion_Test.java", "source_code_str": "    public static int findChampion(int n, int[][] edges) {\n        int[] degree = new int[n];\n        for (int[] e : edges) {\n            degree[e[1]]++;\n        }\n        int champion = -1;\n        for (int i = 0; i < n; i++) {\n            if (degree[i] == 0) {\n                if (champion == -1) {\n                    champion = i;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        return champion;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findChampion_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findChampion(5, new int[][]{{0, 1}, {0, 2}, {1, 3}, {2, 4}}));  // One champion(node 0)\n        System.out.println(findChampion(5, new int[][]{{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 0}}));  // No champion(cycle)\n        System.out.println(findChampion(3, new int[][]{{1, 0}, {2, 0}}));  // Multiple champions(nodes 1 and 2)\n        System.out.println(findChampion(4, new int[][]{{0, 1}, {2, 3}, {1, 2}}));  // One champion(node 3)\n        System.out.println(findChampion(0, new int[][]{}));  // No nodes, edge case\n    }\n}"}
{"source_Lan": "java###firstDayBeenInAllRooms_Test.java", "source_code_str": "    public static int firstDayBeenInAllRooms(int[] nextVisit) {\n        int mod = 1000000007;\n        int len = nextVisit.length;\n        int[] dp = new int[len];\n        dp[0] = 2; \n        for (int i = 1; i < len; i++) {\n            int to = nextVisit[i];\n            dp[i] = 2 + dp[i - 1];\n            if (to != 0) {\n                dp[i] = (dp[i] - dp[to - 1] + mod) % mod; \n            }\n            dp[i] = (dp[i] + dp[i - 1]) % mod;\n        }\n        return dp[len - 2]; \n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class firstDayBeenInAllRooms_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(firstDayBeenInAllRooms(new int[]{0, 0})); // Test input 2\n        System.out.println(firstDayBeenInAllRooms(new int[]{0, 1, 2})); // Test input 3\n        System.out.println(firstDayBeenInAllRooms(new int[]{1, 2, 0})); // Test input 4\n        System.out.println(firstDayBeenInAllRooms(new int[]{1, 2, 0, 1, 2})); // Test input 5\n    }\n}"}
{"source_Lan": "java###maxArrayValue_Test.java", "source_code_str": "    public static long maxArrayValue(int[] nums) {\n        long sum = nums[nums.length - 1];\n        for (int i = nums.length - 2; i >= 0; i--) {\n            sum = nums[i] <= sum ? nums[i] + sum : nums[i];\n        }\n        return sum;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxArrayValue_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxArrayValue(new int[]{5}));           // Single element case\n        System.out.println(maxArrayValue(new int[]{1, 2, 3}));     // All increasing values\n        System.out.println(maxArrayValue(new int[]{3, 2, 1}));     // All decreasing values\n        System.out.println(maxArrayValue(new int[]{-1, -2, -3}));  // All negative values\n        System.out.println(maxArrayValue(new int[]{10, -5, 20}));  // Mixed values with a positive and a negative\n    }\n}"}
{"source_Lan": "java###minIncrements_Test.java", "source_code_str": "    public static int minIncrements(int n, int[] cost) {\n        int ans = 0;\n        for (int i = n - 2; i > 0; i -= 2) {\n            ans += Math.abs(cost[i] - cost[i + 1]);\n            \n            cost[i / 2] += Math.max(cost[i], cost[i + 1]);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minIncrements_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minIncrements(2, new int[]{1, 2}));\n        System.out.println(minIncrements(3, new int[]{5, 10, 20}));\n        System.out.println(minIncrements(4, new int[]{-5, -10, -15, -20}));\n        System.out.println(minIncrements(4, new int[]{100000, 200000, 300000, 400000}));\n        System.out.println(minIncrements(3, new int[]{7, 7, 7}));\n    }\n}"}
{"source_Lan": "java###maxNumberOfAlloys_Test.java", "source_code_str": "    public static int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {\n        int left = 1, right = 200000000, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            boolean valid = false;\n            for (int i = 0; i < k; ++i) {\n                long spend = 0;\n                for (int j = 0; j < n; ++j) {\n                    spend += Math.max((long) composition.get(i).get(j) * mid - stock.get(j), 0) * cost.get(j);\n                }\n                if (spend <= budget) {\n                    valid = true;\n                    break;\n                }\n            }\n            if (valid) {\n                ans = mid;\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\npublic class maxNumberOfAlloys_Test {\n// TOFILL\n    public static void main(String[] args) {\n        List<List<Integer>> composition1 = new ArrayList<>();\n        composition1.add(Arrays.asList(1, 2));\n        List<Integer> stock1 = Arrays.asList(1, 1);\n        List<Integer> cost1 = Arrays.asList(500, 200);\n        System.out.println(maxNumberOfAlloys(2, 1, 1000, composition1, stock1, cost1));\n\n        List<List<Integer>> composition2 = new ArrayList<>();\n        composition2.add(Arrays.asList(1, 1, 1));\n        composition2.add(Arrays.asList(2, 2, 2));\n        List<Integer> stock2 = Arrays.asList(1, 1, 1);\n        List<Integer> cost2 = Arrays.asList(200, 300, 400);\n        System.out.println(maxNumberOfAlloys(3, 2, 3000, composition2, stock2, cost2));\n\n        List<List<Integer>> composition3 = new ArrayList<>();\n        composition3.add(Arrays.asList(3, 5));\n        List<Integer> stock3 = Arrays.asList(10, 5);\n        List<Integer> cost3 = Arrays.asList(100, 200);\n        System.out.println(maxNumberOfAlloys(2, 1, 0, composition3, stock3, cost3));\n\n        List<List<Integer>> composition4 = new ArrayList<>();\n        composition4.add(Arrays.asList(1));\n        List<Integer> stock4 = Arrays.asList(0);\n        List<Integer> cost4 = Arrays.asList(1000);\n        System.out.println(maxNumberOfAlloys(1, 1, 10000, composition4, stock4, cost4));\n\n        List<List<Integer>> composition5 = new ArrayList<>();\n        composition5.add(Arrays.asList(1, 2, 1));\n        composition5.add(Arrays.asList(2, 1, 3));\n        List<Integer> stock5 = Arrays.asList(10, 5, 3);\n        List<Integer> cost5 = Arrays.asList(100, 200, 300);\n        System.out.println(maxNumberOfAlloys(3, 2, 5000, composition5, stock5, cost5));\n    }\n}"}
{"source_Lan": "java###findEnemies_Test.java", "source_code_str": "    public static ArrayList<ArrayList<Integer>> findEnemies(int n, int m, int k, int[] col, int[] count) {\n        ArrayList<ArrayList<Integer>> answer = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            ArrayList<Integer> row = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                row.add(-1);\n            }\n            answer.add(row);\n        }\n        int curr = 0;\n        int ind = 0;\n        while (curr < k && ind < n) {\n            int total = count[ind];\n            while (total-- > 0) {\n                answer.get(ind).set(col[curr], curr);\n                curr += 1;\n            }\n            ind += 1;\n        }\n        return answer;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\npublic class findEnemies_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int n1 = 3, m1 = 4, k1 = 5;\n        int[] col1 = {0, 2, 1, 3, 2};\n        int[] count1 = {2, 2, 1};\n        System.out.println(findEnemies(n1, m1, k1, col1, count1));\n\n        int n2 = 2, m2 = 2, k2 = 3;\n        int[] col2 = {0, 0, 1};\n        int[] count2 = {2, 1};\n        System.out.println(findEnemies(n2, m2, k2, col2, count2));\n\n        int n3 = 2, m3 = 3, k3 = 4;\n        int[] col3 = {0, 1, 2, 1};\n        int[] count3 = {2, 2};\n        System.out.println(findEnemies(n3, m3, k3, col3, count3));\n\n        int n4 = 1, m4 = 1, k4 = 0;\n        int[] col4 = {};\n        int[] count4 = {};\n        System.out.println(findEnemies(n4, m4, k4, col4, count4));\n\n        int n5 = 3, m5 = 3, k5 = 6;\n        int[] col5 = {0, 1, 2, 1, 0, 2};\n        int[] count5 = {2, 2, 2};\n        System.out.println(findEnemies(n5, m5, k5, col5, count5));\n    }\n}"}
{"source_Lan": "java###maxPoints_Test.java", "source_code_str": "    public static long maxPoints(int n, int[][] arr) {\n        long[] dp = new long[200001];\n        for (int i = n - 1; i >= 0; --i){\n            dp[i] = Math.max(arr[i][0] + dp[arr[i][1] + i + 1], dp[i + 1]);\n}\n        return dp[0];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxPoints_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxPoints(3, new int[][]{{10, 1}, {20, 2}, {30, 1}}));\n        System.out.println(maxPoints(4, new int[][]{{1, 1}, {2, 2}, {3, 1}, {5, 3}}));\n        System.out.println(maxPoints(5, new int[][]{{100000, 4}, {200000, 3}, {300000, 2}, {400000, 1}, {500000, 0}}));\n        System.out.println(maxPoints(2, new int[][]{{10, 0}, {15, 1}}));\n        System.out.println(maxPoints(3, new int[][]{{1, 0}, {-1, 1}, {2, 0}}));\n    }\n}"}
{"source_Lan": "java###maximumStrongIndices_Test.java", "source_code_str": "    public static int maximumStrongIndices(int n, int x, int y, int[] a, int[] b) {\n        int j = 0, ans = 0;\n        for (int i = 0; i < n; i++) {\n            while (j < n && b[j] < a[i] - x) {\n                j++;\n            }\n            if (j < n && b[j] <= a[i] + y) {\n                ans++;\n                j++;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumStrongIndices_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1\n        int n1 = 5, x1 = 2, y1 = 3;\n        int[] a1 = {1, 5, 8, 10, 15};\n        int[] b1 = {0, 3, 5, 10, 13};\n        System.out.println(maximumStrongIndices(n1, x1, y1, a1, b1));\n\n        // Test input 2\n        int n2 = 5, x2 = 10, y2 = 5;\n        int[] a2 = {1, 5, 15, 20, 25};\n        int[] b2 = {0, 1, 2, 3, 4};\n        System.out.println(maximumStrongIndices(n2, x2, y2, a2, b2));\n\n        // Test input 3\n        int n3 = 4, x3 = 1, y3 = 4;\n        int[] a3 = {2, 4, 6, 8};\n        int[] b3 = {1, 3, 5, 7};\n        System.out.println(maximumStrongIndices(n3, x3, y3, a3, b3));\n\n        // Test input 4\n        int n4 = 3, x4 = 3, y4 = 3;\n        int[] a4 = {10, 15, 20};\n        int[] b4 = {7, 10, 23};\n        System.out.println(maximumStrongIndices(n4, x4, y4, a4, b4));\n\n        // Test input 5\n        int n5 = 3, x5 = 0, y5 = 0;\n        int[] a5 = {1, 2, 3};\n        int[] b5 = {1, 2, 3};\n        System.out.println(maximumStrongIndices(n5, x5, y5, a5, b5));\n    }\n}"}
{"source_Lan": "java###minimumPushes_Test.java", "source_code_str": "    public static int minimumPushes(String word) {\n        int n = word.length();\n        int k = n / 8;\n        return (k * 4 + n % 8) * (k + 1);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minimumPushes_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumPushes(\"\"));                // Edge case: empty string\n        System.out.println(minimumPushes(\"a\"));               // Single character\n        System.out.println(minimumPushes(\"abcdefg\"));         // One less than a full set of 8(7 characters)\n        System.out.println(minimumPushes(\"abcdefgh\"));        // Exactly one full set of 8 characters\n        System.out.println(minimumPushes(\"abcdefghabcdefgh\")); // Two full sets of 8 characters(16 characters)\n    }\n}"}
{"source_Lan": "java###countTestedDevices_Test.java", "source_code_str": "    public static int countTestedDevices(int[] batteryPercentages) {\n        int n = batteryPercentages.length;\n        int need = 0;\n        for (int i = 0; i < n; i++) {\n            if (batteryPercentages[i] > 0) {\n                need++;\n                for (int j = i + 1; j < n; j++) {\n                    batteryPercentages[j] = Math.max(batteryPercentages[j] - 1, 0);\n                }\n            }\n        }\n        return need;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countTestedDevices_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countTestedDevices(new int[] {}));\n        System.out.println(countTestedDevices(new int[] {0, 0, 0}));\n        System.out.println(countTestedDevices(new int[] {10, 20, 0, 5}));\n        System.out.println(countTestedDevices(new int[] {7, 3, 0, 2, 6}));\n        System.out.println(countTestedDevices(new int[] {5, 10, 15}));\n    }\n}"}
{"source_Lan": "java###frequency_Test.java", "source_code_str": "    public static int[] frequency(int n,int a[]) {\n        HashMap<Integer,Integer> hm=new HashMap<>();\n        int ans[]=new int[n];\n        for(int i:a){\n            hm.put(i,hm.getOrDefault(i,0)+1);\n        }\n        for(int i=0;i<n;i++){\n            ans[i]=hm.get(a[i]);\n            hm.put(a[i],hm.get(a[i])-1);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\npublic class frequency_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Input 1: n=0, a=[]\n        int[] result1 = frequency(0, new int[]{});\n        System.out.println(java.util.Arrays.toString(result1)); // Expect []\n\n        // Test Input 2: n=1, a=[5]\n        int[] result2 = frequency(1, new int[]{5});\n        System.out.println(java.util.Arrays.toString(result2)); // Expect [1]\n\n        // Test Input 3: n=5, a=[1, 2, 3, 1, 2]\n        int[] result3 = frequency(5, new int[]{1, 2, 3, 1, 2});\n        System.out.println(java.util.Arrays.toString(result3)); // Expect [2, 2, 1, 2, 2]\n\n        // Test Input 4: n=6, a=[7, 7, 7, 8, 9, 9]\n        int[] result4 = frequency(6, new int[]{7, 7, 7, 8, 9, 9});\n        System.out.println(java.util.Arrays.toString(result4)); // Expect [3, 3, 3, 1, 2, 2]\n\n        // Test Input 5: n=4, a=[10, 10, 10, 10]\n        int[] result5 = frequency(4, new int[]{10, 10, 10, 10});\n        System.out.println(java.util.Arrays.toString(result5)); // Expect [4, 4, 4, 4]\n    }\n}"}
{"source_Lan": "java###collectingCoins_Test.java", "source_code_str": "    public static int collectingCoins(int N, int[][] Coins) {\n        Map<Integer, Integer> hor = new HashMap<>(); \n        Map<Integer, Integer> ver = new HashMap<>(); \n        Map<Integer, Integer> diaa = new HashMap<>(); \n        Map<Integer, Integer> diab = new HashMap<>(); \n        int m = 0; \n            \n            for (int[] el : Coins) {\n                int a = el[0], b = el[1];\n                hor.put(a, hor.getOrDefault(a, 0) + 1); \n                ver.put(b, ver.getOrDefault(b, 0) + 1); \n                diaa.put(a + b, diaa.getOrDefault(a + b, 0) + 1); \n                diab.put(a - b, diab.getOrDefault(a - b, 0) + 1); \n                \n                m = Math.max(m, hor.get(a));\n                m = Math.max(m, ver.get(b));\n                m = Math.max(m, diaa.get(a + b));\n                m = Math.max(m, diab.get(a - b));\n            }\n            return m; \n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class collectingCoins_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(collectingCoins(0, new int[0][0]));\n        System.out.println(collectingCoins(5, new int[][]{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}}));\n        System.out.println(collectingCoins(5, new int[][]{{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}));\n        System.out.println(collectingCoins(3, new int[][]{{1, 1}, {2, 2}, {3, 3}}));\n        System.out.println(collectingCoins(4, new int[][]{{1, -1}, {2, 1}, {-1, 2}, {-2, -2}}));\n    }\n}"}
{"source_Lan": "java###trafficLights_Test.java", "source_code_str": "    public static String trafficLights(int n, int q, int[][] queries) {\n        int[] darr = new int[n + 1];\n        for (int[] Q : queries) {\n            int a = Q[0];\n            int b = Q[1];\n            darr[a - 1]++;\n            darr[b]--;\n        }\n        Arrays.parallelPrefix(darr, (A, B) -> A + B);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int X = darr[i] % 3;\n            if (X == 0)\n                sb.append(\"R\");\n            else if (X == 1)\n                sb.append(\"Y\");\n            else if (X == 2)\n                sb.append(\"G\");\n        }\n        return sb.toString();\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class trafficLights_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(trafficLights(1, 1, new int[][]{{1, 1}}));        // Single light, toggled on.\n        System.out.println(trafficLights(3, 1, new int[][]{{1, 3}}));        // Three lights, all turned on once.\n        System.out.println(trafficLights(5, 2, new int[][]{{1, 3}, {2, 5}})); // Five lights, two operations affecting overlaps.\n        System.out.println(trafficLights(4, 0, new int[][]{}));               // Four lights, no operations - test initial states.\n        System.out.println(trafficLights(6, 3, new int[][]{{1, 2}, {2, 4}, {1, 1}})); // Six lights with multiple overlapping operations.\n    }\n}"}
{"source_Lan": "java###BeautifulBits_Test.java", "source_code_str": "    public static ArrayList<Integer> BeautifulBits(int n, int[] arr, int q,\n                                                   int[][] queries) {\n        long[][] pref = new long[n + 1][32];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 32; j++) {\n                pref[i][j] = pref[i - 1][j] + ((arr[i - 1] >> j) & 1);\n            }\n        }\n        ArrayList<Integer> ans = new ArrayList<>(Collections.nCopies(q, 0));\n        for (int i = 0; i < q; i++) {\n            for (int j = 0; j < 32; j++) {\n                if (pref[queries[i][1]][j] - pref[queries[i][0] - 1][j] != 0) {\n                    ans.set(i, ans.get(i) + (1 << j));\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class BeautifulBits_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test case 1\n        int n1 = 1;\n        int[] arr1 = {1};\n        int q1 = 1;\n        int[][] queries1 = {{1, 1}};\n        System.out.println(BeautifulBits(n1, arr1, q1, queries1));\n\n        // Test case 2\n        int n2 = 5;\n        int[] arr2 = {1, 2, 3, 4, 5};\n        int q2 = 2;\n        int[][] queries2 = {{1, 5}, {2, 4}};\n        System.out.println(BeautifulBits(n2, arr2, q2, queries2));\n\n        // Test case 3\n        int n3 = 0;\n        int[] arr3 = {};\n        int q3 = 0;\n        int[][] queries3 = {};\n        System.out.println(BeautifulBits(n3, arr3, q3, queries3));\n\n        // Test case 4\n        int n4 = 5;\n        int[] arr4 = {0, 0, 0, 0, 0};\n        int q4 = 1;\n        int[][] queries4 = {{1, 5}};\n        System.out.println(BeautifulBits(n4, arr4, q4, queries4));\n\n        // Test case 5\n        int n5 = 5;\n        int[] arr5 = {1, 2, 4, 8, 16};\n        int q5 = 1;\n        int[][] queries5 = {{1, 5}};\n        System.out.println(BeautifulBits(n5, arr5, q5, queries5));\n    }\n}"}
{"source_Lan": "java###MaximumEnergy_Test.java", "source_code_str": "    public static int MaximumEnergy(int N, int[] E, int K, int[] P) \n    {\n        Arrays.sort(P);\n        long mod = 1000000007;\n        long[] ps = new long[N + 1];\n        long ans = 0;\n        long s = 0;\n        for (int i = 0; i < N; i++) \n        {\n            s += E[i];\n            s %= mod;\n            ps[i + 1] =  s;\n        }\n        for (int i = 0; i < K / 2; i++) {\n            long a = ps[P[i]];\n            long b = ps[P[K - i - 1] + 1];\n            ans += (b - a + mod) % mod;\n            ans %= mod;\n        }\n        return (int) ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class MaximumEnergy_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(MaximumEnergy(5, new int[]{1, 2, 3, 4, 5}, 4, new int[]{0, 1, 3, 4})); // Test input 1\n        System.out.println(MaximumEnergy(0, new int[]{}, 0, new int[]{})); // Test input 4\n        System.out.println(MaximumEnergy(5, new int[]{10, 20, 30, 40, 50}, 2, new int[]{1, 3})); // Test input 5\n    }\n}"}
{"source_Lan": "java###maxScoreSubseq_Test.java", "source_code_str": "    public static int maxScoreSubseq(int n, int[] arr) {\n        \n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        int ma = Integer.MIN_VALUE;\n        \n        for(int i = 0; i < n; i++) {\n            \n            if(arr[i] >= 0) \n                map.put(arr[i] - i, map.getOrDefault(arr[i] - i, 0) + arr[i]);\n            \n            ma = Math.max(ma, arr[i]);\n        }\n        \n        int ele = Integer.MIN_VALUE;\n        \n        for(int j : map.values()){\n            ele = Math.max(ele, j);\n}\n        \n        return Math.max(ele, ma);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\npublic class maxScoreSubseq_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxScoreSubseq(0, new int[] {}));\n        System.out.println(maxScoreSubseq(1, new int[] {5}));\n        System.out.println(maxScoreSubseq(3, new int[] {-3, -1, -2}));\n        System.out.println(maxScoreSubseq(5, new int[] {1, 2, 3, 4, 5}));\n        System.out.println(maxScoreSubseq(5, new int[] {5, 10, -1, 15, 5}));\n    }\n}"}
{"source_Lan": "java###minimumCost_Test.java", "source_code_str": "    public static int minimumCost(int[] nums) {\n        Arrays.sort(nums, 1, nums.length);\n        return nums[0] + nums[1] + nums[2];\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumCost_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumCost(new int[]{1, 5, 3})); // Test input 3\n        System.out.println(minimumCost(new int[]{2, 6, 2, 8, 3})); // Test input 4\n        System.out.println(minimumCost(new int[]{0, 0, 0, 0, 0})); // Test input 5\n    }\n}"}
{"source_Lan": "java###minimumLevels_Test.java", "source_code_str": "    public static int minimumLevels(int[] possible) {\n        \n        int n = possible.length;\n        int s = 0;\n        for (int x : possible) {\n            s += x;\n        }\n        s = s * 2 - n;\n        int pre = 0;\n        for (int i = 0; i < n - 1; i++) {\n            pre += possible[i] == 1 ? 2 : -2;\n            if (pre > s) {\n                return i + 1;\n            }\n        }\n        return -1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumLevels_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumLevels(new int[]{1, 1, 1, 1}));      // Test input 1\n        System.out.println(minimumLevels(new int[]{1, 2, 3, 4}));      // Test input 2\n        System.out.println(minimumLevels(new int[]{0, 0, 0, 0}));      // Test input 3\n        System.out.println(minimumLevels(new int[]{1, 1, 1, 1, 1}));   // Test input 4\n        System.out.println(minimumLevels(new int[]{2, 1, 2, 1, 2}));   // Test input 5\n    }\n}"}
{"source_Lan": "java###findMinimumTime_Test.java", "source_code_str": "    public static int findMinimumTime(int[][] tasks) {\n        int n = tasks.length;\n        Arrays.sort(tasks, (a, b) -> a[1] - b[1]);\n        int[] run = new int[tasks[n - 1][1] + 1];\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            int start = tasks[i][0], end = tasks[i][1], duration = tasks[i][2];\n            for (int j = start; j <= end; j++) {\n                duration -= run[j];\n            }\n            res += Math.max(duration, 0);\n            for (int j = end; j >= 0 && duration > 0; j--) {\n                if (run[j] == 0) {\n                    duration--;\n                    run[j] = 1;\n                }\n            }\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findMinimumTime_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findMinimumTime(new int[][]{{0, 2, 1}}));  // Single task that can complete within its duration\n        System.out.println(findMinimumTime(new int[][]{{0, 2, 2}, {1, 3, 1}}));  // Overlapping tasks needing careful scheduling\n        System.out.println(findMinimumTime(new int[][]{{0, 2, 0}, {1, 3, 1}}));  // One task with zero duration\n        System.out.println(findMinimumTime(new int[][]{{0, 5, -1}}));  // A task with negative duration\n    }\n}"}
{"source_Lan": "java###bobHappiness_Test.java", "source_code_str": "    public static int bobHappiness(int n, int k, int q, int[][] students,\n                                   int[][] queries) {\n        TreeSet<Integer> set1 = new TreeSet<>();\n        TreeSet<Integer> set2 = new TreeSet<>();\n        for (int[] a : students) {\n            set1.add(a[0]);\n            set2.add(a[1]);\n        }\n        Map<Integer, Integer> map1 = new HashMap<>();\n        Map<Integer, Integer> map2 = new HashMap<>();\n        int idx1 = 1, idx2 = 1;\n        while (!set1.isEmpty()) {\n            map1.put(set1.pollFirst(), idx1++);\n            map2.put(set2.pollFirst(), idx2++);\n        }\n        int[][] pre = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            pre[map1.get(students[i][0]) - 1][map2.get(students[i][1]) - 1]++;\n        }\n        int[][] Arr = new int[n + 1][n + 1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (pre[i - 1][j - 1] == 0) {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] - Arr[i - 1][j - 1];\n                } else {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] + 1 - Arr[i - 1][j - 1];\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < q; i++) {\n            int X = queries[i][0], Y = queries[i][1];\n            X--;\n            Y--;\n            int a = map1.get(students[Y][0]);\n            int b = map2.get(students[Y][1]);\n            int c = map1.get(students[X][0]), d = map2.get(students[X][1]);\n            int temp = a;\n            a = c;\n            c = temp;\n            int people = Arr[c][d] + Arr[a - 1][b - 1] - Arr[a - 1][d] - Arr[c][b - 1];\n            people -= 2;\n            if (people > k) {\n                \n            } else {\n                sum++;\n            }\n        }\n        return sum;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class bobHappiness_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Input 1\n        int n1 = 0, k1 = 1, q1 = 0;\n        int[][] students1 = new int[0][0];\n        int[][] queries1 = new int[0][0];\n        System.out.println(bobHappiness(n1, k1, q1, students1, queries1));\n\n        // Test Input 2\n        int n2 = 1, k2 = 1, q2 = 1;\n        int[][] students2 = {{3, 2}};\n        int[][] queries2 = {{1, 1}};\n        System.out.println(bobHappiness(n2, k2, q2, students2, queries2));\n\n        // Test Input 3\n        int n3 = 3, k3 = 2, q3 = 2;\n        int[][] students3 = {{1, 2}, {2, 2}, {1, 3}};\n        int[][] queries3 = {{1, 2}, {2, 3}};\n        System.out.println(bobHappiness(n3, k3, q3, students3, queries3));\n\n        // Test Input 4\n        int n4 = 3, k4 = 1, q4 = 2;\n        int[][] students4 = {{1, 1}, {2, 2}, {3, 3}};\n        int[][] queries4 = {{1, 2}, {2, 3}};\n        System.out.println(bobHappiness(n4, k4, q4, students4, queries4));\n\n        // Test Input 5\n        int n5 = 4, k5 = 2, q5 = 1;\n        int[][] students5 = {{1, 1}, {1, 2}, {1, 3}, {1, 4}};\n        int[][] queries5 = {{1, 3}};\n    }\n}"}
{"source_Lan": "java###maximumPrimeDifference_Test.java", "source_code_str": "    public static int maximumPrimeDifference(int[] nums) {\n        Set<Integer> primes = new HashSet<>(Arrays.asList(\n            2, 3, 5, 7, 11,\n            13, 17, 19, 23, 29,\n            31, 37, 41, 43, 47,\n            53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97\n        ));\n        int n = nums.length;\n        int first = -1, ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (primes.contains(nums[i])) {\n                if (first != -1) {\n                    ans = Math.max(ans, i - first);\n                } else {\n                    first = i;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class maximumPrimeDifference_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumPrimeDifference(new int[]{1, 4, 6, 8}));               // Expect 0\n        System.out.println(maximumPrimeDifference(new int[]{2, 4, 5, 8, 11, 12}));       // Expect 2\n        System.out.println(maximumPrimeDifference(new int[]{3}));                        // Expect 0\n        System.out.println(maximumPrimeDifference(new int[]{1, 2, 3, 4, 7}));            // Expect 4\n        System.out.println(maximumPrimeDifference(new int[]{4, 6, 8, 10, 12}));          // Expect 0\n    }\n}"}
{"source_Lan": "java###HeightTower_Test.java", "source_code_str": "    public static int HeightTower(int n, int k, int[] arr) {\n        \n        Stack<Integer> st = new Stack<>();\n        \n        int totalHeight = 0;\n        \n        int i = 0;\n        \n        for (int j = 0; j < n; j++) {\n            totalHeight += arr[j];\n            st.push(arr[j]);\n            \n            if (totalHeight > k) {\n                int removeBoxes = i + 1;\n                \n                while (removeBoxes > 0 && !st.empty()) {\n                    totalHeight -= st.pop();\n                    removeBoxes--;\n                }\n                i++;\n            }\n        }\n        \n        return totalHeight;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Stack;\npublic class HeightTower_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(HeightTower(3, 15, new int[]{5, 5, 5}));    // Example 2: exactly fits\n        System.out.println(HeightTower(0, 10, new int[]{}));           // Example 3: edge case with no boxes\n        System.out.println(HeightTower(4, 25, new int[]{10, 5, 8, 7})); // Example 4: should pop boxes to reduce\n        System.out.println(HeightTower(3, 0, new int[]{1, 1, 1}));    // Example 5: height exceeds immediately\n    }\n}"}
{"source_Lan": "java###paintWalls_Test.java", "source_code_str": "    public static int paintWalls(int[] cost, int[] time) {\n        int n = cost.length;\n        int[] f = new int[n * 2 + 1];\n        Arrays.fill(f, Integer.MAX_VALUE / 2);\n        f[n] = 0;\n        for (int i = 0; i < n; ++i) {\n            int[] g = new int[n * 2 + 1];\n            Arrays.fill(g, Integer.MAX_VALUE / 2);\n            for (int j = 0; j <= n * 2; ++j) {\n                \n                g[Math.min(j + time[i], n * 2)] = Math.min(g[Math.min(j + time[i], n * 2)], f[j] + cost[i]);\n                \n                if (j > 0) {\n                    g[j - 1] = Math.min(g[j - 1], f[j]);\n                }\n            }\n            f = g;\n        }\n        int ans = f[n];\n        for (int i = n + 1; i <= n * 2; i++) {\n            ans = Math.min(ans, f[i]);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class paintWalls_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Input 1: Edge case with no walls to paint\n        int[] cost1 = {};\n        int[] time1 = {};\n        System.out.println(paintWalls(cost1, time1));\n\n        // Test Input 2: Basic case\n        int[] cost2 = {5, 10, 15};\n        int[] time2 = {1, 2, 3};\n        System.out.println(paintWalls(cost2, time2));\n\n        // Test Input 3: All zero time\n        int[] cost3 = {1, 2, 3};\n        int[] time3 = {0, 0, 0};\n        System.out.println(paintWalls(cost3, time3));\n\n        // Test Input 4: Higher costs and mixed times\n        int[] cost4 = {100, 200, 300};\n        int[] time4 = {2, 1, 2};\n        System.out.println(paintWalls(cost4, time4));\n\n        // Test Input 5: Higher times and few costs\n        int[] cost5 = {10, 20};\n        int[] time5 = {3, 4};\n        System.out.println(paintWalls(cost5, time5));\n    }\n}"}
{"source_Lan": "java###stoneGameVI_Test.java", "source_code_str": "    public static int stoneGameVI(int[] aliceValues, int[] bobValues) {\n        int n = aliceValues.length;\n        int[][] values = new int[n][3];\n        for (int i = 0; i < n; i++) {\n            values[i][0] = aliceValues[i] + bobValues[i];\n            values[i][1] = aliceValues[i];\n            values[i][2] = bobValues[i];\n        }\n        Arrays.sort(values, (a, b) -> b[0] - a[0]);\n        int aliceSum = 0, bobSum = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                aliceSum += values[i][1];\n            } else {\n                bobSum += values[i][2];\n            }\n        }\n        if (aliceSum > bobSum) {\n            return 1;\n        } else if (aliceSum == bobSum) {\n            return 0;\n        } else {\n            return -1;\n        }\n    }", "source_code_shell": "import java.util.Arrays;\nimport java.util.Arrays;\npublic class stoneGameVI_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1: Testing with empty arrays\n        int[] aliceValues1 = {};\n        int[] bobValues1 = {};\n        System.out.println(stoneGameVI(aliceValues1, bobValues1)); // Expected: 0(tie)\n\n        // Test input 2: Testing a case where Alice wins\n        int[] aliceValues2 = {1, 2};\n        int[] bobValues2 = {2, 1};\n        System.out.println(stoneGameVI(aliceValues2, bobValues2)); // Expected: 1(Alice wins)\n\n        // Test input 3: Testing a case where Alice and Bob tie\n        int[] aliceValues3 = {1, 2};\n        int[] bobValues3 = {1, 2};\n        System.out.println(stoneGameVI(aliceValues3, bobValues3)); // Expected: 0(tie)\n\n        // Test input 4: Testing with negative and positive values\n        int[] aliceValues4 = {5, -3};\n        int[] bobValues4 = {-1, 10};\n        System.out.println(stoneGameVI(aliceValues4, bobValues4)); // Expected: -1(Bob wins)\n\n        // Test input 5: Testing with larger values where Bob wins\n        int[] aliceValues5 = {1000, 2000, 3000};\n        int[] bobValues5 = {3000, 2000, 1000};\n        System.out.println(stoneGameVI(aliceValues5, bobValues5)); // Expected: -1(Bob wins)\n    }\n}"}
{"source_Lan": "java###minimumAddedCoins_Test.java", "source_code_str": "public static int minimumAddedCoins(int[] coins, int target) {\n        Arrays.sort(coins);\n        int ans = 0;\n        int x = 1;\n        int length = coins.length, index = 0;\n        while (x <= target) {\n            if (index < length && coins[index] <= x) {\n                x += coins[index];\n                index++;\n            } else {\n                x *= 2;\n                ans++;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minimumAddedCoins_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumAddedCoins(new int[]{}, 10)); // Test case 1\n        System.out.println(minimumAddedCoins(new int[]{1, 2, 5}, 10)); // Test case 2\n        System.out.println(minimumAddedCoins(new int[]{2, 4, 8}, 30)); // Test case 3\n        System.out.println(minimumAddedCoins(new int[]{1, 3, 4, 5}, 11)); // Test case 4\n        System.out.println(minimumAddedCoins(new int[]{5}, 20)); // Test case 5\n    }\n}"}
{"source_Lan": "java###secondGreaterElement_Test.java", "source_code_str": "    public static int[] secondGreaterElement(int[] nums) {\n        int[] res = new int[nums.length];\n        Arrays.fill(res, -1);\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n        for (int i = 0; i < nums.length; ++i) {\n            while (!pq.isEmpty() && pq.peek()[0] < nums[i]) {\n                res[pq.poll()[1]] = nums[i];\n            }\n            while (!stack.isEmpty() && nums[stack.peek()] < nums[i]) {\n                pq.offer(new int[]{nums[stack.peek()], stack.peek()});\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.PriorityQueue;\nimport java.util.Arrays;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.PriorityQueue;\npublic class secondGreaterElement_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{})));                // Edge case: Empty array\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{1})));              // Edge case: Single element\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{1, 2, 3, 4})));     // All increasing\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{4, 3, 2, 1})));     // All decreasing\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{2, 2, 2, 2})));     // All same\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{1, 5, 2, 6, 3})));  // Mix with second greater elements\n    }\n}"}
{"source_Lan": "java###minDeletion_Test.java", "source_code_str": "public static int minDeletion(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        boolean check = true;\n        for (int i = 0; i + 1 < n; ++i) {\n            if (nums[i] == nums[i + 1] && check) {\n                ++ans;\n            } else {\n                check = !check;\n            }\n        }\n        if ((n - ans) % 2 != 0) {\n            ++ans;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minDeletion_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minDeletion(new int[]{1, 2, 3, 4, 5}));          // Case with no adjacent duplicates\n        System.out.println(minDeletion(new int[]{1, 1, 2, 2, 3, 3}));       // Case with adjacent duplicates\n        System.out.println(minDeletion(new int[]{1, 2, 2, 3, 3, 3, 4}));    // Odd-length with duplicates\n        System.out.println(minDeletion(new int[]{}));                        // Empty array case\n        System.out.println(minDeletion(new int[]{5, 5, 5, 5}));             // All duplicates case\n    }\n}"}
{"source_Lan": "java###maximizeSum_Test.java", "source_code_str": "public static int maximizeSum(int[] nums, int k) {\n        int m = Arrays.stream(nums).max().getAsInt();\n        return (2 * m + k - 1) * k / 2;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class maximizeSum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximizeSum(new int[]{3}, 2));       // Input 2\n        System.out.println(maximizeSum(new int[]{-1, -2, -3, -4}, 3)); // Input 3\n        System.out.println(maximizeSum(new int[]{1, -1, 2, 3}, 4));    // Input 4\n        System.out.println(maximizeSum(new int[]{1, 2, 3, 4}, 10));   // Input 5\n    }\n}"}
{"source_Lan": "java###vowelStrings_Test.java", "source_code_str": "public static int vowelStrings(String[] words, int left, int right) {\n        Set<Character> vowels = new HashSet<Character>() {{\n            add('a');\n            add('e');\n            add('i');\n            add('o');\n            add('u');\n        }};\n        int ans = 0;\n        for (int i = left; i <= right; ++i) {\n            String word = words[i];\n            if (vowels.contains(word.charAt(0)) && vowels.contains(word.charAt(word.length() - 1))) {\n                ++ans;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class vowelStrings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(vowelStrings(new String[]{\"cat\", \"dog\", \"bat\"}, 0, 2)); // Test input 2\n        System.out.println(vowelStrings(new String[]{\"apple\", \"banana\", \"orange\"}, 0, 2)); // Test input 3\n        System.out.println(vowelStrings(new String[]{\"a\", \"b\", \"i\", \"j\", \"u\"}, 1, 3)); // Test input 4\n        System.out.println(vowelStrings(new String[]{\"ex\", \"on\", \"up\"}, 0, 2)); // Test input 5\n    }\n}"}
{"source_Lan": "java###topStudents_Test.java", "source_code_str": "public static List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {\n        Map<String, Integer> words = new HashMap<>();\n        for (String word : positive_feedback) {\n            words.put(word, 3);\n        }\n        for (String word : negative_feedback) {\n            words.put(word, -1);\n        }\n        int n = report.length;\n        int[] scores = new int[n];\n        int[][] A = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            int score = 0;\n            for (String word : report[i].split(\" \")) {\n                score += words.getOrDefault(word, 0);\n            }\n            A[i] = new int[]{-score, student_id[i]};\n        }\n        Arrays.sort(A, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n        List<Integer> topK = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            topK.add(A[i][1]);\n        }\n        return topK;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.*;\npublic class topStudents_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] positive_feedback1 = {\"great\", \"excellent\"};\n        String[] negative_feedback1 = {\"poor\", \"bad\"};\n        String[] report1 = {\"great work\", \"excellent performance\", \"poor job\", \"good effort\"};\n        int[] student_id1 = {1, 2, 3, 4};\n        int k1 = 2;\n        System.out.println(topStudents(positive_feedback1, negative_feedback1, report1, student_id1, k1));\n\n        String[] positive_feedback2 = {\"awesome\"};\n        String[] negative_feedback2 = {\"terrible\"};\n        String[] report2 = {\"awesome task\", \"terrible error\", \"good\"};\n        int[] student_id2 = {5, 6, 7};\n        int k2 = 1;\n        System.out.println(topStudents(positive_feedback2, negative_feedback2, report2, student_id2, k2));\n\n        String[] positive_feedback3 = {\"superb\"};\n        String[] negative_feedback3 = {\"subpar\"};\n        String[] report3 = {\"superb detail\", \"bad quality\", \"average effort\"};\n        int[] student_id3 = {8, 9, 10};\n        int k3 = 3;\n        System.out.println(topStudents(positive_feedback3, negative_feedback3, report3, student_id3, k3));\n\n        String[] positive_feedback4 = {\"amazing\", \"outstanding\"};\n        String[] negative_feedback4 = {\"mediocre\"};\n        String[] report4 = {\"mediocre work\", \"amazing results\", \"outstanding performance\", \"mediocre effort\"};\n        int[] student_id4 = {11, 12, 13, 14};\n        int k4 = 2;\n        System.out.println(topStudents(positive_feedback4, negative_feedback4, report4, student_id4, k4));\n\n        String[] positive_feedback5 = {\"fantastic\"};\n        String[] negative_feedback5 = {\"awful\"};\n        String[] report5 = {\"fantastic job\", \"excellent\", \"awful mistake\"};\n        int[] student_id5 = {15, 16, 17};\n        int k5 = 4;\n    }\n}"}
{"source_Lan": "java###passThePillow_Test.java", "source_code_str": "public static int passThePillow(int n, int time) {\n        time %= (n - 1) * 2;\n        return time < n ? time + 1 : n * 2 - time - 1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class passThePillow_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(passThePillow(2, 1));\n        System.out.println(passThePillow(3, 5));\n        System.out.println(passThePillow(5, 10));\n        System.out.println(passThePillow(4, 15));\n    }\n}"}
{"source_Lan": "java###collectTheCoins_Test.java", "source_code_str": "public static int collectTheCoins(int[] coins, int[][] edges) {\n        int n = coins.length;\n        List<Integer>[] g = new List[n];\n        for (int i = 0; i < n; ++i) {\n            g[i] = new ArrayList<Integer>();\n        }\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0], y = edge[1];\n            g[x].add(y);\n            g[y].add(x);\n            ++degree[x];\n            ++degree[y];\n        }\n        int rest = n;\n        \n        Queue<Integer> queue = new ArrayDeque<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (degree[i] == 1 && coins[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            --degree[u];\n            --rest;\n            for (int v : g[u]) {\n                --degree[v];\n                if (degree[v] == 1 && coins[v] == 0) {\n                    queue.offer(v);\n                }\n            }\n        }\n        \n        for (int x = 0; x < 2; ++x) {\n            queue = new ArrayDeque<Integer>();\n            for (int i = 0; i < n; ++i) {\n                if (degree[i] == 1) {\n                    queue.offer(i);\n                }\n            }\n            while (!queue.isEmpty()) {\n                int u = queue.poll();\n                --degree[u];\n                --rest;\n                for (int v : g[u]) {\n                    --degree[v];\n                }\n            }\n        }\n        return rest == 0 ? 0 : (rest - 1) * 2;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Queue;\nimport java.util.*;\npublic class collectTheCoins_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(collectTheCoins(new int[]{0, 0, 0}, new int[][]{{0, 1}, {1, 2}})); // Test input 1\n        System.out.println(collectTheCoins(new int[]{1, 0, 0, 1}, new int[][]{{0, 1}, {1, 2}, {0, 3}})); // Test input 2\n        System.out.println(collectTheCoins(new int[]{0, 1, 0, 0}, new int[][]{{0, 1}, {0, 2}, {0, 3}})); // Test input 3\n        System.out.println(collectTheCoins(new int[]{1, 1, 1}, new int[][]{{0, 1}, {1, 2}})); // Test input 4\n        System.out.println(collectTheCoins(new int[]{0, 0, 0, 0, 1}, new int[][]{{0, 1}, {0, 2}, {0, 3}, {0, 4}})); // Test input 5\n    }\n}"}
{"source_Lan": "java###findDelayedArrivalTime_Test.java", "source_code_str": "public static int findDelayedArrivalTime(int arrivalTime, int delayedTime) {\n        return (arrivalTime + delayedTime) % 24;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.*;\npublic class findDelayedArrivalTime_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findDelayedArrivalTime(10, 5));   // Normal case: 10 + 5 = 15\n        System.out.println(findDelayedArrivalTime(23, 2));   // Boundary condition: 23 + 2 = 1(next day)\n        System.out.println(findDelayedArrivalTime(1, 24));   // Overflow: 1 + 24 = 1(full cycle)\n        System.out.println(findDelayedArrivalTime(0, -1));   // Underflow: 0 +(-1) = 23(previous day)\n        System.out.println(findDelayedArrivalTime(15, 0));   // No delay: 15 + 0 = 15\n    }\n}"}
{"source_Lan": "java###checkIfPrerequisite_Test.java", "source_code_str": "    public static List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {\n        List<Integer>[] g = new List[numCourses];\n        for (int i = 0; i < numCourses; i++) {\n            g[i] = new ArrayList<Integer>();\n        }\n        int[] indgree = new int[numCourses];\n        boolean[][] isPre = new boolean[numCourses][numCourses];\n        for (int[] p : prerequisites) {\n            ++indgree[p[1]];\n            g[p[0]].add(p[1]);\n        }\n        Queue<Integer> queue = new ArrayDeque<Integer>();\n        for (int i = 0; i < numCourses; ++i) {\n            if (indgree[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int cur = queue.poll();\n            for (int ne : g[cur]) {\n                isPre[cur][ne] = true;\n                for (int i = 0; i < numCourses; ++i) {\n                    isPre[i][ne] = isPre[i][ne] | isPre[i][cur];\n                }\n                --indgree[ne];\n                if (indgree[ne] == 0) {\n                    queue.offer(ne);\n                }\n            }\n        }\n        List<Boolean> res = new ArrayList<Boolean>();\n        for (int[] query : queries) {\n            res.add(isPre[query[0]][query[1]]);\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Queue;\nimport java.util.ArrayDeque;\npublic class checkIfPrerequisite_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1\n        int numCourses1 = 4;\n        int[][] prerequisites1 = {{1, 0}, {2, 1}, {3, 2}};\n        int[][] queries1 = {{0, 1}, {1, 2}, {2, 3}, {0, 3}, {3, 0}};\n        System.out.println(checkIfPrerequisite(numCourses1, prerequisites1, queries1));\n\n        // Test input 2\n        int numCourses2 = 3;\n        int[][] prerequisites2 = {{0, 1}};\n        int[][] queries2 = {{0, 1}, {1, 0}, {0, 2}, {2, 1}, {1, 2}};\n        System.out.println(checkIfPrerequisite(numCourses2, prerequisites2, queries2));\n\n        // Test input 3\n        int numCourses3 = 5;\n        int[][] prerequisites3 = {{0, 1}, {0, 2}, {2, 3}, {1, 3}, {3, 4}};\n        int[][] queries3 = {{0, 3}, {1, 4}, {4, 0}, {2, 0}, {3, 1}};\n        System.out.println(checkIfPrerequisite(numCourses3, prerequisites3, queries3));\n\n        // Test input 4\n        int numCourses4 = 2;\n        int[][] prerequisites4 = {};\n        int[][] queries4 = {{0, 1}, {1, 0}};\n        System.out.println(checkIfPrerequisite(numCourses4, prerequisites4, queries4));\n\n        // Test input 5\n        int numCourses5 = 0;\n        int[][] prerequisites5 = {};\n        int[][] queries5 = {};\n        System.out.println(checkIfPrerequisite(numCourses5, prerequisites5, queries5));\n    }\n}"}
{"source_Lan": "java###numFactoredBinaryTrees_Test.java", "source_code_str": "public static int numFactoredBinaryTrees(int[] arr) {\n        Arrays.sort(arr);\n        int n = arr.length;\n        long[] dp = new long[n];\n        long res = 0, mod = 1000000007;\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            for (int left = 0, right = i - 1; left <= right; left++) {\n                while (right >= left && (long) arr[left] * arr[right] > arr[i]) {\n                    right--;\n                }\n                if (right >= left && (long) arr[left] * arr[right] == arr[i]) {\n                    if (right != left) {\n                        dp[i] = (dp[i] + dp[left] * dp[right] * 2) % mod;\n                    } else {\n                        dp[i] = (dp[i] + dp[left] * dp[right]) % mod;\n                    }\n                }\n            }\n            res = (res + dp[i]) % mod;\n        }\n        return (int) res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class numFactoredBinaryTrees_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInput1 = {};\n        int[] testInput2 = {2, 4, 8};\n        int[] testInput3 = {3, 9, 27};\n        int[] testInput4 = {1, 2, 4, 8};\n        int[] testInput5 = {10, 20, 100};\n        \n        System.out.println(numFactoredBinaryTrees(testInput1)); // Expecting: 1\n        System.out.println(numFactoredBinaryTrees(testInput2)); // Expecting: 7\n        System.out.println(numFactoredBinaryTrees(testInput3)); // Expecting: 5\n        System.out.println(numFactoredBinaryTrees(testInput4)); // Expecting: 15\n        System.out.println(numFactoredBinaryTrees(testInput5)); // Expecting: 3\n    }\n}"}
{"source_Lan": "java###maxAbsoluteSum_Test.java", "source_code_str": "public static int maxAbsoluteSum(int[] nums) {\n        int positiveMax = 0, negativeMin = 0;\n        int positiveSum = 0, negativeSum = 0;\n        for (int num : nums) {\n            positiveSum += num;\n            positiveMax = Math.max(positiveMax, positiveSum);\n            positiveSum = Math.max(0, positiveSum);\n            negativeSum += num;\n            negativeMin = Math.min(negativeMin, negativeSum);\n            negativeSum = Math.min(0, negativeSum);\n        }\n        return Math.max(positiveMax, -negativeMin);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class maxAbsoluteSum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxAbsoluteSum(new int[]{})); // input1: []\n        System.out.println(maxAbsoluteSum(new int[]{1, 2, -3, 4, -1})); // input2: [1, 2, -3, 4, -1]\n        System.out.println(maxAbsoluteSum(new int[]{-5, -2, -3, -1})); // input3: [-5, -2, -3, -1]\n        System.out.println(maxAbsoluteSum(new int[]{3, 5, 0, -2, 1})); // input4: [3, 5, 0, -2, 1]\n        System.out.println(maxAbsoluteSum(new int[]{0, 0, 0, 0})); // input5: [0, 0, 0, 0]\n    }\n}"}
{"source_Lan": "java###countOfPairs_Test.java", "source_code_str": "public static int countOfPairs(int[] nums) {\n        final int MOD = (int)(1e9 + 7);\n        int m = nums.length;\n        int n = Arrays.stream(nums).max().getAsInt();\n        int[] f = new int[n + 1];\n        \n        for (int v = 0; v <= nums[0]; ++v) f[v] = 1;\n        List<Integer> preSums = new ArrayList<>();\n        \n        for (int i = 1; i <= m; ++i) {\n            \n            preSums.clear();\n            int preSum = 0;\n            for(int v : f){\n                preSum += v;\n                preSum %= MOD; \n                preSums.add(preSum);\n            }\n            \n            if (i == m) return preSums.get(preSums.size() - 1);\n            \n            for (int j = 0; j <= nums[i]; ++j) {\n                int ceil = Math.min(j, nums[i-1] - nums[i] + j);\n                if (ceil >= 0)\n                    f[j] = preSums.get(ceil);\n                else \n                    f[j] = 0;\n            }\n            for (int j = nums[i] + 1; j < f.length; ++j) {\n                f[j] = 0;\n            }\n        }\n        \n        return 0;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.*;\npublic class countOfPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countOfPairs(new int[]{0}));           // Test input: nums=[0]\n        System.out.println(countOfPairs(new int[]{1, 2}));        // Test input: nums=[1, 2]\n        System.out.println(countOfPairs(new int[]{3, 3, 3}));     // Test input: nums=[3, 3, 3]\n        System.out.println(countOfPairs(new int[]{0, 1, 2, 3, 4})); // Test input: nums=[0, 1, 2, 3, 4]\n    }\n}"}
{"source_Lan": "java###winningPlayerCount_Test.java", "source_code_str": "public static int winningPlayerCount(int n, int[][] pick) {\n        int[][] cnts = new int[n][11];\n        for (int[] p : pick) {\n            cnts[p[0]][p[1]]++;\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int c : cnts[i]) {\n                if (c > i) {\n                    ans++;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class winningPlayerCount_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(winningPlayerCount(3, new int[][]{{0,0},{1,0},{2,0}})); \n        System.out.println(winningPlayerCount(3, new int[][]{{0,1},{1,1},{2,1}})); \n        System.out.println(winningPlayerCount(5, new int[][]{{0,1},{1,2},{2,3},{3,2},{4,3}})); \n        System.out.println(winningPlayerCount(4, new int[][]{{0,2},{1,3},{2,1},{3,0}})); \n        System.out.println(winningPlayerCount(6, new int[][]{{0,1},{1,1},{2,1},{2,10},{3,1},{4,0},{5,5}})); \n    }\n}"}
{"source_Lan": "java###mostFrequent_Test.java", "source_code_str": "public static int mostFrequent(int a[], int n)\n    {\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        for(int i=0;i<n;i++)\n        {\n            if(mp.containsKey(a[i]))\n                mp.put(a[i], mp.get(a[i])+1);\n            else\n                mp.put(a[i],1);\n        }\n        int ans=-1,res=0;\n        for(Entry<Integer,Integer> val : mp.entrySet())\n            res=Math.max(res,val.getValue());\n        for(Entry<Integer,Integer> val : mp.entrySet())\n        {\n            if (val.getValue()==res&&val.getKey()>ans)\n                ans=val.getKey();\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map.Entry;\nimport java.util.HashMap;\nimport java.util.Map.Entry;\npublic class mostFrequent_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(mostFrequent(new int[]{1}, 1)); // Test input 1\n        System.out.println(mostFrequent(new int[]{2, 2, 2}, 3)); // Test input 2\n        System.out.println(mostFrequent(new int[]{1, 2, 3, 4}, 4)); // Test input 3\n        System.out.println(mostFrequent(new int[]{1, 1, 2, 2, 3}, 5)); // Test input 4\n        System.out.println(mostFrequent(new int[]{}, 0)); // Test input 5\n    }\n}"}
{"source_Lan": "java###minDifference_Test.java", "source_code_str": "public static int minDifference(int n, int[] arr, int x) {\n        int ans = n + 1;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((arr[i] ^ arr[j]) <= x) {\n                    ans = Math.min(ans, j - i);\n                }\n            }\n        }\n        return (ans == n + 1) ? -1 : ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minDifference_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minDifference(2, new int[]{1, 2}, 1)); // Output: -1\n        System.out.println(minDifference(3, new int[]{1, 2, 3}, 2)); // Output: 1\n        System.out.println(minDifference(4, new int[]{1, 1, 1, 1}, 0)); // Output: 1\n        System.out.println(minDifference(5, new int[]{5, 1, 2, 3, 4}, 5)); // Output: 1\n        System.out.println(minDifference(3, new int[]{1, 3, 2}, 2)); // Output: 1\n    }\n}"}
{"source_Lan": "java###geeklandElections_Test.java", "source_code_str": "    public static boolean geeklandElections(int n, int k, String s) {\n        int votes = 0;\n        for (int i = 0; i < n; i++)\n            if (s.charAt(i) == '1') votes++;\n        return (votes + k) > (n - (votes + k));\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class geeklandElections_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(geeklandElections(0, 0, \"\"));\n    System.out.println(geeklandElections(1, 1, \"1\"));\n    System.out.println(geeklandElections(2, 1, \"01\"));\n    System.out.println(geeklandElections(3, 2, \"101\"));\n    System.out.println(geeklandElections(4, 1, \"0110\"));\n}\n}"}
{"source_Lan": "java###minimizeArr_Test.java", "source_code_str": "    public static int minimizeArr(int n, int[] arr) {\n        \n        int mi = Arrays.stream(arr).min().getAsInt();\n        int ct = 0;\n        \n        for (int j : arr) {\n            if (j == mi) ct++;\n        }\n        \n        if (ct == 1) return 1;\n        \n        for (int j : arr) {\n            if (j % mi != 0) return 1;\n        }\n        \n        return (int)Math.ceil((float)ct / 2);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimizeArr_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] arr1 = {2, 4, 6, 8, 10};\n        int[] arr2 = {3, 6, 9, 12};\n        int[] arr3 = {4, 8, 12};\n        int[] arr4 = {6, 12};\n        int[] arr5 = {12};\n\n        System.out.println(minimizeArr(arr1.length, arr1));\n        System.out.println(minimizeArr(arr2.length, arr2));\n        System.out.println(minimizeArr(arr3.length, arr3));\n        System.out.println(minimizeArr(arr4.length, arr4));\n        System.out.println(minimizeArr(arr5.length, arr5));\n    }\n}"}
{"source_Lan": "java###resultArray_Test.java", "source_code_str": "    public static int[] resultArray(int[] nums) {\n        int n = nums.length;\n        List<Integer> a = new ArrayList<>();\n        List<Integer> b = new ArrayList<>();\n        a.add(nums[0]);\n        b.add(nums[1]);\n        for (int i = 2; i < n; i++) {\n            if (a.get(a.size() - 1) > b.get(b.size() - 1)) {\n                a.add(nums[i]);\n            } else {\n                b.add(nums[i]);\n            }\n        }\n        a.addAll(b);\n        for (int i = 0; i < n; i++) {\n            nums[i] = a.get(i);\n        }\n        return nums;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class resultArray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(resultArray(new int[]{1, 2, 3, 4, 5})));\n        System.out.println(Arrays.toString(resultArray(new int[]{5, 4, 3, 2, 1})));\n        System.out.println(Arrays.toString(resultArray(new int[]{1, 1, 1, 1, 1})));\n        System.out.println(Arrays.toString(resultArray(new int[]{-1, -2, -3, -4, -5})));\n        System.out.println(Arrays.toString(resultArray(new int[]{10, 20, 30, 40, 50})));\n    }\n}"}
{"source_Lan": "java###findKOr_Test.java", "source_code_str": "    public static int findKOr(int[] nums, int k) {\n        int ans = 0;\n        for (int i = 0; i < 31; ++i) {\n            int cnt = 0;\n            for (int num : nums) {\n                if (((num >> i) & 1) != 0) {\n                    ++cnt;\n                }\n            }\n            if (cnt >= k) {\n                ans |= 1 << i;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findKOr_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findKOr(new int[]{0}, 1));\n        System.out.println(findKOr(new int[]{1, 2, 3, 4, 5}, 3));\n        System.out.println(findKOr(new int[]{-1, -2, -3, -4, -5}, 2));\n        System.out.println(findKOr(new int[]{10, 20, 30, 40, 50}, 4));\n        System.out.println(findKOr(new int[]{5, 10, 15, 20, 25}, 5));\n    }\n}"}
{"source_Lan": "java###maximumSumOfHeights_Test.java", "source_code_str": "    public static long maximumSumOfHeights(List<Integer> maxHeights) {\n        int n = maxHeights.size();\n        long res = 0;\n        for (int i = 0; i < n; i++) {\n            int pre = maxHeights.get(i);\n            long sum = pre;\n            for (int j = i - 1; j >= 0; j--) {\n                pre = Math.min(pre, maxHeights.get(j));\n                sum += pre;\n            }\n            int suf = maxHeights.get(i);\n            for (int j = i + 1; j < n; j++) {\n                suf = Math.min(suf, maxHeights.get(j));\n                sum += suf;\n            }\n            res = Math.max(res, sum);\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class maximumSumOfHeights_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumSumOfHeights(Arrays.asList(1, 2, 3, 4, 5)));\n        System.out.println(maximumSumOfHeights(Arrays.asList(5, 4, 3, 2, 1)));\n        System.out.println(maximumSumOfHeights(Arrays.asList(1, 1, 1, 1, 1)));\n        System.out.println(maximumSumOfHeights(Arrays.asList(100, 200, 300, 400, 500)));\n        System.out.println(maximumSumOfHeights(Arrays.asList(50, 40, 30, 20, 10)));\n    }\n}"}
{"source_Lan": "java###candyShop2_Test.java", "source_code_str": "    public static int candyShop2(int n, int[] candies) {\n        int ans = 0;\n        Set<Integer> hs = new HashSet<>();\n        for(int x : candies)\n            if(hs.add(x))\n                ans += x;\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class candyShop2_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(candyShop2(0, new int[]{}));\n        System.out.println(candyShop2(1, new int[]{1}));\n        System.out.println(candyShop2(2, new int[]{1, 2}));\n        System.out.println(candyShop2(3, new int[]{1, 1, 2}));\n        System.out.println(candyShop2(4, new int[]{1, 2, 3, 4}));\n    }\n}"}
{"source_Lan": "java###minOPs_Test.java", "source_code_str": "    public static int minOPs(int n, int[] A) {\n        Map<Integer, Integer> m = new HashMap<>();\n        for (int it : A) {\n            m.put(it, m.getOrDefault(it, 0) + 1);\n        }\n        int[] v = new int[m.size()];\n        int index = 0;\n        for (int value : m.values()) {\n            v[index++] = value;\n        }\n        Arrays.sort(v);\n        int sum = 0;\n        for (int i = v.length - 1; i >= 0; i--) {\n            sum += v[i];\n            if (sum > (n / 2)) {\n                return v.length - 1 - i;\n            }\n        }\n        return 0; \n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Arrays;\npublic class minOPs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minOPs(5, new int[]{1, 2, 3, 4, 5}));\n        System.out.println(minOPs(10, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));\n        System.out.println(minOPs(7, new int[]{1, 2, 3, 4, 5, 6, 7}));\n        System.out.println(minOPs(15, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}));\n        System.out.println(minOPs(10, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));\n    }\n}"}
{"source_Lan": "java###consecutiveVal_Test.java", "source_code_str": "    public static String consecutiveVal(int n, List<Integer> a) {\n        StringBuilder result = new StringBuilder();\n        Map<Integer, Boolean> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            mp.put(a.get(i), true);\n        }\n        for (int i = 0; i < n; i++) {\n            if (Boolean.TRUE.equals(mp.get(a.get(i) - 1)) ||\n                Boolean.TRUE.equals(mp.get(a.get(i) + 1))) {\n                result.append('1');\n            } else {\n                result.append('0');\n            }\n        }\n        return result.toString();\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class consecutiveVal_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(consecutiveVal(0, new ArrayList<>()));\n        System.out.println(consecutiveVal(1, Arrays.asList(1)));\n        System.out.println(consecutiveVal(2, Arrays.asList(1, 2)));\n        System.out.println(consecutiveVal(3, Arrays.asList(1, 2, 3)));\n        System.out.println(consecutiveVal(4, Arrays.asList(1, 2, 3, 4)));\n    }\n}"}
{"source_Lan": "java###maxFrequencyElements_Test.java", "source_code_str": "    public static int maxFrequencyElements(int[] nums) {\n        int ans = 0, maxCnt = 0;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        for (int x : nums) {\n            int c = cnt.merge(x, 1, Integer::sum);\n            if (c > maxCnt) {\n                maxCnt = ans = c;\n            } else if (c == maxCnt) {\n                ans += c;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maxFrequencyElements_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxFrequencyElements(new int[]{1,2,3,4,5}));\n        System.out.println(maxFrequencyElements(new int[]{1,1,1,1,1}));\n        System.out.println(maxFrequencyElements(new int[]{1,2,2,3,3,3,4,4,4,4,5,5,5,5,5}));\n        System.out.println(maxFrequencyElements(new int[]{10,20,30,40,50}));\n        System.out.println(maxFrequencyElements(new int[]{1,1,2,2,3,3,4,4,5,5,6,6,7,7}));\n    }\n}"}
{"source_Lan": "java###maximumBeauty_Test.java", "source_code_str": "    public static int maximumBeauty(int[] nums, int k) {\n        int res = 0, n = nums.length;\n        Arrays.sort(nums);\n        for (int i = 0, j = 0; i < n; i++) {\n            while (nums[i] - 2 * k > nums[j]) {\n                j++;\n            }\n            res = Math.max(res, i - j + 1);\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumBeauty_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumBeauty(new int[]{1, 2, 3, 4, 5}, 1));\n        System.out.println(maximumBeauty(new int[]{5, 4, 3, 2, 1}, 2));\n        System.out.println(maximumBeauty(new int[]{1, 1, 1, 1, 1}, 0));\n        System.out.println(maximumBeauty(new int[]{-1, -2, -3, -4, -5}, 2));\n        System.out.println(maximumBeauty(new int[]{100, 200, 300, 400, 500}, 50));\n    }\n}"}
{"source_Lan": "java###minimizeArrayScore_Test.java", "source_code_str": "    public static int minimizeArrayScore(int n, int[] arr) {\n        Arrays.sort(arr);\n        int max = Integer.MIN_VALUE;\n        int low = 0, high = n - 1;\n        while(low < high)\n            max = Math.max(max, arr[high--] + arr[low++]);\n        return max;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimizeArrayScore_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimizeArrayScore(0, new int[]{}));\n        System.out.println(minimizeArrayScore(1, new int[]{1}));\n        System.out.println(minimizeArrayScore(2, new int[]{1,2}));\n        System.out.println(minimizeArrayScore(3, new int[]{1,2,3}));\n        System.out.println(minimizeArrayScore(4, new int[]{1,2,3,4}));\n    }\n}"}
{"source_Lan": "java###maximumSum_Test.java", "source_code_str": "public static int maximumSum(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        int res = -1;\n        for (int i : nums) {\n            int digitsSum = 0;\n            int temp = i;\n            while (temp > 0) {\n                digitsSum += temp % 10;\n                temp /= 10;\n            }\n            if (map.containsKey(digitsSum)) {\n                res = Math.max(res, map.get(digitsSum) + i);\n                map.put(digitsSum, Math.max(map.get(digitsSum), i));\n            } else {\n                map.put(digitsSum, i);\n            }\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maximumSum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] nums1 = {1, 2, 3, 4, 5};\n        int[] nums2 = {10, 20, 30, 40, 50};\n        int[] nums3 = {100, 200, 300, 400, 500};\n        int[] nums4 = {1000, 2000, 3000, 4000, 5000};\n        int[] nums5 = {10000, 20000, 30000, 40000, 50000};\n\n        System.out.println(maximumSum(nums1));\n        System.out.println(maximumSum(nums2));\n        System.out.println(maximumSum(nums3));\n        System.out.println(maximumSum(nums4));\n        System.out.println(maximumSum(nums5));\n    }\n}"}
{"source_Lan": "java###maxDistToClosest_Test.java", "source_code_str": "public static int maxDistToClosest(int[] seats) {\n        int res = 0;\n        int l = 0;\n        while (l < seats.length && seats[l] == 0) {\n            ++l;\n        }\n        res = Math.max(res, l);\n        while (l < seats.length) {\n            int r = l + 1;\n            while (r < seats.length && seats[r] == 0) {\n                ++r;\n            }\n            if (r == seats.length) {\n                res = Math.max(res, r - l - 1);\n            } else {\n                res = Math.max(res, (r - l) / 2);\n            }\n            l = r;\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class maxDistToClosest_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] seats1 = {1,0,0,0,1,0,1};\n        int[] seats2 = new int[300];\n        Arrays.fill(seats2, 0);\n\n        System.out.println(maxDistToClosest(seats1));\n        System.out.println(maxDistToClosest(seats2));\n    }\n}"}
{"source_Lan": "java###getMax_Test.java", "source_code_str": "public static int getMax(int x) {\n        \n        boolean flag = false;\n        int prev = -1;\n        int cnt = 0;\n        for (int i = 30; i >= 0; i--) {\n            if (cnt >= 2) break;\n            if (!flag && (x & (1 << i)) > 0) {\n                flag = true;\n                continue;\n            }\n            if (flag) {\n                if ((x & (1 << i)) == 0 && prev == -1) {\n                    prev = i;\n                    x |= (1 << i);\n                    cnt++;\n                }\n                if ((x & (1 << i)) == 0 && prev - i > 1) {\n                    x |= (1 << i);\n                    cnt++;\n                }\n            }\n        }\n        return x;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class getMax_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(getMax(0));\n        System.out.println(getMax(1));\n        System.out.println(getMax(2));\n        System.out.println(getMax(3));\n        System.out.println(getMax(4));\n    }\n}"}
{"source_Lan": "java###getCount_Test.java", "source_code_str": "    public static long getCount(int n, int[] arr, int a, int b) {\n        \n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                boolean flag = false;\n                for (int k = i; k <= j; k++) {\n                    for (int l = k + 1; l <= j; l++) {\n                        if (arr[k] + arr[l] < a || arr[k] + arr[l] > b) {\n                            flag = true;\n                        }\n                    }\n                }\n                if (!flag) ans++;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\n\npublic class getCount_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(getCount(0, new int[]{}, 0, 0));\n    System.out.println(getCount(1, new int[]{10}, 5, 15));\n    System.out.println(getCount(2, new int[]{10, 20}, 5, 35));\n    System.out.println(getCount(3, new int[]{10, 20, 30}, 5, 45));\n    System.out.println(getCount(4, new int[]{10, 20, 30, 40}, 5, 55));\n}\n}"}
{"source_Lan": "java###countSeniors_Test.java", "source_code_str": "public static int countSeniors(String[] details) {\n        int count = 0;\n        for (String info : details) {\n            if (Integer.parseInt(info.substring(11, 13)) > 60) {\n                count++;\n            }\n        }\n        return count;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\n\npublic class countSeniors_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(countSeniors(new String[]{\"123#123456789#A\", \"123#123456789#B\", \"123#123456789#C\"}));\n    System.out.println(countSeniors(new String[]{\"123#600000000#A\", \"123#600000000#B\", \"123#600000000#C\"}));\n    System.out.println(countSeniors(new String[]{\"123#700000000#A\", \"123#700000000#B\", \"123#700000000#C\"}));\n    System.out.println(countSeniors(new String[]{\"123#123456789#A\", \"123#600000000#B\", \"123#700000000#C\"}));\n}\n}"}
{"source_Lan": "java###numberOfChild_Test.java", "source_code_str": "    public static int numberOfChild(int n, int k) {\n        int ans=0;\n        for(int neg=-1;k!=0;k--){\n            if(ans==0||ans==n-1){neg*=-1;}\n            ans+=neg;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class numberOfChild_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(numberOfChild(5, 0)); // Expected output: 0\n        System.out.println(numberOfChild(7, 1)); // Expected output: 1\n        System.out.println(numberOfChild(8, 5)); // Expected output: 1\n        System.out.println(numberOfChild(6, 3)); // Expected output: 3\n        System.out.println(numberOfChild(10, 10)); // Expected output: 0\n    }\n}"}
{"source_Lan": "java###minOperations_Test.java", "source_code_str": "    public static int minOperations(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        for (int i = 0; i < n - 2; i++) {\n            if (nums[i] == 0) {\n                nums[i + 1] ^= 1;\n                nums[i + 2] ^= 1;\n                ans++;\n            }\n        }\n        return nums[n - 2] != 0 && nums[n - 1] != 0 ? ans : -1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] test1 = {1, 1, 1};\n        int[] test2 = {0, 0, 0};\n        int[] test3 = {1, 0, 0, 1};\n        int[] test4 = {0, 1, 0, 1, 0, 1};\n        int[] test5 = {1, 1, 0};\n\n        System.out.println(minOperations(test1));\n        System.out.println(minOperations(test2));\n        System.out.println(minOperations(test3));\n        System.out.println(minOperations(test4));\n        System.out.println(minOperations(test5));\n    }\n}"}
{"source_Lan": "java###minEnd_Test.java", "source_code_str": "    public static long minEnd(int n, int x) {\n        n--; \n        long ans = x;\n        int i = 0, j = 0;\n        while ((n >> j) > 0) {\n            \n            if ((ans >> i & 1) == 0) {\n                \n                ans |= (long) (n >> j & 1) << i;\n                j++;\n            }\n            i++;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minEnd_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minEnd(1, 0));   // Output for input1\n        System.out.println(minEnd(2, 1));   // Output for input2\n        System.out.println(minEnd(15, 8));  // Output for input3\n        System.out.println(minEnd(4, 3));   // Output for input4\n        System.out.println(minEnd(1, 1));   // Output for input5\n    }\n}"}
{"source_Lan": "java###giveGem_Test.java", "source_code_str": "public static int giveGem(int[] gem, int[][] operations) {\n        for (int[] operation : operations) {\n            int x = operation[0], y = operation[1];\n            int number = gem[x] / 2;\n            gem[x] -= number;\n            gem[y] += number;\n        }\n        int mn = gem[0], mx = gem[0];\n        for (int number : gem) {\n            mn = Math.min(number, mn);\n            mx = Math.max(number, mx);\n        }\n        return mx - mn;\n    }", "source_code_shell": "import java.util.Arrays;\npublic class giveGem_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1\n        int[] gem1 = {10, 20, 30};\n        int[][] operations1 = {{0, 1}, {1, 2}};\n        System.out.println(giveGem(gem1, operations1));\n\n        // Test input 2\n        int[] gem2 = {50, 50, 50, 50};\n        int[][] operations2 = {{0, 1}, {1, 2}, {2, 3}};\n        System.out.println(giveGem(gem2, operations2));\n\n        // Test input 3\n        int[] gem3 = {0, 0, 0, 0};\n        int[][] operations3 = {{0, 1}, {1, 2}, {2, 0}};\n        System.out.println(giveGem(gem3, operations3));\n\n        // Test input 4\n        int[] gem4 = {5};\n        int[][] operations4 = {}; // No operations\n        System.out.println(giveGem(gem4, operations4));\n\n        // Test input 5\n        int[] gem5 = {100, 200, 300, 400};\n        int[][] operations5 = {{0, 3}, {1, 3}, {2, 3}};\n        System.out.println(giveGem(gem5, operations5));\n    }\n}"}
{"source_Lan": "java###Towerheight_Test.java", "source_code_str": "    public static int Towerheight(int n, int k, int[] arr) {\n        \n        Stack<Integer> st = new Stack<>();\n        \n        int totalHeight = 0;\n        \n        int i = 0;\n        \n        for (int j = 0; j < n; j++) {\n            totalHeight += arr[j];\n            st.push(arr[j]);\n            \n            if (totalHeight > k) {\n                int removeBoxes = i + 1;\n                \n                while (removeBoxes > 0 && !st.empty()) {\n                    totalHeight -= st.pop();\n                    removeBoxes--;\n                }\n                i++;\n            }\n        }\n        \n        return totalHeight;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Stack;\npublic class Towerheight_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(Towerheight(0, 10, new int[]{})); // Test input 1\n        System.out.println(Towerheight(3, 15, new int[]{5, 5, 5})); // Test input 2\n        System.out.println(Towerheight(5, 10, new int[]{1, 2, 3, 4, 5})); // Test input 3\n        System.out.println(Towerheight(4, 10, new int[]{2, 3, 5, 1})); // Test input 4\n        System.out.println(Towerheight(5, 20, new int[]{5, 5, 5, 5, 5})); // Test input 5\n        System.out.println(Towerheight(3, 1, new int[]{2, 2, 2})); // Test input 6\n        System.out.println(Towerheight(1, 5, new int[]{10})); // Test input 7\n        System.out.println(Towerheight(4, 0, new int[]{0, 0, 0, 0})); // Test input 8\n        System.out.println(Towerheight(3, 5, new int[]{1, 1, 3})); // Test input 9\n        System.out.println(Towerheight(6, 9, new int[]{2, 3, 4, 1, 1, 1})); // Test input 10\n    }\n}"}
{"source_Lan": "java###doesExists_Test.java", "source_code_str": "    public static String doesExists(String s) {\n        int n = s.length();\n        ArrayList<Integer> hsh = new ArrayList<>(26);\n        for (int i = 0; i < 26; i++) hsh.add(0);\n        for (Character c : s.toCharArray()) hsh.set(c - 'a', hsh.get(c - 'a') + 1);\n        int curr = 0;\n        for (int i = 0; i < 26; i++)\n            if (hsh.get(i) > 0) curr++;\n        if (curr == 1) return \"NO\";\n        return \"YES\";\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\npublic class doesExists_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(doesExists(\"\"));        // Test input 1\n        System.out.println(doesExists(\"a\"));       // Test input 2\n        System.out.println(doesExists(\"aaaa\"));    // Test input 3\n        System.out.println(doesExists(\"ab\"));      // Test input 4\n        System.out.println(doesExists(\"abc\"));     // Test input 5\n        System.out.println(doesExists(\"abcde\"));   // Test input 6\n        System.out.println(doesExists(\"x\"));       // Test input 7\n        System.out.println(doesExists(\"zzzz\"));    // Test input 8\n        System.out.println(doesExists(\"yzy\"));     // Test input 9\n        System.out.println(doesExists(\"aabbcc\"));  // Test input 10\n    }\n}"}
{"source_Lan": "java###minimumDifference_Test.java", "source_code_str": "    public static int minimumDifference(int N, int M, int[][] toys) {\n        List<int[]> list = new ArrayList<>();\n        for(int i = 0; i < N; i++){\n            for(int y : toys[i]){\n                list.add(new int[]{y, i});\n}\n        }\n        Collections.sort(list,\n            new Comparator<int[]>(){\n                public int compare(int x[], int y[]){\n                    return x[0] - y[0];\n                }\n            }\n        );\n        Map<Integer, Integer> hm = new HashMap<>();\n        int ans = Integer.MAX_VALUE;\n        int high = 0, low = 0;\n        while(high < list.size()){\n            hm.put(list.get(high)[1], hm.getOrDefault(list.get(high)[1], 0) + 1);\n            while(hm.size() == N){\n                ans = Math.min(ans, list.get(high)[0] - list.get(low)[0]);\n                hm.put(list.get(low)[1], hm.get(list.get(low)[1]) - 1);\n                if(hm.get(list.get(low)[1]) == 0)\n                    hm.remove(list.get(low)[1]);\n                low++;\n            }\n            high++;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minimumDifference_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumDifference(1, 1, new int[][]{{5}}));\n        System.out.println(minimumDifference(2, 2, new int[][]{{1, 4}, {3, 9}}));\n        System.out.println(minimumDifference(3, 3, new int[][]{{1, 7, 8}, {2, 3, 5}, {4, 6}}));\n        System.out.println(minimumDifference(3, 2, new int[][]{{10, 20}, {30}, {40}}));\n    }\n}"}
{"source_Lan": "java###minimumPushes2_Test.java", "source_code_str": "    public static int minimumPushes2(String word) {\n        int n = word.length();\n        int k = n / 8;\n        return (k * 4 + n % 8) * (k + 1);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumPushes2_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumPushes2(\"\")); // Test Input 1\n        System.out.println(minimumPushes2(\"a\")); // Test Input 2\n        System.out.println(minimumPushes2(\"abcdefgh\")); // Test Input 3\n        System.out.println(minimumPushes2(\"abcdefghijkl\")); // Test Input 4\n        System.out.println(minimumPushes2(\"abcde\")); // Test Input 5\n        System.out.println(minimumPushes2(\"abcdefg\")); // Test Input 6\n        System.out.println(minimumPushes2(\"abcdefghabcdefgh\")); // Test Input 7\n        System.out.println(minimumPushes2(\"abcdefghabc\")); // Test Input 8\n        System.out.println(minimumPushes2(\"a b c d e f g h\")); // Test Input 9\n        System.out.println(minimumPushes2(\"abcdefghabcd\")); // Test Input 10\n    }\n}"}
{"source_Lan": "java###maxPalindromesAfterOperations_Test.java", "source_code_str": "    public static int maxPalindromesAfterOperations(String[] words) {\n        int tot = 0;\n        int mask = 0; \n        for (String w : words) {\n            tot += w.length();\n            for (char c : w.toCharArray()) {\n                mask ^= 1 << (c - 'a');\n            }\n        }\n        tot -= Integer.bitCount(mask); \n        Arrays.sort(words, (a, b) -> a.length() - b.length());\n        int ans = 0;\n        for (String w : words) {\n            tot -= w.length() / 2 * 2; \n            if (tot < 0) break;\n            ans++;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxPalindromesAfterOperations_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"a\", \"b\", \"ab\", \"abc\", \"abcd\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"\", \"\", \"\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"aaa\", \"bb\", \"cc\", \"de\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"a\", \"bb\", \"ccc\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"abcdefghij\", \"klmnopqrst\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"abc\", \"de\", \"fgh\", \"ijkl\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"xyz\", \"xy\", \"abw\", \"wxy\", \"yz\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"a\", \"b\", \"ab\"}));\n        System.out.println(maxPalindromesAfterOperations(new String[]{\"zyxw\", \"xyz\", \"abcd\", \"a\"}));\n    }\n}"}
{"source_Lan": "java###longestCommonPrefix_Test.java", "source_code_str": "    public static int longestCommonPrefix(int[] arr1, int[] arr2) {\n        Set<String> st = new HashSet<>();\n        for (int x : arr1) {\n            String s = Integer.toString(x);\n            for (int i = 1; i <= s.length(); i++) {\n                st.add(s.substring(0, i));\n            }\n        }\n        int ans = 0;\n        for (int x : arr2) {\n            String s = Integer.toString(x);\n            for (int i = 1; i <= s.length(); i++) {\n                if (!st.contains(s.substring(0, i))) {\n                    break;\n                }\n                ans = Math.max(ans, i);\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class longestCommonPrefix_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(longestCommonPrefix(new int[]{}, new int[]{})); // Test input 1\n        System.out.println(longestCommonPrefix(new int[]{12, 23}, new int[]{})); // Test input 2\n        System.out.println(longestCommonPrefix(new int[]{}, new int[]{34, 45})); // Test input 3\n        System.out.println(longestCommonPrefix(new int[]{1234, 1235}, new int[]{123, 12})); // Test input 4\n        System.out.println(longestCommonPrefix(new int[]{456, 789}, new int[]{123, 4567})); // Test input 5\n        System.out.println(longestCommonPrefix(new int[]{11, 11}, new int[]{11, 12})); // Test input 6\n        System.out.println(longestCommonPrefix(new int[]{5}, new int[]{5, 50, 55})); // Test input 7\n        System.out.println(longestCommonPrefix(new int[]{10, 20, 30}, new int[]{2})); // Test input 8\n        System.out.println(longestCommonPrefix(new int[]{1, 10, 100}, new int[]{1, 11})); // Test input 9\n        System.out.println(longestCommonPrefix(new int[]{-11, -12}, new int[]{-1, -2})); // Test input 10\n    }\n}"}
{"source_Lan": "java###maximumStrength_Test.java", "source_code_str": "    public static long maximumStrength(int[] nums, int k) {\n        int n=nums.length;\n        long ans[][][]=new long[n+1][k+1][2];\n        for(int j=0;j<=k;j++){ans[0][j]=new long[]{-(long)1e18,-(long)1e18};}\n        ans[0][0][0]=0;\n        for(int i=1;i<=n;i++){\n            ans[i][0][1]=-(long)1e14;\n            for(int j=1;j<=k;j++){\n                ans[i][j][0]=Math.max(ans[i-1][j][0],ans[i-1][j][1]);\n                ans[i][j][1]=Math.max(ans[i-1][j-1][1],Math.max(ans[i-1][j-1][0],ans[i-1][j][1]))+(long)nums[i-1]*(j%2*2-1)*(k+1-j);\n            }\n        }\n        return Math.max(ans[n][k][0],ans[n][k][1]);\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumStrength_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maximumStrength(new int[]{}, 0));\n        System.out.println(maximumStrength(new int[]{1, 2, 3, 4, 5}, 0));\n        System.out.println(maximumStrength(new int[]{1, 2, 3, 4, 5}, 5));\n        System.out.println(maximumStrength(new int[]{1, 2, 3, 4, 5}, 3));\n        System.out.println(maximumStrength(new int[]{5, 4, 3, 2, 1}, 2));\n        System.out.println(maximumStrength(new int[]{-1, -2, -3, -4, -5}, 3));\n        System.out.println(maximumStrength(new int[]{2147483647, 2147483647, 2147483647}, 2));\n        System.out.println(maximumStrength(new int[]{1, -1, 2, -2, 3, -3}, 6));\n        System.out.println(maximumStrength(new int[]{10}, 1));\n        System.out.println(maximumStrength(new int[]{10, 20, -5, -10, 30}, 4));\n    }\n}"}
{"source_Lan": "java###minOperationsToMakeMedianK_Test.java", "source_code_str": "    public static long minOperationsToMakeMedianK(int[] nums, int k) {\n        Arrays.sort(nums);\n        long ans = 0;\n        int m = nums.length / 2;\n        if (nums[m] > k) {\n            for (int i = m; i >= 0 && nums[i] > k; i--) {\n                ans += nums[i] - k;\n            }\n        } else {\n            for (int i = m; i < nums.length && nums[i] < k; i++) {\n                ans += k - nums[i];\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minOperationsToMakeMedianK_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minOperationsToMakeMedianK(new int[]{1, 2, 3, 4, 5}, 3));\n        System.out.println(minOperationsToMakeMedianK(new int[]{5, 6, 7, 8, 9}, 4));\n        System.out.println(minOperationsToMakeMedianK(new int[]{3, 3, 3, 3}, 3));\n        System.out.println(minOperationsToMakeMedianK(new int[]{1}, 1));\n        System.out.println(minOperationsToMakeMedianK(new int[]{1, 2, 3, 4, 5}, 2));\n        System.out.println(minOperationsToMakeMedianK(new int[]{-1, -2, -3, -4, -5}, -3));\n        System.out.println(minOperationsToMakeMedianK(new int[]{10, 10, 10, 10}, 5));\n        System.out.println(minOperationsToMakeMedianK(new int[]{2147483647, 2147483646}, 2147483647));\n        System.out.println(minOperationsToMakeMedianK(new int[]{1, 2, 3, 4}, 2));\n    }\n}"}
{"source_Lan": "java###maxTotalReward_Test.java", "source_code_str": "    public static int maxTotalReward(int[] rewardValues) {\n        BigInteger f = BigInteger.ONE;\n        for (int v : Arrays.stream(rewardValues).distinct().sorted().toArray()) {\n            BigInteger mask = BigInteger.ONE.shiftLeft(v).subtract(BigInteger.ONE);\n            f = f.or(f.and(mask).shiftLeft(v));\n        }\n        return f.bitLength() - 1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.math.BigInteger;\nimport java.math.BigInteger;\nimport java.util.Arrays;\npublic class maxTotalReward_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxTotalReward(new int[]{})); // Test input 1\n        System.out.println(maxTotalReward(new int[]{0})); // Test input 2\n        System.out.println(maxTotalReward(new int[]{1, 2, 2, 3})); // Test input 3\n        System.out.println(maxTotalReward(new int[]{1, 3, 4, 5})); // Test input 4\n        System.out.println(maxTotalReward(new int[]{10, 15, 10, 20})); // Test input 5\n        System.out.println(maxTotalReward(new int[]{0, 1, 2, 3})); // Test input 6\n        System.out.println(maxTotalReward(new int[]{31, 63, 15})); // Test input 7\n        System.out.println(maxTotalReward(new int[]{100, 200, 300})); // Test input 8\n        System.out.println(maxTotalReward(new int[]{10, 20, 30, 40, 50})); // Test input 9\n    }\n}"}
{"source_Lan": "java###maxSelectedElements_Test.java", "source_code_str": "    public static int maxSelectedElements(int[] nums) {\n        Arrays.sort(nums);\n        Map<Integer, Integer> f = new HashMap<>();\n        for (int x : nums) {\n            f.put(x + 1, f.getOrDefault(x, 0) + 1);\n            f.put(x, f.getOrDefault(x - 1, 0) + 1);\n        }\n        int ans = 0;\n        for (int res : f.values()) {\n            ans = Math.max(ans, res);\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maxSelectedElements_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxSelectedElements(new int[]{1}));\n        System.out.println(maxSelectedElements(new int[]{2, 2, 2, 2}));\n        System.out.println(maxSelectedElements(new int[]{1, 2, 3, 4}));\n        System.out.println(maxSelectedElements(new int[]{1, 3, 5, 10}));\n        System.out.println(maxSelectedElements(new int[]{-3, -2, -1, 0, 1, 2}));\n        System.out.println(maxSelectedElements(new int[]{5, -1, 0, 4, 5, 3, 2}));\n        System.out.println(maxSelectedElements(new int[]{1, 1, 2, 2, 2}));\n        System.out.println(maxSelectedElements(new int[]{10, 15, 20, 25}));\n        System.out.println(maxSelectedElements(new int[]{1, 100, 200, 201, 202}));\n    }\n}"}
{"source_Lan": "java###occurrencesOfElement_Test.java", "source_code_str": "    public static int[] occurrencesOfElement(int[] nums, int[] queries, int x) {\n        List<Integer> pos = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == x) {\n                pos.add(i);\n            }\n        }\n        for (int i = 0; i < queries.length; i++) {\n            if (queries[i] > pos.size()) {\n                queries[i] = -1;\n            } else {\n                queries[i] = pos.get(queries[i] - 1);\n            }\n        }\n        return queries;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class occurrencesOfElement_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] result1 = occurrencesOfElement(new int[]{}, new int[]{1, 2, 3}, 1);\n        int[] result2 = occurrencesOfElement(new int[]{1, 2, 3, 4, 5}, new int[]{1}, 6);\n        int[] result3 = occurrencesOfElement(new int[]{1, 2, 3, 4, 5}, new int[]{}, 3);\n        int[] result4 = occurrencesOfElement(new int[]{1, 2, 3, 3, 4}, new int[]{1, 2, 3}, 3);\n        int[] result5 = occurrencesOfElement(new int[]{1, 2, 3, 3, 4}, new int[]{4, 5}, 3);\n        int[] result6 = occurrencesOfElement(new int[]{1, 3, 3, 3, 4}, new int[]{1}, 3);\n        int[] result7 = occurrencesOfElement(new int[]{3, 3, 3, 3, 3}, new int[]{1, 2}, 3);\n        int[] result8 = occurrencesOfElement(new int[]{5, 6, 7, 8}, new int[]{1, 2}, 5);\n        int[] result9 = occurrencesOfElement(new int[]{10, 20, 10, 40, 10}, new int[]{1, 2, 3}, 10);\n        int[] result10 = occurrencesOfElement(new int[]{9, 10, 8, 9, 9, 1, 3}, new int[]{2, 3, 4}, 9);\n\n        // Print results\n        for(int res : result1) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result2) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result3) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result4) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result5) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result6) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result7) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result8) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result9) System.out.print(res + \" \");\n        System.out.println();\n        for(int res : result10) System.out.print(res + \" \");\n        System.out.println();\n    }\n}"}
{"source_Lan": "java###minOperations2_Test.java", "source_code_str": "    public static int minOperations2(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        for (int i = 0; i < n - 2; i++) {\n            if (nums[i] == 0) {\n                nums[i + 1] ^= 1;\n                nums[i + 2] ^= 1;\n                ans++;\n            }\n        }\n        return nums[n - 2] != 0 && nums[n - 1] != 0 ? ans : -1;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minOperations2_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minOperations2(new int[]{0, 1, 1}));\n        System.out.println(minOperations2(new int[]{0, 0, 1, 1}));\n        System.out.println(minOperations2(new int[]{0, 0, 0, 1}));\n        System.out.println(minOperations2(new int[]{0, 0, 0}));\n        System.out.println(minOperations2(new int[]{1, 0, 1, 0}));\n        System.out.println(minOperations2(new int[]{1, 1, 0, 0}));\n        System.out.println(minOperations2(new int[]{-1, 0, 1}));\n        System.out.println(minOperations2(new int[]{2147483647, 0}));\n    }\n}"}
{"source_Lan": "java###kSum_Test.java", "source_code_str": "    public static long kSum(int[] nums, int k) {\n        int n = nums.length;\n        long total = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] >= 0) {\n                total += nums[i];\n            } else {\n                nums[i] = -nums[i];\n            }\n        }\n        Arrays.sort(nums);\n        long ret = 0;\n        PriorityQueue<long[]> pq = new PriorityQueue<long[]>((a, b) -> Long.compare(a[0], b[0]));\n        pq.offer(new long[]{nums[0], 0});\n        for (int j = 2; j <= k; j++) {\n            long[] arr = pq.poll();\n            long t = arr[0];\n            int i = (int) arr[1];\n            ret = t;\n            if (i == n - 1) {\n                continue;\n            }\n            pq.offer(new long[]{t + nums[i + 1], i + 1});\n            pq.offer(new long[]{t - nums[i] + nums[i + 1], i + 1});\n        }\n        return total - ret;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.PriorityQueue;\npublic class kSum_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(kSum(new int[]{5, 1, 3, 7}, 3)); // Test Input 1\n        System.out.println(kSum(new int[]{-2, -1, 0, 1, 2}, 4)); // Test Input 2\n        System.out.println(kSum(new int[]{1, 2, 3}, 3)); // Test Input 3\n        System.out.println(kSum(new int[]{10, 20, 30}, 4)); // Test Input 4\n        System.out.println(kSum(new int[]{7, 7, 7}, 2)); // Test Input 5\n        System.out.println(kSum(new int[]{-5}, 1)); // Test Input 6\n        System.out.println(kSum(new int[]{1, 2, 3}, 0)); // Test Input 7\n        System.out.println(kSum(new int[]{2, 4, 6, 8}, 2)); // Test Input 8\n        System.out.println(kSum(new int[]{4, 3, 2, 1}, 1)); // Test Input 9\n    }\n}"}
{"source_Lan": "java###minimumDeletions_Test.java", "source_code_str": "    public static int minimumDeletions(String word, int k) {\n        int[] cnt = new int[26];\n        for (char c : word.toCharArray()) {\n            cnt[c - 'a']++;\n        }\n        Arrays.sort(cnt);\n        int maxSave = 0;\n        for (int i = 0; i < 26; i++) {\n            int sum = 0;\n            for (int j = i; j < 26; j++) {\n                sum += Math.min(cnt[j], cnt[i] + k); \n            }\n            maxSave = Math.max(maxSave, sum);\n        }\n        return word.length() - maxSave;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumDeletions_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumDeletions(\"a\", 0)); // Test input 1\n        System.out.println(minimumDeletions(\"abc\", 1)); // Test input 2\n        System.out.println(minimumDeletions(\"aaa\", 1)); // Test input 3\n        System.out.println(minimumDeletions(\"aabbcc\", 2)); // Test input 4\n        System.out.println(minimumDeletions(\"aaabb\", 2)); // Test input 5\n        System.out.println(minimumDeletions(\"abcdabcdabcd\", 3)); // Test input 6\n        System.out.println(minimumDeletions(\"xxyyzz\", 2)); // Test input 7\n        System.out.println(minimumDeletions(\"abcdefghijklmnopqrstuvwxy\", 5)); // Test input 8\n        System.out.println(minimumDeletions(\"zzzzyyyyxxxx\", 0)); // Test input 9\n    }\n}"}
{"source_Lan": "java###minimumArrayLength_Test.java", "source_code_str": "    public static int minimumArrayLength(int[] nums) {\n        int m = Integer.MAX_VALUE;\n        for (int x : nums) {\n            m = Math.min(m, x);\n        }\n        for (int x : nums) {\n            if (x % m > 0) {\n                return 1;\n            }\n        }\n        int cnt = 0;\n        for (int x : nums) {\n            if (x == m) {\n                cnt++;\n            }\n        }\n        return (cnt + 1) / 2;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumArrayLength_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumArrayLength(new int[]{1, 2, 3, 4, 5}));\n        System.out.println(minimumArrayLength(new int[]{5, 5, 5, 5}));\n        System.out.println(minimumArrayLength(new int[]{-1, -2, -3, -4}));\n        System.out.println(minimumArrayLength(new int[]{1, 2, 4, 8, 16}));\n        System.out.println(minimumArrayLength(new int[]{3, 6, 9, 12}));\n        System.out.println(minimumArrayLength(new int[]{8, 8, 8, 8, 8}));\n        System.out.println(minimumArrayLength(new int[]{7, -7, 9, 5}));\n        System.out.println(minimumArrayLength(new int[]{10000, 20000, 30000}));\n        System.out.println(minimumArrayLength(new int[]{-1, -1, 0, 1}));\n    }\n}"}
{"source_Lan": "java###minRectanglesToCoverPoints_Test.java", "source_code_str": "    public static int minRectanglesToCoverPoints(int[][] points, int w) {\n        Arrays.sort(points, (p, q) -> p[0] - q[0]);\n        int ans = 0;\n        int x2 = -1;\n        for (int[] p : points) {\n            if (p[0] > x2) {\n                ans++;\n                x2 = p[0] + w;\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minRectanglesToCoverPoints_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minRectanglesToCoverPoints(new int[][]{}, 5)); // Test input 1\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{1, 1}}, 5)); // Test input 2\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{1, 1}, {2, 2}}, 5)); // Test input 3\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{1, 1}, {3, 3}}, 3)); // Test input 4\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{1, 1}, {4, 4}, {7, 7}}, 2)); // Test input 5\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{10, 5}, {10, 6}, {10, 7}}, 10)); // Test input 6\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{1, 1}, {2, 2}, {3, 3}, {4, 5}}, 5)); // Test input 7\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{1, 1}, {8, 8}, {9, 9}}, 1)); // Test input 8\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{0, 0}, {1, 1}, {2, 2}, {3, 3}}, 2)); // Test input 9\n        System.out.println(minRectanglesToCoverPoints(new int[][]{{0, 0}, {3, 3}, {6, 6}, {9, 9}}, 5)); // Test input 10\n    }\n}"}
{"source_Lan": "java###numberOfSubarrays_Test.java", "source_code_str": "    public static long numberOfSubarrays(int[] nums) {\n        long ans = nums.length;\n        Deque<int[]> st = new ArrayDeque<>();\n        st.push(new int[]{Integer.MAX_VALUE, 0}); \n        for (int x : nums) {\n            while (x > st.peek()[0]) {\n                st.pop();\n            }\n            if (x == st.peek()[0]) {\n                ans += st.peek()[1]++;\n            } else {\n                st.push(new int[]{x, 1});\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\npublic class numberOfSubarrays_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(numberOfSubarrays(new int[]{})); // Input 1: nums = []\n        System.out.println(numberOfSubarrays(new int[]{1, 2, 3, 4, 5})); // Input 2: nums = [1, 2, 3, 4, 5]\n        System.out.println(numberOfSubarrays(new int[]{5, 4, 3, 2, 1})); // Input 3: nums = [5, 4, 3, 2, 1]\n        System.out.println(numberOfSubarrays(new int[]{1, 2, 2, 3, 3, 3})); // Input 4: nums = [1, 2, 2, 3, 3, 3]\n        System.out.println(numberOfSubarrays(new int[]{3, 3, 2, 2, 1})); // Input 5: nums = [3, 3, 2, 2, 1]\n        System.out.println(numberOfSubarrays(new int[]{1, 1, 2, 1, 2})); // Input 6: nums = [1, 1, 2, 1, 2]\n        System.out.println(numberOfSubarrays(new int[]{2})); // Input 7: nums = [2]\n        System.out.println(numberOfSubarrays(new int[]{2, 2})); // Input 8: nums = [2, 2]\n        System.out.println(numberOfSubarrays(new int[]{3, 1, 4, 1, 5})); // Input 9: nums = [3, 1, 4, 1, 5]\n        System.out.println(numberOfSubarrays(new int[]{2147483647, 2147483647, -2147483648})); // Input 10: nums = [2147483647, 2147483647, -2147483648]\n    }\n}"}
{"source_Lan": "java###numberOfPairs_Test.java", "source_code_str": "    public static int numberOfPairs(int[][] points) {\n        Arrays.sort(points, (p, q) -> p[0] != q[0] ? p[0] - q[0] : q[1] - p[1]);\n        int ans = 0;\n        for (int i = 0; i < points.length; i++) {\n            int y0 = points[i][1];\n            int maxY = Integer.MIN_VALUE;\n            for (int j = i + 1; j < points.length; j++) {\n                int y = points[j][1];\n                if (y <= y0 && y > maxY) {\n                    maxY = y;\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class numberOfPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(numberOfPairs(new int[][]{{0, 0}}));\n        System.out.println(numberOfPairs(new int[][]{{1, 2}, {1, 3}, {2, 5}}));\n        System.out.println(numberOfPairs(new int[][]{{1, 2}, {2, 1}, {2, 3}, {1, 4}}));\n        System.out.println(numberOfPairs(new int[][]{{-1, 2}, {-1, 1}, {0, 0}, {1, -1}, {1, 1}}));\n        System.out.println(numberOfPairs(new int[][]{{5, 5}, {5, 5}, {4, 4}, {4, 3}, {3, 3}}));\n        System.out.println(numberOfPairs(new int[][]{{1, 2}, {1, 2}, {1, 2}, {1, 2}}));\n        System.out.println(numberOfPairs(new int[][]{{3, -1}, {3, 0}, {3, 2}, {3, 1}}));\n        System.out.println(numberOfPairs(new int[][]{{10, 10}, {10, 10}, {10, 20}, {10, 15}}));\n        System.out.println(numberOfPairs(new int[][]{{2, 1}, {2, 2}, {3, 0}, {1, 3}}));\n        System.out.println(numberOfPairs(new int[][]{{1, 3}, {2, 2}, {3, 1}, {4, 0}}));\n    }\n}"}
{"source_Lan": "java###pickGifts_Test.java", "source_code_str": "public static long pickGifts(int[] gifts, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);\n        for (int gift : gifts) {\n            pq.offer(gift);\n        }\n        while (k > 0) {\n            k--;\n            int x = pq.poll();\n            pq.offer((int) Math.sqrt(x));\n        }\n        long res = 0;\n        while (!pq.isEmpty()) {\n            res += pq.poll();\n        }\n        return res;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.PriorityQueue;\nimport java.util.PriorityQueue;\npublic class pickGifts_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(pickGifts(new int[]{}, 0));\n        System.out.println(pickGifts(new int[]{1}, 1));\n        System.out.println(pickGifts(new int[]{9, 4, 16}, 2));\n        System.out.println(pickGifts(new int[]{25, 36, 49}, 3));\n        System.out.println(pickGifts(new int[]{1, 2, 3}, 3));\n        System.out.println(pickGifts(new int[]{0, 0, 0}, 1));\n        System.out.println(pickGifts(new int[]{10, 0, 5}, 1));\n        System.out.println(pickGifts(new int[]{36, 25, 16, 9}, 0));\n        System.out.println(pickGifts(new int[]{1000000, 1000000}, 1));\n    }\n}"}
{"source_Lan": "java###fullBloomFlowers_Test.java", "source_code_str": " public static int[] fullBloomFlowers(int[][] flowers, int[] persons) {\n        TreeMap<Integer, Integer> cnt = new TreeMap<>();\n        for (int[] flower : flowers) {\n            cnt.put(flower[0], cnt.getOrDefault(flower[0], 0) + 1);\n            cnt.put(flower[1] + 1, cnt.getOrDefault(flower[1] + 1, 0) - 1);\n        }\n        int m = persons.length;\n        Integer[] indices = IntStream.range(0, m).boxed().toArray(Integer[]::new);\n        Arrays.sort(indices, (i, j) -> persons[i] - persons[j]);\n        int[] ans = new int[m];\n        int curr = 0;\n        for (int x : indices) {\n            while (!cnt.isEmpty() && cnt.firstKey() <= persons[x]) {\n                curr += cnt.pollFirstEntry().getValue();\n            }\n            ans[x] = curr;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport java.util.stream.IntStream;\nimport java.util.Arrays;\nimport java.util.TreeMap;\nimport java.util.stream.IntStream;\npublic class fullBloomFlowers_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] flowers1 = {{1, 4}, {2, 3}};\n        int[] people1 = {1, 2, 3, 4, 5};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers1, people1)));\n\n        int[][] flowers2 = {{1, 5}, {2, 6}, {3, 4}};\n        int[] people2 = {2, 3, 4};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers2, people2)));\n\n        int[][] flowers3 = {{1, 10}, {3, 5}, {6, 9}};\n        int[] people3 = {4, 8, 5};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers3, people3)));\n\n        int[][] flowers4 = {{0, 1}, {1, 2}, {2, 3}};\n        int[] people4 = {0, 1, 2};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers4, people4)));\n\n        int[][] flowers5 = {{1, 2}, {1, 3}, {2, 4}};\n        int[] people5 = {0, 4, 5};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers5, people5)));\n\n        int[][] flowers6 = {{5, 7}, {1, 2}, {10, 12}};\n        int[] people6 = {2, 6, 10, 11};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers6, people6)));\n\n        int[][] flowers7 = {{0, 1}};\n        int[] people7 = {0, 1, 2};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers7, people7)));\n\n        int[][] flowers8 = {{0, 0}, {0, 0}};\n        int[] people8 = {0};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers8, people8)));\n\n        int[][] flowers9 = {{1, 1}};\n        int[] people9 = {0, 1};\n        System.out.println(Arrays.toString(fullBloomFlowers(flowers9, people9)));\n    }\n}"}
{"source_Lan": "java###minTrioDegree2_Test.java", "source_code_str": "public static int minTrioDegree2(int n, int[][] edges) {\n        \n        Set<Integer>[] g = new Set[n];\n        for (int i = 0; i < n; ++i) {\n            g[i] = new HashSet<Integer>();\n        }\n        \n        List<Integer>[] h = new List[n];\n        for (int i = 0; i < n; ++i) {\n            h[i] = new ArrayList<Integer>();\n        }\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            g[x].add(y);\n            g[y].add(x);\n            ++degree[x];\n            ++degree[y];\n        }\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            if (degree[x] < degree[y] || (degree[x] == degree[y] && x < y)) {\n                h[x].add(y);\n            } else {\n                h[y].add(x);\n            }\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; ++i) {\n            for (int j : h[i]) {\n                for (int k : h[j]) {\n                    if (g[i].contains(k)) {\n                        ans = Math.min(ans, degree[i] + degree[j] + degree[k] - 6);\n                    }\n                }\n            }\n        }\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.*;\npublic class minTrioDegree2_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minTrioDegree2(1, new int[][]{}));\n        System.out.println(minTrioDegree2(3, new int[][]{{1, 2}, {2, 3}}));\n        System.out.println(minTrioDegree2(4, new int[][]{{1, 2}, {2, 3}, {1, 3}, {1, 4}}));\n        System.out.println(minTrioDegree2(5, new int[][]{{1, 2}, {1, 3}, {2, 3}, {3, 4}}));\n        System.out.println(minTrioDegree2(5, new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 1}}));\n        System.out.println(minTrioDegree2(6, new int[][]{{1, 2}, {1, 3}, {2, 3}, {2, 4}, {3, 4}}));\n        System.out.println(minTrioDegree2(6, new int[][]{{1, 2}, {1, 3}, {2, 4}, {4, 5}, {5, 6}, {3, 6}}));\n        System.out.println(minTrioDegree2(5, new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 5}}));\n        System.out.println(minTrioDegree2(3, new int[][]{{1, 2}, {1, 3}, {2, 3}}));\n        System.out.println(minTrioDegree2(4, new int[][]{{1, 2}, {1, 3}, {2, 4}, {3, 4}}));\n    }\n}"}
{"source_Lan": "java###finalPositionOfSnake_Test.java", "source_code_str": "public static int finalPositionOfSnake(int n, List<String> commands) {\n        int i = 0;\n        int j = 0;\n        for (String s : commands) {\n            switch (s.charAt(0)) {\n                case 'U' -> i--;\n                case 'D' -> i++;\n                case 'L' -> j--;\n                default  -> j++;\n            }\n        }\n        return i * n + j;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.*;\npublic class finalPositionOfSnake_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(finalPositionOfSnake(1, Arrays.asList(\"U\", \"D\", \"L\", \"R\")));\n        System.out.println(finalPositionOfSnake(1, Arrays.asList(\"U\", \"U\", \"U\")));\n        System.out.println(finalPositionOfSnake(1, Arrays.asList(\"D\", \"D\", \"D\", \"D\")));\n        System.out.println(finalPositionOfSnake(1, Arrays.asList(\"R\", \"R\", \"R\")));\n        System.out.println(finalPositionOfSnake(1, Arrays.asList(\"U\", \"D\", \"L\", \"L\", \"D\", \"D\")));\n        System.out.println(finalPositionOfSnake(1, Arrays.asList(\"U\", \"U\", \"R\", \"D\", \"L\")));\n        System.out.println(finalPositionOfSnake(2, Arrays.asList(\"U\", \"D\", \"L\")));\n        System.out.println(finalPositionOfSnake(0, Arrays.asList(\"U\", \"D\", \"D\", \"L\")));\n        System.out.println(finalPositionOfSnake(5, Arrays.asList(\"R\", \"L\", \"U\", \"D\")));\n        System.out.println(finalPositionOfSnake(3, Arrays.asList(\"U\", \"L\", \"D\", \"R\", \"U\")));\n    }\n}"}
{"source_Lan": "java###shortestDistanceAfterQueries2_Test.java", "source_code_str": "public static int[] shortestDistanceAfterQueries2(int n, int[][] queries) {\n        int[] nxt = new int[n - 1];\n        for (int i = 0; i < n - 1; i++) {\n            nxt[i] = i + 1;\n        }\n        int[] ans = new int[queries.length];\n        int cnt = n - 1;\n        for (int qi = 0; qi < queries.length; qi++) {\n            int l = queries[qi][0];\n            int r = queries[qi][1];\n            if (nxt[l] > 0 && nxt[l] < r) {\n                for (int i = nxt[l]; i < r;) {\n                    cnt--;\n                    int tmp = nxt[i];\n                    nxt[i] = 0;\n                    i = tmp;\n                }\n                nxt[l] = r;\n            }\n            ans[qi] = cnt;\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class shortestDistanceAfterQueries2_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] queries1 = {{0, 2}, {0, 1}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(3, queries1)));\n\n        int[][] queries2 = {{0, 3}, {1, 4}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(5, queries2)));\n\n        int[][] queries3 = {{0, 1}, {2, 5}, {3, 4}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(6, queries3)));\n\n        int[][] queries4 = {{0, 2}, {2, 3}, {0, 3}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(4, queries4)));\n\n        int[][] queries5 = {{0, 1}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(2, queries5)));\n\n        int[][] queries6 = {{0, 2}, {1, 3}, {0, 3}, {0, 0}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(4, queries6)));\n\n        int[][] queries7 = {{0, 2}, {2, 5}, {1, 4}, {0, 6}, {3, 6}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(7, queries7)));\n\n        int[][] queries8 = {{1, 8}, {2, 3}, {0, 5}, {6, 7}, {4, 5}};\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries2(9, queries8)));\n    }\n}"}
{"source_Lan": "java###getMaxProductivity_Test.java", "source_code_str": "public static int getMaxProductivity(int n, int[] productivity) {\n        int totalSum = 0;\n        for (int val : productivity) {\n            totalSum += val;\n        }\n        int halfSum = totalSum / 2;\n        int[] dp = new int[halfSum + 1];\n        dp[0] = 1;\n        for (int prod : productivity) {\n            for (int j = halfSum; j >= prod; j--) {\n                dp[j] = dp[j] | dp[j - prod];\n            }\n        }\n        int maxProductivity = 0;\n        for (int i = 1; i <= halfSum; i++) {\n            if (dp[i] == 1) {\n                maxProductivity = Math.max(maxProductivity, i * (totalSum - i));\n            }\n        }\n        return maxProductivity;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class getMaxProductivity_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(getMaxProductivity(0, new int[] {}));\n        System.out.println(getMaxProductivity(1, new int[] { 5 }));\n        System.out.println(getMaxProductivity(2, new int[] { 10, 20 }));\n        System.out.println(getMaxProductivity(3, new int[] { 10, 20, 30 }));\n        System.out.println(getMaxProductivity(4, new int[] { 1, 1, 1, 1 }));\n        System.out.println(getMaxProductivity(5, new int[] { 1, 2, 3, 4, 5 }));\n        System.out.println(getMaxProductivity(3, new int[] { 1, 5, 10 }));\n        System.out.println(getMaxProductivity(4, new int[] { 100, 200, 300, 400 }));\n        System.out.println(getMaxProductivity(5, new int[] { 1000, 2000, 3000, 4000, 5000 }));\n    }\n}"}
{"source_Lan": "java###minimumAverage_Test.java", "source_code_str": "    public static double minimumAverage(int[] nums) {\n        Arrays.sort(nums);\n        int ans = Integer.MAX_VALUE;\n        int n = nums.length;\n        for (int i = 0; i < n / 2; i++) {\n            ans = Math.min(ans, nums[i] + nums[n - 1 - i]);\n        }\n        return ans / 2.0;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumAverage_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(minimumAverage(new int[]{1, 1, 1, 1, 1}));\n        System.out.println(minimumAverage(new int[]{-2, -1, 0, 1, 2}));\n        System.out.println(minimumAverage(new int[]{1000000, 999999, 1000001, 1000002}));\n    }\n}"}
{"source_Lan": "java###canSortArray_Test.java", "source_code_str": "    public static boolean canSortArray(int[] nums) {\n        int lastCnt = 0;\n        int lastGroupMax = 0;\n        int curGroupMax = 0;\n        for (int num : nums) {\n            int curCnt = Integer.bitCount(num);\n            if (curCnt == lastCnt) {\n                curGroupMax = Math.max(curGroupMax, num);\n            } else {\n                lastCnt = curCnt;\n                lastGroupMax = curGroupMax;\n                curGroupMax = num;\n            }\n            if (num < lastGroupMax) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class canSortArray_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[] nums = {};\n        System.out.println(canSortArray(nums));\n    }\n}"}
{"source_Lan": "java###minPathCost_Test.java", "source_code_str": "public static int minPathCost(int[][] grid, int[][] moveCost) {\n        int m = grid.length, n = grid[0].length;\n        int[][] dp = new int[2][n];\n        dp[0] = grid[0].clone();\n        int cur = 0;\n        for (int i = 1; i < m; i++) {\n            int next = 1 - cur;\n            for (int j = 0; j < n; j++) {\n                dp[next][j] = Integer.MAX_VALUE;\n                for (int k = 0; k < n; k++) {\n                    dp[next][j] = Math.min(dp[next][j], dp[cur][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);\n                }\n            }\n            cur = next;\n        }\n        return Arrays.stream(dp[cur]).min().getAsInt();\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minPathCost_Test {\n// TOFILL\npublic static void main(String[] args) {\n        int[][] grid = {{1}};\n        int[][] moveCost = {{0}};\n        System.out.println(minPathCost(grid, moveCost));\n    }\n}"}
{"source_Lan": "java###maxSumII_Test.java", "source_code_str": "    public static ArrayList<Long> maxSumII(int n, int[] arr, int[] brr) {\n        long[] ans = new long[n];     \n        long ma = 0;                  \n        int[] v = new int[n];         \n        long[][] vp = new long[n][2]; \n        ArrayList<Long> fans = new ArrayList<>(); \n        \n        for (int i = brr.length - 1; i >= 0; --i) {\n            fans.add(ma);            \n            long b = brr[i] - 1;     \n            long temp = arr[(int)b]; \n            long left = b;           \n            long right = b;          \n            \n            if (b - 1 >= 0 && v[(int)(b - 1)] != 0) {\n                temp += ans[(int)(b - 1)];\n                left = Math.min(left, vp[(int)(b - 1)][0]);\n            }\n            \n            if (b + 1 < n && v[(int)(b + 1)] != 0) {\n                temp += ans[(int)(b + 1)];\n                right = Math.max(right, vp[(int)(b + 1)][1]);\n            }\n            v[(int)b] = arr[(int)b];                  \n            ans[(int)left] = temp;                    \n            ans[(int)right] = temp;                   \n            vp[(int)left] = new long[] {left, right}; \n            vp[(int)right] = new long[] {left, right}; \n            ma = Math.max(temp, ma);                   \n        }\n        Collections.reverse(fans); \n        return fans;               \n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class maxSumII_Test {\n// TOFILL\npublic static void main(String[] args) {\n        System.out.println(maxSumII(5, new int[]{1, 2, 3, 4, 5}, new int[]{5, 4, 3, 2, 1}));\n        System.out.println(maxSumII(1, new int[]{10}, new int[]{1}));\n        System.out.println(maxSumII(3, new int[]{1, 2, 3}, new int[]{3, 2, 1}));\n        System.out.println(maxSumII(4, new int[]{10, 20, 30, 40}, new int[]{4, 3, 2, 1}));\n        System.out.println(maxSumII(2, new int[]{100, 200}, new int[]{2, 1}));\n    }\n}"}
{"source_Lan": "java###validPairs_Test.java", "source_code_str": "    public static long validPairs(int n, int[] val, int[][] edges) {\n        \n        long[][] lift = new long[n + 1][32];\n        long[] dis = new long[n + 1];\n        long[] dis2 = new long[n + 1];\n        List<List<long[]>> adj = new ArrayList<>();\n        \n        for(int i = 0; i <= n; i++){\n            adj.add(new ArrayList<>());\n        }\n        \n        for (int i = 0; i < edges.length; i++) {\n            adj.get(edges[i][0]).add(new long[]{ edges[i][1], edges[i][2] });\n            adj.get(edges[i][1]).add(new long[]{ edges[i][0], edges[i][2] });\n        }\n        dis[0] = (long)-1e15;\n        \n        Stack<long[]> st = new Stack<>();\n        st.push(new long[]{ 1, 0, 0, 0 }); \n        while (!st.isEmpty()) {\n            long[] top = st.pop();\n            long i = top[0], par = top[1], d = top[2], d2 = top[3];\n            lift[(int)i][0] = par;\n            dis[(int)i] = d;\n            dis2[(int)i] = d2;\n            for (long j = 1; j < 32; j++) {\n                lift[(int)i][(int)j] = lift[(int)lift[(int)i][(int)(j - 1)]][(int)j - 1];\n            }\n            for (long[] j : adj.get((int)i)) {\n                if (j[0] == par) continue;\n                st.push(new long[]{ j[0], i, d + j[1], d2 + 1 });\n            }\n        }\n        \n        long ans = 0;\n        for (long i = 1; i <= n; i++) {\n            long v = val[(int)i - 1];\n            long p = i;\n            for (long j = 31; j >= 0; j--) {\n                if (v >= dis[(int)p] - dis[(int)lift[(int)p][(int)j]]) {\n                    v -= (dis[(int)p] - dis[(int)lift[(int)p][(int)j]]);\n                    p = lift[(int)p][(int)j];\n                }\n            }\n            ans += dis2[(int)i] - dis2[(int)p];\n        }\n        return ans;\n    }", "source_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class validPairs_Test {\n// TOFILL\npublic static void main(String[] args) {\n        // Test Input 1\n        System.out.println(validPairs(1, new int[]{10}, new int[][]{})); // expected output since no edges and single node: 0\n\n        // Test Input 2\n        System.out.println(validPairs(2, new int[]{5, 9}, new int[][]{{1, 2, 4}})); // expected output: 1(only one edge and using example calculation steps, i.e., 2 displacements)\n\n        // Test Input 3\n        System.out.println(validPairs(4, new int[]{3, 8, 2, 6}, new int[][]{{1, 2, 3}, {2, 3, -2}, {3, 4, 1}})); // expected output with given example edges and nodes\n\n        // Test Input 4\n        System.out.println(validPairs(5, new int[]{1, 4, 7, 12, 20}, new int[][]{{1, 2, 5}, {2, 3, 10}, {3, 4, 3}, {4, 5, 7}})); // expected output\n\n        // Test Input 5\n        System.out.println(validPairs(3, new int[]{15, 8, 5}, new int[][]{{1, 2, 3}, {1, 3, 2}})); // expected output based on example\n    }\n}"}
