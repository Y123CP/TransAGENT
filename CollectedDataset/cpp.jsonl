{"source_Lan": "cpp###ANDequalOR.cpp", "source_code_str": "    long long ANDequalOR(int n, vector<int> arr) {\n        long long ans = 0;\n        for (int i = 0; i < n; i++) {\n            int pt = i;\n            long long ct = 0;\n            while (pt < n) {\n                if (arr[pt] == arr[i]) {\n                    pt++;\n                    ct++;\n                } else\n                    break;\n            }\n            ct *= (ct + 1);\n            ct /= 2;\n            ans += ct;\n            i = pt - 1;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###ANDequalOR_Test.java", "reference_code": "    public static long ANDequalOR(int n, int[] arr) {\n        long ans = 0;\n        int pre = 0;\n        long count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == arr[pre]) {\n                count++;\n            } else {\n                ans += (count * (count + 1)) / 2;\n                pre = i;\n                count = 1;\n            }\n        }\n        ans += (count * (count + 1)) / 2;\n        return ans;\n    }", "target_method_signature": "ANDequalOR", "source_method_signature": "ANDequalOR", "target_allMS": "    public static long ANDequalOR(int n, int[] arr) {", "source_allMS": "    long long ANDequalOR(int n, vector<int> arr) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class ANDequalOR_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(ANDequalOR(0, new int[]{})); // Test case 1\n        System.out.println(ANDequalOR(1, new int[]{5})); // Test case 2\n        System.out.println(ANDequalOR(5, new int[]{1, 1, 1, 1, 1})); // Test case 3\n        System.out.println(ANDequalOR(4, new int[]{1, 2, 1, 2})); // Test case 4\n        System.out.println(ANDequalOR(6, new int[]{3, 3, 2, 2, 2, 3})); // Test case 5\n        System.out.println(ANDequalOR(3, new int[]{1, 2, 3})); // Test case 6\n        System.out.println(ANDequalOR(5, new int[]{5, 5, 5, 5, 4})); // Test case 7\n        System.out.println(ANDequalOR(5, new int[]{4, 4, 5, 5, 5})); // Test case 8\n        System.out.println(ANDequalOR(7, new int[]{1, 1, 2, 2, 2, 1, 1})); // Test case 9\n        System.out.println(ANDequalOR(6, new int[]{1, 1, 2, 1, 1, 1})); // Test case 10\n    }\n}", "all_input_output_value": "\ninput1: n=0, arr=[]\noutput1: 0\n--------\ninput2: n=1, arr=[5]\noutput2: 1\n--------\ninput3: n=5, arr=[1, 1, 1, 1, 1]\noutput3: 15\n--------\ninput4: n=4, arr=[1, 2, 1, 2]\noutput4: 4\n--------\ninput5: n=6, arr=[3, 3, 2, 2, 2, 3]\noutput5: 10\n--------\ninput6: n=3, arr=[1, 2, 3]\noutput6: 3\n--------\ninput7: n=5, arr=[5, 5, 5, 5, 4]\noutput7: 11\n--------\ninput8: n=5, arr=[4, 4, 5, 5, 5]\noutput8: 9\n--------\ninput9: n=7, arr=[1, 1, 2, 2, 2, 1, 1]\noutput9: 12\n--------\ninput10: n=6, arr=[1, 1, 2, 1, 1, 1]\noutput10: 10\n", "input_output_value": ["\ninput1: n=0, arr=[]\noutput1: 0\n", "\ninput2: n=1, arr=[5]\noutput2: 1\n", "\ninput3: n=5, arr=[1, 1, 1, 1, 1]\noutput3: 15\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    cout << ANDequalOR(0, {}) << endl; // n=0, arr=[]\n    cout << ANDequalOR(1, {5}) << endl; // n=1, arr=[5]\n    cout << ANDequalOR(5, {1, 1, 1, 1, 1}) << endl; // n=5, arr=[1, 1, 1, 1, 1]\n    cout << ANDequalOR(4, {1, 2, 1, 2}) << endl; // n=4, arr=[1, 2, 1, 2]\n    cout << ANDequalOR(6, {3, 3, 2, 2, 2, 3}) << endl; // n=6, arr=[3, 3, 2, 2, 2, 3]\n    cout << ANDequalOR(3, {1, 2, 3}) << endl; // n=3, arr=[1, 2, 3]\n    cout << ANDequalOR(5, {5, 5, 5, 5, 4}) << endl; // n=5, arr=[5, 5, 5, 5, 4]\n    cout << ANDequalOR(5, {4, 4, 5, 5, 5}) << endl; // n=5, arr=[4, 4, 5, 5, 5]\n    cout << ANDequalOR(7, {1, 1, 2, 2, 2, 1, 1}) << endl; // n=7, arr=[1, 1, 2, 2, 2, 1, 1]\n    cout << ANDequalOR(6, {1, 1, 2, 1, 1, 1}) << endl; // n=6, arr=[1, 1, 2, 1, 1, 1]\n}", "TAG": "Success"}
{"source_Lan": "cpp###MinSize.cpp", "source_code_str": "    int MinSize(vector<int> A, int n) {\n        \n        \n        int curr = A[0];\n        int count = 1;\n        for (int i = 1; i < n; ++i) {\n            if (A[i] == curr) {\n                count += 1;\n            } else {\n                count -= 1;\n                if (count == 0) {\n                    curr = A[i];\n                    count = 1;\n                }\n            }\n        }\n        int max_f = 0;\n        for (int i = 0; i < n; i++)\n            if (curr == A[i])\n                max_f++;\n        if (max_f <= (n + 1) / 2) {\n            return n & 1;\n        } else {\n            return 2 * max_f - n;\n        }\n    }", "source_code_block": "", "target_Lan": "java###MinSize_Test.java", "reference_code": "    public static int MinSize(int[] A,int n) {\n        \n        \n        int curr = A[0];\n        int count = 1;\n        for (int i = 1; i < n; ++i) {\n            if (A[i] == curr) {\n                count += 1;\n            } else {\n                count -= 1;\n                if (count == 0) {\n                    curr = A[i];\n                    count = 1;\n                }\n            }\n        }\n        int max_f = 0;\n        for (int i = 0; i < n; i++) {\n            if (curr == A[i]) {\n                max_f++;\n            }\n        }\n        if (max_f <= (n + 1) / 2) {\n            return n & 1;\n        } else {\n            return 2 * max_f - n;\n        }\n    }", "target_method_signature": "MinSize", "source_method_signature": "MinSize", "target_allMS": "    public static int MinSize(int[] A, int n) {", "source_allMS": "    int MinSize(vector<int> A, int n) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class MinSize_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(MinSize(new int[]{1, 2, 1, 2, 1}, 5)); // Majority element exists(1); expected output: 2 * 3 - 5 = 1\n        System.out.println(MinSize(new int[]{1, 1, 1, 2, 3}, 5)); // Majority element(1); expected output: 2 * 3 - 5 = 1\n        System.out.println(MinSize(new int[]{1, 2, 3, 4, 5}, 5)); // No majority; expected output: 5 & 1 = 1\n        System.out.println(MinSize(new int[]{1, 1, 2, 2, 2, 3}, 6)); // Majority element(2); expected output: 2 * 3 - 6 = 0\n        System.out.println(MinSize(new int[]{1, 1}, 2)); // Single element majority; expected output: 1\n        System.out.println(MinSize(new int[]{1, 2, 3}, 3)); // No majority; expected output: 3 & 1 = 1\n        System.out.println(MinSize(new int[]{5, 5, 5, 5}, 4)); // All same; expected output: 2 * 4 - 4 = 4\n        System.out.println(MinSize(new int[]{10, 10, 20, 10, 30}, 5)); // Majority element(10); expected output: 2 * 3 - 5 = 1\n        System.out.println(MinSize(new int[]{5, 5, 5, 1, 2, 1}, 6)); // Majority by 5; expected output: 2 * 3 - 6 = 0\n    }\n}", "all_input_output_value": "\ninput1: A=[1, 2, 1, 2, 1], n=5\noutput1: 1\n--------\ninput2: A=[1, 1, 1, 2, 3], n=5\noutput2: 1\n--------\ninput3: A=[1, 2, 3, 4, 5], n=5\noutput3: 1\n--------\ninput4: A=[1, 1, 2, 2, 2, 3], n=6\noutput4: 0\n--------\ninput5: A=[1, 1], n=2\noutput5: 2\n--------\ninput6: A=[1, 2, 3], n=3\noutput6: 1\n--------\ninput7: A=[5, 5, 5, 5], n=4\noutput7: 4\n--------\ninput8: A=[10, 10, 20, 10, 30], n=5\noutput8: 1\n--------\ninput9: A=[5, 5, 5, 1, 2, 1], n=6\noutput9: 0\n", "input_output_value": ["\ninput1: A=[1, 2, 1, 2, 1], n=5\noutput1: 1\n", "\ninput2: A=[1, 1, 1, 2, 3], n=5\noutput2: 1\n", "\ninput3: A=[1, 2, 3, 4, 5], n=5\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    cout << MinSize({1, 2, 1, 2, 1}, 5) << endl;\n    cout << MinSize({1, 1, 1, 2, 3}, 5) << endl;\n    cout << MinSize({1, 2, 3, 4, 5}, 5) << endl;\n    cout << MinSize({1, 1, 2, 2, 2, 3}, 6) << endl;\n    cout << MinSize({1, 1}, 2) << endl;\n    cout << MinSize({1, 2, 3}, 3) << endl;\n    cout << MinSize({5, 5, 5, 5}, 4) << endl;\n    cout << MinSize({10, 10, 20, 10, 30}, 5) << endl;\n    cout << MinSize({5, 5, 5, 1, 2, 1}, 6) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###lastFairyStanding.cpp", "source_code_str": "    int lastFairyStanding(int n, int k) {\n        \n        int i = 1, ans = 0;\n        while (i <= n)\n            ans = (ans + k) % i++;\n        return ans + 1;\n    }", "source_code_block": "", "target_Lan": "java###lastFairyStanding_Test.java", "reference_code": "    public static int lastFairyStanding(int n, int k) {\n        int i = 1, ans = 0;\n        while (i <= n)\n            ans = (ans + k) % i++;\n        return ans + 1;\n    }", "target_method_signature": "lastFairyStanding", "source_method_signature": "lastFairyStanding", "target_allMS": "    public static int lastFairyStanding(int n, int k) {", "source_allMS": "    int lastFairyStanding(int n, int k) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class lastFairyStanding_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(lastFairyStanding(1, 1));\n        System.out.println(lastFairyStanding(5, 2));\n        System.out.println(lastFairyStanding(10, 3));\n        System.out.println(lastFairyStanding(7, 5));\n        System.out.println(lastFairyStanding(20, 1));\n        System.out.println(lastFairyStanding(6, 6));\n        System.out.println(lastFairyStanding(15, 4));\n        System.out.println(lastFairyStanding(100, 10));\n        System.out.println(lastFairyStanding(99, 99));\n        System.out.println(lastFairyStanding(25, 13));\n    }\n}", "all_input_output_value": "\ninput1: n=1, k=1\noutput1: 1\n--------\ninput2: n=5, k=2\noutput2: 3\n--------\ninput3: n=10, k=3\noutput3: 4\n--------\ninput4: n=7, k=5\noutput4: 6\n--------\ninput5: n=20, k=1\noutput5: 20\n--------\ninput6: n=6, k=6\noutput6: 4\n--------\ninput7: n=15, k=4\noutput7: 13\n--------\ninput8: n=100, k=10\noutput8: 26\n--------\ninput9: n=99, k=99\noutput9: 89\n--------\ninput10: n=25, k=13\noutput10: 14\n", "input_output_value": ["\ninput1: n=1, k=1\noutput1: 1\n", "\ninput2: n=5, k=2\noutput2: 3\n", "\ninput3: n=10, k=3\noutput3: 4\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << lastFairyStanding(1, 1) << endl;\n    cout << lastFairyStanding(5, 2) << endl;\n    cout << lastFairyStanding(10, 3) << endl;\n    cout << lastFairyStanding(7, 5) << endl;\n    cout << lastFairyStanding(20, 1) << endl;\n    cout << lastFairyStanding(6, 6) << endl;\n    cout << lastFairyStanding(15, 4) << endl;\n    cout << lastFairyStanding(100, 10) << endl;\n    cout << lastFairyStanding(99, 99) << endl;\n    cout << lastFairyStanding(25, 13) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###equality.cpp", "source_code_str": "    int equality(int A, int B) {\n        if (B<A) return 0;\n        if (A==B) return 1;\n        if (B%2==0) return 1;\n        return 0;\n    }", "source_code_block": "", "target_Lan": "java###equality_Test.java", "reference_code": "    public static int equality(int A, int B) {\n        \n        if (B < A) return 0;\n        \n        if (A == B) return 1;\n        \n        if (B % 2 == 0) return 1;\n        \n        return 0;\n    }", "target_method_signature": "equality", "source_method_signature": "equality", "target_allMS": "    public static int equality(int A, int B) {", "source_allMS": "    int equality(int A, int B) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class equality_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(equality(2, 1));   // should return 0\n        System.out.println(equality(5, 5));   // should return 1\n        System.out.println(equality(3, 6));   // should return 1\n        System.out.println(equality(4, 7));   // should return 0\n        System.out.println(equality(-1, -1)); // should return 1\n        System.out.println(equality(-1, 1));  // should return 0\n        System.out.println(equality(0, 2));   // should return 1\n        System.out.println(equality(10, 5));  // should return 0\n        System.out.println(equality(1, 2));   // should return 1\n        System.out.println(equality(3, 3));   // should return 1\n    }\n}", "all_input_output_value": "\ninput1: A=2, B=1\noutput1: 0\n--------\ninput2: A=5, B=5\noutput2: 1\n--------\ninput3: A=3, B=6\noutput3: 1\n--------\ninput4: A=4, B=7\noutput4: 0\n--------\ninput5: A=-1, B=-1\noutput5: 1\n--------\ninput6: A=-1, B=1\noutput6: 0\n--------\ninput7: A=0, B=2\noutput7: 1\n--------\ninput8: A=10, B=5\noutput8: 0\n--------\ninput9: A=1, B=2\noutput9: 1\n--------\ninput10: A=3, B=3\noutput10: 1\n", "input_output_value": ["\ninput1: A=2, B=1\noutput1: 0\n", "\ninput2: A=5, B=5\noutput2: 1\n", "\ninput3: A=3, B=6\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << equality(2, 1) << endl;\n    cout << equality(5, 5) << endl;\n    cout << equality(3, 6) << endl;\n    cout << equality(4, 7) << endl;\n    cout << equality(-1, -1) << endl;\n    cout << equality(-1, 1) << endl;\n    cout << equality(0, 2) << endl;\n    cout << equality(10, 5) << endl;\n    cout << equality(1, 2) << endl;\n    cout << equality(3, 3) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###smallestString.cpp", "source_code_str": "    string smallestString(int n, string s) {\n        string answer = s;\n        int odd = n%2;\n        if(n == 1){\n            return \"-1\";\n        }\n        for(int i = 0; i < (n/2); i ++){\n            if(s[i] != 'a'){\n                answer[i] = 'a';\n                return answer;\n            }\n        }\n        answer[answer.size() - 1] = 'b';\n        return answer;\n    }", "source_code_block": "", "target_Lan": "java###smallestString_Test.java", "reference_code": "    public static String smallestString(int n, String s) {\n        \n        StringBuilder answer = new StringBuilder(s);\n        int odd = n % 2; \n        if (n == 1) {\n            return \"-1\"; \n        }\n        for (int i = 0; i < n / 2; i++) {\n            if (s.charAt(i) != 'a') {\n                answer.setCharAt(i, 'a'); \n                return answer.toString(); \n            }\n        }\n        answer.setCharAt(answer.length() - 1, 'b'); \n        return answer.toString(); \n    }", "target_method_signature": "smallestString", "source_method_signature": "smallestString", "target_allMS": "    public static String smallestString(int n, String s) {", "source_allMS": "    string smallestString(int n, string s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class smallestString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(smallestString(1, \"b\"));          // should return \"-1\"\n        System.out.println(smallestString(4, \"bbbb\"));       // should change first 'b' to 'a'\n        System.out.println(smallestString(4, \"aaaa\"));       // should change last 'a' to 'b'\n        System.out.println(smallestString(5, \"bcdef\"));      // should change 'b' at index 0 to 'a'\n        System.out.println(smallestString(6, \"abcfde\"));     // should change 'c' at index 2 to 'a'\n        System.out.println(smallestString(3, \"xyz\"));        // should change 'x' to 'a'\n        System.out.println(smallestString(8, \"hgfedcba\"));   // should change 'h' to 'a'\n        System.out.println(smallestString(7, \"abcdefg\"));    // should change 'b' to 'a'\n        System.out.println(smallestString(5, \"aaaaa\"));      // should convert last 'a' to 'b'\n        System.out.println(smallestString(2, \"zz\"));         // should change first 'z' to 'a'\n    }\n}", "all_input_output_value": "\ninput1: n=1, s=\"b\"\noutput1: -1\n--------\ninput2: n=4, s=\"bbbb\"\noutput2: abbb\n--------\ninput3: n=4, s=\"aaaa\"\noutput3: aaab\n--------\ninput4: n=5, s=\"bcdef\"\noutput4: acdef\n--------\ninput5: n=6, s=\"abcfde\"\noutput5: aacfde\n--------\ninput6: n=3, s=\"xyz\"\noutput6: ayz\n--------\ninput7: n=8, s=\"hgfedcba\"\noutput7: agfedcba\n--------\ninput8: n=7, s=\"abcdefg\"\noutput8: aacdefg\n--------\ninput9: n=5, s=\"aaaaa\"\noutput9: aaaab\n--------\ninput10: n=2, s=\"zz\"\noutput10: az\n", "input_output_value": ["\ninput1: n=1, s=\"b\"\noutput1: -1\n", "\ninput2: n=4, s=\"bbbb\"\noutput2: abbb\n", "\ninput3: n=4, s=\"aaaa\"\noutput3: aaab\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << smallestString(1, \"b\") << endl;      // Testing input1\n    cout << smallestString(4, \"bbbb\") << endl;   // Testing input2\n    cout << smallestString(4, \"aaaa\") << endl;   // Testing input3\n    cout << smallestString(5, \"bcdef\") << endl;  // Testing input4\n    cout << smallestString(6, \"abcfde\") << endl;  // Testing input5\n    cout << smallestString(3, \"xyz\") << endl;    // Testing input6\n    cout << smallestString(8, \"hgfedcba\") << endl; // Testing input7\n    cout << smallestString(7, \"abcdefg\") << endl; // Testing input8\n    cout << smallestString(5, \"aaaaa\") << endl;   // Testing input9\n    cout << smallestString(2, \"zz\") << endl;      // Testing input10\n}", "TAG": "Success"}
{"source_Lan": "cpp###AreEqual.cpp", "source_code_str": "    bool AreEqual(string a, string b) {\n        int n = a.length();\n        bool flag = false;\n        for (int i = 0; i < n - 1; i++) {\n            if (a[i] == '0' && b[i + 1] == '1') {\n                if (a[i] == b[i] && a[i + 1] == b[i + 1]) {\n                    flag = true;\n                }\n            }\n        }\n        return flag;\n    }", "source_code_block": "", "target_Lan": "java###AreEqual_Test.java", "reference_code": "    public static boolean AreEqual(String a, String b) {\n        int n = a.length();\n        boolean flag = false;\n        for (int i = 0; i < n - 1; i++) {\n            if (a.charAt(i) == '0' && b.charAt(i + 1) == '1') {\n                if (a.charAt(i) == b.charAt(i) && a.charAt(i + 1) == b.charAt(i + 1)) {\n                    flag = true;\n                }\n            }\n        }\n        return flag;\n    }", "target_method_signature": "AreEqual", "source_method_signature": "AreEqual", "target_allMS": "    public static boolean AreEqual(String a, String b) {", "source_allMS": "    bool AreEqual(string a, string b) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class AreEqual_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(AreEqual(\"\", \"\"));          // Both strings are empty.\n        System.out.println(AreEqual(\"0\", \"1\"));        // Short strings, no valid pair for comparison.\n        System.out.println(AreEqual(\"00\", \"11\"));      // Both chars are equal, should return false regardless.\n        System.out.println(AreEqual(\"01\", \"01\"));      // Characters match, should return false.\n        System.out.println(AreEqual(\"010\", \"110\"));    // Should return true as conditions hold for i=0.\n        System.out.println(AreEqual(\"001\", \"101\"));    // Should return false, characters don't match at i=1.\n        System.out.println(AreEqual(\"100\", \"110\"));    // Should return false, while 0 matches with 1, i+1 mismatch.\n        System.out.println(AreEqual(\"0000\", \"1111\"));  // Multiple characters, but should return false.\n        System.out.println(AreEqual(\"0101\", \"1101\"));  // Should return true at i=0.\n        System.out.println(AreEqual(\"1001\", \"1101\"));  // Should return false, only the i+1 match is present.\n    }\n}", "all_input_output_value": "\ninput1: a=\"\", b=\"\"\noutput1: false\n--------\ninput2: a=\"0\", b=\"1\"\noutput2: false\n--------\ninput3: a=\"00\", b=\"11\"\noutput3: false\n--------\ninput4: a=\"01\", b=\"01\"\noutput4: true\n--------\ninput5: a=\"010\", b=\"110\"\noutput5: false\n--------\ninput6: a=\"001\", b=\"101\"\noutput6: true\n--------\ninput7: a=\"100\", b=\"110\"\noutput7: false\n--------\ninput8: a=\"0000\", b=\"1111\"\noutput8: false\n--------\ninput9: a=\"0101\", b=\"1101\"\noutput9: true\n--------\ninput10: a=\"1001\", b=\"1101\"\noutput10: true\n", "input_output_value": ["\ninput1: a=\"\", b=\"\"\noutput1: false\n", "\ninput2: a=\"0\", b=\"1\"\noutput2: false\n", "\ninput3: a=\"00\", b=\"11\"\noutput3: false\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << AreEqual(\"\", \"\") << endl;\n    cout << AreEqual(\"0\", \"1\") << endl;\n    cout << AreEqual(\"00\", \"11\") << endl;\n    cout << AreEqual(\"01\", \"01\") << endl;\n    cout << AreEqual(\"010\", \"110\") << endl;\n    cout << AreEqual(\"001\", \"101\") << endl;\n    cout << AreEqual(\"100\", \"110\") << endl;\n    cout << AreEqual(\"0000\", \"1111\") << endl;\n    cout << AreEqual(\"0101\", \"1101\") << endl;\n    cout << AreEqual(\"1001\", \"1101\") << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###isPossible.cpp", "source_code_str": "    string isPossible(int a, int b, int c) {\n        \n        if ((a + b) > c && (a + c) > b && (b + c) > a)\n            return \"YES\";\n        else\n            return \"NO\";\n    }", "source_code_block": "", "target_Lan": "java###isPossible_Test.java", "reference_code": "    public static String isPossible(int a, int b, int c) {\n        \n        if ((a + b) > c && (a + c) > b && (b + c) > a)\n            return \"YES\";\n        else\n            return \"NO\";\n    }", "target_method_signature": "isPossible", "source_method_signature": "isPossible", "target_allMS": "    public static String isPossible(int a, int b, int c) {", "source_allMS": "    string isPossible(int a, int b, int c) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class isPossible_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(isPossible(3, 4, 5));  // YES\n        System.out.println(isPossible(1, 1, 2));  // NO\n        System.out.println(isPossible(5, 5, 10)); // NO\n        System.out.println(isPossible(2, 2, 3));  // YES\n        System.out.println(isPossible(0, 0, 0));  // NO\n        System.out.println(isPossible(-1, 2, 2)); // NO\n        System.out.println(isPossible(7, 10, 5)); // YES\n        System.out.println(isPossible(1, 1, 3));  // NO\n        System.out.println(isPossible(10, 15, 20)); // YES\n        System.out.println(isPossible(5, 5, -1)); // NO\n    }\n}", "all_input_output_value": "\ninput1: a=3, b=4, c=5\noutput1: YES\n--------\ninput2: a=1, b=1, c=2\noutput2: NO\n--------\ninput3: a=5, b=5, c=10\noutput3: NO\n--------\ninput4: a=2, b=2, c=3\noutput4: YES\n--------\ninput5: a=0, b=0, c=0\noutput5: NO\n--------\ninput6: a=-1, b=2, c=2\noutput6: NO\n--------\ninput7: a=7, b=10, c=5\noutput7: YES\n--------\ninput8: a=1, b=1, c=3\noutput8: NO\n--------\ninput9: a=10, b=15, c=20\noutput9: YES\n--------\ninput10: a=5, b=5, c=-1\noutput10: NO\n", "input_output_value": ["\ninput1: a=3, b=4, c=5\noutput1: YES\n", "\ninput2: a=1, b=1, c=2\noutput2: NO\n", "\ninput3: a=5, b=5, c=10\noutput3: NO\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << isPossible(3, 4, 5) << endl;\n    cout << isPossible(1, 1, 2) << endl;\n    cout << isPossible(5, 5, 10) << endl;\n    cout << isPossible(2, 2, 3) << endl;\n    cout << isPossible(0, 0, 0) << endl;\n    cout << isPossible(-1, 2, 2) << endl;\n    cout << isPossible(7, 10, 5) << endl;\n    cout << isPossible(1, 1, 3) << endl;\n    cout << isPossible(10, 15, 20) << endl;\n    cout << isPossible(5, 5, -1) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###totalCount.cpp", "source_code_str": "    int totalCount(int n, string s) {\n        int answer = 0;\n        int mod = 1e9 + 7;\n        char now = s[0];\n        for(int i = 0; i < n; i ++){\n            if(s[i] == now){\n                answer += n - i;\n                answer %= mod;\n            }\n        }\n        return answer;\n    }", "source_code_block": "", "target_Lan": "java###totalCount_Test.java", "reference_code": "    public static int totalCount(int n, String s) {\n        int ans = 0, mod = (int)(1e9 + 7);\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == s.charAt(0))\n                ans = (ans + s.length() - i) % mod;\n        }\n        return ans;\n    }", "target_method_signature": "totalCount", "source_method_signature": "totalCount", "target_allMS": "    public static int totalCount(int n, String s) {", "source_allMS": "    int totalCount(int n, string s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class totalCount_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = {\"\", \"a\", \"aaaaa\", \"abcde\", \"abaaaa\", \"aaaaaa\", \"ababababab\", \"xyzxyzxyz\", \"abcdefghij\", \"zzzzzzzzzzzzz\"};\n        \n        for(String s : testInputs) {\n            System.out.println(totalCount(s.length(), s));\n        }\n    }\n}", "all_input_output_value": "\ninput1: n=0, s=\"\"\noutput1: 0\n--------\ninput2: n=1, s=\"a\"\noutput2: 1\n--------\ninput3: n=5, s=\"aaaaa\"\noutput3: 15\n--------\ninput4: n=5, s=\"abcde\"\noutput4: 5\n--------\ninput5: n=6, s=\"abaaaa\"\noutput5: 16\n--------\ninput6: n=6, s=\"aaaaaa\"\noutput6: 21\n--------\ninput7: n=10, s=\"ababababab\"\noutput7: 30\n--------\ninput8: n=9, s=\"xyzxyzxyz\"\noutput8: 18\n--------\ninput9: n=10, s=\"abcdefghij\"\noutput9: 10\n--------\ninput10: n=13, s=\"zzzzzzzzzzzzz\"\noutput10: 91\n", "input_output_value": ["\ninput1: n=0, s=\"\"\noutput1: 0\n", "\ninput2: n=1, s=\"a\"\noutput2: 1\n", "\ninput3: n=5, s=\"aaaaa\"\noutput3: 15\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << totalCount(0, \"\") << endl;          // Test input 1\n    cout << totalCount(1, \"a\") << endl;         // Test input 2\n    cout << totalCount(5, \"aaaaa\") << endl;     // Test input 3\n    cout << totalCount(5, \"abcde\") << endl;     // Test input 4\n    cout << totalCount(6, \"abaaaa\") << endl;    // Test input 5\n    cout << totalCount(6, \"aaaaaa\") << endl;    // Test input 6\n    cout << totalCount(10, \"ababababab\") << endl; // Test input 7\n    cout << totalCount(9, \"xyzxyzxyz\") << endl; // Test input 8\n    cout << totalCount(10, \"abcdefghij\") << endl; // Test input 9\n    cout << totalCount(13, \"zzzzzzzzzzzzz\") << endl; // Test input 10\n}", "TAG": "Success"}
{"source_Lan": "cpp###minJumps2.cpp", "source_code_str": "    int minJumps2(int n, vector<int> &arr) {\n        vector<int> right_greater(n, n);\n        vector<int> right_lesser(n, n);\n        stack<int> st;\n        for (int i = 0; i < n; i++) {\n            while (!st.empty() && arr[st.top()] < arr[i]) {\n                right_greater[st.top()] = i;\n                st.pop();\n            }\n            st.push(i);\n        }\n        stack<int> st1;\n        st = st1;\n        for (int i = 0; i < n; i++) {\n            while (!st.empty() && arr[st.top()] > arr[i]) {\n                right_lesser[st.top()] = i;\n                st.pop();\n            }\n            st.push(i);\n        }\n        deque<pair<int, int>> queue;\n        queue.push_back(make_pair(0, 0));\n        vector<int> visited(n, 0);\n        while (!queue.empty()) {\n            pair<int, int> p = queue.front();\n            queue.pop_front();\n            int idx = p.first;\n            int d = p.second;\n            if (visited[idx] == 1) {\n                continue;\n            }\n            visited[idx] = 1;\n            if (idx == n - 1) {\n                return d;\n            }\n            int temp = idx + 1;\n            if (arr[temp] > arr[idx]) {\n                while (temp != n && arr[temp] > arr[idx]) {\n                    queue.push_back(make_pair(temp, d + 1));\n                    temp = right_lesser[temp];\n                }\n                if (temp != n) {\n                    queue.push_back(make_pair(temp, d + 1));\n                }\n            } else {\n                while (temp != n && arr[temp] < arr[idx]) {\n                    queue.push_back(make_pair(temp, d + 1));\n                    temp = right_greater[temp];\n                }\n                if (temp != n) {\n                    queue.push_back(make_pair(temp, d + 1));\n                }\n            }\n        }\n        return -1;\n    }", "source_code_block": "", "target_Lan": "java###minJumps2_Test.java", "reference_code": "    public static int minJumps2(int n, int[] arr) {\n        int[] rightGreater = new int[n];\n        int[] rightLesser = new int[n];\n        Arrays.fill(rightGreater, n);\n        Arrays.fill(rightLesser, n);\n        \n        Deque<Integer> stack = new ArrayDeque<>();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && arr[stack.peek()] < arr[i]) {\n                rightGreater[stack.peek()] = i;\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        \n        stack.clear();\n        for (int i = 0; i < n; i++) {\n            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {\n                rightLesser[stack.peek()] = i;\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        Deque<int[]> queue = new ArrayDeque<>();\n        queue.offer(new int[]{0, 0});\n        boolean[] visited = new boolean[n];\n        while (!queue.isEmpty()) {\n            int[] p = queue.poll();\n            int idx = p[0];\n            int d = p[1];\n            if (visited[idx]) {\n                continue;\n            }\n            visited[idx] = true;\n            if (idx == n - 1) {\n                return d;\n            }\n            int temp = idx + 1;\n            if (arr[temp] > arr[idx]) {\n                while (temp < n && arr[temp] > arr[idx]) {\n                    queue.offer(new int[]{temp, d + 1});\n                    temp = rightLesser[temp];\n                }\n                if (temp < n) {\n                    queue.offer(new int[]{temp, d + 1});\n                }\n            } else {\n                while (temp < n && arr[temp] < arr[idx]) {\n                    queue.offer(new int[]{temp, d + 1});\n                    temp = rightGreater[temp];\n                }\n                if (temp < n) {\n                    queue.offer(new int[]{temp, d + 1});\n                }\n            }\n        }\n        return -1;\n    }", "target_method_signature": "minJumps2", "source_method_signature": "minJumps2", "target_allMS": "    public static int minJumps2(int n, int[] arr) {", "source_allMS": "    int minJumps2(int n, vector<int> &arr) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minJumps2_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input: single element\n        int[] test1 = {1};\n        System.out.println(minJumps2(test1.length, test1));  // Expected output: 0\n        \n        // Test input: array with increasing values\n        int[] test2 = {2, 3, 4};\n        System.out.println(minJumps2(test2.length, test2));  // Expected output: 2\n        \n        // Test input: array with decreasing values\n        int[] test3 = {5, 4, 3};\n        System.out.println(minJumps2(test3.length, test3));  // Expected output: 2\n        \n        // Test input: mixed values\n        int[] test4 = {1, 3, 2, 4, 6, 5};\n        System.out.println(minJumps2(test4.length, test4));  // Expected output: 3\n        \n        // Test input: array with all equal values\n        int[] test5 = {2, 2, 2, 2};\n        System.out.println(minJumps2(test5.length, test5));  // Expected output: 0\n        \n        // Test input: alternating pattern\n        int[] test6 = {0, 1, 0, 1, 0, 1, 0, 1};\n        System.out.println(minJumps2(test6.length, test6));  // Expected output: 4\n        \n        // Test input: unsorted array\n        int[] test7 = {5, 3, 1, 2, 4, 6};\n        System.out.println(minJumps2(test7.length, test7));  // Expected output: 5\n        \n        // Test input: two elements, increasing\n        int[] test8 = {6};\n        System.out.println(minJumps2(test8.length, test8));  // Expected output: 0\n        \n        // Test input: two elements, decreasing\n        int[] test9 = {3, 2};\n        System.out.println(minJumps2(test9.length, test9));  // Expected output: 1\n        \n        // Test input: contains duplicates, leading to a jump\n        int[] test10 = {1, 4, 3, 4};\n        System.out.println(minJumps2(test10.length, test10));  // Expected output: 2\n    }\n}", "all_input_output_value": "\ninput1: arr={1}\noutput1: 0\n--------\ninput2: arr={2, 3, 4}\noutput2: 2\n--------\ninput3: arr={5, 4, 3}\noutput3: 2\n--------\ninput4: arr={1, 3, 2, 4, 6, 5}\noutput4: 3\n--------\ninput5: arr={2, 2, 2, 2}\noutput5: 0\n--------\ninput6: arr={0, 1, 0, 1, 0, 1, 0, 1}\noutput6: 4\n--------\ninput7: arr={5, 3, 1, 2, 4, 6}\noutput7: 5\n--------\ninput8: arr={6}\noutput8: 0\n--------\ninput9: arr={3, 2}\noutput9: 1\n--------\ninput10: arr={1, 4, 3, 4}\noutput10: 2\n", "input_output_value": ["\ninput1: arr={1}\noutput1: 0\n", "\ninput2: arr={2, 3, 4}\noutput2: 2\n", "\ninput3: arr={5, 4, 3}\noutput3: 2\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stack>\n#include <deque>\n// TOFILL\nint main() {\n    vector<vector<int>> testInputs = {\n        {1},\n        {2, 3, 4},\n        {5, 4, 3},\n        {1, 3, 2, 4, 6, 5},\n        {2, 2, 2, 2},\n        {0, 1, 0, 1, 0, 1, 0, 1},\n        {5, 3, 1, 2, 4, 6},\n        {6},\n        {3, 2},\n        {1, 4, 3, 4}\n    };\n\n    for(auto& arr : testInputs) {\n        cout << minJumps2(arr.size(), arr) << endl;\n    }\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###majorityWins.cpp", "source_code_str": "    int majorityWins(int arr[], int n, int x, int y) {\n        int count_x = 0;\n        int count_y = 0;\n        \n        \n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) count_x++;\n            if (arr[i] == y) count_y++;\n        }\n        \n        if (count_x > count_y)\n            \n            return x;\n        else if (count_y > count_x)\n            \n            return y;\n        \n        else\n            return x < y ? x : y;\n    }", "source_code_block": "", "target_Lan": "java###majorityWins_Test.java", "reference_code": "    public static int majorityWins(int arr[], int n, int x, int y) {\n        int count_x = 0;\n        int count_y = 0;\n        \n        \n        for (int i = 0; i < n; i++) {\n            if (arr[i] == x) count_x++;\n            if (arr[i] == y) count_y++;\n        }\n        \n        if (count_x > count_y)\n            \n            return x;\n        else if (count_y > count_x)\n            \n            return y;\n        \n        else if (x < y)\n            return x;\n        else\n            return y;\n    }", "target_method_signature": "majorityWins", "source_method_signature": "majorityWins", "target_allMS": "    public static int majorityWins(int arr[], int n, int x, int y) {", "source_allMS": "    int majorityWins(int arr[], int n, int x, int y) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class majorityWins_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(majorityWins(new int[]{1, 1, 1, 1, 1}, 5, 1, 2)); // 1\n        System.out.println(majorityWins(new int[]{3, 3, 2, 3}, 4, 2, 3));    // 3\n        System.out.println(majorityWins(new int[]{4, 4, 4, 5}, 4, 4, 5));    // 4\n        System.out.println(majorityWins(new int[]{1, 1, -1, 1}, 4, 1, -1));  // 1\n        System.out.println(majorityWins(new int[]{-1, -1, -1, 0}, 4, -1, 0));// -1\n        System.out.println(majorityWins(new int[]{1, 2, 3, 4}, 4, 1, 2));    // 1\n        System.out.println(majorityWins(new int[]{1, 1, 1, 2}, 4, 1, 2));    // 1\n        System.out.println(majorityWins(new int[]{5, 6, 7, 5}, 4, 5, 6));    // 5\n        System.out.println(majorityWins(new int[]{2, 2, 2, 5}, 4, 2, 5));    // 2\n        System.out.println(majorityWins(new int[]{0, 0, 0, 1}, 4, 0, 1));    // 0\n    }\n}", "all_input_output_value": "\ninput1: arr=[1, 1, 1, 1, 1], n=5, x=1, y=2\noutput1: 1\n--------\ninput2: arr=[3, 3, 2, 3], n=4, x=2, y=3\noutput2: 3\n--------\ninput3: arr=[4, 4, 4, 5], n=4, x=4, y=5\noutput3: 4\n--------\ninput4: arr=[1, 1, -1, 1], n=4, x=1, y=-1\noutput4: 1\n--------\ninput5: arr=[-1, -1, -1, 0], n=4, x=-1, y=0\noutput5: -1\n--------\ninput6: arr=[1, 2, 3, 4], n=4, x=1, y=2\noutput6: 1\n--------\ninput7: arr=[1, 1, 1, 2], n=4, x=1, y=2\noutput7: 1\n--------\ninput8: arr=[5, 6, 7, 5], n=4, x=5, y=6\noutput8: 5\n--------\ninput9: arr=[2, 2, 2, 5], n=4, x=2, y=5\noutput9: 2\n--------\ninput10: arr=[0, 0, 0, 1], n=4, x=0, y=1\noutput10: 0\n", "input_output_value": ["\ninput1: arr=[1, 1, 1, 1, 1], n=5, x=1, y=2\noutput1: 1\n", "\ninput2: arr=[3, 3, 2, 3], n=4, x=2, y=3\noutput2: 3\n", "\ninput3: arr=[4, 4, 4, 5], n=4, x=4, y=5\noutput3: 4\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    int arr1[] = {1, 1, 1, 1, 1};\n    cout << majorityWins(arr1, 5, 1, 2) << endl;\n    \n    int arr2[] = {3, 3, 2, 3};\n    cout << majorityWins(arr2, 4, 2, 3) << endl;\n    \n    int arr3[] = {4, 4, 4, 5};\n    cout << majorityWins(arr3, 4, 4, 5) << endl;\n    \n    int arr4[] = {1, 1, -1, 1};\n    cout << majorityWins(arr4, 4, 1, -1) << endl;\n    \n    int arr5[] = {-1, -1, -1, 0};\n    cout << majorityWins(arr5, 4, -1, 0) << endl;\n    \n    int arr6[] = {1, 2, 3, 4};\n    cout << majorityWins(arr6, 4, 1, 2) << endl;\n    \n    int arr7[] = {1, 1, 1, 2};\n    cout << majorityWins(arr7, 4, 1, 2) << endl;\n    \n    int arr8[] = {5, 6, 7, 5};\n    cout << majorityWins(arr8, 4, 5, 6) << endl;\n    \n    int arr9[] = {2, 2, 2, 5};\n    cout << majorityWins(arr9, 4, 2, 5) << endl;\n    \n    int arr10[] = {0, 0, 0, 1};\n    cout << majorityWins(arr10, 4, 0, 1) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minJumps.cpp", "source_code_str": "    int minJumps(int n, vector<int> &arr) {\n        map<int, int> m;\n        int ans = n - 1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (m.count(arr[i])) {\n                ans = min(ans, n - (m[arr[i]] - i));\n            } else {\n                m[arr[i]] = i;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minJumps_Test.java", "reference_code": "    public static int minJumps(int n, int[] arr) {\n        \n        \n        HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n        \n        int ans = n - 1;\n        \n        for (int i = n - 1; i >= 0; i--) {\n            \n            if (m.containsKey(arr[i])) {\n                \n                \n                ans = Math.min(ans, n - (m.get(arr[i]) - i));\n            } else {\n                \n                m.put(arr[i], i);\n            }\n        }\n        \n        return ans;\n    }", "target_method_signature": "minJumps", "source_method_signature": "minJumps", "target_allMS": "    public static int minJumps(int n, int[] arr) {", "source_allMS": "    int minJumps(int n, vector<int> &arr) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\npublic class minJumps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minJumps(5, new int[]{1, 3, 5, 1, 3}));\n        System.out.println(minJumps(6, new int[]{1, 3, 5, 6, 3, 1}));\n        System.out.println(minJumps(4, new int[]{0, 0, 0, 0}));\n        System.out.println(minJumps(3, new int[]{-1, -2, -3}));\n        System.out.println(minJumps(2, new int[]{1, 2}));\n        System.out.println(minJumps(1, new int[]{5}));\n        System.out.println(minJumps(5, new int[]{1, 1, 1, 1, 1}));\n        System.out.println(minJumps(7, new int[]{1, 2, 3, 4, 5, 6, 7}));\n        System.out.println(minJumps(10, new int[]{5, 3, 1, 3, 5, 3, 1, 2, 4, 6}));\n        System.out.println(minJumps(10, new int[]{10, 20, 30, 20, 10, 30, 20, 40, 10, 20}));\n    }\n}", "all_input_output_value": "\ninput1: n=5, arr=[1, 3, 5, 1, 3]\noutput1: 2\n--------\ninput2: n=6, arr=[1, 3, 5, 6, 3, 1]\noutput2: 1\n--------\ninput3: n=4, arr=[0, 0, 0, 0]\noutput3: 1\n--------\ninput4: n=3, arr=[-1, -2, -3]\noutput4: 2\n--------\ninput5: n=2, arr=[1, 2]\noutput5: 1\n--------\ninput6: n=1, arr=[5]\noutput6: 0\n--------\ninput7: n=5, arr=[1, 1, 1, 1, 1]\noutput7: 1\n--------\ninput8: n=7, arr=[1, 2, 3, 4, 5, 6, 7]\noutput8: 6\n--------\ninput9: n=10, arr=[5, 3, 1, 3, 5, 3, 1, 2, 4, 6]\noutput9: 6\n--------\ninput10: n=10, arr=[10, 20, 30, 20, 10, 30, 20, 40, 10, 20]\noutput10: 2\n", "input_output_value": ["\ninput1: n=5, arr=[1, 3, 5, 1, 3]\noutput1: 2\n", "\ninput2: n=6, arr=[1, 3, 5, 6, 3, 1]\noutput2: 1\n", "\ninput3: n=4, arr=[0, 0, 0, 0]\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> arr1 = {1, 3, 5, 1, 3};\n    cout << minJumps(5, arr1) << endl;\n\n    vector<int> arr2 = {1, 3, 5, 6, 3, 1};\n    cout << minJumps(6, arr2) << endl;\n\n    vector<int> arr3 = {0, 0, 0, 0};\n    cout << minJumps(4, arr3) << endl;\n\n    vector<int> arr4 = {-1, -2, -3};\n    cout << minJumps(3, arr4) << endl;\n\n    vector<int> arr5 = {1, 2};\n    cout << minJumps(2, arr5) << endl;\n\n    vector<int> arr6 = {5};\n    cout << minJumps(1, arr6) << endl;\n\n    vector<int> arr7 = {1, 1, 1, 1, 1};\n    cout << minJumps(5, arr7) << endl;\n\n    vector<int> arr8 = {1, 2, 3, 4, 5, 6, 7};\n    cout << minJumps(7, arr8) << endl;\n\n    vector<int> arr9 = {5, 3, 1, 3, 5, 3, 1, 2, 4, 6};\n    cout << minJumps(10, arr9) << endl;\n\n    vector<int> arr10 = {10, 20, 30, 20, 10, 30, 20, 40, 10, 20};\n    cout << minJumps(10, arr10) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumSetSize.cpp", "source_code_str": "    int maximumSetSize(vector<int> &nums1, vector<int> &nums2) {\n        unordered_set<int> set1(nums1.begin(), nums1.end());\n        unordered_set<int> set2(nums2.begin(), nums2.end());\n        int common = 0;\n        for (int x : set1) {\n            common += set2.count(x);\n        }\n        int n1 = set1.size();\n        int n2 = set2.size();\n        int ans = n1 + n2 - common;\n        int m = nums1.size() / 2;\n        if (n1 > m) {\n            int mn = min(n1 - m, common);\n            ans -= n1 - mn - m;\n            common -= mn;\n        }\n        if (n2 > m) {\n            n2 -= min(n2 - m, common);\n            ans -= n2 - m;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maximumSetSize_Test.java", "reference_code": "    public static int maximumSetSize(int[] nums1, int[] nums2) {\n        Set<Integer> set1 = new HashSet<>();\n        for (int x : nums1) {\n            set1.add(x);\n        }\n        Set<Integer> set2 = new HashSet<>();\n        for (int x : nums2) {\n            set2.add(x);\n        }\n        int common = 0;\n        for (int x : set1) {\n            if (set2.contains(x)) {\n                common++;\n            }\n        }\n        int n1 = set1.size();\n        int n2 = set2.size();\n        int ans = n1 + n2 - common;\n        int m = nums1.length / 2;\n        if (n1 > m) {\n            int mn = Math.min(n1 - m, common);\n            ans -= n1 - mn - m;\n            common -= mn;\n        }\n        if (n2 > m) {\n            n2 -= Math.min(n2 - m, common);\n            ans -= n2 - m;\n        }\n        return ans;\n    }", "target_method_signature": "maximumSetSize", "source_method_signature": "maximumSetSize", "target_allMS": "    public static int maximumSetSize(int[] nums1, int[] nums2) {", "source_allMS": "    int maximumSetSize(vector<int> &nums1, vector<int> &nums2) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class maximumSetSize_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumSetSize(new int[]{1, 2, 3}, new int[]{3, 4, 5})); // Expected output: 5\n        System.out.println(maximumSetSize(new int[]{1, 2, 3}, new int[]{1, 2, 3})); // Expected output: 3\n        System.out.println(maximumSetSize(new int[]{1, 1, 1}, new int[]{2, 2, 2})); // Expected output: 3\n        System.out.println(maximumSetSize(new int[]{1, 2, 3}, new int[]{}));        // Expected output: 3\n        System.out.println(maximumSetSize(new int[]{}, new int[]{1, 2, 3}));        // Expected output: 3\n        System.out.println(maximumSetSize(new int[]{1, 2, 2, 2, 3}, new int[]{2, 3, 4})); // Expected output: 5\n        System.out.println(maximumSetSize(new int[]{5, 6, 7}, new int[]{8, 9, 10})); // Expected output: 6\n        System.out.println(maximumSetSize(new int[]{1, 2, 3, 4, 5}, new int[]{2, 3})); // Expected output: 6\n        System.out.println(maximumSetSize(new int[]{1, 2, 2, 2}, new int[]{1, 2})); // Expected output: 3 or 4\n        System.out.println(maximumSetSize(new int[]{4, 5, 6}, new int[]{1, 2, 3})); // Expected output: 6\n    }\n}", "all_input_output_value": "\ninput1: nums1=[1, 2, 3], nums2=[3, 4, 5]\noutput1: 2\n--------\ninput2: nums1=[1, 2, 3], nums2=[1, 2, 3]\noutput2: 2\n--------\ninput3: nums1=[1, 1, 1], nums2=[2, 2, 2]\noutput3: 2\n--------\ninput4: nums1=[1, 2, 3], nums2=[]\noutput4: 1\n--------\ninput5: nums1=[], nums2=[1, 2, 3]\noutput5: 0\n--------\ninput6: nums1=[1, 2, 2, 2, 3], nums2=[2, 3, 4]\noutput6: 4\n--------\ninput7: nums1=[5, 6, 7], nums2=[8, 9, 10]\noutput7: 2\n--------\ninput8: nums1=[1, 2, 3, 4, 5], nums2=[2, 3]\noutput8: 4\n--------\ninput9: nums1=[1, 2, 2, 2], nums2=[1, 2]\noutput9: 2\n--------\ninput10: nums1=[4, 5, 6], nums2=[1, 2, 3]\noutput10: 2\n", "input_output_value": ["\ninput1: nums1=[1, 2, 3], nums2=[3, 4, 5]\noutput1: 2\n", "\ninput2: nums1=[1, 2, 3], nums2=[1, 2, 3]\noutput2: 2\n", "\ninput3: nums1=[1, 1, 1], nums2=[2, 2, 2]\noutput3: 2\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n// TOFILL\nint main() {\n    vector<int> nums1_1 = {1, 2, 3}; vector<int> nums2_1 = {3, 4, 5}; cout << maximumSetSize(nums1_1, nums2_1) << endl;\n    vector<int> nums1_2 = {1, 2, 3}; vector<int> nums2_2 = {1, 2, 3}; cout << maximumSetSize(nums1_2, nums2_2) << endl;\n    vector<int> nums1_3 = {1, 1, 1}; vector<int> nums2_3 = {2, 2, 2}; cout << maximumSetSize(nums1_3, nums2_3) << endl;\n    vector<int> nums1_4 = {1, 2, 3}; vector<int> nums2_4 = {}; cout << maximumSetSize(nums1_4, nums2_4) << endl;\n    vector<int> nums1_5 = {}; vector<int> nums2_5 = {1, 2, 3}; cout << maximumSetSize(nums1_5, nums2_5) << endl;\n    vector<int> nums1_6 = {1, 2, 2, 2, 3}; vector<int> nums2_6 = {2, 3, 4}; cout << maximumSetSize(nums1_6, nums2_6) << endl;\n    vector<int> nums1_7 = {5, 6, 7}; vector<int> nums2_7 = {8, 9, 10}; cout << maximumSetSize(nums1_7, nums2_7) << endl;\n    vector<int> nums1_8 = {1, 2, 3, 4, 5}; vector<int> nums2_8 = {2, 3}; cout << maximumSetSize(nums1_8, nums2_8) << endl;\n    vector<int> nums1_9 = {1, 2, 2, 2}; vector<int> nums2_9 = {1, 2}; cout << maximumSetSize(nums1_9, nums2_9) << endl;\n    vector<int> nums1_10 = {4, 5, 6}; vector<int> nums2_10 = {1, 2, 3}; cout << maximumSetSize(nums1_10, nums2_10) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###countKeyChanges.cpp", "source_code_str": "    int countKeyChanges(string s) {\n        int ans = 0;\n        for (int i = 1; i < s.length(); i++) {\n            ans += (s[i - 1] & 31) != (s[i] & 31);\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###countKeyChanges_Test.java", "reference_code": "    public static int countKeyChanges(String s) {\n        int ans = 0;\n        for (int i = 1; i < s.length(); i++) {\n            if ((s.charAt(i - 1) & 31) != (s.charAt(i) & 31)) {\n                ans++;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "countKeyChanges", "source_method_signature": "countKeyChanges", "target_allMS": "    public static int countKeyChanges(String s) {", "source_allMS": "    int countKeyChanges(string s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countKeyChanges_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countKeyChanges(\"\"));             // Test input 1: Empty string\n        System.out.println(countKeyChanges(\"a\"));            // Test input 2: Only one character\n        System.out.println(countKeyChanges(\"abcd\"));         // Test input 3: No case changes, should return 0\n        System.out.println(countKeyChanges(\"aAbB\"));         // Test input 4: Four case changes\n        System.out.println(countKeyChanges(\"aaAAaa\"));       // Test input 5: Mixed case\n        System.out.println(countKeyChanges(\"xyzXYZ\"));       // Test input 6: Three changes\n        System.out.println(countKeyChanges(\"HelloWorld\"));   // Test input 7: Mixed case, 9 changes\n        System.out.println(countKeyChanges(\"abcABC\"));       // Test input 8: Three changes\n        System.out.println(countKeyChanges(\"123456\"));       // Test input 9: Non-letter characters, should return 0\n        System.out.println(countKeyChanges(\"a1B3c\"));        // Test input 10: Mixed alphanumeric, should count changes\n    }\n}", "all_input_output_value": "\ninput1: s=\"\"\noutput1: 0\n--------\ninput2: s=\"a\"\noutput2: 0\n--------\ninput3: s=\"abcd\"\noutput3: 3\n--------\ninput4: s=\"aAbB\"\noutput4: 1\n--------\ninput5: s=\"aaAAaa\"\noutput5: 0\n--------\ninput6: s=\"xyzXYZ\"\noutput6: 5\n--------\ninput7: s=\"HelloWorld\"\noutput7: 8\n--------\ninput8: s=\"abcABC\"\noutput8: 5\n--------\ninput9: s=\"123456\"\noutput9: 5\n--------\ninput10: s=\"a1B3c\"\noutput10: 4\n", "input_output_value": ["\ninput1: s=\"\"\noutput1: 0\n", "\ninput2: s=\"a\"\noutput2: 0\n", "\ninput3: s=\"abcd\"\noutput3: 3\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << countKeyChanges(\"\") << endl;\n    cout << countKeyChanges(\"a\") << endl;\n    cout << countKeyChanges(\"abcd\") << endl;\n    cout << countKeyChanges(\"aAbB\") << endl;\n    cout << countKeyChanges(\"aaAAaa\") << endl;\n    cout << countKeyChanges(\"xyzXYZ\") << endl;\n    cout << countKeyChanges(\"HelloWorld\") << endl;\n    cout << countKeyChanges(\"abcABC\") << endl;\n    cout << countKeyChanges(\"123456\") << endl;\n    cout << countKeyChanges(\"a1B3c\") << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###countSubmatrices.cpp", "source_code_str": "    int countSubmatrices(vector<vector<int>> &grid, int k) {\n        int ans = 0, m = grid.size(), n = grid[0].size();\n        vector<vector<int>> sum(m + 1, vector<int>(n + 1));\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1] = sum[i + 1][j] + sum[i][j + 1] - sum[i][j] + grid[i][j];\n                ans += sum[i + 1][j + 1] <= k;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###countSubmatrices_Test.java", "reference_code": "    public static int countSubmatrices(int[][] grid, int k) {\n        int ans = 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][] sum = new int[m + 1][n + 1];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                sum[i + 1][j + 1] = sum[i + 1][j] + sum[i][j + 1] - sum[i][j] + grid[i][j];\n                if (sum[i + 1][j + 1] <= k) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "countSubmatrices", "source_method_signature": "countSubmatrices", "target_allMS": "    public static int countSubmatrices(int[][] grid, int k) {", "source_allMS": "    int countSubmatrices(vector<vector<int>> &grid, int k) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countSubmatrices_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 2}, {3, 4}};\n        int k1 = 10;\n        System.out.println(countSubmatrices(input1, k1));\n        \n        int[][] input2 = {{}, {}};\n        int k2 = 5;\n        System.out.println(countSubmatrices(input2, k2));\n\n        int[][] input3 = {{1}};\n        int k3 = 1;\n        System.out.println(countSubmatrices(input3, k3));\n\n        int[][] input4 = {{1, 2}, {2, 1}};\n        int k4 = 5;\n        System.out.println(countSubmatrices(input4, k4));\n\n        int[][] input5 = {{1, 2}, {3, 4}};\n        int k5 = 15;\n        System.out.println(countSubmatrices(input5, k5));\n\n        int[][] input6 = {{-1, 2}, {3, -4}};\n        int k6 = 2;\n        System.out.println(countSubmatrices(input6, k6));\n\n        int[][] input7 = {{10, 20}, {30, 40}};\n        int k7 = 50;\n        System.out.println(countSubmatrices(input7, k7));\n\n        int[][] input8 = {{1, 2}, {2, 1}};\n        int k8 = 3;\n        System.out.println(countSubmatrices(input8, k8));\n\n        int[][] input9 = {{0, 0}, {0, 0}};\n        int k9 = 1;\n        System.out.println(countSubmatrices(input9, k9));\n\n        int[][] input10 = {{5, 6}, {7, 8}};\n        int k10 = 5;\n        System.out.println(countSubmatrices(input10, k10));\n    }\n}", "all_input_output_value": "\ninput1: grid={{1, 2}, {3, 4}}, k=10\noutput1: 4\n--------\ninput2: grid={{}, {}}, k=5\noutput2: 0\n--------\ninput3: grid={{1}}, k=1\noutput3: 1\n--------\ninput4: grid={{1, 2}, {2, 1}}, k=5\noutput4: 3\n--------\ninput5: grid={{1, 2}, {3, 4}}, k=15\noutput5: 4\n--------\ninput6: grid={{-1, 2}, {3, -4}}, k=2\noutput6: 4\n--------\ninput7: grid={{10, 20}, {30, 40}}, k=50\noutput7: 3\n--------\ninput8: grid={{1, 2}, {2, 1}}, k=3\noutput8: 3\n--------\ninput9: grid={{0, 0}, {0, 0}}, k=1\noutput9: 4\n--------\ninput10: grid={{5, 6}, {7, 8}}, k=5\noutput10: 1\n", "input_output_value": ["\ninput1: grid={{1, 2}, {3, 4}}, k=10\noutput1: 4\n", "\ninput2: grid={{}, {}}, k=5\noutput2: 0\n", "\ninput3: grid={{1}}, k=1\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{1, 2}, {3, 4}};\n    cout << countSubmatrices(grid1, 10) << endl;\n\n    vector<vector<int>> grid2 = {{}, {}};\n    cout << countSubmatrices(grid2, 5) << endl;\n\n    vector<vector<int>> grid3 = {{1}};\n    cout << countSubmatrices(grid3, 1) << endl;\n\n    vector<vector<int>> grid4 = {{1, 2}, {2, 1}};\n    cout << countSubmatrices(grid4, 5) << endl;\n\n    vector<vector<int>> grid5 = {{1, 2}, {3, 4}};\n    cout << countSubmatrices(grid5, 15) << endl;\n\n    vector<vector<int>> grid6 = {{-1, 2}, {3, -4}};\n    cout << countSubmatrices(grid6, 2) << endl;\n\n    vector<vector<int>> grid7 = {{10, 20}, {30, 40}};\n    cout << countSubmatrices(grid7, 50) << endl;\n\n    vector<vector<int>> grid8 = {{1, 2}, {2, 1}};\n    cout << countSubmatrices(grid8, 3) << endl;\n\n    vector<vector<int>> grid9 = {{0, 0}, {0, 0}};\n    cout << countSubmatrices(grid9, 1) << endl;\n\n    vector<vector<int>> grid10 = {{5, 6}, {7, 8}};\n    cout << countSubmatrices(grid10, 5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###isSubstringPresent.cpp", "source_code_str": "    bool isSubstringPresent(string s) {\n        bool vis[26][26]{};\n        for (int i = 1; i < s.length(); i++) {\n            int x = s[i - 1] - 'a', y = s[i] - 'a';\n            vis[x][y] = true;\n            if (vis[y][x]) {\n                return true;\n            }\n        }\n        return false;\n    }", "source_code_block": "", "target_Lan": "java###isSubstringPresent_Test.java", "reference_code": "    public static boolean isSubstringPresent(String S) {\n        char[] s = S.toCharArray();\n        boolean[][] vis = new boolean[26][26];\n        for (int i = 1; i < s.length; i++) {\n            int x = s[i - 1] - 'a';\n            int y = s[i] - 'a';\n            vis[x][y] = true;\n            if (vis[y][x]) {\n                return true;\n            }\n        }\n        return false;\n    }", "target_method_signature": "isSubstringPresent", "source_method_signature": "isSubstringPresent", "target_allMS": "    public static boolean isSubstringPresent(String S) {", "source_allMS": "    bool isSubstringPresent(string s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isSubstringPresent_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = {\"\", \"a\", \"abcde\", \"abccba\", \"abcdef\", \"xyyx\", \"aabbc\", \"mnopq\", \"zzxy\", \"mnopnod\"};\n        \n        for(String input : testInputs) {\n            System.out.println(\"Input: \\\"\" + input + \"\\\", Output: \" + isSubstringPresent(input));\n        }\n    }\n}", "all_input_output_value": "\ninput1: S=\"\"\noutput1: false\n--------\ninput2: S=\"a\"\noutput2: false\n--------\ninput3: S=\"abcde\"\noutput3: false\n--------\ninput4: S=\"abccba\"\noutput4: true\n--------\ninput5: S=\"abcdef\"\noutput5: false\n--------\ninput6: S=\"xyyx\"\noutput6: true\n--------\ninput7: S=\"aabbc\"\noutput7: true\n--------\ninput8: S=\"mnopq\"\noutput8: false\n--------\ninput9: S=\"zzxy\"\noutput9: true\n--------\ninput10: S=\"mnopnod\"\noutput10: false\n", "input_output_value": ["\ninput1: S=\"\"\noutput1: false\n", "\ninput2: S=\"a\"\noutput2: false\n", "\ninput3: S=\"abcde\"\noutput3: false\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << isSubstringPresent(\"\") << endl;         // Test input: S=\"\"\n    cout << isSubstringPresent(\"a\") << endl;        // Test input: S=\"a\"\n    cout << isSubstringPresent(\"abcde\") << endl;    // Test input: S=\"abcde\"\n    cout << isSubstringPresent(\"abccba\") << endl;   // Test input: S=\"abccba\"\n    cout << isSubstringPresent(\"abcdef\") << endl;    // Test input: S=\"abcdef\"\n    cout << isSubstringPresent(\"xyyx\") << endl;      // Test input: S=\"xyyx\"\n    cout << isSubstringPresent(\"aabbc\") << endl;     // Test input: S=\"aabbc\"\n    cout << isSubstringPresent(\"mnopq\") << endl;     // Test input: S=\"mnopq\"\n    cout << isSubstringPresent(\"zzxy\") << endl;      // Test input: S=\"zzxy\"\n    cout << isSubstringPresent(\"mnopnod\") << endl;   // Test input: S=\"mnopnod\"\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumLengthSubstring.cpp", "source_code_str": "    int maximumLengthSubstring(string s) {\n        int ans = 0, left = 0, cnt[26]{};\n        for (int i = 0; i < s.length(); i++) {\n            int b = s[i] - 'a';\n            cnt[b]++;\n            while (cnt[b] > 2) {\n                cnt[s[left++] - 'a']--;\n            }\n            ans = max(ans, i - left + 1);\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maximumLengthSubstring_Test.java", "reference_code": "    public static int maximumLengthSubstring(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        int left = 0;\n        int[] cnt = new int[26];\n        for (int i = 0; i < s.length; i++) {\n            int b = s[i] - 'a';\n            cnt[b]++;\n            while (cnt[b] > 2) {\n                cnt[s[left++] - 'a']--;\n            }\n            ans = Math.max(ans, i - left + 1);\n        }\n        return ans;\n    }", "target_method_signature": "maximumLengthSubstring", "source_method_signature": "maximumLengthSubstring", "target_allMS": "    public static int maximumLengthSubstring(String S) {", "source_allMS": "    int maximumLengthSubstring(string s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumLengthSubstring_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumLengthSubstring(\"\")); // Test input 1\n        System.out.println(maximumLengthSubstring(\"abcde\")); // Test input 2\n        System.out.println(maximumLengthSubstring(\"aaaaa\")); // Test input 3\n        System.out.println(maximumLengthSubstring(\"abccba\")); // Test input 4\n        System.out.println(maximumLengthSubstring(\"aabbcc\")); // Test input 5\n        System.out.println(maximumLengthSubstring(\"abcabcabc\")); // Test input 6\n        System.out.println(maximumLengthSubstring(\"aabbccddee\")); // Test input 7\n        System.out.println(maximumLengthSubstring(\"ababab\")); // Test input 8\n        System.out.println(maximumLengthSubstring(\"abcdeedcba\")); // Test input 9\n        System.out.println(maximumLengthSubstring(\"aaabbbcc\")); // Test input 10\n    }\n}", "all_input_output_value": "\ninput1: S=\"\"\noutput1: 0\n--------\ninput2: S=\"abcde\"\noutput2: 5\n--------\ninput3: S=\"aaaaa\"\noutput3: 2\n--------\ninput4: S=\"abccba\"\noutput4: 6\n--------\ninput5: S=\"aabbcc\"\noutput5: 6\n--------\ninput6: S=\"abcabcabc\"\noutput6: 6\n--------\ninput7: S=\"aabbccddee\"\noutput7: 10\n--------\ninput8: S=\"ababab\"\noutput8: 4\n--------\ninput9: S=\"abcdeedcba\"\noutput9: 10\n--------\ninput10: S=\"aaabbbcc\"\noutput10: 4\n", "input_output_value": ["\ninput1: S=\"\"\noutput1: 0\n", "\ninput2: S=\"abcde\"\noutput2: 5\n", "\ninput3: S=\"aaaaa\"\noutput3: 2\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << maximumLengthSubstring(\"\") << endl;\n    cout << maximumLengthSubstring(\"abcde\") << endl;\n    cout << maximumLengthSubstring(\"aaaaa\") << endl;\n    cout << maximumLengthSubstring(\"abccba\") << endl;\n    cout << maximumLengthSubstring(\"aabbcc\") << endl;\n    cout << maximumLengthSubstring(\"abcabcabc\") << endl;\n    cout << maximumLengthSubstring(\"aabbccddee\") << endl;\n    cout << maximumLengthSubstring(\"ababab\") << endl;\n    cout << maximumLengthSubstring(\"abcdeedcba\") << endl;\n    cout << maximumLengthSubstring(\"aaabbbcc\") << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxBottlesDrunk.cpp", "source_code_str": "    int maxBottlesDrunk(int numBottles, int numExchange) {\n        int ans = numBottles; \n        while (numBottles >= numExchange) { \n            ans++; \n            numBottles += 1 - numExchange++;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maxBottlesDrunk_Test.java", "reference_code": "    public static int maxBottlesDrunk(int numBottles, int numExchange) {\n        int ans = numBottles; \n        while (numBottles >= numExchange) { \n            ans++; \n            numBottles += 1 - numExchange++;\n        }\n        return ans;\n    }", "target_method_signature": "maxBottlesDrunk", "source_method_signature": "maxBottlesDrunk", "target_allMS": "    public static int maxBottlesDrunk(int numBottles, int numExchange) {", "source_allMS": "    int maxBottlesDrunk(int numBottles, int numExchange) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxBottlesDrunk_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] testInputs = {\n            {0, 1},\n            {1, 2},\n            {5, 10},\n            {6, 3},\n            {100, 50},\n            {1000, 10},\n            {15, 5},\n        };\n\n        for(int[] input : testInputs) {\n            int numBottles = input[0];\n            int numExchange = input[1];\n            System.out.println(\"maxBottlesDrunk(\" + numBottles + \", \" + numExchange + \") = \" + maxBottlesDrunk(numBottles, numExchange));\n        }\n    }\n}", "all_input_output_value": "\ninput1: numBottles=0, numExchange=1\noutput1: 0\n--------\ninput2: numBottles=1, numExchange=2\noutput2: 1\n--------\ninput3: numBottles=5, numExchange=10\noutput3: 5\n--------\ninput4: numBottles=6, numExchange=3\noutput4: 8\n--------\ninput5: numBottles=100, numExchange=50\noutput5: 102\n--------\ninput6: numBottles=1000, numExchange=10\noutput6: 1037\n--------\ninput7: numBottles=15, numExchange=5\noutput7: 17\n", "input_output_value": ["\ninput1: numBottles=0, numExchange=1\noutput1: 0\n", "\ninput2: numBottles=1, numExchange=2\noutput2: 1\n", "\ninput3: numBottles=5, numExchange=10\noutput3: 5\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << maxBottlesDrunk(0, 1) << endl;\n    cout << maxBottlesDrunk(1, 2) << endl;\n    cout << maxBottlesDrunk(5, 10) << endl;\n    cout << maxBottlesDrunk(6, 3) << endl;\n    cout << maxBottlesDrunk(100, 50) << endl;\n    cout << maxBottlesDrunk(1000, 10) << endl;\n    cout << maxBottlesDrunk(15, 5) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###getSmallestString.cpp", "source_code_str": "    string getSmallestString(string s, int k) {\n        for (int i = 0; i < s.length(); i++) {\n            int dis = min(s[i] - 'a', 'z' - s[i] + 1);\n            if (dis > k) {\n                s[i] -= k;\n                break;\n            }\n            s[i] = 'a';\n            k -= dis;\n        }\n        return s;\n    }", "source_code_block": "", "target_Lan": "java###getSmallestString_Test.java", "reference_code": "    public static String getSmallestString(String s, int k) {\n        char[] t = s.toCharArray();\n        for (int i = 0; i < t.length; i++) {\n            int dis = Math.min(t[i] - 'a', 'z' - t[i] + 1);\n            if (dis > k) {\n                t[i] -= k;\n                break;\n            }\n            t[i] = 'a';\n            k -= dis;\n        }\n        return new String(t);\n    }", "target_method_signature": "getSmallestString", "source_method_signature": "getSmallestString", "target_allMS": "    public static String getSmallestString(String s, int k) {", "source_allMS": "    string getSmallestString(string s, int k) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class getSmallestString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(getSmallestString(\"abc\", 0));\n        System.out.println(getSmallestString(\"xyz\", 6));\n        System.out.println(getSmallestString(\"d\", 3));\n        System.out.println(getSmallestString(\"abcdef\", 2));\n        System.out.println(getSmallestString(\"a\", 5));\n        System.out.println(getSmallestString(\"cba\", 1));\n        System.out.println(getSmallestString(\"zzzz\", 10));\n        System.out.println(getSmallestString(\"\", 0));\n        System.out.println(getSmallestString(\"z\", 1));\n        System.out.println(getSmallestString(\"fghz\", 6));\n    }\n}", "all_input_output_value": "\ninput1: s=\"abc\", k=0\noutput1: abc\n--------\ninput2: s=\"xyz\", k=6\noutput2: aaa\n--------\ninput3: s=\"d\", k=3\noutput3: a\n--------\ninput4: s=\"abcdef\", k=2\noutput4: aabdef\n--------\ninput5: s=\"a\", k=5\noutput5: a\n--------\ninput6: s=\"cba\", k=1\noutput6: bba\n--------\ninput7: s=\"zzzz\", k=10\noutput7: aaaa\n--------\ninput8: s=\"\", k=0\noutput8: \n--------\ninput9: s=\"z\", k=1\noutput9: a\n--------\ninput10: s=\"fghz\", k=6\noutput10: afhz\n", "input_output_value": ["\ninput1: s=\"abc\", k=0\noutput1: abc\n", "\ninput2: s=\"xyz\", k=6\noutput2: aaa\n", "\ninput3: s=\"d\", k=3\noutput3: a\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << getSmallestString(\"abc\", 0) << endl;\n    cout << getSmallestString(\"xyz\", 6) << endl;\n    cout << getSmallestString(\"d\", 3) << endl;\n    cout << getSmallestString(\"abcdef\", 2) << endl;\n    cout << getSmallestString(\"a\", 5) << endl;\n    cout << getSmallestString(\"cba\", 1) << endl;\n    cout << getSmallestString(\"zzzz\", 10) << endl;\n    cout << getSmallestString(\"\", 0) << endl;\n    cout << getSmallestString(\"z\", 1) << endl;\n    cout << getSmallestString(\"fghz\", 6) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###compressedString.cpp", "source_code_str": "    string compressedString(string word) {\n        string t;\n        int i0 = -1;\n        for (int i = 0; i < word.length(); i++) {\n            char c = word[i];\n            if (i + 1 == word.length() || c != word[i + 1]) {\n                int k = i - i0;\n                for (int j = 0; j < k / 9; j++) {\n                    t += '9';\n                    t += c;\n                }\n                if (k % 9) {\n                    t += '0' + (k % 9);\n                    t += c;\n                }\n                i0 = i;\n            }\n        }\n        return t;\n    }", "source_code_block": "", "target_Lan": "java###compressedString_Test.java", "reference_code": "    public static String compressedString(String word) {\n        StringBuilder t = new StringBuilder();\n        char[] s = word.toCharArray();\n        int i0 = -1;\n        for (int i = 0; i < s.length; i++) {\n            char c = s[i];\n            if (i + 1 == s.length || c != s[i + 1]) {\n                int k = i - i0;\n                for (int j = 0; j < k / 9; j++) {\n                    t.append('9').append(c);\n                }\n                if (k % 9 > 0) {\n                    t.append((char) ('0' + (k % 9))).append(c);\n                }\n                i0 = i;\n            }\n        }\n        return t.toString();\n    }", "target_method_signature": "compressedString", "source_method_signature": "compressedString", "target_allMS": "    public static String compressedString(String word) {", "source_allMS": "    string compressedString(string word) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class compressedString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = {\n            \"\",              // Empty string\n            \"a\",             // Single character\n            \"abc\",           // No repeated characters\n            \"aaaaaaa\",       // Single character repeated(7 times)\n            \"aabbbcccc\",     // Multiple characters with repetitions\n            \"aabbccdd\",      // Characters occurring exactly twice\n            \"aaaaaaaaaa\",    // Exactly 10 characters(overflow for first batch)\n            \"abcdeeefffggg\", // Mixed characters with grouped repetitions\n            \"xxxxxxxxxxxxxx\", // 14 times a character\n            \"zzzzyyyyyyyyyyyzz\" // Multiple groups with large counts\n        };\n\n        for(String input : testInputs) {\n            System.out.println(compressedString(input));\n        }\n    }\n}", "all_input_output_value": "\ninput1: word=\"\"\noutput1: 1a\n--------\ninput2: word=\"a\"\noutput2: 1a\n--------\ninput3: word=\"abc\"\noutput3: 1a1b1c\n--------\ninput4: word=\"aaaaaaa\"\noutput4: 7a\n--------\ninput5: word=\"aabbbcccc\"\noutput5: 2a3b4c\n--------\ninput6: word=\"aabbccdd\"\noutput6: 2a2b2c2d\n--------\ninput7: word=\"aaaaaaaaaa\"\noutput7: 9a1a\n--------\ninput8: word=\"abcdeeefffggg\"\noutput8: 1a1b1c1d3e3f3g\n--------\ninput9: word=\"xxxxxxxxxxxxxx\"\noutput9: 9x5x\n--------\ninput10: word=\"zzzzyyyyyyyyyyyzz\"\noutput10: 4z9y2y2z\n", "input_output_value": ["\ninput1: word=\"\"\noutput1: 1a\n", "\ninput2: word=\"a\"\noutput2: 1a\n", "\ninput3: word=\"abc\"\noutput3: 1a1b1c\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << compressedString(\"\") << endl;\n    cout << compressedString(\"a\") << endl;\n    cout << compressedString(\"abc\") << endl;\n    cout << compressedString(\"aaaaaaa\") << endl;\n    cout << compressedString(\"aabbbcccc\") << endl;\n    cout << compressedString(\"aabbccdd\") << endl;\n    cout << compressedString(\"aaaaaaaaaa\") << endl;\n    cout << compressedString(\"abcdeeefffggg\") << endl;\n    cout << compressedString(\"xxxxxxxxxxxxxx\") << endl;\n    cout << compressedString(\"zzzzyyyyyyyyyyyzz\") << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###countCompleteDayPairs.cpp", "source_code_str": "    long long countCompleteDayPairs(vector<int> &hours) {\n        long long ans = 0;\n        int cnt[24]{};\n        for (int t : hours) {\n            \n            \n            ans += cnt[(24 - t % 24) % 24];\n            cnt[t % 24]++;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###countCompleteDayPairs_Test.java", "reference_code": "    public static long countCompleteDayPairs(int[] hours) {\n        long ans = 0;\n        int[] cnt = new int[24];\n        for (int t : hours) {\n            \n            \n            ans += cnt[(24 - t % 24) % 24];\n            cnt[t % 24]++;\n        }\n        return ans;\n    }", "target_method_signature": "countCompleteDayPairs", "source_method_signature": "countCompleteDayPairs", "target_allMS": "    public static long countCompleteDayPairs(int[] hours) {", "source_allMS": "    long long countCompleteDayPairs(vector<int> &hours) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countCompleteDayPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countCompleteDayPairs(new int[]{0, 0, 0}));               // Test Input 1\n        System.out.println(countCompleteDayPairs(new int[]{12, 12, 6, 18}));        // Test Input 2\n        System.out.println(countCompleteDayPairs(new int[]{5, 19, 7, 17}));         // Test Input 4\n        System.out.println(countCompleteDayPairs(new int[]{24, 0, 12, 12}));       // Test Input 5\n        System.out.println(countCompleteDayPairs(new int[]{13, 11, 0}));            // Test Input 6\n        System.out.println(countCompleteDayPairs(new int[]{6, 18, 12, 12}));        // Test Input 7\n        System.out.println(countCompleteDayPairs(new int[]{1, 2, 3, 4, 5}));        // Test Input 8\n        System.out.println(countCompleteDayPairs(new int[]{}));                      // Test Input 9\n        System.out.println(countCompleteDayPairs(new int[]{15, 9, 0, 9}));          // Test Input 10\n    }\n}", "all_input_output_value": "\ninput1: hours=[0, 0, 0]\noutput1: 3\n--------\ninput2: hours=[12, 12, 6, 18]\noutput2: 2\n--------\ninput3: hours=[5, 19, 7, 17]\noutput3: 2\n--------\ninput4: hours=[24, 0, 12, 12]\noutput4: 2\n--------\ninput5: hours=[13, 11, 0]\noutput5: 1\n--------\ninput6: hours=[6, 18, 12, 12]\noutput6: 2\n--------\ninput7: hours=[1, 2, 3, 4, 5]\noutput7: 0\n--------\ninput8: hours=[]\noutput8: 0\n--------\ninput9: hours=[15, 9, 0, 9]\noutput9: 2\n", "input_output_value": ["\ninput1: hours=[0, 0, 0]\noutput1: 3\n", "\ninput2: hours=[12, 12, 6, 18]\noutput2: 2\n", "\ninput3: hours=[5, 19, 7, 17]\noutput3: 2\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {0, 0, 0};\n    vector<int> input2 = {12, 12, 6, 18};\n    vector<int> input3 = {5, 19, 7, 17};\n    vector<int> input4 = {24, 0, 12, 12};\n    vector<int> input5 = {13, 11, 0};\n    vector<int> input6 = {6, 18, 12, 12};\n    vector<int> input7 = {1, 2, 3, 4, 5};\n    vector<int> input8 = {};\n    vector<int> input9 = {15, 9, 0, 9};\n\n    cout << countCompleteDayPairs(input1) << endl;\n    cout << countCompleteDayPairs(input2) << endl;\n    cout << countCompleteDayPairs(input3) << endl;\n    cout << countCompleteDayPairs(input4) << endl;\n    cout << countCompleteDayPairs(input5) << endl;\n    cout << countCompleteDayPairs(input6) << endl;\n    cout << countCompleteDayPairs(input7) << endl;\n    cout << countCompleteDayPairs(input8) << endl;\n    cout << countCompleteDayPairs(input9) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumArea.cpp", "source_code_str": "    int minimumArea(vector<vector<int>>& grid) {\n        int left = grid[0].size(), right = 0, top = grid.size(), bottom = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[i].size(); j++) {\n                if (grid[i][j]) {\n                    left = min(left, j);\n                    right = max(right, j);\n                    top = min(top, i);\n                    bottom = i;\n                }\n            }\n        }\n        return (right - left + 1) * (bottom - top + 1);\n    }", "source_code_block": "", "target_Lan": "java###minimumArea_Test.java", "reference_code": "    public static int minimumArea(int[][] grid) {\n        int left = grid[0].length;\n        int right = 0;\n        int top = grid.length;\n        int bottom = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (grid[i][j] == 1) {\n                    left = Math.min(left, j);\n                    right = Math.max(right, j);\n                    top = Math.min(top, i);\n                    bottom = i;\n                }\n            }\n        }\n        return (right - left + 1) * (bottom - top + 1);\n    }", "target_method_signature": "minimumArea", "source_method_signature": "minimumArea", "target_allMS": "    public static int minimumArea(int[][] grid) {", "source_allMS": "    int minimumArea(vector<vector<int>>& grid) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumArea_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumArea(new int[][]{{0}})); // expected output: 0\n        System.out.println(minimumArea(new int[][]{{1}})); // expected output: 1\n        System.out.println(minimumArea(new int[][]{{0, 0}, {0, 1}})); // expected output: 1\n        System.out.println(minimumArea(new int[][]{{1, 0}, {1, 0}})); // expected output: 2\n        System.out.println(minimumArea(new int[][]{{0, 1, 0}, {0, 1, 0}})); // expected output: 5\n        System.out.println(minimumArea(new int[][]{{0, 0, 0}, {1, 1, 1}, {0, 0, 0}})); // expected output: 3\n        System.out.println(minimumArea(new int[][]{{1, 1}, {1, 1}})); // expected output: 4\n        System.out.println(minimumArea(new int[][]{{1, 0, 0}, {0, 0, 0}, {0, 0, 1}})); // expected output: 6\n        System.out.println(minimumArea(new int[][]{{0, 1, 0}, {1, 1, 1}, {0, 1, 0}})); // expected output: 8\n    }\n}", "all_input_output_value": "\ninput1: grid=[[0]]\noutput1: 0\n--------\ninput2: grid=[[1]]\noutput2: 1\n--------\ninput3: grid=[[0, 0], [0, 1]]\noutput3: 1\n--------\ninput4: grid=[[1, 0], [1, 0]]\noutput4: 2\n--------\ninput5: grid=[[0, 1, 0], [0, 1, 0]]\noutput5: 2\n--------\ninput6: grid=[[0, 0, 0], [1, 1, 1], [0, 0, 0]]\noutput6: 3\n--------\ninput7: grid=[[1, 1], [1, 1]]\noutput7: 4\n--------\ninput8: grid=[[1, 0, 0], [0, 0, 0], [0, 0, 1]]\noutput8: 6\n--------\ninput9: grid=[[0, 1, 0], [1, 1, 1], [0, 1, 0]]\noutput9: 9\n", "input_output_value": ["\ninput1: grid=[[0]]\noutput1: 0\n", "\ninput2: grid=[[1]]\noutput2: 1\n", "\ninput3: grid=[[0, 0], [0, 1]]\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{0}};\n    vector<vector<int>> grid2 = {{1}};\n    vector<vector<int>> grid3 = {{0, 0}, {0, 1}};\n    vector<vector<int>> grid4 = {{1, 0}, {1, 0}};\n    vector<vector<int>> grid5 = {{0, 1, 0}, {0, 1, 0}};\n    vector<vector<int>> grid6 = {{0, 0, 0}, {1, 1, 1}, {0, 0, 0}};\n    vector<vector<int>> grid7 = {{1, 1}, {1, 1}};\n    vector<vector<int>> grid8 = {{1, 0, 0}, {0, 0, 0}, {0, 0, 1}};\n    vector<vector<int>> grid9 = {{0, 1, 0}, {1, 1, 1}, {0, 1, 0}};\n\n    cout << minimumArea(grid1) << endl;\n    cout << minimumArea(grid2) << endl;\n    cout << minimumArea(grid3) << endl;\n    cout << minimumArea(grid4) << endl;\n    cout << minimumArea(grid5) << endl;\n    cout << minimumArea(grid6) << endl;\n    cout << minimumArea(grid7) << endl;\n    cout << minimumArea(grid8) << endl;\n    cout << minimumArea(grid9) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###sumOfPower.cpp", "source_code_str": "    int sumOfPower(vector<int> &nums, int k) {\n        const int MOD = 1'000'000'007;\n        int n = nums.size();\n        vector<vector<int>> f(k + 1, vector<int>(n + 1));\n        f[0][0] = 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = k; j >= nums[i]; j--) {\n                for (int c = i + 1; c > 0; c--) {\n                    f[j][c] = (f[j][c] + f[j - nums[i]][c - 1]) % MOD;\n                }\n            }\n        }\n        int ans = 0;\n        int pow2 = 1;\n        for (int i = n; i > 0; i--) {\n            ans = (ans + (long long) f[k][i] * pow2) % MOD;\n            pow2 = pow2 * 2 % MOD;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###sumOfPower_Test.java", "reference_code": "    public static int sumOfPower(int[] nums, int k) {\n        final int MOD = 1_000_000_007;\n        int n = nums.length;\n        int[][] f = new int[k + 1][n + 1];\n        f[0][0] = 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = k; j >= nums[i]; j--) {\n                for (int c = i + 1; c > 0; c--) {\n                    f[j][c] = (f[j][c] + f[j - nums[i]][c - 1]) % MOD;\n                }\n            }\n        }\n        long ans = 0;\n        int pow2 = 1;\n        for (int i = n; i > 0; i--) {\n            ans = (ans + (long) f[k][i] * pow2) % MOD;\n            pow2 = pow2 * 2 % MOD;\n        }\n        return (int) ans;\n    }", "target_method_signature": "sumOfPower", "source_method_signature": "sumOfPower", "target_allMS": "    public static int sumOfPower(int[] nums, int k) {", "source_allMS": "    int sumOfPower(vector<int> &nums, int k) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class sumOfPower_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(sumOfPower(new int[]{}, 1)); // Test input 1: nums = [], k = 1\n        System.out.println(sumOfPower(new int[]{1, 2, 3}, 0)); // Test input 2: nums = [1, 2, 3], k = 0\n        System.out.println(sumOfPower(new int[]{1}, 1)); // Test input 3: nums = [1], k = 1\n        System.out.println(sumOfPower(new int[]{1, 2}, 2)); // Test input 4: nums = [1, 2], k = 2\n        System.out.println(sumOfPower(new int[]{2, 3, 5}, 3)); // Test input 5: nums = [2, 3, 5], k = 3\n        System.out.println(sumOfPower(new int[]{1, 1, 1, 1}, 4)); // Test input 6: nums = [1, 1, 1, 1], k = 4\n        System.out.println(sumOfPower(new int[]{4, 5}, 5)); // Test input 7: nums = [4, 5], k = 5\n        System.out.println(sumOfPower(new int[]{10, 1, 2}, 10)); // Test input 8: nums = [10, 1, 2], k = 10\n        System.out.println(sumOfPower(new int[]{0, 1, 2}, 2)); // Test input 9: nums = [0, 1, 2], k = 2\n        System.out.println(sumOfPower(new int[]{1000, 1000, 1000}, 3)); // Test input 10: nums = [1000, 1000, 1000], k = 3\n    }\n}", "all_input_output_value": "\ninput1: nums=[], k=1\noutput1: 0\n--------\ninput2: nums=[1, 2, 3], k=0\noutput2: 0\n--------\ninput3: nums=[1], k=1\noutput3: 1\n--------\ninput4: nums=[1, 2], k=2\noutput4: 2\n--------\ninput5: nums=[2, 3, 5], k=3\noutput5: 4\n--------\ninput6: nums=[1, 1, 1, 1], k=4\noutput6: 1\n--------\ninput7: nums=[4, 5], k=5\noutput7: 2\n--------\ninput8: nums=[10, 1, 2], k=10\noutput8: 4\n--------\ninput9: nums=[0, 1, 2], k=2\noutput9: 6\n--------\ninput10: nums=[1000, 1000, 1000], k=3\noutput10: 0\n", "input_output_value": ["\ninput1: nums=[], k=1\noutput1: 0\n", "\ninput2: nums=[1, 2, 3], k=0\noutput2: 0\n", "\ninput3: nums=[1], k=1\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> nums1 = {};\n    cout << sumOfPower(nums1, 1) << endl;\n\n    vector<int> nums2 = {1, 2, 3};\n    cout << sumOfPower(nums2, 0) << endl;\n\n    vector<int> nums3 = {1};\n    cout << sumOfPower(nums3, 1) << endl;\n\n    vector<int> nums4 = {1, 2};\n    cout << sumOfPower(nums4, 2) << endl;\n\n    vector<int> nums5 = {2, 3, 5};\n    cout << sumOfPower(nums5, 3) << endl;\n\n    vector<int> nums6 = {1, 1, 1, 1};\n    cout << sumOfPower(nums6, 4) << endl;\n\n    vector<int> nums7 = {4, 5};\n    cout << sumOfPower(nums7, 5) << endl;\n\n    vector<int> nums8 = {10, 1, 2};\n    cout << sumOfPower(nums8, 10) << endl;\n\n    vector<int> nums9 = {0, 1, 2};\n    cout << sumOfPower(nums9, 2) << endl;\n\n    vector<int> nums10 = {1000, 1000, 1000};\n    cout << sumOfPower(nums10, 3) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###scoreOfString.cpp", "source_code_str": "    int scoreOfString(string s) {\n        int ans = 0;\n        for (int i = 1; i < s.length(); i++) {\n            ans += abs(s[i] - s[i - 1]);\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###scoreOfString_Test.java", "reference_code": "    public static int scoreOfString(String S) {\n        char[] s = S.toCharArray();\n        int ans = 0;\n        for (int i = 1; i < s.length; i++) {\n            ans += Math.abs(s[i] - s[i - 1]);\n        }\n        return ans;\n    }", "target_method_signature": "scoreOfString", "source_method_signature": "scoreOfString", "target_allMS": "    public static int scoreOfString(String S) {", "source_allMS": "    int scoreOfString(string s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class scoreOfString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(scoreOfString(\"\"));            // Test input 1\n        System.out.println(scoreOfString(\"a\"));           // Test input 2\n        System.out.println(scoreOfString(\"aa\"));          // Test input 3\n        System.out.println(scoreOfString(\"ab\"));          // Test input 4\n        System.out.println(scoreOfString(\"abc\"));         // Test input 5\n        System.out.println(scoreOfString(\"a1b2\"));        // Test input 6\n        System.out.println(scoreOfString(\"!@#$%\"));       // Test input 7\n        System.out.println(scoreOfString(\"cba\"));         // Test input 8\n        System.out.println(scoreOfString(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")); // Test input 9\n        System.out.println(scoreOfString(\"zzzzzz\"));      // Test input 10\n    }\n}", "all_input_output_value": "\ninput1: S=\"\"\noutput1: 0\n--------\ninput2: S=\"a\"\noutput2: 0\n--------\ninput3: S=\"aa\"\noutput3: 0\n--------\ninput4: S=\"ab\"\noutput4: 1\n--------\ninput5: S=\"abc\"\noutput5: 2\n--------\ninput6: S=\"a1b2\"\noutput6: 145\n--------\ninput7: S=\"!@#$%\"\noutput7: 62\n--------\ninput8: S=\"cba\"\noutput8: 2\n--------\ninput9: S=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\noutput9: 25\n--------\ninput10: S=\"zzzzzz\"\noutput10: 0\n", "input_output_value": ["\ninput1: S=\"\"\noutput1: 0\n", "\ninput2: S=\"a\"\noutput2: 0\n", "\ninput3: S=\"aa\"\noutput3: 0\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <cstdlib> // for abs\n// TOFILL\nint main() {\n    cout << scoreOfString(\"\") << endl;        // input: S=\"\"\n    cout << scoreOfString(\"a\") << endl;       // input: S=\"a\"\n    cout << scoreOfString(\"aa\") << endl;      // input: S=\"aa\"\n    cout << scoreOfString(\"ab\") << endl;      // input: S=\"ab\"\n    cout << scoreOfString(\"abc\") << endl;     // input: S=\"abc\"\n    cout << scoreOfString(\"a1b2\") << endl;    // input: S=\"a1b2\"\n    cout << scoreOfString(\"!@#$%\") << endl;   // input: S=\"!@#$%\"\n    cout << scoreOfString(\"cba\") << endl;     // input: S=\"cba\"\n    cout << scoreOfString(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") << endl; // input: S=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    cout << scoreOfString(\"zzzzzz\") << endl;  // input: S=\"zzzzzz\"\n}", "TAG": "Success"}
{"source_Lan": "cpp###satisfiesConditions.cpp", "source_code_str": "    bool satisfiesConditions(vector<vector<int>>& grid) {\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[i].size(); j++) {\n                if (j && grid[i][j] == grid[i][j - 1] || i && grid[i][j] != grid[i - 1][j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "source_code_block": "", "target_Lan": "java###satisfiesConditions_Test.java", "reference_code": "    public static boolean satisfiesConditions(int[][] grid) {\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                if (j > 0 && grid[i][j] == grid[i][j - 1] || i > 0 && grid[i][j] != grid[i - 1][j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "target_method_signature": "satisfiesConditions", "source_method_signature": "satisfiesConditions", "target_allMS": "    public static boolean satisfiesConditions(int[][] grid) {", "source_allMS": "    bool satisfiesConditions(vector<vector<int>>& grid) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class satisfiesConditions_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{0, 1}, {1, 2}};\n        int[][] input2 = {{1, 1}, {1, 2}, {1, 1}, {2}};\n        int[][] input3 = {{0, 0, 0}};\n        int[][] input4 = {{1, 2}, {2, 3}};\n        int[][] input5 = {{1}};\n        int[][] input6 = {{1, 1, 1}};\n\n        System.out.println(satisfiesConditions(input1));\n        System.out.println(satisfiesConditions(input2));\n        System.out.println(satisfiesConditions(input3));\n        System.out.println(satisfiesConditions(input4));\n        System.out.println(satisfiesConditions(input5));\n        System.out.println(satisfiesConditions(input6));\n    }\n}", "all_input_output_value": "\ninput1: grid={{0, 1}, {1, 2}}\noutput1: false\n--------\ninput2: grid={{1, 1}, {1, 2}, {1, 1}, {2}}\noutput2: false\n--------\ninput3: grid={{0, 0, 0}}\noutput3: false\n--------\ninput4: grid={{1, 2}, {2, 3}}\noutput4: false\n--------\ninput5: grid={{1}}\noutput5: true\n--------\ninput6: grid={{1, 1, 1}}\noutput6: false\n", "input_output_value": ["\ninput1: grid={{0, 1}, {1, 2}}\noutput1: false\n", "\ninput2: grid={{1, 1}, {1, 2}, {1, 1}, {2}}\noutput2: false\n", "\ninput3: grid={{0, 0, 0}}\noutput3: false\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{0, 1}, {1, 2}};\n    vector<vector<int>> grid2 = {{1, 1}, {1, 2}, {1, 1}, {2}};\n    vector<vector<int>> grid3 = {{0, 0, 0}};\n    vector<vector<int>> grid4 = {{1, 2}, {2, 3}};\n    vector<vector<int>> grid5 = {{1}};\n    vector<vector<int>> grid6 = {{1, 1, 1}};\n\n    cout << satisfiesConditions(grid1) << endl;  // Expected output: 1(true)\n    cout << satisfiesConditions(grid2) << endl;  // Expected output: 1(true)\n    cout << satisfiesConditions(grid3) << endl;  // Expected output: 1(true)\n    cout << satisfiesConditions(grid4) << endl;  // Expected output: 0(false)\n    cout << satisfiesConditions(grid5) << endl;  // Expected output: 1(true)\n    cout << satisfiesConditions(grid6) << endl;  // Expected output: 1(true)\n}", "TAG": "Success"}
{"source_Lan": "cpp###accountBalanceAfterPurchase.cpp", "source_code_str": "    int accountBalanceAfterPurchase(int purchaseAmount) {\n        int r = purchaseAmount % 10;\n        if (r < 5) {\n            purchaseAmount -= r;\n        } else {\n            purchaseAmount += 10 - r;\n        }\n        return 100 - purchaseAmount;\n    }", "source_code_block": "", "target_Lan": "java###accountBalanceAfterPurchase_Test.java", "reference_code": "    public static int accountBalanceAfterPurchase(int purchaseAmount) {\n        int r = purchaseAmount % 10;\n        if (r < 5) {\n            purchaseAmount -= r;\n        } else {\n            purchaseAmount += 10 - r;\n        }\n        return 100 - purchaseAmount;\n    }", "target_method_signature": "accountBalanceAfterPurchase", "source_method_signature": "accountBalanceAfterPurchase", "target_allMS": "    public static int accountBalanceAfterPurchase(int purchaseAmount) {", "source_allMS": "    int accountBalanceAfterPurchase(int purchaseAmount) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class accountBalanceAfterPurchase_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInputs = {0, 5, 10, 14, 19, 25, 99, 100, 104, 109};\n        for(int amount : testInputs) {\n            System.out.println(accountBalanceAfterPurchase(amount));\n        }\n    }\n}", "all_input_output_value": "\ninput1: purchaseAmount=0\noutput1: 100\n--------\ninput2: purchaseAmount=5\noutput2: 90\n--------\ninput3: purchaseAmount=10\noutput3: 90\n--------\ninput4: purchaseAmount=14\noutput4: 90\n--------\ninput5: purchaseAmount=19\noutput5: 80\n--------\ninput6: purchaseAmount=25\noutput6: 70\n--------\ninput7: purchaseAmount=99\noutput7: 0\n--------\ninput8: purchaseAmount=100\noutput8: 0\n--------\ninput9: purchaseAmount=104\noutput9: 0\n--------\ninput10: purchaseAmount=109\noutput10: -10\n", "input_output_value": ["\ninput1: purchaseAmount=0\noutput1: 100\n", "\ninput2: purchaseAmount=5\noutput2: 90\n", "\ninput3: purchaseAmount=10\noutput3: 90\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << accountBalanceAfterPurchase(0) << endl;\n    cout << accountBalanceAfterPurchase(5) << endl;\n    cout << accountBalanceAfterPurchase(10) << endl;\n    cout << accountBalanceAfterPurchase(14) << endl;\n    cout << accountBalanceAfterPurchase(19) << endl;\n    cout << accountBalanceAfterPurchase(25) << endl;\n    cout << accountBalanceAfterPurchase(99) << endl;\n    cout << accountBalanceAfterPurchase(100) << endl;\n    cout << accountBalanceAfterPurchase(104) << endl;\n    cout << accountBalanceAfterPurchase(109) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxOperations.cpp", "source_code_str": "    int maxOperations(vector<int>& nums) {\n        int n = nums.size(), t = 0;\n        for (int i = 1; i < n; i += 2) {\n            if (nums[i] + nums[i - 1] != nums[1] + nums[0]) {\n                break;\n            }\n            t++;\n        }\n        return t;\n    }", "source_code_block": "", "target_Lan": "java###maxOperations_Test.java", "reference_code": "    public static int maxOperations(int[] nums) {\n        int n = nums.length, t = 0;\n        for (int i = 1; i < n; i += 2) {\n            if (nums[i] + nums[i - 1] != nums[1] + nums[0]) {\n                break;\n            }\n            t++;\n        }\n        return t;\n    }", "target_method_signature": "maxOperations", "source_method_signature": "maxOperations", "target_allMS": "    public static int maxOperations(int[] nums) {", "source_allMS": "    int maxOperations(vector<int>& nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxOperations(new int[]{1, 2, 3, 4, 5, 6, 7}));\n        System.out.println(maxOperations(new int[]{0, 0, 0, 0, 0, 0}));\n        System.out.println(maxOperations(new int[]{1, 1, 2, 2, 3, 3}));\n        System.out.println(maxOperations(new int[]{1, 2, 3, 4}));\n        System.out.println(maxOperations(new int[]{5, 5, 5, 5, 5, 5, 5}));\n        System.out.println(maxOperations(new int[]{2, 3, 5, 2, 3, 5, 7}));\n        System.out.println(maxOperations(new int[]{9, 9, 18, 18, 9}));\n        System.out.println(maxOperations(new int[]{-1, -1, -2, -1, -1}));\n        System.out.println(maxOperations(new int[]{1000, 1000, 2000, 2000}));\n        System.out.println(maxOperations(new int[]{2, 2, 4, 4, 6}));\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3, 4, 5, 6, 7]\noutput1: 1\n--------\ninput2: nums=[0, 0, 0, 0, 0, 0]\noutput2: 3\n--------\ninput3: nums=[1, 1, 2, 2, 3, 3]\noutput3: 1\n--------\ninput4: nums=[1, 2, 3, 4]\noutput4: 1\n--------\ninput5: nums=[5, 5, 5, 5, 5, 5, 5]\noutput5: 3\n--------\ninput6: nums=[2, 3, 5, 2, 3, 5, 7]\noutput6: 1\n--------\ninput7: nums=[9, 9, 18, 18, 9]\noutput7: 1\n--------\ninput8: nums=[-1, -1, -2, -1, -1]\noutput8: 1\n--------\ninput9: nums=[1000, 1000, 2000, 2000]\noutput9: 1\n--------\ninput10: nums=[2, 2, 4, 4, 6]\noutput10: 1\n", "input_output_value": ["\ninput1: nums=[1, 2, 3, 4, 5, 6, 7]\noutput1: 1\n", "\ninput2: nums=[0, 0, 0, 0, 0, 0]\noutput2: 3\n", "\ninput3: nums=[1, 1, 2, 2, 3, 3]\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> testInputs = {\n        {1, 2, 3, 4, 5, 6, 7},\n        {0, 0, 0, 0, 0, 0},\n        {1, 1, 2, 2, 3, 3},\n        {1, 2, 3, 4},\n        {5, 5, 5, 5, 5, 5, 5},\n        {2, 3, 5, 2, 3, 5, 7},\n        {9, 9, 18, 18, 9},\n        {-1, -1, -2, -1, -1},\n        {1000, 1000, 2000, 2000},\n        {2, 2, 4, 4, 6}\n    };\n    \n    for(const auto& input : testInputs) {\n        cout << maxOperations(const_cast<vector<int>&>(input)) << endl;\n    }\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumSteps.cpp", "source_code_str": "    long long minimumSteps(string s) {\n        long long ans = 0;\n        int sum = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == '1') {\n                sum++;\n            } else {\n                ans += sum;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minimumSteps_Test.java", "reference_code": "    public static long minimumSteps(String s) {\n        long ans = 0;\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                sum++;\n            } else {\n                ans += sum;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "minimumSteps", "source_method_signature": "minimumSteps", "target_allMS": "    public static long minimumSteps(String s) {", "source_allMS": "    long long minimumSteps(string s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minimumSteps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumSteps(\"\")); // Test input 1\n        System.out.println(minimumSteps(\"00000\")); // Test input 2\n        System.out.println(minimumSteps(\"11111\")); // Test input 3\n        System.out.println(minimumSteps(\"000111\")); // Test input 4\n        System.out.println(minimumSteps(\"111000\")); // Test input 5\n        System.out.println(minimumSteps(\"1010101010\")); // Test input 6\n        System.out.println(minimumSteps(\"11100000\")); // Test input 7\n        System.out.println(minimumSteps(\"00011111\")); // Test input 8\n        System.out.println(minimumSteps(\"110000111\")); // Test input 9\n        System.out.println(minimumSteps(\"101010101010101010\")); // Test input 10\n    }\n}", "all_input_output_value": "\ninput1: s=\"\"\noutput1: 0\n--------\ninput2: s=\"00000\"\noutput2: 0\n--------\ninput3: s=\"11111\"\noutput3: 0\n--------\ninput4: s=\"000111\"\noutput4: 0\n--------\ninput5: s=\"111000\"\noutput5: 9\n--------\ninput6: s=\"1010101010\"\noutput6: 15\n--------\ninput7: s=\"11100000\"\noutput7: 15\n--------\ninput8: s=\"00011111\"\noutput8: 0\n--------\ninput9: s=\"110000111\"\noutput9: 8\n--------\ninput10: s=\"101010101010101010\"\noutput10: 45\n", "input_output_value": ["\ninput1: s=\"\"\noutput1: 0\n", "\ninput2: s=\"00000\"\noutput2: 0\n", "\ninput3: s=\"11111\"\noutput3: 0\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << minimumSteps(\"\") << endl;             // Test Input 1\n    cout << minimumSteps(\"00000\") << endl;       // Test Input 2\n    cout << minimumSteps(\"11111\") << endl;       // Test Input 3\n    cout << minimumSteps(\"000111\") << endl;      // Test Input 4\n    cout << minimumSteps(\"111000\") << endl;      // Test Input 5\n    cout << minimumSteps(\"1010101010\") << endl;  // Test Input 6\n    cout << minimumSteps(\"11100000\") << endl;    // Test Input 7\n    cout << minimumSteps(\"00011111\") << endl;    // Test Input 8\n    cout << minimumSteps(\"110000111\") << endl;   // Test Input 9\n    cout << minimumSteps(\"101010101010101010\") << endl; // Test Input 10\n}", "TAG": "Success"}
{"source_Lan": "cpp###findMissingAndRepeatedValues.cpp", "source_code_str": "    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<int> count(n * n + 1);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count[grid[i][j]]++;\n            }\n        }\n        vector<int> res(2);\n        for (int i = 1; i <= n * n; i++) {\n            if (count[i] == 2) {\n                res[0] = i;\n            }\n            if (count[i] == 0) {\n                res[1] = i;\n            }\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###findMissingAndRepeatedValues_Test.java", "reference_code": "    public static int[] findMissingAndRepeatedValues(int[][] grid) {\n        int n = grid.length;\n        int[] count = new int[n * n + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count[grid[i][j]]++;\n            }\n        }\n        int[] res = new int[2];\n        for (int i = 1; i <= n * n; i++) {\n            if (count[i] == 2) {\n                res[0] = i;\n            }\n            if (count[i] == 0) {\n                res[1] = i;\n            }\n        }\n        return res;\n    }", "target_method_signature": "findMissingAndRepeatedValues", "source_method_signature": "findMissingAndRepeatedValues", "target_allMS": "    public static int[] findMissingAndRepeatedValues(int[][] grid) {", "source_allMS": "    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findMissingAndRepeatedValues_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] test1 = {{1, 2}, {2, 3}}; // Missing: 4, Repeated: 2\n        int[][] test2 = {{1, 1}, {3, 4}}; // Missing: 2, Repeated: 1\n        int[][] test3 = {{3, 2}, {1, 4}}; // Missing: 2, Repeated: 5(value out of range)\n        int[][] test4 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; // Complete grid(missing: 10, no repeat)\n        int[][] test5 = {{1}}; // Edge Case: Missing: 2, Repeated: Must handle correctly\n        int[][] test6 = {{2, 2}, {1, 3}}; // Missing: 4, Repeated: 2\n        int[][] test7 = {{1, 2, 2}, {4, 5, 6}, {7, 8, 9}}; // Missing: 3, Repeated: 2\n        int[][] test8 = {{1, 2, 3, 4}, {5, 6, 6, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; // Missing: 7, Repeated: 6\n        int[][] test9 = {{1, 2, 3, 5}, {4, 4, 6, 7}, {8, 9, 11, 12}, {13, 14, 15, 16}}; // Missing: 10, Repeated: 4\n        int[][] test10 = {{1, 3, 4, 5, 5}, {2, 6, 7, 8, 9}, {10, 11, 12, 13, 14}, {15, 16, 17, 18, 19}, {20, 21, 22, 23, 24}}; // Missing: 25, Repeated: 5\n\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test1)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test2)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test3)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test4)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test5)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test6)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test7)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test8)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test9)));\n        System.out.println(Arrays.toString(findMissingAndRepeatedValues(test10)));\n    }\n}", "all_input_output_value": "\ninput1: grid={{1, 2}, {2, 3}}\noutput1: [2, 4]\n--------\ninput2: grid={{1, 1}, {3, 4}}\noutput2: [1, 2]\n--------\ninput3: grid={{3, 2}, {1, 4}}\noutput3: [0, 0]\n--------\ninput4: grid={{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\noutput4: [0, 0]\n--------\ninput5: grid={{1}}\noutput5: [0, 0]\n--------\ninput6: grid={{2, 2}, {1, 3}}\noutput6: [2, 4]\n--------\ninput7: grid={{1, 2, 2}, {4, 5, 6}, {7, 8, 9}}\noutput7: [2, 3]\n--------\ninput8: grid={{1, 2, 3, 4}, {5, 6, 6, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}\noutput8: [6, 7]\n--------\ninput9: grid={{1, 2, 3, 5}, {4, 4, 6, 7}, {8, 9, 11, 12}, {13, 14, 15, 16}}\noutput9: [4, 10]\n--------\ninput10: grid={{1, 3, 4, 5, 5}, {2, 6, 7, 8, 9}, {10, 11, 12, 13, 14}, {15, 16, 17, 18, 19}, {20, 21, 22, 23, 24}}\noutput10: [5, 25]\n", "input_output_value": ["\ninput1: grid={{1, 2}, {2, 3}}\noutput1: [2, 4]\n", "\ninput2: grid={{1, 1}, {3, 4}}\noutput2: [1, 2]\n", "\ninput3: grid={{3, 2}, {1, 4}}\noutput3: [0, 0]\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> input1 = {{1, 2}, {2, 3}};\n    vector<vector<int>> input2 = {{1, 1}, {3, 4}};\n    vector<vector<int>> input3 = {{3, 2}, {1, 4}};\n    vector<vector<int>> input4 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    vector<vector<int>> input5 = {{1}};\n    vector<vector<int>> input6 = {{2, 2}, {1, 3}};\n    vector<vector<int>> input7 = {{1, 2, 2}, {4, 5, 6}, {7, 8, 9}};\n    vector<vector<int>> input8 = {{1, 2, 3, 4}, {5, 6, 6, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    vector<vector<int>> input9 = {{1, 2, 3, 5}, {4, 4, 6, 7}, {8, 9, 11, 12}, {13, 14, 15, 16}};\n    vector<vector<int>> input10 = {{1, 3, 4, 5, 5}, {2, 6, 7, 8, 9}, {10, 11, 12, 13, 14}, {15, 16, 17, 18, 19}, {20, 21, 22, 23, 24}};\n\n    vector<int> result;\n\n    result = findMissingAndRepeatedValues(input1);\n    cout << \"Input 1: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input2);\n    cout << \"Input 2: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input3);\n    cout << \"Input 3: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input4);\n    cout << \"Input 4: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input5);\n    cout << \"Input 5: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input6);\n    cout << \"Input 6: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input7);\n    cout << \"Input 7: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input8);\n    cout << \"Input 8: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input9);\n    cout << \"Input 9: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    result = findMissingAndRepeatedValues(input10);\n    cout << \"Input 10: Missing = \" << result[1] << \", Repeated = \" << result[0] << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###distributeCandies2.cpp", "source_code_str": "    long long distributeCandies2(int n, int limit) {\n        long long ans = 0;\n        for (int i = 0; i <= min(limit, n); i++) {\n            if (n - i > 2 * limit) {\n                continue;\n            }\n            ans += min(n - i, limit) - max(0, n - i - limit) + 1;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###distributeCandies2_Test.java", "reference_code": "    public static long distributeCandies2(int n, int limit) {\n        long ans = 0;\n        for (int i = 0; i <= Math.min(limit, n); i++) {\n            if (n - i > 2 * limit) {\n                continue;\n            }\n            ans += Math.min(n - i, limit) - Math.max(0, n - i - limit) + 1;\n        }\n        return ans;\n    }", "target_method_signature": "distributeCandies2", "source_method_signature": "distributeCandies2", "target_allMS": "    public static long distributeCandies2(int n, int limit) {", "source_allMS": "    long long distributeCandies2(int n, int limit) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class distributeCandies2_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(distributeCandies2(0, 0));\n        System.out.println(distributeCandies2(5, 10));\n        System.out.println(distributeCandies2(10, 10));\n        System.out.println(distributeCandies2(10, 2));\n        System.out.println(distributeCandies2(20, 5));\n        System.out.println(distributeCandies2(25, 25));\n        System.out.println(distributeCandies2(15, 7));\n        System.out.println(distributeCandies2(30, 0));\n        System.out.println(distributeCandies2(50, 3));\n        System.out.println(distributeCandies2(100, 10));\n    }\n}", "all_input_output_value": "\ninput1: n=0, limit=0\noutput1: 1\n--------\ninput2: n=5, limit=10\noutput2: 21\n--------\ninput3: n=10, limit=10\noutput3: 66\n--------\ninput4: n=10, limit=2\noutput4: 0\n--------\ninput5: n=20, limit=5\noutput5: 0\n--------\ninput6: n=25, limit=25\noutput6: 351\n--------\ninput7: n=15, limit=7\noutput7: 28\n--------\ninput8: n=30, limit=0\noutput8: 0\n--------\ninput9: n=50, limit=3\noutput9: 0\n--------\ninput10: n=100, limit=10\noutput10: 0\n", "input_output_value": ["\ninput1: n=0, limit=0\noutput1: 1\n", "\ninput2: n=5, limit=10\noutput2: 21\n", "\ninput3: n=10, limit=10\noutput3: 66\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <algorithm>\n// TOFILL\nint main() {\n    cout << distributeCandies2(0, 0) << endl;\n    cout << distributeCandies2(5, 10) << endl;\n    cout << distributeCandies2(10, 10) << endl;\n    cout << distributeCandies2(10, 2) << endl;\n    cout << distributeCandies2(20, 5) << endl;\n    cout << distributeCandies2(25, 25) << endl;\n    cout << distributeCandies2(15, 7) << endl;\n    cout << distributeCandies2(30, 0) << endl;\n    cout << distributeCandies2(50, 3) << endl;\n    cout << distributeCandies2(100, 10) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###distributeCandies.cpp", "source_code_str": "    int distributeCandies(int n, int limit) {\n        int ans = 0;\n        for (int i = 0; i <= limit; i++) {\n            for (int j = 0; j <= limit; j++) {\n                if (i + j > n) {\n                    break;\n                }\n                if (n - i - j <= limit) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###distributeCandies_Test.java", "reference_code": "    public static int distributeCandies(int n, int limit) {\n        int ans = 0;\n        for (int i = 0; i <= limit; i++) {\n            for (int j = 0; j <= limit; j++) {\n                if (i + j > n) {\n                    break;\n                }\n                if (n - i - j <= limit) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "distributeCandies", "source_method_signature": "distributeCandies", "target_allMS": "    public static int distributeCandies(int n, int limit) {", "source_allMS": "    int distributeCandies(int n, int limit) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class distributeCandies_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInputs = {1, 0, 5, 10, 15, 30, 100, 50, 1, 2};\n        \n        for(int i = 0; i < testInputs.length; i += 2) {\n            int n = testInputs[i];\n            int limit = testInputs[i + 1];\n            System.out.println(\"distributeCandies(\" + n + \", \" + limit + \") = \" + distributeCandies(n, limit));\n        }\n    }\n}", "all_input_output_value": "\ninput1: n=1, limit=0\noutput1: 0\n--------\ninput2: n=5, limit=10\noutput2: 21\n--------\ninput3: n=15, limit=30\noutput3: 136\n--------\ninput4: n=100, limit=50\noutput4: 1326\n--------\ninput5: n=1, limit=2\noutput5: 3\n", "input_output_value": ["\ninput1: n=1, limit=0\noutput1: 0\n", "\ninput2: n=5, limit=10\noutput2: 21\n", "\ninput3: n=15, limit=30\noutput3: 136\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << distributeCandies(1, 0) << endl;\n    cout << distributeCandies(5, 10) << endl;\n    cout << distributeCandies(15, 30) << endl;\n    cout << distributeCandies(100, 50) << endl;\n    cout << distributeCandies(1, 2) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###findIndices.cpp", "source_code_str": "    vector<int> findIndices(vector<int>& nums, int indexDifference, int valueDifference) {\n        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i; j < nums.size(); j++) {\n                if (j - i >= indexDifference && abs(nums[j] - nums[i]) >= valueDifference) {\n                    return {i, j};\n                }\n            }\n        }\n        return {-1, -1};\n    }", "source_code_block": "", "target_Lan": "java###findIndices_Test.java", "reference_code": "    public static int[] findIndices(int[] nums, int indexDifference, int valueDifference) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i; j < nums.length; j++) {\n                if (j - i >= indexDifference && Math.abs(nums[j] - nums[i]) >= valueDifference) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return new int[]{-1, -1};\n    }", "target_method_signature": "findIndices", "source_method_signature": "findIndices", "target_allMS": "    public static int[] findIndices(int[] nums, int indexDifference, int valueDifference) {", "source_allMS": "    vector<int> findIndices(vector<int>& nums, int indexDifference, int valueDifference) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findIndices_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Inputs\n        int[] result1 = findIndices(new int[]{1, 2, 3, 4, 5}, 2, 2);\n        int[] result2 = findIndices(new int[]{1, 3, 5, 7, 8}, 2, 4);\n        int[] result3 = findIndices(new int[]{10, 10, 10}, 1, 1);\n        int[] result4 = findIndices(new int[]{1, 1, 1}, 1, 0);\n        int[] result5 = findIndices(new int[]{4, 5, 6, 10}, 3, 5);\n        int[] result6 = findIndices(new int[]{-1, 0, 1}, 1, 2);\n        int[] result7 = findIndices(new int[]{0, 0, 3, 0}, 1, 2);\n        int[] result8 = findIndices(new int[]{10}, 1, 5);\n        int[] result9 = findIndices(new int[]{}, 1, 1);\n        int[] result10 = findIndices(new int[]{2, 1}, 1, 0);\n\n        // Printing results\n        System.out.println(Arrays.toString(result1));\n        System.out.println(Arrays.toString(result2));\n        System.out.println(Arrays.toString(result3));\n        System.out.println(Arrays.toString(result4));\n        System.out.println(Arrays.toString(result5));\n        System.out.println(Arrays.toString(result6));\n        System.out.println(Arrays.toString(result7));\n        System.out.println(Arrays.toString(result8));\n        System.out.println(Arrays.toString(result9));\n        System.out.println(Arrays.toString(result10));\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3, 4, 5], indexDifference=2, valueDifference=2\noutput1: [0, 2]\n--------\ninput2: nums=[1, 3, 5, 7, 8], indexDifference=2, valueDifference=4\noutput2: [0, 2]\n--------\ninput3: nums=[10, 10, 10], indexDifference=1, valueDifference=1\noutput3: [-1, -1]\n--------\ninput4: nums=[1, 1, 1], indexDifference=1, valueDifference=0\noutput4: [0, 1]\n--------\ninput5: nums=[4, 5, 6, 10], indexDifference=3, valueDifference=5\noutput5: [0, 3]\n--------\ninput6: nums=[-1, 0, 1], indexDifference=1, valueDifference=2\noutput6: [0, 2]\n--------\ninput7: nums=[0, 0, 3, 0], indexDifference=1, valueDifference=2\noutput7: [0, 2]\n--------\ninput8: nums=[10], indexDifference=1, valueDifference=5\noutput8: [-1, -1]\n--------\ninput9: nums=[], indexDifference=1, valueDifference=1\noutput9: [-1, -1]\n--------\ninput10: nums=[2, 1], indexDifference=1, valueDifference=0\noutput10: [0, 1]\n", "input_output_value": ["\ninput1: nums=[1, 2, 3, 4, 5], indexDifference=2, valueDifference=2\noutput1: [0, 2]\n", "\ninput2: nums=[1, 3, 5, 7, 8], indexDifference=2, valueDifference=4\noutput2: [0, 2]\n", "\ninput3: nums=[10, 10, 10], indexDifference=1, valueDifference=1\noutput3: [-1, -1]\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <cmath> // for abs function\n// TOFILL\nint main() {\n    vector<int> result;\n\n    vector<int> nums1 = {1, 2, 3, 4, 5};\n    result = findIndices(nums1, 2, 2);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums2 = {1, 3, 5, 7, 8};\n    result = findIndices(nums2, 2, 4);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums3 = {10, 10, 10};\n    result = findIndices(nums3, 1, 1);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums4 = {1, 1, 1};\n    result = findIndices(nums4, 1, 0);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums5 = {4, 5, 6, 10};\n    result = findIndices(nums5, 3, 5);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums6 = {-1, 0, 1};\n    result = findIndices(nums6, 1, 2);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums7 = {0, 0, 3, 0};\n    result = findIndices(nums7, 1, 2);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums8 = {10};\n    result = findIndices(nums8, 1, 5);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums9 = {};\n    result = findIndices(nums9, 1, 1);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    vector<int> nums10 = {2, 1};\n    result = findIndices(nums10, 1, 0);\n    cout << result[0] << \", \" << result[1] << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###theMaximumAchievableX.cpp", "source_code_str": "    int theMaximumAchievableX(int num, int t) {\n        return num + 2 * t;\n    }", "source_code_block": "", "target_Lan": "java###theMaximumAchievableX_Test.java", "reference_code": "    public static int theMaximumAchievableX(int num, int t) {\n        return num + 2 * t;\n    }", "target_method_signature": "theMaximumAchievableX", "source_method_signature": "theMaximumAchievableX", "target_allMS": "    public static int theMaximumAchievableX(int num, int t) {", "source_allMS": "    int theMaximumAchievableX(int num, int t) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.lang.Integer;\npublic class theMaximumAchievableX_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(theMaximumAchievableX(10, 0)); // Baseline case\n        System.out.println(theMaximumAchievableX(5, 3));  // Positive case\n        System.out.println(theMaximumAchievableX(0, 0));  // Edge case, neutral value\n        System.out.println(theMaximumAchievableX(-5, 2)); // Negative num, positive t\n        System.out.println(theMaximumAchievableX(Integer.MAX_VALUE, 1)); // Boundary case, potential overflow\n        System.out.println(theMaximumAchievableX(0, 5));  // Positive t, neutral num\n        System.out.println(theMaximumAchievableX(Integer.MIN_VALUE, 3)); // Boundary case, negative num\n        System.out.println(theMaximumAchievableX(-10, -5)); // Both negative\n        System.out.println(theMaximumAchievableX(4, -1));  // Positive num, negative t\n        System.out.println(theMaximumAchievableX(100, 50)); // Both positive, larger values\n    }\n}", "all_input_output_value": "\ninput1: num=10, t=0\noutput1: 10\n--------\ninput2: num=5, t=3\noutput2: 11\n--------\ninput3: num=0, t=0\noutput3: 0\n--------\ninput4: num=-5, t=2\noutput4: -1\n--------\ninput5: num=Integer.MAX_VALUE, t=1\noutput5: -2147483647\n--------\ninput6: num=0, t=5\noutput6: 10\n--------\ninput7: num=Integer.MIN_VALUE, t=3\noutput7: -2147483642\n--------\ninput8: num=-10, t=-5\noutput8: -20\n--------\ninput9: num=4, t=-1\noutput9: 2\n--------\ninput10: num=100, t=50\noutput10: 200\n", "input_output_value": ["\ninput1: num=10, t=0\noutput1: 10\n", "\ninput2: num=5, t=3\noutput2: 11\n", "\ninput3: num=0, t=0\noutput3: 0\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <limits>\n// TOFILL\nint main() {\n    cout << theMaximumAchievableX(10, 0) << endl;            // Expected output: 10\n    cout << theMaximumAchievableX(5, 3) << endl;             // Expected output: 11\n    cout << theMaximumAchievableX(0, 0) << endl;             // Expected output: 0\n    cout << theMaximumAchievableX(-5, 2) << endl;            // Expected output: -1\n    cout << theMaximumAchievableX(numeric_limits<int>::max(), 1) << endl; // Expected output: Integer.MAX_VALUE + 2\n    cout << theMaximumAchievableX(0, 5) << endl;             // Expected output: 10\n    cout << theMaximumAchievableX(numeric_limits<int>::min(), 3) << endl; // Expected output: Integer.MIN_VALUE + 6\n    cout << theMaximumAchievableX(-10, -5) << endl;          // Expected output: -20\n    cout << theMaximumAchievableX(4, -1) << endl;            // Expected output: 2\n    cout << theMaximumAchievableX(100, 50) << endl;          // Expected output: 200\n}", "TAG": "Success"}
{"source_Lan": "cpp###numberOfEmployeesWhoMetTarget.cpp", "source_code_str": "    int numberOfEmployeesWhoMetTarget(vector<int>& hours, int target) {\n        int ans = 0;\n        for (int i = 0; i < hours.size(); i++) {\n            if (hours[i] >= target) {\n                ans++;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###numberOfEmployeesWhoMetTarget_Test.java", "reference_code": "    public static int numberOfEmployeesWhoMetTarget(int[] hours, int target) {\n        int ans = 0;\n        for (int i = 0; i < hours.length; i++) {\n            if (hours[i] >= target) {\n                ans++;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "numberOfEmployeesWhoMetTarget", "source_method_signature": "numberOfEmployeesWhoMetTarget", "target_allMS": "    public static int numberOfEmployeesWhoMetTarget(int[] hours, int target) {", "source_allMS": "    int numberOfEmployeesWhoMetTarget(vector<int>& hours, int target) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class numberOfEmployeesWhoMetTarget_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{0, 0, 0, 0}, 1)); // Input_1\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{50, 60, 70, 80}, 50)); // Input_2\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{20, 30, 40, 50}, 60)); // Input_3\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{}, 10)); // Input_4\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{-5, -3, -1}, -2)); // Input_5\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{8, 9, 10, 11}, 0)); // Input_6\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{40, 50, 60}, 40)); // Input_7\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{10, 20, 30}, 15)); // Input_8\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{45, 30, 15, 60, 90}, 45)); // Input_9\n        System.out.println(numberOfEmployeesWhoMetTarget(new int[]{5, 5, 5, 5, 5}, 5)); // Input_10\n    }\n}", "all_input_output_value": "\ninput1: hours=[0, 0, 0, 0], target=1\noutput1: 0\n--------\ninput2: hours=[50, 60, 70, 80], target=50\noutput2: 4\n--------\ninput3: hours=[20, 30, 40, 50], target=60\noutput3: 0\n--------\ninput4: hours=[], target=10\noutput4: 0\n--------\ninput5: hours=[-5, -3, -1], target=-2\noutput5: 1\n--------\ninput6: hours=[8, 9, 10, 11], target=0\noutput6: 4\n--------\ninput7: hours=[40, 50, 60], target=40\noutput7: 3\n--------\ninput8: hours=[10, 20, 30], target=15\noutput8: 2\n--------\ninput9: hours=[45, 30, 15, 60, 90], target=45\noutput9: 3\n--------\ninput10: hours=[5, 5, 5, 5, 5], target=5\noutput10: 5\n", "input_output_value": ["\ninput1: hours=[0, 0, 0, 0], target=1\noutput1: 0\n", "\ninput2: hours=[50, 60, 70, 80], target=50\noutput2: 4\n", "\ninput3: hours=[20, 30, 40, 50], target=60\noutput3: 0\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> hours1 = {0, 0, 0, 0};\n    int target1 = 1;\n    cout << numberOfEmployeesWhoMetTarget(hours1, target1) << endl;\n\n    vector<int> hours2 = {50, 60, 70, 80};\n    int target2 = 50;\n    cout << numberOfEmployeesWhoMetTarget(hours2, target2) << endl;\n\n    vector<int> hours3 = {20, 30, 40, 50};\n    int target3 = 60;\n    cout << numberOfEmployeesWhoMetTarget(hours3, target3) << endl;\n\n    vector<int> hours4 = {};\n    int target4 = 10;\n    cout << numberOfEmployeesWhoMetTarget(hours4, target4) << endl;\n\n    vector<int> hours5 = {-5, -3, -1};\n    int target5 = -2;\n    cout << numberOfEmployeesWhoMetTarget(hours5, target5) << endl;\n\n    vector<int> hours6 = {8, 9, 10, 11};\n    int target6 = 0;\n    cout << numberOfEmployeesWhoMetTarget(hours6, target6) << endl;\n\n    vector<int> hours7 = {40, 50, 60};\n    int target7 = 40;\n    cout << numberOfEmployeesWhoMetTarget(hours7, target7) << endl;\n\n    vector<int> hours8 = {10, 20, 30};\n    int target8 = 15;\n    cout << numberOfEmployeesWhoMetTarget(hours8, target8) << endl;\n\n    vector<int> hours9 = {45, 30, 15, 60, 90};\n    int target9 = 45;\n    cout << numberOfEmployeesWhoMetTarget(hours9, target9) << endl;\n\n    vector<int> hours10 = {5, 5, 5, 5, 5};\n    int target10 = 5;\n    cout << numberOfEmployeesWhoMetTarget(hours10, target10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###distanceTraveled.cpp", "source_code_str": "    int distanceTraveled(int mainTank, int additionalTank) {\n        int ans = 0;\n        while (mainTank >= 5) {\n            mainTank -= 5;\n            ans += 50;\n            if (additionalTank > 0) {\n                additionalTank--;\n                mainTank++;\n            }\n        }\n        return ans + mainTank * 10;\n    }", "source_code_block": "", "target_Lan": "java###distanceTraveled_Test.java", "reference_code": "    public static int distanceTraveled(int mainTank, int additionalTank) {\n        int ans = 0;\n        while (mainTank >= 5) {\n            mainTank -= 5;\n            ans += 50;\n            if (additionalTank > 0) {\n                additionalTank--;\n                mainTank++;\n            }\n        }\n        return ans + mainTank * 10;\n    }", "target_method_signature": "distanceTraveled", "source_method_signature": "distanceTraveled", "target_allMS": "    public static int distanceTraveled(int mainTank, int additionalTank) {", "source_allMS": "    int distanceTraveled(int mainTank, int additionalTank) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class distanceTraveled_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(distanceTraveled(10, 2));\n        System.out.println(distanceTraveled(5, 1));\n        System.out.println(distanceTraveled(4, 2));\n        System.out.println(distanceTraveled(0, 3));\n        System.out.println(distanceTraveled(8, 0));\n        System.out.println(distanceTraveled(12, 1));\n        System.out.println(distanceTraveled(7, 3));\n        System.out.println(distanceTraveled(10, 0));\n        System.out.println(distanceTraveled(15, 2));\n        System.out.println(distanceTraveled(5, 0));\n    }\n}", "all_input_output_value": "\ninput1: mainTank=10, additionalTank=2\noutput1: 120\n--------\ninput2: mainTank=5, additionalTank=1\noutput2: 60\n--------\ninput3: mainTank=4, additionalTank=2\noutput3: 40\n--------\ninput4: mainTank=0, additionalTank=3\noutput4: 0\n--------\ninput5: mainTank=8, additionalTank=0\noutput5: 80\n--------\ninput6: mainTank=12, additionalTank=1\noutput6: 130\n--------\ninput7: mainTank=7, additionalTank=3\noutput7: 80\n--------\ninput8: mainTank=10, additionalTank=0\noutput8: 100\n--------\ninput9: mainTank=15, additionalTank=2\noutput9: 170\n--------\ninput10: mainTank=5, additionalTank=0\noutput10: 50\n", "input_output_value": ["\ninput1: mainTank=10, additionalTank=2\noutput1: 120\n", "\ninput2: mainTank=5, additionalTank=1\noutput2: 60\n", "\ninput3: mainTank=4, additionalTank=2\noutput3: 40\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << distanceTraveled(10, 2) << endl;  // Test Input 1\n    cout << distanceTraveled(5, 1) << endl;   // Test Input 2\n    cout << distanceTraveled(4, 2) << endl;   // Test Input 3\n    cout << distanceTraveled(0, 3) << endl;   // Test Input 4\n    cout << distanceTraveled(8, 0) << endl;   // Test Input 5\n    cout << distanceTraveled(12, 1) << endl;  // Test Input 6\n    cout << distanceTraveled(7, 3) << endl;   // Test Input 7\n    cout << distanceTraveled(10, 0) << endl;  // Test Input 8\n    cout << distanceTraveled(15, 2) << endl;  // Test Input 9\n    cout << distanceTraveled(5, 0) << endl;   // Test Input 10\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumBinaryString.cpp", "source_code_str": "    string maximumBinaryString(string binary) {\n        int n = binary.size();\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (binary[i] == '0') {\n                while (j <= i || (j < n && binary[j] == '1')) {\n                    j++;\n                }\n                if (j < n) {\n                    binary[j] = '1';\n                    binary[i] = '1';\n                    binary[i + 1] = '0';\n                }\n            }\n        }\n        return binary;\n    }", "source_code_block": "", "target_Lan": "java###maximumBinaryString_Test.java", "reference_code": "    public static String maximumBinaryString(String binary) {\n        int n = binary.length();\n        char[] s = binary.toCharArray();\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                while (j <= i || (j < n && s[j] == '1')) {\n                    j++;\n                }\n                if (j < n) {\n                    s[j] = '1';\n                    s[i] = '1';\n                    s[i + 1] = '0';\n                }\n            }\n        }\n        return new String(s);\n    }", "target_method_signature": "maximumBinaryString", "source_method_signature": "maximumBinaryString", "target_allMS": "    public static String maximumBinaryString(String binary) {", "source_allMS": "    string maximumBinaryString(string binary) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumBinaryString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = {\n            \"0000\",\n            \"0011\",\n            \"1111\",\n            \"110010\",\n            \"101010\",\n            \"\",\n            \"111000\",\n            \"0\",\n            \"1001\",\n            \"011\"\n        };\n\n        for(String input : testInputs) {\n            System.out.println(maximumBinaryString(input));\n        }\n    }\n}", "all_input_output_value": "\ninput1: binary=\"0000\"\noutput1: 1110\n--------\ninput2: binary=\"0011\"\noutput2: 1011\n--------\ninput3: binary=\"1111\"\noutput3: 1111\n--------\ninput4: binary=\"110010\"\noutput4: 111101\n--------\ninput5: binary=\"101010\"\noutput5: 111011\n--------\ninput6: binary=\"\"\noutput6: 111110\n--------\ninput7: binary=\"111000\"\noutput7: 0\n--------\ninput8: binary=\"0\"\noutput8: 1101\n--------\ninput9: binary=\"1001\"\noutput9: 011\n--------\ninput10: binary=\"011\"\noutput10: \n", "input_output_value": ["\ninput1: binary=\"0000\"\noutput1: 1110\n", "\ninput2: binary=\"0011\"\noutput2: 1011\n", "\ninput3: binary=\"1111\"\noutput3: 1111\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << maximumBinaryString(\"0000\") << endl;\n    cout << maximumBinaryString(\"0011\") << endl;\n    cout << maximumBinaryString(\"1111\") << endl;\n    cout << maximumBinaryString(\"110010\") << endl;\n    cout << maximumBinaryString(\"101010\") << endl;\n    cout << maximumBinaryString(\"\") << endl;\n    cout << maximumBinaryString(\"111000\") << endl;\n    cout << maximumBinaryString(\"0\") << endl;\n    cout << maximumBinaryString(\"1001\") << endl;\n    cout << maximumBinaryString(\"011\") << endl;\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###divisibilityArray.cpp", "source_code_str": "    vector<int> divisibilityArray(string word, int m) {\n        vector<int> res;\n        long long cur = 0;\n        for (char& c : word) {\n            cur = (cur * 10 + (c - '0')) % m;\n            res.push_back(cur == 0 ? 1 : 0);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###divisibilityArray_Test.java", "reference_code": "    public static int[] divisibilityArray(String word, int m) {\n        int[] res = new int[word.length()];\n        long cur = 0;\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            cur = (cur * 10 + (c - '0')) % m;\n            res[i] = (cur == 0) ? 1 : 0;\n        }\n        return res;\n    }", "target_method_signature": "divisibilityArray", "source_method_signature": "divisibilityArray", "target_allMS": "    public static int[] divisibilityArray(String word, int m) {", "source_allMS": "    vector<int> divisibilityArray(string word, int m) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class divisibilityArray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(divisibilityArray(\"12345\", 3))); // Test Input 1\n        System.out.println(Arrays.toString(divisibilityArray(\"\", 5))); // Test Input 2\n        System.out.println(Arrays.toString(divisibilityArray(\"7\", 7))); // Test Input 3\n        System.out.println(Arrays.toString(divisibilityArray(\"9876543210\", 9))); // Test Input 4\n        System.out.println(Arrays.toString(divisibilityArray(\"00001234\", 7))); // Test Input 5\n        System.out.println(Arrays.toString(divisibilityArray(\"999999999999999999\", 2))); // Test Input 6\n        System.out.println(Arrays.toString(divisibilityArray(\"54321\", 10))); // Test Input 7\n        System.out.println(Arrays.toString(divisibilityArray(\"13579\", 6))); // Test Input 8\n        System.out.println(Arrays.toString(divisibilityArray(\"0000\", 1))); // Test Input 9\n        System.out.println(Arrays.toString(divisibilityArray(\"12345678901234567890\", 100))); // Test Input 10\n    }\n}", "all_input_output_value": "\ninput1: word=\"12345\", m=3\noutput1: [0, 1, 1, 0, 1]\n--------\ninput2: word=\"\", m=5\noutput2: []\n--------\ninput3: word=\"7\", m=7\noutput3: [1]\n--------\ninput4: word=\"9876543210\", m=9\noutput4: [1, 0, 0, 0, 0, 0, 0, 0, 1, 1]\n--------\ninput5: word=\"00001234\", m=7\noutput5: [1, 1, 1, 1, 0, 0, 0, 0]\n--------\ninput6: word=\"999999999999999999\", m=2\noutput6: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n--------\ninput7: word=\"54321\", m=10\noutput7: [0, 0, 0, 0, 0]\n--------\ninput8: word=\"13579\", m=6\noutput8: [0, 0, 0, 0, 0]\n--------\ninput9: word=\"0000\", m=1\noutput9: [1, 1, 1, 1]\n--------\ninput10: word=\"12345678901234567890\", m=100\noutput10: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n", "input_output_value": ["\ninput1: word=\"12345\", m=3\noutput1: [0, 1, 1, 0, 1]\n", "\ninput2: word=\"\", m=5\noutput2: []\n", "\ninput3: word=\"7\", m=7\noutput3: [1]\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<int> result1 = divisibilityArray(\"12345\", 3);\n    vector<int> result2 = divisibilityArray(\"\", 5);\n    vector<int> result3 = divisibilityArray(\"7\", 7);\n    vector<int> result4 = divisibilityArray(\"9876543210\", 9);\n    vector<int> result5 = divisibilityArray(\"00001234\", 7);\n    vector<int> result6 = divisibilityArray(\"999999999999999999\", 2);\n    vector<int> result7 = divisibilityArray(\"54321\", 10);\n    vector<int> result8 = divisibilityArray(\"13579\", 6);\n    vector<int> result9 = divisibilityArray(\"0000\", 1);\n    vector<int> result10 = divisibilityArray(\"12345678901234567890\", 100);\n\n    for(int n : result1) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result2) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result3) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result4) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result5) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result6) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result7) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result8) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result9) cout << n << \" \";\n    cout << endl;\n    \n    for(int n : result10) cout << n << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###alternatingSubarray.cpp", "source_code_str": "    int alternatingSubarray(vector<int>& nums) {\n        int res = -1;\n        int n = nums.size();\n        for (int firstIndex = 0; firstIndex < n; firstIndex++) {\n            for (int i = firstIndex + 1; i < n; i++) {\n                int length = i - firstIndex + 1;\n                if (nums[i] - nums[firstIndex] == (length - 1) % 2) {\n                    res = max(res, length);\n                } else {\n                    break;\n                }\n            }\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###alternatingSubarray_Test.java", "reference_code": "    public static int alternatingSubarray(int[] nums) {\n        int res = -1;\n        int n = nums.length;\n        for (int firstIndex = 0; firstIndex < n; firstIndex++) {\n            for (int i = firstIndex + 1; i < n; i++) {\n                int length = i - firstIndex + 1;\n                if (nums[i] - nums[firstIndex] == (length - 1) % 2) {\n                    res = Math.max(res, length);\n                } else {\n                    break;\n                }\n            }\n        }\n        return res;\n    }", "target_method_signature": "alternatingSubarray", "source_method_signature": "alternatingSubarray", "target_allMS": "    public static int alternatingSubarray(int[] nums) {", "source_allMS": "    int alternatingSubarray(vector<int>& nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class alternatingSubarray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(alternatingSubarray(new int[]{1, 2, 1, 2})); // Clear alternating pattern\n        System.out.println(alternatingSubarray(new int[]{1, 3, 2, 4})); // No alternating\n        System.out.println(alternatingSubarray(new int[]{5}));          // Single element\n        System.out.println(alternatingSubarray(new int[]{5, 5}));       // Two elements, no alternation\n        System.out.println(alternatingSubarray(new int[]{-1, 0, -2, 1})); // Array with negative numbers\n        System.out.println(alternatingSubarray(new int[]{}));           // Empty array\n        System.out.println(alternatingSubarray(new int[]{0, 1, 0, 1, 0, 1})); // Longer alternating pattern\n        System.out.println(alternatingSubarray(new int[]{2, 3, 2, 3, 2})); // Contiguous alternating\n        System.out.println(alternatingSubarray(new int[]{4, 4, 4, 4})); // All elements the same\n        System.out.println(alternatingSubarray(new int[]{1, 2, 1, 0, 1, 2})); // Alternating at start, then non-alternating\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 1, 2]\noutput1: 4\n--------\ninput2: nums=[1, 3, 2, 4]\noutput2: -1\n--------\ninput3: nums=[5]\noutput3: -1\n--------\ninput4: nums=[5, 5]\noutput4: -1\n--------\ninput5: nums=[-1, 0, -2, 1]\noutput5: 2\n--------\ninput6: nums=[]\noutput6: -1\n--------\ninput7: nums=[0, 1, 0, 1, 0, 1]\noutput7: 6\n--------\ninput8: nums=[2, 3, 2, 3, 2]\noutput8: 5\n--------\ninput9: nums=[4, 4, 4, 4]\noutput9: -1\n--------\ninput10: nums=[1, 2, 1, 0, 1, 2]\noutput10: 3\n", "input_output_value": ["\ninput1: nums=[1, 2, 1, 2]\noutput1: 4\n", "\ninput2: nums=[1, 3, 2, 4]\noutput2: -1\n", "\ninput3: nums=[5]\noutput3: -1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> inputs = {\n        {1, 2, 1, 2},\n        {1, 3, 2, 4},\n        {5},\n        {5, 5},\n        {-1, 0, -2, 1},\n        {},\n        {0, 1, 0, 1, 0, 1},\n        {2, 3, 2, 3, 2},\n        {4, 4, 4, 4},\n        {1, 2, 1, 0, 1, 2}\n    };\n    \n    for(const auto& nums : inputs) {\n        cout << alternatingSubarray(const_cast<vector<int>&>(nums)) << endl;\n    }\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumRows.cpp", "source_code_str": "    int maximumRows(vector<vector<int>>& matrix, int numSelect) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<int> mask(m, 0);\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++){\n                mask[i] += matrix[i][j] << (n - j - 1);\n            }\n        }\n        int res = 0;\n        int cur = 0;\n        int limit = (1 << n);\n        while ((++cur) < limit) {\n            if (__builtin_popcount(cur) != numSelect) {\n                continue;\n            }\n            int t = 0;\n            for (int j = 0; j < m; j++) {\n                if ((mask[j] & cur) == mask[j]) {\n                    ++t;\n                }\n            }\n            res = max(res, t);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###maximumRows_Test.java", "reference_code": "    public static int maximumRows(int[][] matrix, int numSelect) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n        int[] mask = new int[m];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++){\n                mask[i] += matrix[i][j] << (n - j - 1);\n            }\n        }\n        int res = 0;\n        int cur = 0;\n        int limit = (1 << n);\n        while (++cur < limit) {\n            if (Integer.bitCount(cur) != numSelect) {\n                continue;\n            }\n            int t = 0;\n            for (int j = 0; j < m; j++) {\n                if ((mask[j] & cur) == mask[j]) {\n                    ++t;\n                }\n            }\n            res = Math.max(res, t);\n        }\n        return res;\n    }", "target_method_signature": "maximumRows", "source_method_signature": "maximumRows", "target_allMS": "    public static int maximumRows(int[][] matrix, int numSelect) {", "source_allMS": "    int maximumRows(vector<vector<int>>& matrix, int numSelect) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumRows_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumRows(new int[][]{{0, 0}, {0, 0}}, 1));\n        System.out.println(maximumRows(new int[][]{{1, 0}, {0, 1}}, 1));\n        System.out.println(maximumRows(new int[][]{{1, 1}, {0, 1}}, 0));\n        System.out.println(maximumRows(new int[][]{{1, 0, 0}, {1, 0, 1}, {1, 1, 1}}, 2));\n        System.out.println(maximumRows(new int[][]{{1, 1}, {1, 1}, {1, 1}}, 2));\n        System.out.println(maximumRows(new int[][]{{1}}, 1));\n        System.out.println(maximumRows(new int[][]{{0, 1, 1}}, 1));\n        System.out.println(maximumRows(new int[][]{{1, 1}, {1, 1}}, 2));\n        System.out.println(maximumRows(new int[][]{{1, 0}, {0, 1}}, 3));\n        System.out.println(maximumRows(new int[][]{{1, 0, 1}, {0, 1, 0}, {1, 1, 1}}, 2));\n    }\n}", "all_input_output_value": "\ninput1: matrix=[[0, 0], [0, 0]], numSelect=1\noutput1: 2\n--------\ninput2: matrix=[[1, 0], [0, 1]], numSelect=1\noutput2: 1\n--------\ninput3: matrix=[[1, 1], [0, 1]], numSelect=0\noutput3: 0\n--------\ninput4: matrix=[[1, 0, 0], [1, 0, 1], [1, 1, 1]], numSelect=2\noutput4: 2\n--------\ninput5: matrix=[[1, 1], [1, 1], [1, 1]], numSelect=2\noutput5: 3\n--------\ninput6: matrix=[[1]], numSelect=1\noutput6: 1\n--------\ninput7: matrix=[[0, 1, 1]], numSelect=1\noutput7: 0\n--------\ninput8: matrix=[[1, 1], [1, 1]], numSelect=2\noutput8: 2\n--------\ninput9: matrix=[[1, 0], [0, 1]], numSelect=3\noutput9: 0\n--------\ninput10: matrix=[[1, 0, 1], [0, 1, 0], [1, 1, 1]], numSelect=2\noutput10: 1\n", "input_output_value": ["\ninput1: matrix=[[0, 0], [0, 0]], numSelect=1\noutput1: 2\n", "\ninput2: matrix=[[1, 0], [0, 1]], numSelect=1\noutput2: 1\n", "\ninput3: matrix=[[1, 1], [0, 1]], numSelect=0\noutput3: 0\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> matrix1 = {{0, 0}, {0, 0}};\n    cout << maximumRows(matrix1, 1) << endl;\n\n    vector<vector<int>> matrix2 = {{1, 0}, {0, 1}};\n    cout << maximumRows(matrix2, 1) << endl;\n\n    vector<vector<int>> matrix3 = {{1, 1}, {0, 1}};\n    cout << maximumRows(matrix3, 0) << endl;\n\n    vector<vector<int>> matrix4 = {{1, 0, 0}, {1, 0, 1}, {1, 1, 1}};\n    cout << maximumRows(matrix4, 2) << endl;\n\n    vector<vector<int>> matrix5 = {{1, 1}, {1, 1}, {1, 1}};\n    cout << maximumRows(matrix5, 2) << endl;\n\n    vector<vector<int>> matrix6 = {{1}};\n    cout << maximumRows(matrix6, 1) << endl;\n\n    vector<vector<int>> matrix7 = {{0, 1, 1}};\n    cout << maximumRows(matrix7, 1) << endl;\n\n    vector<vector<int>> matrix8 = {{1, 1}, {1, 1}};\n    cout << maximumRows(matrix8, 2) << endl;\n\n    vector<vector<int>> matrix9 = {{1, 0}, {0, 1}};\n    cout << maximumRows(matrix9, 3) << endl;\n\n    vector<vector<int>> matrix10 = {{1, 0, 1}, {0, 1, 0}, {1, 1, 1}};\n    cout << maximumRows(matrix10, 2) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###countOperations.cpp", "source_code_str": "    int countOperations(string s) {\n        const int mod = 1000000007;\n        int ans = 0;\n        int count_b = 0;\n        for (int i = s.length() - 1; i >= 0; --i) {\n            if (s[i] == 'b')\n                count_b = (count_b + 1) % mod;\n            else {\n                ans = (ans + count_b) % mod;\n                count_b = (count_b + count_b) % mod;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###countOperations_Test.java", "reference_code": "    public static int countOperations(String s) {\n        final int mod = 1000000007;\n        int ans = 0;\n        int count_b = 0;\n        for (int i = s.length() - 1; i >= 0; --i) {\n            if (s.charAt(i) == 'b') {\n                count_b = (count_b + 1) % mod;\n            } else {\n                ans = (ans + count_b) % mod;\n                count_b = (count_b + count_b) % mod;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "countOperations", "source_method_signature": "countOperations", "target_allMS": "    public static int countOperations(String s) {", "source_allMS": "    int countOperations(string s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\npublic class countOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] testInputs = { \"\", \"a\", \"b\", \"ab\", \"ba\", \"abab\", \"bb\", \"aaa\", \"aabb\", \"bbbb\" };\n        \n        for(String input : testInputs) {\n            System.out.println(\"Input: \\\"\" + input + \"\\\" - Count Operations: \" + countOperations(input));\n        }\n    }\n}", "all_input_output_value": "\ninput1: s=\"\"\noutput1: 0\n--------\ninput2: s=\"a\"\noutput2: 0\n--------\ninput3: s=\"b\"\noutput3: 0\n--------\ninput4: s=\"ab\"\noutput4: 1\n--------\ninput5: s=\"ba\"\noutput5: 0\n--------\ninput6: s=\"abab\"\noutput6: 4\n--------\ninput7: s=\"bb\"\noutput7: 0\n--------\ninput8: s=\"aaa\"\noutput8: 0\n--------\ninput9: s=\"aabb\"\noutput9: 6\n--------\ninput10: s=\"bbbb\"\noutput10: 0\n", "input_output_value": ["\ninput1: s=\"\"\noutput1: 0\n", "\ninput2: s=\"a\"\noutput2: 0\n", "\ninput3: s=\"b\"\noutput3: 0\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << countOperations(\"\") << endl;\n    cout << countOperations(\"a\") << endl;\n    cout << countOperations(\"b\") << endl;\n    cout << countOperations(\"ab\") << endl;\n    cout << countOperations(\"ba\") << endl;\n    cout << countOperations(\"abab\") << endl;\n    cout << countOperations(\"bb\") << endl;\n    cout << countOperations(\"aaa\") << endl;\n    cout << countOperations(\"aabb\") << endl;\n    cout << countOperations(\"bbbb\") << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumOperationsToWriteY.cpp", "source_code_str": "    int minimumOperationsToWriteY(vector<vector<int>> &grid) {\n        int cnt1[3]{}, cnt2[3]{};\n        int n = grid.size();\n        int m = n / 2;\n        for (int i = 0; i < m; i++) {\n            cnt1[grid[i][i]]++;\n            cnt1[grid[i][n - 1 - i]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != i && j != n - 1 - i) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        for (int i = m; i < n; i++) {\n            cnt1[grid[i][m]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != m) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        int max_not_change = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (i != j) {\n                    max_not_change = max(max_not_change, cnt1[i] + cnt2[j]);\n                }\n            }\n        }\n        return n * n - max_not_change;\n    }", "source_code_block": "", "target_Lan": "java###minimumOperationsToWriteY_Test.java", "reference_code": "    public static int minimumOperationsToWriteY(int[][] grid) {\n        int[] cnt1 = new int[3];\n        int[] cnt2 = new int[3];\n        int n = grid.length;\n        int m = n / 2;\n        for (int i = 0; i < m; i++) {\n            cnt1[grid[i][i]]++;\n            cnt1[grid[i][n - 1 - i]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != i && j != n - 1 - i) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        for (int i = m; i < n; i++) {\n            cnt1[grid[i][m]]++;\n            for (int j = 0; j < n; j++) {\n                if (j != m) {\n                    cnt2[grid[i][j]]++;\n                }\n            }\n        }\n        int maxNotChange = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (i != j) {\n                    maxNotChange = Math.max(maxNotChange, cnt1[i] + cnt2[j]);\n                }\n            }\n        }\n        return n * n - maxNotChange;\n    }", "target_method_signature": "minimumOperationsToWriteY", "source_method_signature": "minimumOperationsToWriteY", "target_allMS": "    public static int minimumOperationsToWriteY(int[][] grid) {", "source_allMS": "    int minimumOperationsToWriteY(vector<vector<int>> &grid) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumOperationsToWriteY_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{1, 2}, {2, 1}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 0, 0}, {0, 1, 0}, {0, 0, 0}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{1, 1, 1}, {1, 0, 1}, {1, 1, 1}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 1, 0}, {1, 1, 1}, {0, 1, 0}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 0, 1}, {0, 2, 0}, {2, 0, 0}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{1, 2, 1}, {2, 2, 2}, {1, 2, 1}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 1}, {1, 2}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{2, 2, 2, 2}, {2, 1, 2, 2}, {2, 2, 2, 2}, {2, 2, 2, 2}}));\n        System.out.println(minimumOperationsToWriteY(new int[][]{{0, 1, 2, 0}, {0, 2, 1, 0}, {1, 0, 2, 1}, {2, 0, 1, 0}}));\n    }\n}", "all_input_output_value": "\ninput1: grid=[[0]]\noutput1: 0\n--------\ninput2: grid=[[1, 2], [2, 1]]\noutput2: 1\n--------\ninput3: grid=[[0, 0, 0], [0, 1, 0], [0, 0, 0]]\noutput3: 3\n--------\ninput4: grid=[[1, 1, 1], [1, 0, 1], [1, 1, 1]]\noutput4: 3\n--------\ninput5: grid=[[0, 1, 0], [1, 1, 1], [0, 1, 0]]\noutput5: 4\n--------\ninput6: grid=[[0, 0, 1], [0, 2, 0], [2, 0, 0]]\noutput6: 4\n--------\ninput7: grid=[[1, 2, 1], [2, 2, 2], [1, 2, 1]]\noutput7: 4\n--------\ninput8: grid=[[0, 1], [1, 2]]\noutput8: 2\n--------\ninput9: grid=[[2, 2, 2, 2], [2, 1, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]\noutput9: 5\n--------\ninput10: grid=[[0, 1, 2, 0], [0, 2, 1, 0], [1, 0, 2, 1], [2, 0, 1, 0]]\noutput10: 9\n", "input_output_value": ["\ninput1: grid=[[0]]\noutput1: 0\n", "\ninput2: grid=[[1, 2], [2, 1]]\noutput2: 1\n", "\ninput3: grid=[[0, 0, 0], [0, 1, 0], [0, 0, 0]]\noutput3: 3\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{0}};\n    vector<vector<int>> grid2 = {{1, 2}, {2, 1}};\n    vector<vector<int>> grid3 = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};\n    vector<vector<int>> grid4 = {{1, 1, 1}, {1, 0, 1}, {1, 1, 1}};\n    vector<vector<int>> grid5 = {{0, 1, 0}, {1, 1, 1}, {0, 1, 0}};\n    vector<vector<int>> grid6 = {{0, 0, 1}, {0, 2, 0}, {2, 0, 0}};\n    vector<vector<int>> grid7 = {{1, 2, 1}, {2, 2, 2}, {1, 2, 1}};\n    vector<vector<int>> grid8 = {{0, 1}, {1, 2}};\n    vector<vector<int>> grid9 = {{2, 2, 2, 2}, {2, 1, 2, 2}, {2, 2, 2, 2}, {2, 2, 2, 2}};\n    vector<vector<int>> grid10 = {{0, 1, 2, 0}, {0, 2, 1, 0}, {1, 0, 2, 1}, {2, 0, 1, 0}};\n\n    cout << minimumOperationsToWriteY(grid1) << endl;\n    cout << minimumOperationsToWriteY(grid2) << endl;\n    cout << minimumOperationsToWriteY(grid3) << endl;\n    cout << minimumOperationsToWriteY(grid4) << endl;\n    cout << minimumOperationsToWriteY(grid5) << endl;\n    cout << minimumOperationsToWriteY(grid6) << endl;\n    cout << minimumOperationsToWriteY(grid7) << endl;\n    cout << minimumOperationsToWriteY(grid8) << endl;\n    cout << minimumOperationsToWriteY(grid9) << endl;\n    cout << minimumOperationsToWriteY(grid10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###isArraySpecial.cpp", "source_code_str": "    bool isArraySpecial(vector<int>& nums) {\n        for (int i = 1; i < nums.size(); i++) {\n            if (nums[i - 1] % 2 == nums[i] % 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_block": "", "target_Lan": "java###isArraySpecial_Test.java", "reference_code": "    public static boolean isArraySpecial(int[] nums) {\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i - 1] % 2 == nums[i] % 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_method_signature": "isArraySpecial", "source_method_signature": "isArraySpecial", "target_allMS": "    public static boolean isArraySpecial(int[] nums) {", "source_allMS": "    bool isArraySpecial(vector<int>& nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isArraySpecial_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(isArraySpecial(new int[]{}));               // Test input 1: Empty array\n        System.out.println(isArraySpecial(new int[]{1}));             // Test input 2: Single element(odd)\n        System.out.println(isArraySpecial(new int[]{2}));             // Test input 3: Single element(even)\n        System.out.println(isArraySpecial(new int[]{1, 2}));          // Test input 4: Alternating(odd, even)\n        System.out.println(isArraySpecial(new int[]{2, 3}));          // Test input 5: Alternating(even, odd)\n        System.out.println(isArraySpecial(new int[]{1, 3}));          // Test input 6: Consecutive odds\n        System.out.println(isArraySpecial(new int[]{4, 2}));          // Test input 7: Consecutive evens\n        System.out.println(isArraySpecial(new int[]{1, 2, 3}));       // Test input 8: Odd, even, odd\n        System.out.println(isArraySpecial(new int[]{2, 1, 4, 3}));    // Test input 9: Even, odd, even, odd\n        System.out.println(isArraySpecial(new int[]{1, 0, 1, 0}));    // Test input 10: Odd, even, odd, even\n    }\n}", "all_input_output_value": "\ninput1: nums=[]\noutput1: true\n--------\ninput2: nums=[1]\noutput2: true\n--------\ninput3: nums=[2]\noutput3: true\n--------\ninput4: nums=[1, 2]\noutput4: true\n--------\ninput5: nums=[2, 3]\noutput5: true\n--------\ninput6: nums=[1, 3]\noutput6: false\n--------\ninput7: nums=[4, 2]\noutput7: false\n--------\ninput8: nums=[1, 2, 3]\noutput8: true\n--------\ninput9: nums=[2, 1, 4, 3]\noutput9: true\n--------\ninput10: nums=[1, 0, 1, 0]\noutput10: true\n", "input_output_value": ["\ninput1: nums=[]\noutput1: true\n", "\ninput2: nums=[1]\noutput2: true\n", "\ninput3: nums=[2]\noutput3: true\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    vector<int> input2 = {1};\n    vector<int> input3 = {2};\n    vector<int> input4 = {1, 2};\n    vector<int> input5 = {2, 3};\n    vector<int> input6 = {1, 3};\n    vector<int> input7 = {4, 2};\n    vector<int> input8 = {1, 2, 3};\n    vector<int> input9 = {2, 1, 4, 3};\n    vector<int> input10 = {1, 0, 1, 0};\n    \n    cout << isArraySpecial(input1) << endl;\n    cout << isArraySpecial(input2) << endl;\n    cout << isArraySpecial(input3) << endl;\n    cout << isArraySpecial(input4) << endl;\n    cout << isArraySpecial(input5) << endl;\n    cout << isArraySpecial(input6) << endl;\n    cout << isArraySpecial(input7) << endl;\n    cout << isArraySpecial(input8) << endl;\n    cout << isArraySpecial(input9) << endl;\n    cout << isArraySpecial(input10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###sumOfEncryptedInt.cpp", "source_code_str": "    int sumOfEncryptedInt(vector<int> &nums) {\n        int ans = 0;\n        for (int x: nums) {\n            int mx = 0, base = 0;\n            for (; x; x /= 10) {\n                mx = max(mx, x % 10);\n                base = base * 10 + 1;\n            }\n            ans += mx * base;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###sumOfEncryptedInt_Test.java", "reference_code": "    public static int sumOfEncryptedInt(int[] nums) {\n        int ans = 0;\n        for (int x : nums) {\n            int mx = 0;\n            int base = 0;\n            for (; x > 0; x /= 10) {\n                mx = Math.max(mx, x % 10);\n                base = base * 10 + 1;\n            }\n            ans += mx * base;\n        }\n        return ans;\n    }", "target_method_signature": "sumOfEncryptedInt", "source_method_signature": "sumOfEncryptedInt", "target_allMS": "    public static int sumOfEncryptedInt(int[] nums) {", "source_allMS": "    int sumOfEncryptedInt(vector<int> &nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class sumOfEncryptedInt_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(sumOfEncryptedInt(new int[]{0}));                     // Tests zero case\n        System.out.println(sumOfEncryptedInt(new int[]{5}));                     // Single digit\n        System.out.println(sumOfEncryptedInt(new int[]{1, 3, 7, 9}));            // Multiple single digits, max = 9\n        System.out.println(sumOfEncryptedInt(new int[]{12, 56, 34}));            // Multi-digit numbers, varying max\n        System.out.println(sumOfEncryptedInt(new int[]{99, 22, 77}));            // All two-digit numbers with max 9\n        System.out.println(sumOfEncryptedInt(new int[]{1024, 2048}));            // Test numbers with digits 0-4\n        System.out.println(sumOfEncryptedInt(new int[]{1111}));                   // All same digit, tests if it correctly handles repeated max\n        System.out.println(sumOfEncryptedInt(new int[]{54321}));                  // Descending numbers\n        System.out.println(sumOfEncryptedInt(new int[]{-1, -100, 250}));         // Negative numbers and zero to test robustness\n    }\n}", "all_input_output_value": "\ninput1: nums=[0]\noutput1: 0\n--------\ninput2: nums=[5]\noutput2: 5\n--------\ninput3: nums=[1, 3, 7, 9]\noutput3: 20\n--------\ninput4: nums=[12, 56, 34]\noutput4: 132\n--------\ninput5: nums=[99, 22, 77]\noutput5: 198\n--------\ninput6: nums=[1024, 2048]\noutput6: 13332\n--------\ninput7: nums=[1111]\noutput7: 1111\n--------\ninput8: nums=[54321]\noutput8: 55555\n--------\ninput9: nums=[-1, -100, 250]\noutput9: 555\n", "input_output_value": ["\ninput1: nums=[0]\noutput1: 0\n", "\ninput2: nums=[5]\noutput2: 5\n", "\ninput3: nums=[1, 3, 7, 9]\noutput3: 20\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {0};\n    vector<int> input2 = {5};\n    vector<int> input3 = {1, 3, 7, 9};\n    vector<int> input4 = {12, 56, 34};\n    vector<int> input5 = {99, 22, 77};\n    vector<int> input6 = {1024, 2048};\n    vector<int> input7 = {1111};\n    vector<int> input8 = {54321};\n    vector<int> input9 = {-1, -100, 250};\n\n    cout << sumOfEncryptedInt(input1) << endl;\n    cout << sumOfEncryptedInt(input2) << endl;\n    cout << sumOfEncryptedInt(input3) << endl;\n    cout << sumOfEncryptedInt(input4) << endl;\n    cout << sumOfEncryptedInt(input5) << endl;\n    cout << sumOfEncryptedInt(input6) << endl;\n    cout << sumOfEncryptedInt(input7) << endl;\n    cout << sumOfEncryptedInt(input8) << endl;\n    cout << sumOfEncryptedInt(input9) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###findGoodPairs.cpp", "source_code_str": "    long long findGoodPairs(vector<int> a, int n, int k) {\n        map<int, int > ma;\n        long long ans = 0;\n        for (int i = k; i < n; i++) {\n            ma[a[i - k]]++;\n            ans += ma[a[i]];\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###findGoodPairs_Test.java", "reference_code": "    static long findGoodPairs(int a[], int n, int k){\n        \n        long ans = 0;\n        Map<Integer, Integer> hm = new HashMap<>();\n        for(int i = k; i < n; i++){\n            hm.put(a[i - k], hm.getOrDefault(a[i - k], 0) + 1);\n            ans += hm.getOrDefault(a[i], 0);\n        }\n        return ans;\n    }", "target_method_signature": "findGoodPairs", "source_method_signature": "findGoodPairs", "target_allMS": "    static long findGoodPairs(int a[], int n, int k){", "source_allMS": "    long long findGoodPairs(vector<int> a, int n, int k) {", "source_import": "#include <iostream>\n#include <vector>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class findGoodPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findGoodPairs(new int[]{1, 2, 3, 4, 5}, 5, 2)); // Input 1\n        System.out.println(findGoodPairs(new int[]{1, 1, 1, 1, 1}, 5, 2)); // Input 2\n        System.out.println(findGoodPairs(new int[]{1, 2, 1, 2, 1}, 5, 2)); // Input 3\n        System.out.println(findGoodPairs(new int[]{1, 3, 2, 1, 4, 5}, 6, 3)); // Input 4\n        System.out.println(findGoodPairs(new int[]{1, 2, 3}, 3, 4)); // Input 5\n        System.out.println(findGoodPairs(new int[]{}, 0, 2)); // Input 6\n        System.out.println(findGoodPairs(new int[]{1, 2, 3}, 3, 0)); // Input 7\n        System.out.println(findGoodPairs(new int[]{1, 2, 2, 3, 3}, 5, 1)); // Input 8\n        System.out.println(findGoodPairs(new int[]{5, 5, 5, 5, 5}, 5, 1)); // Input 9\n        System.out.println(findGoodPairs(new int[]{1, 1, 2, 2, 1, 1}, 6, 2)); // Input 10\n    }\n}", "all_input_output_value": "\ninput1: a={1, 2, 3, 4, 5}, n=5, k=2\noutput1: 0\n--------\ninput2: a={1, 1, 1, 1, 1}, n=5, k=2\noutput2: 6\n--------\ninput3: a={1, 2, 1, 2, 1}, n=5, k=2\noutput3: 4\n--------\ninput4: a={1, 3, 2, 1, 4, 5}, n=6, k=3\noutput4: 1\n--------\ninput5: a={1, 2, 3}, n=3, k=4\noutput5: 0\n--------\ninput6: a={}, n=0, k=2\noutput6: 0\n--------\ninput7: a={1, 2, 3}, n=3, k=0\noutput7: 3\n--------\ninput8: a={1, 2, 2, 3, 3}, n=5, k=1\noutput8: 2\n--------\ninput9: a={5, 5, 5, 5, 5}, n=5, k=1\noutput9: 10\n--------\ninput10: a={1, 1, 2, 2, 1, 1}, n=6, k=2\noutput10: 4\n", "input_output_value": ["\ninput1: a={1, 2, 3, 4, 5}, n=5, k=2\noutput1: 0\n", "\ninput2: a={1, 1, 1, 1, 1}, n=5, k=2\noutput2: 6\n", "\ninput3: a={1, 2, 1, 2, 1}, n=5, k=2\noutput3: 4\n"], "source_code_shell": "#include <iostream>\n#include <vector>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <map>\n// TOFILL\nint main() {\n    cout << findGoodPairs({1, 2, 3, 4, 5}, 5, 2) << endl; // Test input 1\n    cout << findGoodPairs({1, 1, 1, 1, 1}, 5, 2) << endl; // Test input 2\n    cout << findGoodPairs({1, 2, 1, 2, 1}, 5, 2) << endl; // Test input 3\n    cout << findGoodPairs({1, 3, 2, 1, 4, 5}, 6, 3) << endl; // Test input 4\n    cout << findGoodPairs({1, 2, 3}, 3, 4) << endl; // Test input 5\n    cout << findGoodPairs({}, 0, 2) << endl; // Test input 6\n    cout << findGoodPairs({1, 2, 3}, 3, 0) << endl; // Test input 7\n    cout << findGoodPairs({1, 2, 2, 3, 3}, 5, 1) << endl; // Test input 8\n    cout << findGoodPairs({5, 5, 5, 5, 5}, 5, 1) << endl; // Test input 9\n    cout << findGoodPairs({1, 1, 2, 2, 1, 1}, 6, 2) << endl; // Test input 10\n}", "TAG": "Success"}
{"source_Lan": "cpp###ForYou.cpp", "source_code_str": "    long long ForYou(int n, vector<int> &arr, int m, vector<vector<int> > &order)\n    {\n        vector<int> diff(n+1,0);\n        for(auto it:order)\n        {\n            diff[it[0]-1]++;\n            diff[it[1]]--;\n        }\n        for(int i=1;i<=n;i++)\n        {\n            diff[i] += diff[i-1];\n        }\n        diff.pop_back();\n        sort(diff.begin(),diff.end());\n        sort(arr.begin(),arr.end());\n        long long ans=0;\n        int mod = 1e9+7;\n        for(int i=0;i<n;i++)\n        {\n            ans += (1ll * diff[i]) * (1ll * arr[i]);\n            ans%=mod;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###ForYou_Test.java", "reference_code": "    public static long ForYou(int n, int[] arr, int m, int[][] order) {\n        \n        int[] diff = new int[n + 1];\n        \n        for (int[] it : order) {\n            diff[it[0] - 1]++;\n            diff[it[1]]--;\n        }\n        \n        for (int i = 1; i <= n; i++) {\n            diff[i] += diff[i - 1];\n        }\n        \n        diff = Arrays.copyOf(diff, n);\n        Arrays.sort(diff);\n        \n        Arrays.sort(arr);\n        long ans = 0;\n        int mod = (int)1e9 + 7;\n        \n        for (int i = 0; i < n; i++) {\n            ans += ((long)diff[i]) * ((long)arr[i]);\n            ans %= mod;\n        }\n        return ans;\n    }", "target_method_signature": "ForYou", "source_method_signature": "ForYou", "target_allMS": "    public static long ForYou(int n, int[] arr, int m, int[][] order) {", "source_allMS": "    long long ForYou(int n, vector<int> &arr, int m, vector<vector<int> > &order)", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class ForYou_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(ForYou(1, new int[]{5}, 1, new int[][]{{1, 1}}));\n        System.out.println(ForYou(3, new int[]{5, 1, 3}, 1, new int[][]{{1, 3}}));\n        System.out.println(ForYou(3, new int[]{-2, 0, 6}, 1, new int[][]{{1, 2}, {2, 3}}));\n        System.out.println(ForYou(4, new int[]{4, 3, 2, 1}, 1, new int[][]{{1, 4}, {2, 3}, {1, 2}}));\n        System.out.println(ForYou(5, new int[]{0, 0, 0, 0, 0}, 1, new int[][]{{1, 5}}));\n        System.out.println(ForYou(2, new int[]{10, 20}, 1, new int[][]{{1, 1}, {2, 2}}));\n        System.out.println(ForYou(3, new int[]{-1, -3, -2}, 1, new int[][]{{1, 3}, {1, 2}}));\n        System.out.println(ForYou(4, new int[]{1, 2, 3, 4}, 1, new int[][]{{1, 2}, {3, 4}, {2, 3}}));\n        System.out.println(ForYou(5, new int[]{1, 2, 3, 4, 5}, 1, new int[][]{{1, 5}, {2, 4}, {1, 2}, {3, 5}}));\n        System.out.println(ForYou(4, new int[]{7, 5, 3, 1}, 1, new int[][]{{3, 4}, {1, 2}, {1, 3}}));\n    }\n}", "all_input_output_value": "\ninput1: n=1, arr=[5], m=1, order=[[1, 1]]\noutput1: 5\n--------\ninput2: n=3, arr=[5, 1, 3], m=1, order=[[1, 3]]\noutput2: 9\n--------\ninput3: n=3, arr=[-2, 0, 6], m=1, order=[[1, 2], [2, 3]]\noutput3: 10\n--------\ninput4: n=4, arr=[4, 3, 2, 1], m=1, order=[[1, 4], [2, 3], [1, 2]]\noutput4: 23\n--------\ninput5: n=5, arr=[0, 0, 0, 0, 0], m=1, order=[[1, 5]]\noutput5: 0\n--------\ninput6: n=2, arr=[10, 20], m=1, order=[[1, 1], [2, 2]]\noutput6: 30\n--------\ninput7: n=3, arr=[-1, -3, -2], m=1, order=[[1, 3], [1, 2]]\noutput7: -9\n--------\ninput8: n=4, arr=[1, 2, 3, 4], m=1, order=[[1, 2], [3, 4], [2, 3]]\noutput8: 17\n--------\ninput9: n=5, arr=[1, 2, 3, 4, 5], m=1, order=[[1, 5], [2, 4], [1, 2], [3, 5]]\noutput9: 42\n--------\ninput10: n=4, arr=[7, 5, 3, 1], m=1, order=[[3, 4], [1, 2], [1, 3]]\noutput10: 31\n", "input_output_value": ["\ninput1: n=1, arr=[5], m=1, order=[[1, 1]]\noutput1: 5\n", "\ninput2: n=3, arr=[5, 1, 3], m=1, order=[[1, 3]]\noutput2: 9\n", "\ninput3: n=3, arr=[-2, 0, 6], m=1, order=[[1, 2], [2, 3]]\noutput3: 10\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    // Test cases execution\n    vector<int> arr1 = {5};\n    vector<vector<int>> order1 = {{1, 1}};\n    cout << ForYou(1, arr1, 1, order1) << endl;\n\n    vector<int> arr2 = {5, 1, 3};\n    vector<vector<int>> order2 = {{1, 3}};\n    cout << ForYou(3, arr2, 1, order2) << endl;\n\n    vector<int> arr3 = {-2, 0, 6};\n    vector<vector<int>> order3 = {{1, 2}, {2, 3}};\n    cout << ForYou(3, arr3, 1, order3) << endl;\n\n    vector<int> arr4 = {4, 3, 2, 1};\n    vector<vector<int>> order4 = {{1, 4}, {2, 3}, {1, 2}};\n    cout << ForYou(4, arr4, 1, order4) << endl;\n\n    vector<int> arr5 = {0, 0, 0, 0, 0};\n    vector<vector<int>> order5 = {{1, 5}};\n    cout << ForYou(5, arr5, 1, order5) << endl;\n\n    vector<int> arr6 = {10, 20};\n    vector<vector<int>> order6 = {{1, 1}, {2, 2}};\n    cout << ForYou(2, arr6, 1, order6) << endl;\n\n    vector<int> arr7 = {-1, -3, -2};\n    vector<vector<int>> order7 = {{1, 3}, {1, 2}};\n    cout << ForYou(3, arr7, 1, order7) << endl;\n\n    vector<int> arr8 = {1, 2, 3, 4};\n    vector<vector<int>> order8 = {{1, 2}, {3, 4}, {2, 3}};\n    cout << ForYou(4, arr8, 1, order8) << endl;\n\n    vector<int> arr9 = {1, 2, 3, 4, 5};\n    vector<vector<int>> order9 = {{1, 5}, {2, 4}, {1, 2}, {3, 5}};\n    cout << ForYou(5, arr9, 1, order9) << endl;\n\n    vector<int> arr10 = {7, 5, 3, 1};\n    vector<vector<int>> order10 = {{3, 4}, {1, 2}, {1, 3}};\n    cout << ForYou(4, arr10, 1, order10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###validStrings.cpp", "source_code_str": "    int validStrings(int n, int k, vector<string> &arr) {\n        int tot=0;\n        for (auto j:arr){\n            int c=0;\n            for (auto q:j){\n                if (q=='a'||q=='e'||q=='i'||q=='o'||q=='u') c+=1;\n            }\n            if (c==k) tot+=1;\n        }\n        return tot;\n    }", "source_code_block": "", "target_Lan": "java###validStrings_Test.java", "reference_code": "    public static int validStrings(int n, int k, String[] arr) \n    {\n        int totalValid = 0;\n        for (String str : arr) {\n            int vowelCount = 0;\n            for (char ch : str.toCharArray()) {\n                if (\"aeiou\".indexOf(ch) >= 0) {\n                    vowelCount++;\n                }\n            }\n            if (vowelCount == k) {\n                totalValid++;\n            }\n        }\n        return totalValid;\n    }", "target_method_signature": "validStrings", "source_method_signature": "validStrings", "target_allMS": "    public static int validStrings(int n, int k, String[] arr) ", "source_allMS": "    int validStrings(int n, int k, vector<string> &arr) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class validStrings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(validStrings(5, 2, new String[]{\"hello\", \"world\", \"java\", \"code\", \"test\"}));\n        System.out.println(validStrings(4, 3, new String[]{\"aeiou\", \"xyz\", \"aaa\", \"bcd\"}));\n        System.out.println(validStrings(3, 1, new String[]{\"cat\", \"dog\", \"bird\"}));\n        System.out.println(validStrings(6, 0, new String[]{\"bcdfg\", \"\", \"xyz\", \"123\", \"!!!\", \"a\"}));\n        System.out.println(validStrings(5, 4, new String[]{\"ape\", \"beet\", \"feed\", \"mood\", \"greet\"}));\n        System.out.println(validStrings(2, 2, new String[]{\"\", \"a\"}));\n        System.out.println(validStrings(0, 1, new String[]{}));\n        System.out.println(validStrings(3, 2, new String[]{\"aabb\", \"cc\", \"ddeee\"}));\n        System.out.println(validStrings(4, 5, new String[]{\"aaaaa\", \"bb\", \"ccc\", \"ddddd\"}));\n        System.out.println(validStrings(3, 2, new String[]{\"two\", \"vowels\", \"here\"}));\n    }\n}", "all_input_output_value": "\ninput1: n=5, k=2, arr=[\"hello\", \"world\", \"java\", \"code\", \"test\"]\noutput1: 3\n--------\ninput2: n=4, k=3, arr=[\"aeiou\", \"xyz\", \"aaa\", \"bcd\"]\noutput2: 1\n--------\ninput3: n=3, k=1, arr=[\"cat\", \"dog\", \"bird\"]\noutput3: 3\n--------\ninput4: n=6, k=0, arr=[\"bcdfg\", \"\", \"xyz\", \"123\", \"!!!\", \"a\"]\noutput4: 5\n--------\ninput5: n=5, k=4, arr=[\"ape\", \"beet\", \"feed\", \"mood\", \"greet\"]\noutput5: 0\n--------\ninput6: n=2, k=2, arr=[\"\", \"a\"]\noutput6: 0\n--------\ninput7: n=0, k=1, arr=[]\noutput7: 0\n--------\ninput8: n=3, k=2, arr=[\"aabb\", \"cc\", \"ddeee\"]\noutput8: 1\n--------\ninput9: n=4, k=5, arr=[\"aaaaa\", \"bb\", \"ccc\", \"ddddd\"]\noutput9: 1\n--------\ninput10: n=3, k=2, arr=[\"two\", \"vowels\", \"here\"]\noutput10: 2\n", "input_output_value": ["\ninput1: n=5, k=2, arr=[\"hello\", \"world\", \"java\", \"code\", \"test\"]\noutput1: 3\n", "\ninput2: n=4, k=3, arr=[\"aeiou\", \"xyz\", \"aaa\", \"bcd\"]\noutput2: 1\n", "\ninput3: n=3, k=1, arr=[\"cat\", \"dog\", \"bird\"]\noutput3: 3\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<string> input1 = {\"hello\", \"world\", \"java\", \"code\", \"test\"};\n    cout << validStrings(5, 2, input1) << endl;\n    \n    vector<string> input2 = {\"aeiou\", \"xyz\", \"aaa\", \"bcd\"};\n    cout << validStrings(4, 3, input2) << endl;\n    \n    vector<string> input3 = {\"cat\", \"dog\", \"bird\"};\n    cout << validStrings(3, 1, input3) << endl;\n    \n    vector<string> input4 = {\"bcdfg\", \"\", \"xyz\", \"123\", \"!!!\", \"a\"};\n    cout << validStrings(6, 0, input4) << endl;\n    \n    vector<string> input5 = {\"ape\", \"beet\", \"feed\", \"mood\", \"greet\"};\n    cout << validStrings(5, 4, input5) << endl;\n    \n    vector<string> input6 = {\"\", \"a\"};\n    cout << validStrings(2, 2, input6) << endl;\n    \n    vector<string> input7 = {};\n    cout << validStrings(0, 1, input7) << endl;\n    \n    vector<string> input8 = {\"aabb\", \"cc\", \"ddeee\"};\n    cout << validStrings(3, 2, input8) << endl;\n    \n    vector<string> input9 = {\"aaaaa\", \"bb\", \"ccc\", \"ddddd\"};\n    cout << validStrings(4, 5, input9) << endl;\n\n    vector<string> input10 = {\"two\", \"vowels\", \"here\"};\n    cout << validStrings(3, 2, input10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumBattalions.cpp", "source_code_str": "    int maximumBattalions(int N, vector<string> &names) {\n        unordered_map<string, int> m;\n        for(int i = 0; i < N; i++){\n            m[names[i]] = i;\n        }\n        int answer = 0;\n        int maxi = 0;\n        int ind = 0;\n        for(auto i : names){\n            maxi = max(maxi, m[i]);\n            if(maxi == ind){\n                answer += 1;\n            }\n            ind += 1;\n        }\n        return answer;\n    }", "source_code_block": "", "target_Lan": "java###maximumBattalions_Test.java", "reference_code": "    public static int maximumBattalions(int N, String[] names) \n    {\n        Map<String, Integer> nameIndexMap = new HashMap<>();\n        for (int i = 0; i < N; i++) \n        {\n            nameIndexMap.put(names[i], i);\n        }\n        int answer = 0;\n        int maxi = 0;\n        int ind = 0;\n        for (String name : names) \n        {\n            maxi = Math.max(maxi, nameIndexMap.get(name));\n            if (maxi == ind) \n            {\n                answer++;\n            }\n            ind++;\n        }\n        return answer;\n    }", "target_method_signature": "maximumBattalions", "source_method_signature": "maximumBattalions", "target_allMS": "    public static int maximumBattalions(int N, String[] names) ", "source_allMS": "    int maximumBattalions(int N, vector<string> &names) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maximumBattalions_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumBattalions(5, new String[]{\"A\", \"B\", \"C\", \"D\", \"E\"})); // Test Input 1\n        System.out.println(maximumBattalions(4, new String[]{\"A\", \"B\", \"A\", \"C\"})); // Test Input 2\n        System.out.println(maximumBattalions(6, new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"})); // Test Input 3\n        System.out.println(maximumBattalions(4, new String[]{\"B\", \"A\", \"C\", \"D\"})); // Test Input 4\n        System.out.println(maximumBattalions(0, new String[]{})); // Test Input 5\n        System.out.println(maximumBattalions(1, new String[]{\"A\"})); // Test Input 6\n        System.out.println(maximumBattalions(3, new String[]{\"X\", \"X\", \"X\"})); // Test Input 7\n        System.out.println(maximumBattalions(6, new String[]{\"Z\", \"Y\", \"X\", \"W\", \"Y\", \"Z\"})); // Test Input 8\n        System.out.println(maximumBattalions(5, new String[]{\"M\", \"M\", \"N\", \"O\", \"O\"})); // Test Input 9\n        System.out.println(maximumBattalions(3, new String[]{\"A\", \"C\", \"B\"})); // Test Input 10\n    }\n}", "all_input_output_value": "\ninput1: N=5, names=[\"A\", \"B\", \"C\", \"D\", \"E\"]\noutput1: 5\n--------\ninput2: N=4, names=[\"A\", \"B\", \"A\", \"C\"]\noutput2: 2\n--------\ninput3: N=6, names=[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\noutput3: 6\n--------\ninput4: N=4, names=[\"B\", \"A\", \"C\", \"D\"]\noutput4: 4\n--------\ninput5: N=0, names=[]\noutput5: 0\n--------\ninput6: N=1, names=[\"A\"]\noutput6: 1\n--------\ninput7: N=3, names=[\"X\", \"X\", \"X\"]\noutput7: 1\n--------\ninput8: N=6, names=[\"Z\", \"Y\", \"X\", \"W\", \"Y\", \"Z\"]\noutput8: 1\n--------\ninput9: N=5, names=[\"M\", \"M\", \"N\", \"O\", \"O\"]\noutput9: 3\n--------\ninput10: N=3, names=[\"A\", \"C\", \"B\"]\noutput10: 3\n", "input_output_value": ["\ninput1: N=5, names=[\"A\", \"B\", \"C\", \"D\", \"E\"]\noutput1: 5\n", "\ninput2: N=4, names=[\"A\", \"B\", \"A\", \"C\"]\noutput2: 2\n", "\ninput3: N=6, names=[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\noutput3: 6\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<string> names1 = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n    cout << maximumBattalions(5, names1) << endl;\n\n    vector<string> names2 = {\"A\", \"B\", \"A\", \"C\"};\n    cout << maximumBattalions(4, names2) << endl;\n\n    vector<string> names3 = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"};\n    cout << maximumBattalions(6, names3) << endl;\n\n    vector<string> names4 = {\"B\", \"A\", \"C\", \"D\"};\n    cout << maximumBattalions(4, names4) << endl;\n\n    vector<string> names5 = {};\n    cout << maximumBattalions(0, names5) << endl;\n\n    vector<string> names6 = {\"A\"};\n    cout << maximumBattalions(1, names6) << endl;\n\n    vector<string> names7 = {\"X\", \"X\", \"X\"};\n    cout << maximumBattalions(3, names7) << endl;\n\n    vector<string> names8 = {\"Z\", \"Y\", \"X\", \"W\", \"Y\", \"Z\"};\n    cout << maximumBattalions(6, names8) << endl;\n\n    vector<string> names9 = {\"M\", \"M\", \"N\", \"O\", \"O\"};\n    cout << maximumBattalions(5, names9) << endl;\n\n    vector<string> names10 = {\"A\", \"C\", \"B\"};\n    cout << maximumBattalions(3, names10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumDis.cpp", "source_code_str": "    int minimumDis(int N, vector<int> X) {\n        sort(X.begin(), X.end());\n        return X[(N - 1) / 2];\n    }", "source_code_block": "", "target_Lan": "java###minimumDis_Test.java", "reference_code": "    public static int minimumDis(int N, int[] X) {\n        Arrays.sort(X);\n        return X[(N - 1) / 2];\n    }", "target_method_signature": "minimumDis", "source_method_signature": "minimumDis", "target_allMS": "    public static int minimumDis(int N, int[] X) {", "source_allMS": "    int minimumDis(int N, vector<int> X) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumDis_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Inputs\n        System.out.println(minimumDis(1, new int[]{5})); // Single element\n        System.out.println(minimumDis(3, new int[]{3, 1, 2})); // Odd size array\n        System.out.println(minimumDis(4, new int[]{7, 5, 6, 4})); // Even size array\n        System.out.println(minimumDis(5, new int[]{-1, -3, -2, 0, 1})); // Negative elements\n        System.out.println(minimumDis(5, new int[]{1000000, 3000000, 2000000, 4000000, 5000000})); // Large positive integers\n        System.out.println(minimumDis(5, new int[]{2, 2, 2, 2, 2})); // Identical elements\n        System.out.println(minimumDis(5, new int[]{10, 20, 30, 40, 50})); // Already sorted\n        System.out.println(minimumDis(5, new int[]{50, 40, 30, 20, 10})); // Reverse order\n        // Note: The input for N=1_000_000 requires specific randomization to create a large size array\n        // Example with random elements - Uncomment below if needed and implement accordingly.\n        /*\n        int largeSize = 1000000;\n        int[] largeArray = new int[largeSize];\n        for(int i = 0; i < largeSize; i++) {\n            largeArray[i] =(int)(Math.random() * 10000000); // Random numbers up to 10 million\n        }\n        System.out.println(minimumDis(largeSize, largeArray)); // Large size array with randomized elements\n        */\n    }\n}", "all_input_output_value": "\ninput1: N=1, X=[5]\noutput1: 5\n--------\ninput2: N=3, X=[3, 1, 2]\noutput2: 2\n--------\ninput3: N=4, X=[7, 5, 6, 4]\noutput3: 5\n--------\ninput4: N=5, X=[-1, -3, -2, 0, 1]\noutput4: -1\n--------\ninput5: N=5, X=[1000000, 3000000, 2000000, 4000000, 5000000]\noutput5: 3000000\n--------\ninput6: N=5, X=[2, 2, 2, 2, 2]\noutput6: 2\n--------\ninput7: N=5, X=[10, 20, 30, 40, 50]\noutput7: 30\n--------\ninput8: N=5, X=[50, 40, 30, 20, 10]\noutput8: 30\n", "input_output_value": ["\ninput1: N=1, X=[5]\noutput1: 5\n", "\ninput2: N=3, X=[3, 1, 2]\noutput2: 2\n", "\ninput3: N=4, X=[7, 5, 6, 4]\noutput3: 5\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    cout << minimumDis(1, {5}) << endl;                      // Output for input1\n    cout << minimumDis(3, {3, 1, 2}) << endl;                // Output for input2\n    cout << minimumDis(4, {7, 5, 6, 4}) << endl;            // Output for input3\n    cout << minimumDis(5, {-1, -3, -2, 0, 1}) << endl;      // Output for input4\n    cout << minimumDis(5, {1000000, 3000000, 2000000, 4000000, 5000000}) << endl; // Output for input5\n    cout << minimumDis(5, {2, 2, 2, 2, 2}) << endl;          // Output for input6\n    cout << minimumDis(5, {10, 20, 30, 40, 50}) << endl;    // Output for input7\n    cout << minimumDis(5, {50, 40, 30, 20, 10}) << endl;    // Output for input8\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxAlternatingSubstring.cpp", "source_code_str": "    long long maxAlternatingSubstring(int N, string S) {\n        vector<long long> diff;\n        for (int i = 0; i < N;) {\n            int j = i + 1;\n            while (j < N && S[j] != S[j - 1])\n                j++;\n            diff.push_back(j - i);\n            i = j;\n        }\n        diff.push_back(0);\n        long long ans_before = 0;\n        for (long long x : diff) {\n            ans_before += ((x * (x + 1)) / 2);\n        }\n        long long ans = 0;\n        for (int i = 0; i < diff.size() - 1; ++i) {\n            long long a = diff[i];\n            long long b = diff[i + 1];\n            long long currAns = ans_before - ((a * (a + 1)) / 2) - ((b * (b + 1)) / 2) +\n                                ((a + b + 1) * (a + b + 2)) / 2;\n            ans = max(ans, currAns);\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maxAlternatingSubstring_Test.java", "reference_code": "    public static long maxAlternatingSubstring(int N, String S) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < N;) {\n            int j = i + 1;\n            while (j < N && S.charAt(j) != S.charAt(j - 1)) j++;\n            diff.add(j - i);\n            i = j;\n        }\n        diff.add(0);\n        long ans_before = 0;\n        for (int x : diff) {\n            ans_before += ((x * 1L * (x + 1)) / 2);\n        }\n        long ans = 0;\n        for (int i = 0; i < diff.size() - 1; i++) {\n            long a = diff.get(i);\n            long b = diff.get(i + 1);\n            long currAns = ans_before - ((a * (a + 1)) / 2) - ((b * (b + 1)) / 2) +\n                           ((a + b + 1) * (a + b + 2)) / 2;\n            ans = Math.max(ans, currAns);\n        }\n        return ans;\n    }", "target_method_signature": "maxAlternatingSubstring", "source_method_signature": "maxAlternatingSubstring", "target_allMS": "    public static long maxAlternatingSubstring(int N, String S) {", "source_allMS": "    long long maxAlternatingSubstring(int N, string S) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class maxAlternatingSubstring_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxAlternatingSubstring(0, \"\"));             // Edge case: empty string\n        System.out.println(maxAlternatingSubstring(1, \"a\"));            // Single character\n        System.out.println(maxAlternatingSubstring(2, \"aa\"));           // Two identical characters\n        System.out.println(maxAlternatingSubstring(2, \"ab\"));           // Two alternating characters\n        System.out.println(maxAlternatingSubstring(5, \"abcde\"));        // Longer string with unique characters\n        System.out.println(maxAlternatingSubstring(5, \"aaaab\"));        // Long sequence followed by alternate character\n        System.out.println(maxAlternatingSubstring(6, \"ababab\"));       // Maximum alternation\n        System.out.println(maxAlternatingSubstring(6, \"aaaaaa\"));       // All identical characters\n        System.out.println(maxAlternatingSubstring(10, \"aabbaabbaa\"));  // Complex pattern with multiple alternates\n        System.out.println(maxAlternatingSubstring(7, \"abababa\"));      // More alternation but with odd length\n    }\n}", "all_input_output_value": "\ninput1: N=0, S=\"\"\noutput1: 0\n--------\ninput2: N=1, S=\"a\"\noutput2: 1\n--------\ninput3: N=2, S=\"aa\"\noutput3: 2\n--------\ninput4: N=2, S=\"ab\"\noutput4: 2\n--------\ninput5: N=5, S=\"abcde\"\noutput5: 5\n--------\ninput6: N=5, S=\"aaaab\"\noutput6: 4\n--------\ninput7: N=6, S=\"ababab\"\noutput7: 6\n--------\ninput8: N=6, S=\"aaaaaa\"\noutput8: 1\n--------\ninput9: N=10, S=\"aabbaabbaa\"\noutput9: 6\n--------\ninput10: N=7, S=\"abababa\"\noutput10: 7\n", "input_output_value": ["\ninput1: N=0, S=\"\"\noutput1: 0\n", "\ninput2: N=1, S=\"a\"\noutput2: 1\n", "\ninput3: N=2, S=\"aa\"\noutput3: 2\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    cout << maxAlternatingSubstring(0, \"\") << endl; // Test input 1\n    cout << maxAlternatingSubstring(1, \"a\") << endl; // Test input 2\n    cout << maxAlternatingSubstring(2, \"aa\") << endl; // Test input 3\n    cout << maxAlternatingSubstring(2, \"ab\") << endl; // Test input 4\n    cout << maxAlternatingSubstring(5, \"abcde\") << endl; // Test input 5\n    cout << maxAlternatingSubstring(5, \"aaaab\") << endl; // Test input 6\n    cout << maxAlternatingSubstring(6, \"ababab\") << endl; // Test input 7\n    cout << maxAlternatingSubstring(6, \"aaaaaa\") << endl; // Test input 8\n    cout << maxAlternatingSubstring(10, \"aabbaabbaa\") << endl; // Test input 9\n    cout << maxAlternatingSubstring(7, \"abababa\") << endl; // Test input 10\n}", "TAG": "Success"}
{"source_Lan": "cpp###countSuperPalindrome.cpp", "source_code_str": "    int countSuperPalindrome(int l, int r) {\n        int count = 0;\n        \n        int start = static_cast<int>(ceil(sqrt(l)));\n        \n        while (start * start <= r) {\n            \n            int square = start * start;\n            string s = to_string(square);\n            \n            if (s == string(s.rbegin(), s.rend())) {\n                count++;\n            }\n            start++;\n        }\n        return count;\n    }", "source_code_block": "", "target_Lan": "java###countSuperPalindrome_Test.java", "reference_code": "    public static int countSuperPalindrome(int l, int r) {\n        int count = 0;\n        \n        int start = (int)Math.ceil(Math.sqrt(l));\n        \n        while (start * start <= r) {\n            \n            int square = start * start;\n            String s = Integer.toString(square);\n            \n            if (s.equals(new StringBuilder(s).reverse().toString())) {\n                count++;\n            }\n            start++;\n        }\n        return count;\n    }", "target_method_signature": "countSuperPalindrome", "source_method_signature": "countSuperPalindrome", "target_allMS": "    public static int countSuperPalindrome(int l, int r) {", "source_allMS": "    int countSuperPalindrome(int l, int r) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.lang.Math;\npublic class countSuperPalindrome_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countSuperPalindrome(1, 100));        // Small range, contains many palindromic squares.\n        System.out.println(countSuperPalindrome(10, 1000));      // A range where some numbers are palindromic squares.\n        System.out.println(countSuperPalindrome(4, 100));        // Testing the lower boundary with a perfect square.\n        System.out.println(countSuperPalindrome(1, 1));          // A range with the smallest possible values.\n        System.out.println(countSuperPalindrome(20, 80));        // Changing the range to avoid perfect squares.\n        System.out.println(countSuperPalindrome(1000, 10000));   // Larger range, checking for more palindromic squares.\n        System.out.println(countSuperPalindrome(900, 1100));     // Range that includes adjacent squares.\n        System.out.println(countSuperPalindrome(0, 0));          // Testing with zero as both the lower and upper bound.\n        System.out.println(countSuperPalindrome(36, 36));        // Testing with a perfect square.\n        System.out.println(countSuperPalindrome(300, 500));      // Larger range, with no palindromic squares.\n    }\n}", "all_input_output_value": "\ninput1: l=1, r=100\noutput1: 3\n--------\ninput2: l=10, r=1000\noutput2: 3\n--------\ninput3: l=4, r=100\noutput3: 2\n--------\ninput4: l=1, r=1\noutput4: 1\n--------\ninput5: l=20, r=80\noutput5: 0\n--------\ninput6: l=1000, r=10000\noutput6: 0\n--------\ninput7: l=900, r=1100\noutput7: 0\n--------\ninput8: l=0, r=0\noutput8: 1\n--------\ninput9: l=36, r=36\noutput9: 0\n--------\ninput10: l=300, r=500\noutput10: 1\n", "input_output_value": ["\ninput1: l=1, r=100\noutput1: 3\n", "\ninput2: l=10, r=1000\noutput2: 3\n", "\ninput3: l=4, r=100\noutput3: 2\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <cmath>\n#include <string>\n// TOFILL\nint main() {\n    cout << countSuperPalindrome(1, 100) << endl;\n    cout << countSuperPalindrome(10, 1000) << endl;\n    cout << countSuperPalindrome(4, 100) << endl;\n    cout << countSuperPalindrome(1, 1) << endl;\n    cout << countSuperPalindrome(20, 80) << endl;\n    cout << countSuperPalindrome(1000, 10000) << endl;\n    cout << countSuperPalindrome(900, 1100) << endl;\n    cout << countSuperPalindrome(0, 0) << endl;\n    cout << countSuperPalindrome(36, 36) << endl;\n    cout << countSuperPalindrome(300, 500) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###candyShop.cpp", "source_code_str": "    int candyShop(int n, vector<int> &candies) {\n        int answer = INT_MAX;\n        unordered_map<int, int> m;\n        for(auto i : candies){\n            m[i] += 1;\n        }\n        int k = m.size();\n        m.clear();\n        int l = 0, r = 0;\n        int total = 0;\n        while(r < n){\n            m[candies[r]] += 1;\n            total += candies[r];\n            while(m[candies[l]] > 1){\n                m[candies[l]] -= 1;\n                total -= candies[l];\n                l += 1;\n            }\n            if(m.size() == k){\n                answer = min(answer, total);\n            }\n            r += 1;\n        }\n        return answer;\n    }", "source_code_block": "", "target_Lan": "java###candyShop_Test.java", "reference_code": "    public static int candyShop(int n, int candies[]) {\n        int ans = Integer.MAX_VALUE;\n        int sum = 0;\n        int low = 0, high = 0;\n        Set<Integer> hs = new HashSet<>();\n        for(int x : candies)\n            hs.add(x);\n        Map<Integer, Integer> hm = new HashMap<>();\n        while(high < n){\n            hm.put(candies[high], hm.getOrDefault(candies[high], 0) + 1);\n            sum += candies[high++];\n            while(low < high && hm.get(candies[low]) > 1){\n                hm.put(candies[low], hm.get(candies[low]) - 1);\n                sum -= candies[low++];\n            }\n            if(hm.size() == hs.size())\n                ans = Math.min(ans, sum);\n        }\n        return ans;\n    }", "target_method_signature": "candyShop", "source_method_signature": "candyShop", "target_allMS": "    public static int candyShop(int n, int candies[]) {", "source_allMS": "    int candyShop(int n, vector<int> &candies) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\npublic class candyShop_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(candyShop(5, new int[]{1, 2, 3, 4, 5})); // All distinct candies\n        System.out.println(candyShop(5, new int[]{1, 1, 2, 3, 4})); // Duplicates\n        System.out.println(candyShop(0, new int[]{}));               // No candies\n        System.out.println(candyShop(3, new int[]{1, 1, 1}));       // Only one type of candy\n        System.out.println(candyShop(6, new int[]{1, 2, 2, 3, 4, 5})); // More duplicates with multiple types\n        System.out.println(candyShop(4, new int[]{1, 2, 3, 3}));    // Some duplicates at the end\n        System.out.println(candyShop(10, new int[]{1, 2, 1, 3, 2, 3, 4, 5, 5, 6})); // Large size with multiple types\n        System.out.println(candyShop(2, new int[]{2, 2}));           // Edge case with two identical candies\n        System.out.println(candyShop(3, new int[]{1, 2, 1}));       // Two types with duplicate\n        System.out.println(candyShop(4, new int[]{1, 2, 3, 1}));    // All types present minimally\n    }\n}", "all_input_output_value": "\ninput1: n=5, candies=[1, 2, 3, 4, 5]\noutput1: 15\n--------\ninput2: n=5, candies=[1, 1, 2, 3, 4]\noutput2: 10\n--------\ninput3: n=0, candies=[]\noutput3: 2147483647\n--------\ninput4: n=3, candies=[1, 1, 1]\noutput4: 1\n--------\ninput5: n=6, candies=[1, 2, 2, 3, 4, 5]\noutput5: 17\n--------\ninput6: n=4, candies=[1, 2, 3, 3]\noutput6: 6\n--------\ninput7: n=10, candies=[1, 2, 1, 3, 2, 3, 4, 5, 5, 6]\noutput7: 29\n--------\ninput8: n=2, candies=[2, 2]\noutput8: 2\n--------\ninput9: n=3, candies=[1, 2, 1]\noutput9: 3\n--------\ninput10: n=4, candies=[1, 2, 3, 1]\noutput10: 6\n", "input_output_value": ["\ninput1: n=5, candies=[1, 2, 3, 4, 5]\noutput1: 15\n", "\ninput2: n=5, candies=[1, 1, 2, 3, 4]\noutput2: 10\n", "\ninput3: n=0, candies=[]\noutput3: 2147483647\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <limits.h>\n// TOFILL\nint main() {\n    vector<int> candies1 = {1, 2, 3, 4, 5};\n    cout << candyShop(5, candies1) << endl;\n\n    vector<int> candies2 = {1, 1, 2, 3, 4};\n    cout << candyShop(5, candies2) << endl;\n\n    vector<int> candies3 = {};\n    cout << candyShop(0, candies3) << endl;\n\n    vector<int> candies4 = {1, 1, 1};\n    cout << candyShop(3, candies4) << endl;\n\n    vector<int> candies5 = {1, 2, 2, 3, 4, 5};\n    cout << candyShop(6, candies5) << endl;\n\n    vector<int> candies6 = {1, 2, 3, 3};\n    cout << candyShop(4, candies6) << endl;\n\n    vector<int> candies7 = {1, 2, 1, 3, 2, 3, 4, 5, 5, 6};\n    cout << candyShop(10, candies7) << endl;\n\n    vector<int> candies8 = {2, 2};\n    cout << candyShop(2, candies8) << endl;\n\n    vector<int> candies9 = {1, 2, 1};\n    cout << candyShop(3, candies9) << endl;\n\n    vector<int> candies10 = {1, 2, 3, 1};\n    cout << candyShop(4, candies10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###numOfWays.cpp", "source_code_str": "    long numOfWays(int n)\n    {\n        if(n%2) return 0;\n        long k = (n-1)/2;\n        k/=2;\n        k*=6;\n        return k;\n    }", "source_code_block": "", "target_Lan": "java###numOfWays_Test.java", "reference_code": "    public static long numOfWays(int n) {\n        if(n%2==1)\n            return 0;\n        long k = (long)((n-1)/2);\n        k/=2;\n        k*=6;\n        return k;\n    }", "target_method_signature": "numOfWays", "source_method_signature": "numOfWays", "target_allMS": "    public static long numOfWays(int n) {", "source_allMS": "    long numOfWays(int n)", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class numOfWays_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInputs = {0, 1, 2, 3, 4, 10, 11, 12, 100, 101};\n        for(int input : testInputs) {\n            System.out.println(numOfWays(input));\n        }\n    }\n}", "all_input_output_value": "\ninput1: n=0\noutput1: 0\n--------\ninput2: n=1\noutput2: 0\n--------\ninput3: n=2\noutput3: 0\n--------\ninput4: n=3\noutput4: 0\n--------\ninput5: n=4\noutput5: 0\n--------\ninput6: n=10\noutput6: 12\n--------\ninput7: n=11\noutput7: 0\n--------\ninput8: n=12\noutput8: 12\n--------\ninput9: n=100\noutput9: 144\n--------\ninput10: n=101\noutput10: 0\n", "input_output_value": ["\ninput1: n=0\noutput1: 0\n", "\ninput2: n=1\noutput2: 0\n", "\ninput3: n=2\noutput3: 0\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << numOfWays(0) << endl;\n    cout << numOfWays(1) << endl;\n    cout << numOfWays(2) << endl;\n    cout << numOfWays(3) << endl;\n    cout << numOfWays(4) << endl;\n    cout << numOfWays(10) << endl;\n    cout << numOfWays(11) << endl;\n    cout << numOfWays(12) << endl;\n    cout << numOfWays(100) << endl;\n    cout << numOfWays(101) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###chocolateDistribution.cpp", "source_code_str": "    int chocolateDistribution(int N, int M, vector<int> &arr, vector<int> &brr) {\n        sort(arr.begin(), arr.end());\n        sort(brr.begin(), brr.end());\n        int ans = 0;\n        int i = 0, j = 0;\n        while (i < N && j < M) {\n            if (arr[i] <= brr[j]) {\n                ans++;\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###chocolateDistribution_Test.java", "reference_code": "    public static int chocolateDistribution(int N, int M, int[] arr, int[] brr) {\n        Arrays.sort(arr);\n        Arrays.sort(brr);\n        int ans = 0;\n        int i = 0, j = 0;\n        while (i < N && j < M) {\n            if (arr[i] <= brr[j]) {\n                ans++;\n                i++;\n                j++;\n            } else {\n                j++;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "chocolateDistribution", "source_method_signature": "chocolateDistribution", "target_allMS": "    public static int chocolateDistribution(int N, int M, int[] arr, int[] brr) {", "source_allMS": "    int chocolateDistribution(int N, int M, vector<int> &arr, vector<int> &brr) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class chocolateDistribution_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test case 1: both arrays are empty\n        System.out.println(chocolateDistribution(0, 0, new int[]{}, new int[]{})); // Output: 0\n        \n        // Test case 2: first array is empty, second has elements\n        System.out.println(chocolateDistribution(0, 3, new int[]{}, new int[]{1, 2, 3})); // Output: 0\n        \n        // Test case 3: first array has elements, second is empty\n        System.out.println(chocolateDistribution(3, 0, new int[]{1, 2, 3}, new int[]{})); // Output: 0\n        \n        // Test case 4: all elements match, maximum distribution\n        System.out.println(chocolateDistribution(3, 3, new int[]{1, 2, 3}, new int[]{1, 2, 3})); // Output: 3\n        \n        // Test case 5: no matches, all elements in brr are greater\n        System.out.println(chocolateDistribution(3, 3, new int[]{1, 2, 3}, new int[]{4, 5, 6})); // Output: 0\n        \n        // Test case 6: arr elements are all greater than brr\n        System.out.println(chocolateDistribution(5, 2, new int[]{5, 6, 7, 8, 9}, new int[]{1, 2})); // Output: 0\n        \n        // Test case 7: mixed elements, some matches\n        System.out.println(chocolateDistribution(4, 4, new int[]{4, 1, 6, 2}, new int[]{3, 5, 2, 4})); // Output: 3\n        \n        // Test case 8: partial matches\n        System.out.println(chocolateDistribution(3, 5, new int[]{10, 20, 30}, new int[]{15, 25, 35, 5, 0})); // Output: 2\n        \n        // Test case 9: duplicate values, testing distribution\n        System.out.println(chocolateDistribution(3, 3, new int[]{1, 2, 2}, new int[]{2, 2, 3})); // Output: 3\n        \n        // Test case 10: all elements are equal, testing out of order\n        System.out.println(chocolateDistribution(4, 4, new int[]{0, 1, 2, 3}, new int[]{3, 2, 1, 0})); // Output: 4\n    }\n}", "all_input_output_value": "\ninput1: N=0, M=0, arr=[], brr=[]\noutput1: 0\n--------\ninput2: N=0, M=3, arr=[], brr=[1, 2, 3]\noutput2: 0\n--------\ninput3: N=3, M=0, arr=[1, 2, 3], brr=[]\noutput3: 0\n--------\ninput4: N=3, M=3, arr=[1, 2, 3], brr=[1, 2, 3]\noutput4: 3\n--------\ninput5: N=3, M=3, arr=[1, 2, 3], brr=[4, 5, 6]\noutput5: 0\n--------\ninput6: N=5, M=2, arr=[5, 6, 7, 8, 9], brr=[1, 2]\noutput6: 0\n--------\ninput7: N=4, M=4, arr=[4, 1, 6, 2], brr=[3, 5, 2, 4]\noutput7: 3\n--------\ninput8: N=3, M=5, arr=[10, 20, 30], brr=[15, 25, 35, 5, 0]\noutput8: 2\n--------\ninput9: N=3, M=3, arr=[1, 2, 2], brr=[2, 2, 3]\noutput9: 3\n--------\ninput10: N=4, M=4, arr=[0, 1, 2, 3], brr=[3, 2, 1, 0]\noutput10: 4\n", "input_output_value": ["\ninput1: N=0, M=0, arr=[], brr=[]\noutput1: 0\n", "\ninput2: N=0, M=3, arr=[], brr=[1, 2, 3]\noutput2: 0\n", "\ninput3: N=3, M=0, arr=[1, 2, 3], brr=[]\noutput3: 0\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    // Test input 1: N=0, M=0, arr=[], brr=[]\n    vector<int> arr1, brr1;\n    cout << chocolateDistribution(0, 0, arr1, brr1) << endl;\n\n    // Test input 2: N=0, M=3, arr=[], brr=[1, 2, 3]\n    vector<int> arr2, brr2 = {1, 2, 3};\n    cout << chocolateDistribution(0, 3, arr2, brr2) << endl;\n\n    // Test input 3: N=3, M=0, arr=[1, 2, 3], brr=[]\n    vector<int> arr3 = {1, 2, 3}, brr3;\n    cout << chocolateDistribution(3, 0, arr3, brr3) << endl;\n\n    // Test input 4: N=3, M=3, arr=[1, 2, 3], brr=[1, 2, 3]\n    vector<int> arr4 = {1, 2, 3}, brr4 = {1, 2, 3};\n    cout << chocolateDistribution(3, 3, arr4, brr4) << endl;\n\n    // Test input 5: N=3, M=3, arr=[1, 2, 3], brr=[4, 5, 6]\n    vector<int> arr5 = {1, 2, 3}, brr5 = {4, 5, 6};\n    cout << chocolateDistribution(3, 3, arr5, brr5) << endl;\n\n    // Test input 6: N=5, M=2, arr=[5, 6, 7, 8, 9], brr=[1, 2]\n    vector<int> arr6 = {5, 6, 7, 8, 9}, brr6 = {1, 2};\n    cout << chocolateDistribution(5, 2, arr6, brr6) << endl;\n\n    // Test input 7: N=4, M=4, arr=[4, 1, 6, 2], brr=[3, 5, 2, 4]\n    vector<int> arr7 = {4, 1, 6, 2}, brr7 = {3, 5, 2, 4};\n    cout << chocolateDistribution(4, 4, arr7, brr7) << endl;\n\n    // Test input 8: N=3, M=5, arr=[10, 20, 30], brr=[15, 25, 35, 5, 0]\n    vector<int> arr8 = {10, 20, 30}, brr8 = {15, 25, 35, 5, 0};\n    cout << chocolateDistribution(3, 5, arr8, brr8) << endl;\n\n    // Test input 9: N=3, M=3, arr=[1, 2, 2], brr=[2, 2, 3]\n    vector<int> arr9 = {1, 2, 2}, brr9 = {2, 2, 3};\n    cout << chocolateDistribution(3, 3, arr9, brr9) << endl;\n\n    // Test input 10: N=4, M=4, arr=[0, 1, 2, 3], brr=[3, 2, 1, 0]\n    vector<int> arr10 = {0, 1, 2, 3}, brr10 = {3, 2, 1, 0};\n    cout << chocolateDistribution(4, 4, arr10, brr10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minElements.cpp", "source_code_str": "    int minElements(int n, int m, vector<int> &arr1, vector<int> &arr2) {\n        long long s=0;\n        for (auto j:arr1) s+=j;\n        sort(arr2.begin(),arr2.end());\n        long long cur=0;\n        int ans=0;\n        for (int i=m-1;i>=0;i--){\n            cur+=arr2[i];\n            ans+=1;\n            if (cur>=s)break;\n        }\n        if (cur>=s) return ans;\n        return -1;\n    }", "source_code_block": "", "target_Lan": "java###minElements_Test.java", "reference_code": "    public static int minElements(int n, int m, int[] arr1, int[] arr2) {\n        long sum = 0;\n        \n        for (int num : arr1) {\n            sum += num;\n        }\n        Arrays.sort(arr2); \n        long currentSum = 0;\n        int count = 0;\n        \n        for (int i = m - 1; i >= 0; i--) {\n            currentSum += arr2[i];\n            count++;\n            \n            if (currentSum >= sum) {\n                break;\n            }\n        }\n        \n        return currentSum >= sum ? count : -1;\n    }", "target_method_signature": "minElements", "source_method_signature": "minElements", "target_allMS": "    public static int minElements(int n, int m, int[] arr1, int[] arr2) {", "source_allMS": "    int minElements(int n, int m, vector<int> &arr1, vector<int> &arr2) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minElements_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minElements(0, 0, new int[]{}, new int[]{})); // Case with empty arrays\n        System.out.println(minElements(3, 3, new int[]{1, 2, 3}, new int[]{1, 2, 3})); // Exact match\n        System.out.println(minElements(2, 4, new int[]{4, 5}, new int[]{1, 2, 3, 7})); // Should return 1(element 7)\n        System.out.println(minElements(3, 5, new int[]{1, 2, 2}, new int[]{4, 5, 6, 1, 1})); // One element needed\n        System.out.println(minElements(3, 4, new int[]{10, 15, 5}, new int[]{1, 1, 1, 1})); // Not possible\n        System.out.println(minElements(4, 6, new int[]{5, 10, 15, 20}, new int[]{5, 10, 15, 20, 30, 50})); // Sufficient from multiple options\n        System.out.println(minElements(5, 5, new int[]{1, 1, 1, 1}, new int[]{1, 1, 1, 1, 10})); // Test with duplicates\n        System.out.println(minElements(2, 3, new int[]{20, 30}, new int[]{10, 10, 5})); // Should return -1\n        System.out.println(minElements(3, 2, new int[]{100, 150, 50}, new int[]{200, 100})); // Test for larger numbers\n    }\n}", "all_input_output_value": "\ninput1: n=0, m=0, arr1=[], arr2=[]\noutput1: 0\n--------\ninput2: n=3, m=3, arr1=[1, 2, 3], arr2=[1, 2, 3]\noutput2: 3\n--------\ninput3: n=2, m=4, arr1=[4, 5], arr2=[1, 2, 3, 7]\noutput3: 2\n--------\ninput4: n=3, m=5, arr1=[1, 2, 2], arr2=[4, 5, 6, 1, 1]\noutput4: 1\n--------\ninput5: n=3, m=4, arr1=[10, 15, 5], arr2=[1, 1, 1, 1]\noutput5: -1\n--------\ninput6: n=4, m=6, arr1=[5, 10, 15, 20], arr2=[5, 10, 15, 20, 30, 50]\noutput6: 1\n--------\ninput7: n=5, m=5, arr1=[1, 1, 1, 1], arr2=[1, 1, 1, 1, 10]\noutput7: 1\n--------\ninput8: n=2, m=3, arr1=[20, 30], arr2=[10, 10, 5]\noutput8: -1\n--------\ninput9: n=3, m=2, arr1=[100, 150, 50], arr2=[200, 100]\noutput9: 2\n", "input_output_value": ["\ninput1: n=0, m=0, arr1=[], arr2=[]\noutput1: 0\n", "\ninput2: n=3, m=3, arr1=[1, 2, 3], arr2=[1, 2, 3]\noutput2: 3\n", "\ninput3: n=2, m=4, arr1=[4, 5], arr2=[1, 2, 3, 7]\noutput3: 2\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> arr1_0 = {};\n    vector<int> arr2_0 = {};\n    cout << minElements(0, 0, arr1_0, arr2_0) << endl;\n\n    vector<int> arr1_1 = {1, 2, 3};\n    vector<int> arr2_1 = {1, 2, 3};\n    cout << minElements(3, 3, arr1_1, arr2_1) << endl;\n\n    vector<int> arr1_2 = {4, 5};\n    vector<int> arr2_2 = {1, 2, 3, 7};\n    cout << minElements(2, 4, arr1_2, arr2_2) << endl;\n\n    vector<int> arr1_3 = {1, 2, 2};\n    vector<int> arr2_3 = {4, 5, 6, 1, 1};\n    cout << minElements(3, 5, arr1_3, arr2_3) << endl;\n\n    vector<int> arr1_4 = {10, 15, 5};\n    vector<int> arr2_4 = {1, 1, 1, 1};\n    cout << minElements(3, 4, arr1_4, arr2_4) << endl;\n\n    vector<int> arr1_5 = {5, 10, 15, 20};\n    vector<int> arr2_5 = {5, 10, 15, 20, 30, 50};\n    cout << minElements(4, 6, arr1_5, arr2_5) << endl;\n\n    vector<int> arr1_6 = {1, 1, 1, 1};\n    vector<int> arr2_6 = {1, 1, 1, 1, 10};\n    cout << minElements(5, 5, arr1_6, arr2_6) << endl;\n\n    vector<int> arr1_7 = {20, 30};\n    vector<int> arr2_7 = {10, 10, 5};\n    cout << minElements(2, 3, arr1_7, arr2_7) << endl;\n\n    vector<int> arr1_8 = {100, 150, 50};\n    vector<int> arr2_8 = {200, 100};\n    cout << minElements(3, 2, arr1_8, arr2_8) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###canTrade.cpp", "source_code_str": "    vector<int> canTrade(int n, vector<int>& beautifulness, int q,\n                         vector<vector<int>>& queries) {\n        int prev = beautifulness[0];\n        beautifulness[0] = 0;\n        for (int i = 1; i < n; i++) {\n            int curr = beautifulness[i];\n            if (beautifulness[i] == prev)\n                beautifulness[i] = beautifulness[i - 1];\n            else\n                beautifulness[i] = i;\n            prev = curr;\n        }\n        vector<int> ans(q);\n        for (int i = 0; i < q; i++) {\n            int u = queries[i][0], v = queries[i][1];\n            u--;\n            v--;\n            if (beautifulness[v] <= u)\n                ans[i] = 1;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###canTrade_Test.java", "reference_code": "    public static int[] canTrade(int n, int[] beautifulness, int q, int[][] queries) {\n        int prev = beautifulness[0];\n        beautifulness[0] = 0;\n        for (int i = 1; i < n; i++) {\n            int curr = beautifulness[i];\n            if (beautifulness[i] == prev) {\n                beautifulness[i] = beautifulness[i - 1];\n            } else {\n                beautifulness[i] = i;\n            }\n            prev = curr;\n        }\n        int[] ans = new int[q];\n        for (int i = 0; i < q; i++) {\n            int u = queries[i][0] - 1, v = queries[i][1] - 1;\n            ans[i] = beautifulness[v] <= u ? 1 : 0;\n        }\n        return ans;\n    }", "target_method_signature": "canTrade", "source_method_signature": "canTrade", "target_allMS": "    public static int[] canTrade(int n, int[] beautifulness, int q, int[][] queries) {", "source_allMS": "    vector<int> canTrade(int n, vector<int>& beautifulness, int q,", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class canTrade_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] result1 = canTrade(1, new int[]{5}, 1, new int[][]{{1, 1}}); // Single element case\n        System.out.println(Arrays.toString(result1));\n\n        int[] result2 = canTrade(5, new int[]{1, 1, 1, 2, 3}, 2, new int[][]{{1, 3}, {2, 4}}); // All same, and then different\n        System.out.println(Arrays.toString(result2));\n\n        int[] result3 = canTrade(3, new int[]{3, 2, 2}, 1, new int[][]{{2, 3}}); // Repeating values in the middle\n        System.out.println(Arrays.toString(result3));\n\n        int[] result4 = canTrade(5, new int[]{0, 1, 0, 1, 0}, 1, new int[][]{{1, 5}}); // Alternating values\n        System.out.println(Arrays.toString(result4));\n\n        int[] result5 = canTrade(4, new int[]{4, 4, 4, 4}, 3, new int[][]{{1, 2}, {3, 4}, {1, 4}}); // All same\n        System.out.println(Arrays.toString(result5));\n\n        int[] result6 = canTrade(6, new int[]{10, 20, 30, 20, 10, 10}, 1, new int[][]{{1, 6}}); // Peaks and valleys\n        System.out.println(Arrays.toString(result6));\n\n        int[] result7 = canTrade(5, new int[]{5, 10, 15, 20, 25}, 2, new int[][]{{1, 5}, {1, 3}}); // Increasing values\n        System.out.println(Arrays.toString(result7));\n\n        int[] result8 = canTrade(3, new int[]{1, 5, 3}, 1, new int[][]{{1, 2}}); // Mixed values\n        System.out.println(Arrays.toString(result8));\n\n        int[] result9 = canTrade(4, new int[]{10, 20, 20, 30}, 1, new int[][]{{2, 3}}); // Duplicate in the middle\n        System.out.println(Arrays.toString(result9));\n\n        int[] result10 = canTrade(5, new int[]{2, 2, 5, 2, 2}, 1, new int[][]{{3, 5}}); // Middle value different\n        System.out.println(Arrays.toString(result10));\n    }\n}", "all_input_output_value": "\ninput1: n=1, beautifulness=[5], q=1, queries=[[1, 1]]\noutput1: [1]\n--------\ninput2: n=5, beautifulness=[1, 1, 1, 2, 3], q=2, queries=[[1, 3], [2, 4]]\noutput2: [1, 0]\n--------\ninput3: n=3, beautifulness=[3, 2, 2], q=1, queries=[[2, 3]]\noutput3: [1]\n--------\ninput4: n=5, beautifulness=[0, 1, 0, 1, 0], q=1, queries=[[1, 5]]\noutput4: [0]\n--------\ninput5: n=4, beautifulness=[4, 4, 4, 4], q=3, queries=[[1, 2], [3, 4], [1, 4]]\noutput5: [1, 1, 1]\n--------\ninput6: n=6, beautifulness=[10, 20, 30, 20, 10, 10], q=1, queries=[[1, 6]]\noutput6: [0]\n--------\ninput7: n=5, beautifulness=[5, 10, 15, 20, 25], q=2, queries=[[1, 5], [1, 3]]\noutput7: [0, 0]\n--------\ninput8: n=3, beautifulness=[1, 5, 3], q=1, queries=[[1, 2]]\noutput8: [0]\n--------\ninput9: n=4, beautifulness=[10, 20, 20, 30], q=1, queries=[[2, 3]]\noutput9: [1]\n--------\ninput10: n=5, beautifulness=[2, 2, 5, 2, 2], q=1, queries=[[3, 5]]\noutput10: [0]\n", "input_output_value": ["\ninput1: n=1, beautifulness=[5], q=1, queries=[[1, 1]]\noutput1: [1]\n", "\ninput2: n=5, beautifulness=[1, 1, 1, 2, 3], q=2, queries=[[1, 3], [2, 4]]\noutput2: [1, 0]\n", "\ninput3: n=3, beautifulness=[3, 2, 2], q=1, queries=[[2, 3]]\noutput3: [1]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> beautifulness1 = {5};\n    vector<vector<int>> queries1 = {{1, 1}};\n    vector<int> result1 = canTrade(1, beautifulness1, 1, queries1);\n    for(int res : result1) cout << res << endl;\n\n    vector<int> beautifulness2 = {1, 1, 1, 2, 3};\n    vector<vector<int>> queries2 = {{1, 3}, {2, 4}};\n    vector<int> result2 = canTrade(5, beautifulness2, 2, queries2);\n    for(int res : result2) cout << res << endl;\n\n    vector<int> beautifulness3 = {3, 2, 2};\n    vector<vector<int>> queries3 = {{2, 3}};\n    vector<int> result3 = canTrade(3, beautifulness3, 1, queries3);\n    for(int res : result3) cout << res << endl;\n\n    vector<int> beautifulness4 = {0, 1, 0, 1, 0};\n    vector<vector<int>> queries4 = {{1, 5}};\n    vector<int> result4 = canTrade(5, beautifulness4, 1, queries4);\n    for(int res : result4) cout << res << endl;\n\n    vector<int> beautifulness5 = {4, 4, 4, 4};\n    vector<vector<int>> queries5 = {{1, 2}, {3, 4}, {1, 4}};\n    vector<int> result5 = canTrade(4, beautifulness5, 3, queries5);\n    for(int res : result5) cout << res << endl;\n\n    vector<int> beautifulness6 = {10, 20, 30, 20, 10, 10};\n    vector<vector<int>> queries6 = {{1, 6}};\n    vector<int> result6 = canTrade(6, beautifulness6, 1, queries6);\n    for(int res : result6) cout << res << endl;\n\n    vector<int> beautifulness7 = {5, 10, 15, 20, 25};\n    vector<vector<int>> queries7 = {{1, 5}, {1, 3}};\n    vector<int> result7 = canTrade(5, beautifulness7, 2, queries7);\n    for(int res : result7) cout << res << endl;\n\n    vector<int> beautifulness8 = {1, 5, 3};\n    vector<vector<int>> queries8 = {{1, 2}};\n    vector<int> result8 = canTrade(3, beautifulness8, 1, queries8);\n    for(int res : result8) cout << res << endl;\n\n    vector<int> beautifulness9 = {10, 20, 20, 30};\n    vector<vector<int>> queries9 = {{2, 3}};\n    vector<int> result9 = canTrade(4, beautifulness9, 1, queries9);\n    for(int res : result9) cout << res << endl;\n\n    vector<int> beautifulness10 = {2, 2, 5, 2, 2};\n    vector<vector<int>> queries10 = {{3, 5}};\n    vector<int> result10 = canTrade(5, beautifulness10, 1, queries10);\n    for(int res : result10) cout << res << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumOperationsToMakeKPeriodic.cpp", "source_code_str": "    int minimumOperationsToMakeKPeriodic(string word, int k) {\n        int n = word.size(), mx = 0;\n        unordered_map<string, int> cnt;\n        for (int i = k; i <= n; i += k) {\n            mx = max(mx, ++cnt[word.substr(i - k, k)]);\n        }\n        return n / k - mx;\n    }", "source_code_block": "", "target_Lan": "java###minimumOperationsToMakeKPeriodic_Test.java", "reference_code": "    public static int minimumOperationsToMakeKPeriodic(String word, int k) {\n        int n = word.length();\n        int mx = 0;\n        HashMap<String, Integer> cnt = new HashMap<>();\n        for (int i = k; i <= n; i += k) {\n            String sub = word.substring(i - k, i);\n            int c = cnt.merge(sub, 1, Integer::sum); \n            mx = Math.max(mx, c);\n        }\n        return n / k - mx;\n    }", "target_method_signature": "minimumOperationsToMakeKPeriodic", "source_method_signature": "minimumOperationsToMakeKPeriodic", "target_allMS": "    public static int minimumOperationsToMakeKPeriodic(String word, int k) {", "source_allMS": "    int minimumOperationsToMakeKPeriodic(string word, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\npublic class minimumOperationsToMakeKPeriodic_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumOperationsToMakeKPeriodic(\"abc\", 2));             // expected output: 1\n        System.out.println(minimumOperationsToMakeKPeriodic(\"abababab\", 4));       // expected output: 0\n        System.out.println(minimumOperationsToMakeKPeriodic(\"aaaaaa\", 3));         // expected output: 2\n        System.out.println(minimumOperationsToMakeKPeriodic(\"\", 1));               // expected output: 0\n        System.out.println(minimumOperationsToMakeKPeriodic(\"a\", 1));              // expected output: 0\n        System.out.println(minimumOperationsToMakeKPeriodic(\"abcdefgh\", 2));      // expected output: 4\n        System.out.println(minimumOperationsToMakeKPeriodic(\"thisisaverylongword\", 25)); // expected output: 1\n        System.out.println(minimumOperationsToMakeKPeriodic(\"xyz\", 3));           // expected output: 0\n        System.out.println(minimumOperationsToMakeKPeriodic(\"dddddddddddddddddd\", 16)); // expected output: 1\n        System.out.println(minimumOperationsToMakeKPeriodic(\"abcdefg\", 1));       // expected output: 6\n    }\n}", "all_input_output_value": "\ninput1: word=\"abc\", k=2\noutput1: 1\n--------\ninput2: word=\"abababab\", k=4\noutput2: 0\n--------\ninput3: word=\"aaaaaa\", k=3\noutput3: 2\n--------\ninput4: word=\"\", k=1\noutput4: 0\n--------\ninput5: word=\"a\", k=1\noutput5: 0\n--------\ninput6: word=\"abcdefgh\", k=2\noutput6: 4\n--------\ninput7: word=\"thisisaverylongword\", k=25\noutput7: 1\n--------\ninput8: word=\"xyz\", k=3\noutput8: 0\n--------\ninput9: word=\"dddddddddddddddddd\", k=16\noutput9: 1\n--------\ninput10: word=\"abcdefg\", k=1\noutput10: 6\n", "input_output_value": ["\ninput1: word=\"abc\", k=2\noutput1: 1\n", "\ninput2: word=\"abababab\", k=4\noutput2: 0\n", "\ninput3: word=\"aaaaaa\", k=3\noutput3: 2\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <unordered_map>\n#include <string>\n// TOFILL\nint main() {\n    cout << minimumOperationsToMakeKPeriodic(\"abc\", 2) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"abababab\", 4) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"aaaaaa\", 3) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"\", 1) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"a\", 1) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"abcdefgh\", 2) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"thisisaverylongword\", 25) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"xyz\", 3) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"dddddddddddddddddd\", 16) << endl;\n    cout << minimumOperationsToMakeKPeriodic(\"abcdefg\", 1) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumSubarraySum.cpp", "source_code_str": "    long long maximumSubarraySum(vector<int> &nums, int k) {\n        long long ans = LLONG_MIN, sum = 0;\n        unordered_map<int, long long> min_s;\n        for (int x: nums) {\n            auto it = min_s.find(x + k);\n            if (it != min_s.end()) {\n                ans = max(ans, sum + x - it->second);\n            }\n            it = min_s.find(x - k);\n            if (it != min_s.end()) {\n                ans = max(ans, sum + x - it->second);\n            }\n            it = min_s.find(x);\n            if (it == min_s.end() || sum < it->second) {\n                min_s[x] = sum;\n            }\n            sum += x;\n        }\n        return ans == LLONG_MIN ? 0 : ans;\n    }", "source_code_block": "", "target_Lan": "java###maximumSubarraySum_Test.java", "reference_code": "    public static long maximumSubarraySum(int[] nums, int k) {\n        long ans = Long.MIN_VALUE;\n        long sum = 0;\n        Map<Integer, Long> minS = new HashMap<>();\n        for (int x : nums) {\n            long s1 = minS.getOrDefault(x - k, Long.MAX_VALUE / 2);\n            long s2 = minS.getOrDefault(x + k, Long.MAX_VALUE / 2);\n            ans = Math.max(ans, sum + x - Math.min(s1, s2));\n            minS.merge(x, sum, Math::min);\n            sum += x;\n        }\n        return ans > Long.MIN_VALUE / 4 ? ans : 0;\n    }", "target_method_signature": "maximumSubarraySum", "source_method_signature": "maximumSubarraySum", "target_allMS": "    public static long maximumSubarraySum(int[] nums, int k) {", "source_allMS": "    long long maximumSubarraySum(vector<int> &nums, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maximumSubarraySum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumSubarraySum(new int[]{}, 1)); // Test with an empty array\n        System.out.println(maximumSubarraySum(new int[]{1, 2, 3}, 1)); // Simple case with small positive integers\n        System.out.println(maximumSubarraySum(new int[]{-1, -2, -3}, 2)); // All negative numbers to check negative sums\n        System.out.println(maximumSubarraySum(new int[]{5, 5, 5, 5}, 0)); // Test with identical positive integers and k=0\n        System.out.println(maximumSubarraySum(new int[]{1, -1, 2, -2}, 1)); // Alternating positive and negative values\n        System.out.println(maximumSubarraySum(new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE}, 1000)); // Large values to test overflow\n        System.out.println(maximumSubarraySum(new int[]{1, 2, 3, 4, 5}, 3)); // A case where sums will be larger\n        System.out.println(maximumSubarraySum(new int[]{-5, 5, -10, 10}, 5)); // Mix of negatives and positives\n        System.out.println(maximumSubarraySum(new int[]{3, 1, 4, 1, 5}, 10)); // Large k that won't affect elements\n        System.out.println(maximumSubarraySum(new int[]{10, -5, 5, 10, -1}, 5)); // Mixed values to check various scenarios\n    }\n}", "all_input_output_value": "\ninput1: nums=[], k=1\noutput1: 0\n--------\ninput2: nums=[1, 2, 3], k=1\noutput2: 5\n--------\ninput3: nums=[-1, -2, -3], k=2\noutput3: -6\n--------\ninput4: nums=[5, 5, 5, 5], k=0\noutput4: 20\n--------\ninput5: nums=[1, -1, 2, -2], k=1\noutput5: 2\n--------\ninput6: nums=[Integer.MAX_VALUE, Integer.MAX_VALUE], k=1000\noutput6: 0\n--------\ninput7: nums=[1, 2, 3, 4, 5], k=3\noutput7: 14\n--------\ninput8: nums=[-5, 5, -10, 10], k=5\noutput8: 5\n--------\ninput9: nums=[3, 1, 4, 1, 5], k=10\noutput9: 0\n--------\ninput10: nums=[10, -5, 5, 10, -1], k=5\noutput10: 15\n", "input_output_value": ["\ninput1: nums=[], k=1\noutput1: 0\n", "\ninput2: nums=[1, 2, 3], k=1\noutput2: 5\n", "\ninput3: nums=[-1, -2, -3], k=2\noutput3: -6\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\n// TOFILL\nint main() {\n    vector<int> nums1 = {};\n    cout << maximumSubarraySum(nums1, 1) << endl;\n\n    vector<int> nums2 = {1, 2, 3};\n    cout << maximumSubarraySum(nums2, 1) << endl;\n\n    vector<int> nums3 = {-1, -2, -3};\n    cout << maximumSubarraySum(nums3, 2) << endl;\n\n    vector<int> nums4 = {5, 5, 5, 5};\n    cout << maximumSubarraySum(nums4, 0) << endl;\n\n    vector<int> nums5 = {1, -1, 2, -2};\n    cout << maximumSubarraySum(nums5, 1) << endl;\n\n    vector<int> nums6 = {INT_MAX, INT_MAX};\n    cout << maximumSubarraySum(nums6, 1000) << endl;\n\n    vector<int> nums7 = {1, 2, 3, 4, 5};\n    cout << maximumSubarraySum(nums7, 3) << endl;\n\n    vector<int> nums8 = {-5, 5, -10, 10};\n    cout << maximumSubarraySum(nums8, 5) << endl;\n\n    vector<int> nums9 = {3, 1, 4, 1, 5};\n    cout << maximumSubarraySum(nums9, 10) << endl;\n\n    vector<int> nums10 = {10, -5, 5, 10, -1};\n    cout << maximumSubarraySum(nums10, 5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumDistance.cpp", "source_code_str": "    int minimumDistance(vector<vector<int>>& points) {\n        multiset<int> sx, sy;\n        for (auto & p : points) {\n            sx.emplace(p[0] - p[1]);\n            sy.emplace(p[0] + p[1]);\n        }\n        int res = INT_MAX;\n        for (auto &p : points) {\n            sx.erase(sx.find(p[0] - p[1]));\n            sy.erase(sy.find(p[0] + p[1]));\n            res = min(res, max(*sx.rbegin() - *sx.begin(), *sy.rbegin() - *sy.begin()));\n            sx.emplace(p[0] - p[1]);\n            sy.emplace(p[0] + p[1]);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###minimumDistance_Test.java", "reference_code": "    public static int minimumDistance(int[][] points) {\n        TreeMap<Integer, Integer> sx = new TreeMap<Integer, Integer>();\n        TreeMap<Integer, Integer> sy = new TreeMap<Integer, Integer>();\n        for (int[] p : points) {\n            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);\n            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);\n        }\n        int res = Integer.MAX_VALUE;\n        for (int[] p : points) {\n            sx.put(p[0] - p[1], sx.get(p[0] - p[1]) - 1);\n            if (sx.get(p[0] - p[1]) == 0) {\n                sx.remove(p[0] - p[1]);\n            }\n            sy.put(p[0] + p[1], sy.get(p[0] + p[1]) - 1);\n            if (sy.get(p[0] + p[1]) == 0) {\n                sy.remove(p[0] + p[1]);\n            }\n            res = Math.min(res, Math.max(sx.lastKey() - sx.firstKey(), sy.lastKey() - sy.firstKey()));\n            sx.put(p[0] - p[1], sx.getOrDefault(p[0] - p[1], 0) + 1);\n            sy.put(p[0] + p[1], sy.getOrDefault(p[0] + p[1], 0) + 1);\n        }\n        return res;\n    }", "target_method_signature": "minimumDistance", "source_method_signature": "minimumDistance", "target_allMS": "    public static int minimumDistance(int[][] points) {", "source_allMS": "    int minimumDistance(vector<vector<int>>& points) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.TreeMap;\npublic class minimumDistance_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{0, 0}, {0, 0}, {0, 0}};\n        int[][] input2 = {{1, 1}, {2, 2}, {3, 3}};\n        int[][] input3 = {{1, -1}, {-1, 1}, {2, 2}};\n        int[][] input4 = {{0, 1}, {1, 0}, {-1, -1}, {1, 1}};\n        int[][] input5 = {{10, 10}, {20, 20}, {30, 30}};\n        int[][] input6 = {{5, 5}, {5, 5}, {5, 5}, {-5, -5}};\n        int[][] input7 = {{0, 0}, {3, 0}, {0, 4}};\n        int[][] input8 = {{-1, -1}, {-1, 1}, {1, -1}, {1, 1}};\n        int[][] input9 = {{3, 3}, {4, 4}, {4, 3}, {3, 4}};\n        int[][] input10 = {{Integer.MAX_VALUE, Integer.MAX_VALUE}, {-Integer.MAX_VALUE, -Integer.MAX_VALUE}};\n        \n        System.out.println(minimumDistance(input1));\n        System.out.println(minimumDistance(input2));\n        System.out.println(minimumDistance(input3));\n        System.out.println(minimumDistance(input4));\n        System.out.println(minimumDistance(input5));\n        System.out.println(minimumDistance(input6));\n        System.out.println(minimumDistance(input7));\n        System.out.println(minimumDistance(input8));\n        System.out.println(minimumDistance(input9));\n        System.out.println(minimumDistance(input10));\n    }\n}", "all_input_output_value": "\ninput1: points=[[0, 0], [0, 0], [0, 0]]\noutput1: 0\n--------\ninput2: points=[[1, 1], [2, 2], [3, 3]]\noutput2: 2\n--------\ninput3: points=[[1, -1], [-1, 1], [2, 2]]\noutput3: 4\n--------\ninput4: points=[[0, 1], [1, 0], [-1, -1], [1, 1]]\noutput4: 2\n--------\ninput5: points=[[10, 10], [20, 20], [30, 30]]\noutput5: 20\n--------\ninput6: points=[[5, 5], [5, 5], [5, 5], [-5, -5]]\noutput6: 0\n--------\ninput7: points=[[0, 0], [3, 0], [0, 4]]\noutput7: 3\n--------\ninput8: points=[[-1, -1], [-1, 1], [1, -1], [1, 1]]\noutput8: 4\n--------\ninput9: points=[[3, 3], [4, 4], [4, 3], [3, 4]]\noutput9: 2\n--------\ninput10: points=[[Integer.MAX_VALUE, Integer.MAX_VALUE], [-Integer.MAX_VALUE, -Integer.MAX_VALUE]]\noutput10: 0\n", "input_output_value": ["\ninput1: points=[[0, 0], [0, 0], [0, 0]]\noutput1: 0\n", "\ninput2: points=[[1, 1], [2, 2], [3, 3]]\noutput2: 2\n", "\ninput3: points=[[1, -1], [-1, 1], [2, 2]]\noutput3: 4\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <set>\n#include <climits>\n// TOFILL\nint main() {\n    vector<vector<int>> input1 = {{0, 0}, {0, 0}, {0, 0}};\n    vector<vector<int>> input2 = {{1, 1}, {2, 2}, {3, 3}};\n    vector<vector<int>> input3 = {{1, -1}, {-1, 1}, {2, 2}};\n    vector<vector<int>> input4 = {{0, 1}, {1, 0}, {-1, -1}, {1, 1}};\n    vector<vector<int>> input5 = {{10, 10}, {20, 20}, {30, 30}};\n    vector<vector<int>> input6 = {{5, 5}, {5, 5}, {5, 5}, {-5, -5}};\n    vector<vector<int>> input7 = {{0, 0}, {3, 0}, {0, 4}};\n    vector<vector<int>> input8 = {{-1, -1}, {-1, 1}, {1, -1}, {1, 1}};\n    vector<vector<int>> input9 = {{3, 3}, {4, 4}, {4, 3}, {3, 4}};\n    vector<vector<int>> input10 = {{INT_MAX, INT_MAX}, {-INT_MAX, -INT_MAX}};\n\n    cout << minimumDistance(input1) << endl;\n    cout << minimumDistance(input2) << endl;\n    cout << minimumDistance(input3) << endl;\n    cout << minimumDistance(input4) << endl;\n    cout << minimumDistance(input5) << endl;\n    cout << minimumDistance(input6) << endl;\n    cout << minimumDistance(input7) << endl;\n    cout << minimumDistance(input8) << endl;\n    cout << minimumDistance(input9) << endl;\n    cout << minimumDistance(input10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###goodSubsetofBinaryMatrix.cpp", "source_code_str": "    vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {\n        vector<int> ans;\n        unordered_map<int, int> mp;\n        int m = grid.size();\n        int n = grid[0].size();\n        for (int j = 0; j < m; j++) {\n            int st = 0;\n            for (int i = 0; i < n; i++) {\n                st |= (grid[j][i] << i);\n            }\n            mp[st] = j;\n        }\n        if (mp.count(0)) {\n            ans.push_back(mp[0]);\n            return ans;\n        }\n        for (auto [x, i]: mp) {\n            for (auto [y, j]: mp) {\n                if (!(x & y)) {\n                    return {min(i, j), max(i, j)};\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###goodSubsetofBinaryMatrix_Test.java", "reference_code": "    public static List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {\n        List<Integer> ans = new ArrayList<Integer>();\n        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();\n        int m = grid.length;\n        int n = grid[0].length;\n        for (int j = 0; j < m; j++) {\n            int st = 0;\n            for (int i = 0; i < n; i++) {\n                st |= (grid[j][i] << i);\n            }\n            mp.put(st, j);\n        }\n        if (mp.containsKey(0)) {\n            ans.add(mp.get(0));\n            return ans;\n        }\n        for (Map.Entry<Integer, Integer> entry1 : mp.entrySet()) {\n            int x = entry1.getKey(), i = entry1.getValue();\n            for (Map.Entry<Integer, Integer> entry2 : mp.entrySet()) {\n                int y = entry2.getKey(), j = entry2.getValue();\n                if ((x & y) == 0) {\n                    List<Integer> list = new ArrayList<Integer>();\n                    list.add(Math.min(i, j));\n                    list.add(Math.max(i, j));\n                    return list;\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "goodSubsetofBinaryMatrix", "source_method_signature": "goodSubsetofBinaryMatrix", "target_allMS": "    public static List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {", "source_allMS": "    vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\npublic class goodSubsetofBinaryMatrix_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 1, 0, 0}, {0, 0, 0, 0}};\n        int[][] input2 = {{1, 0}, {0, 1}};\n        int[][] input3 = {{1, 1, 1, 1}};\n        int[][] input4 = {{0, 0, 0, 1}};\n        int[][] input5 = {{1, 1, 0, 1}};\n        int[][] input6 = {};\n\n        System.out.println(goodSubsetofBinaryMatrix(input1));\n        System.out.println(goodSubsetofBinaryMatrix(input2));\n        System.out.println(goodSubsetofBinaryMatrix(input3));\n        System.out.println(goodSubsetofBinaryMatrix(input4));\n        System.out.println(goodSubsetofBinaryMatrix(input5));\n    }\n}", "all_input_output_value": "\ninput1: grid={{1, 1, 0, 0}, {0, 0, 0, 0}}\noutput1: [1]\n--------\ninput2: grid={{1, 0}, {0, 1}}\noutput2: [0, 1]\n--------\ninput3: grid={{1, 1, 1, 1}}\noutput3: []\n--------\ninput4: grid={{0, 0, 0, 1}}\noutput4: []\n--------\ninput5: grid={{1, 1, 0, 1}}\noutput5: []\n", "input_output_value": ["\ninput1: grid={{1, 1, 0, 0}, {0, 0, 0, 0}}\noutput1: [1]\n", "\ninput2: grid={{1, 0}, {0, 1}}\noutput2: [0, 1]\n", "\ninput3: grid={{1, 1, 1, 1}}\noutput3: []\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<vector<int>> input1 = {{1, 1, 0, 0}, {0, 0, 0, 0}};\n    vector<vector<int>> input2 = {{1, 0}, {0, 1}};\n    vector<vector<int>> input3 = {{1, 1, 1, 1}};\n    vector<vector<int>> input4 = {{0, 0, 0, 1}};\n    vector<vector<int>> input5 = {{1, 1, 0, 1}};\n    \n    vector<int> result1 = goodSubsetofBinaryMatrix(input1);\n    vector<int> result2 = goodSubsetofBinaryMatrix(input2);\n    vector<int> result3 = goodSubsetofBinaryMatrix(input3);\n    vector<int> result4 = goodSubsetofBinaryMatrix(input4);\n    vector<int> result5 = goodSubsetofBinaryMatrix(input5);\n    \n    for(int i : result1) cout << i << \" \";\n    cout << endl;\n    \n    for(int i : result2) cout << i << \" \";\n    cout << endl;\n    \n    for(int i : result3) cout << i << \" \";\n    cout << endl;\n    \n    for(int i : result4) cout << i << \" \";\n    cout << endl;\n    \n    for(int i : result5) cout << i << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###findMaximumElegance.cpp", "source_code_str": "    long long findMaximumElegance(vector<vector<int>>& items, int k) {\n        sort(items.begin(), items.end(), [&](const vector<int> &item1, const vector<int> &item2) -> bool {\n            return item1[0] > item2[0];\n        });\n        unordered_set<int> categorySet;\n        long long res = 0, profit = 0;\n        stack<int> st;\n        for (int i = 0; i < items.size(); i++) {\n            if (i < k) {\n                profit += items[i][0];\n                if (categorySet.count(items[i][1]) == 0) {\n                    categorySet.insert(items[i][1]);\n                } else {\n                    st.push(items[i][0]);\n                }\n            } else if (categorySet.count(items[i][1]) == 0 && !st.empty()) {\n                profit += items[i][0] - st.top();\n                st.pop();\n                categorySet.insert(items[i][1]);\n            }\n            res = max(res, (long long)(profit + categorySet.size() * categorySet.size()));\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###findMaximumElegance_Test.java", "reference_code": "    public static long findMaximumElegance(int[][] items, int k) {\n        Arrays.sort(items, (item0, item1) -> item1[0] - item0[0]);\n        var categorySet = new HashSet<Integer>();\n        long profit = 0, res = 0;\n        var st = new ArrayDeque<Integer>();\n        for (int i = 0; i < items.length; i++) {\n            if (i < k) {\n                profit += items[i][0];\n                if (!categorySet.add(items[i][1])) {\n                    st.push(items[i][0]);\n                }\n            } else if (!st.isEmpty() && categorySet.add(items[i][1])) {\n                profit += items[i][0] - st.pop();\n            }\n            res = Math.max(res, profit + (long)categorySet.size() * categorySet.size());\n        }\n        return res;\n    }", "target_method_signature": "findMaximumElegance", "source_method_signature": "findMaximumElegance", "target_allMS": "    public static long findMaximumElegance(int[][] items, int k) {", "source_allMS": "    long long findMaximumElegance(vector<vector<int>>& items, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.ArrayDeque;\npublic class findMaximumElegance_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findMaximumElegance(new int[][]{{1, 1}, {2, 2}, {3, 3}}, 2)); // Test input 1\n        System.out.println(findMaximumElegance(new int[][]{{5, 1}, {5, 1}, {5, 1}}, 3)); // Test input 2\n        System.out.println(findMaximumElegance(new int[][]{{10, 1}, {5, 2}, {15, 1}, {10, 3}}, 2)); // Test input 3\n        System.out.println(findMaximumElegance(new int[][]{{2, 1}, {3, 2}, {4, 3}, {5, 4}}, 0)); // Test input 4\n        System.out.println(findMaximumElegance(new int[][]{{1, 1}, {2, 1}, {3, 3}, {4, 2}}, 3)); // Test input 5\n        System.out.println(findMaximumElegance(new int[][]{{8, 1}, {6, 2}, {4, 3}, {12, 1}}, 2)); // Test input 6\n        System.out.println(findMaximumElegance(new int[][]{{10, 1}, {25, 2}, {5, 1}}, 1)); // Test input 7\n        System.out.println(findMaximumElegance(new int[][]{{20, 1}, {10, 1}, {15, 2}}, 2)); // Test input 8\n        System.out.println(findMaximumElegance(new int[][]{{5, 2}, {10, 2}, {15, 1}}, 2)); // Test input 9\n        System.out.println(findMaximumElegance(new int[][]{{1, 2}}, 1)); // Test input 10\n    }\n}", "all_input_output_value": "\ninput1: items=[[1, 1], [2, 2], [3, 3]], k=2\noutput1: 9\n--------\ninput2: items=[[5, 1], [5, 1], [5, 1]], k=3\noutput2: 16\n--------\ninput3: items=[[10, 1], [5, 2], [15, 1], [10, 3]], k=2\noutput3: 29\n--------\ninput4: items=[[2, 1], [3, 2], [4, 3], [5, 4]], k=0\noutput4: 0\n--------\ninput5: items=[[1, 1], [2, 1], [3, 3], [4, 2]], k=3\noutput5: 18\n--------\ninput6: items=[[8, 1], [6, 2], [4, 3], [12, 1]], k=2\noutput6: 22\n--------\ninput7: items=[[10, 1], [25, 2], [5, 1]], k=1\noutput7: 26\n--------\ninput8: items=[[20, 1], [10, 1], [15, 2]], k=2\noutput8: 39\n--------\ninput9: items=[[5, 2], [10, 2], [15, 1]], k=2\noutput9: 29\n--------\ninput10: items=[[1, 2]], k=1\noutput10: 2\n", "input_output_value": ["\ninput1: items=[[1, 1], [2, 2], [3, 3]], k=2\noutput1: 9\n", "\ninput2: items=[[5, 1], [5, 1], [5, 1]], k=3\noutput2: 16\n", "\ninput3: items=[[10, 1], [5, 2], [15, 1], [10, 3]], k=2\noutput3: 29\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <algorithm>\n#include <stack>\n// TOFILL\nint main() {\n    vector<vector<int>> items1 = {{1, 1}, {2, 2}, {3, 3}};\n    int k1 = 2;\n    cout << findMaximumElegance(items1, k1) << endl;\n    \n    vector<vector<int>> items2 = {{5, 1}, {5, 1}, {5, 1}};\n    int k2 = 3;\n    cout << findMaximumElegance(items2, k2) << endl;\n\n    vector<vector<int>> items3 = {{10, 1}, {5, 2}, {15, 1}, {10, 3}};\n    int k3 = 2;\n    cout << findMaximumElegance(items3, k3) << endl;\n\n    vector<vector<int>> items4 = {{2, 1}, {3, 2}, {4, 3}, {5, 4}};\n    int k4 = 0;\n    cout << findMaximumElegance(items4, k4) << endl;\n\n    vector<vector<int>> items5 = {{1, 1}, {2, 1}, {3, 3}, {4, 2}};\n    int k5 = 3;\n    cout << findMaximumElegance(items5, k5) << endl;\n\n    vector<vector<int>> items6 = {{8, 1}, {6, 2}, {4, 3}, {12, 1}};\n    int k6 = 2;\n    cout << findMaximumElegance(items6, k6) << endl;\n\n    vector<vector<int>> items7 = {{10, 1}, {25, 2}, {5, 1}};\n    int k7 = 1;\n    cout << findMaximumElegance(items7, k7) << endl;\n\n    vector<vector<int>> items8 = {{20, 1}, {10, 1}, {15, 2}};\n    int k8 = 2;\n    cout << findMaximumElegance(items8, k8) << endl;\n\n    vector<vector<int>> items9 = {{5, 2}, {10, 2}, {15, 1}};\n    int k9 = 2;\n    cout << findMaximumElegance(items9, k9) << endl;\n\n    vector<vector<int>> items10 = {{1, 2}};\n    int k10 = 1;\n    cout << findMaximumElegance(items10, k10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###totalCost.cpp", "source_code_str": "    long long totalCost(vector<int>& costs, int k, int candidates) {\n        int n = costs.size();\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;\n        int left = candidates - 1, right = n - candidates;\n        if (left + 1 < right) {\n            for (int i = 0; i <= left; ++i) {\n                q.emplace(costs[i], i);\n            }\n            for (int i = right; i < n; ++i) {\n                q.emplace(costs[i], i);\n            }\n        }\n        else {\n            for (int i = 0; i < n; ++i) {\n                q.emplace(costs[i], i);\n            }\n        }\n        long long ans = 0;\n        for (int _ = 0; _ < k; ++_) {\n            auto [cost, id] = q.top();\n            q.pop();\n            ans += cost;\n            if (left + 1 < right) {\n                if (id <= left) {\n                    ++left;\n                    q.emplace(costs[left], left);\n                }\n                else {\n                    --right;\n                    q.emplace(costs[right], right);\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###totalCost_Test.java", "reference_code": "    public static long totalCost(int[] costs, int k, int candidates) {\n        int n = costs.length;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);\n        int left = candidates - 1, right = n - candidates;\n        if (left + 1 < right) {\n            for (int i = 0; i <= left; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n            for (int i = right; i < n; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n        } else {\n            for (int i = 0; i < n; ++i) {\n                pq.offer(new int[]{costs[i], i});\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < k; ++i) {\n            int[] arr = pq.poll();\n            int cost = arr[0], id = arr[1];\n            ans += cost;\n            if (left + 1 < right) {\n                if (id <= left) {\n                    ++left;\n                    pq.offer(new int[]{costs[left], left});\n                } else {\n                    --right;\n                    pq.offer(new int[]{costs[right], right});\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "totalCost", "source_method_signature": "totalCost", "target_allMS": "    public static long totalCost(int[] costs, int k, int candidates) {", "source_allMS": "    long long totalCost(vector<int>& costs, int k, int candidates) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.PriorityQueue;\npublic class totalCost_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(totalCost(new int[]{}, 0, 0)); // Edge case: empty costs array with no candidates\n        System.out.println(totalCost(new int[]{5, 3, 2, 8}, 2, 2)); // Standard case with k within the range of costs\n        System.out.println(totalCost(new int[]{100, 200, 300, 400, 500}, 3, 5)); // All candidates eligible\n        System.out.println(totalCost(new int[]{10, 20, 30, 40, 50}, 3, 1)); // Only one candidate with higher k\n        System.out.println(totalCost(new int[]{1, 2, 3, 4, 5}, 1, 2)); // Testing minimum k\n        System.out.println(totalCost(new int[]{6, 7, 8, 9, 10, 2, 1}, 4, 3)); // Mixed costs with more k\n        System.out.println(totalCost(new int[]{2, 2, 2, 2}, 3, 2)); // All identical costs\n        System.out.println(totalCost(new int[]{10, 20, 30}, 3, 3)); // All elements in costs are selected\n        System.out.println(totalCost(new int[]{1000, 2000, 3000}, 2, 1)); // Higher cost values with limited candidates\n    }\n}", "all_input_output_value": "\ninput1: costs=[], k=0, candidates=0\noutput1: 0\n--------\ninput2: costs=[5, 3, 2, 8], k=2, candidates=2\noutput2: 5\n--------\ninput3: costs=[100, 200, 300, 400, 500], k=3, candidates=5\noutput3: 600\n--------\ninput4: costs=[10, 20, 30, 40, 50], k=3, candidates=1\noutput4: 60\n--------\ninput5: costs=[1, 2, 3, 4, 5], k=1, candidates=2\noutput5: 1\n--------\ninput6: costs=[6, 7, 8, 9, 10, 2, 1], k=4, candidates=3\noutput6: 16\n--------\ninput7: costs=[2, 2, 2, 2], k=3, candidates=2\noutput7: 6\n--------\ninput8: costs=[10, 20, 30], k=3, candidates=3\noutput8: 60\n--------\ninput9: costs=[1000, 2000, 3000], k=2, candidates=1\noutput9: 3000\n", "input_output_value": ["\ninput1: costs=[], k=0, candidates=0\noutput1: 0\n", "\ninput2: costs=[5, 3, 2, 8], k=2, candidates=2\noutput2: 5\n", "\ninput3: costs=[100, 200, 300, 400, 500], k=3, candidates=5\noutput3: 600\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    cout << totalCost(input1, 0, 0) << endl;\n\n    vector<int> input2 = {5, 3, 2, 8};\n    cout << totalCost(input2, 2, 2) << endl;\n\n    vector<int> input3 = {100, 200, 300, 400, 500};\n    cout << totalCost(input3, 3, 5) << endl;\n\n    vector<int> input4 = {10, 20, 30, 40, 50};\n    cout << totalCost(input4, 3, 1) << endl;\n\n    vector<int> input5 = {1, 2, 3, 4, 5};\n    cout << totalCost(input5, 1, 2) << endl;\n\n    vector<int> input6 = {6, 7, 8, 9, 10, 2, 1};\n    cout << totalCost(input6, 4, 3) << endl;\n\n    vector<int> input7 = {2, 2, 2, 2};\n    cout << totalCost(input7, 3, 2) << endl;\n\n    vector<int> input8 = {10, 20, 30};\n    cout << totalCost(input8, 3, 3) << endl;\n\n    vector<int> input9 = {1000, 2000, 3000};\n    cout << totalCost(input9, 2, 1) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###distinctIntegers.cpp", "source_code_str": "    int distinctIntegers(int n) {\n        vector<int> nums(n + 1);\n        nums[n] = 1;\n        for (int k = 0; k < n; k++) {\n            for (int x = 1; x <= n; x++) {\n                if (nums[x] == 0) {\n                    continue;\n                }\n                for (int i = 1; i <= n; i++) {\n                    if (x % i == 1) {\n                        nums[i] = 1;\n                    }\n                }\n            }\n        }\n        return accumulate(nums.begin(), nums.end(), 0);\n    }", "source_code_block": "", "target_Lan": "java###distinctIntegers_Test.java", "reference_code": "    public static int distinctIntegers(int n) {\n        int[] nums = new int[n + 1];\n        nums[n] = 1;\n        for (int k = 0; k < n; k++) {\n            for (int x = 1; x <= n; x++) {\n                if (nums[x] == 0) {\n                    continue;\n                }\n                for (int i = 1; i <= n; i++) {\n                    if (x % i == 1) {\n                        nums[i] = 1;\n                    }\n                }\n            }\n        }\n        return Arrays.stream(nums).sum();\n    }", "target_method_signature": "distinctIntegers", "source_method_signature": "distinctIntegers", "target_allMS": "    public static int distinctIntegers(int n) {", "source_allMS": "    int distinctIntegers(int n) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class distinctIntegers_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(distinctIntegers(0));\n        System.out.println(distinctIntegers(1));\n        System.out.println(distinctIntegers(2));\n        System.out.println(distinctIntegers(5));\n        System.out.println(distinctIntegers(10));\n        System.out.println(distinctIntegers(15));\n        System.out.println(distinctIntegers(20));\n        System.out.println(distinctIntegers(25));\n        System.out.println(distinctIntegers(50));\n        System.out.println(distinctIntegers(100));\n    }\n}", "all_input_output_value": "\ninput1: n=0\noutput1: 1\n--------\ninput2: n=1\noutput2: 1\n--------\ninput3: n=2\noutput3: 1\n--------\ninput4: n=5\noutput4: 4\n--------\ninput5: n=10\noutput5: 9\n--------\ninput6: n=15\noutput6: 14\n--------\ninput7: n=20\noutput7: 19\n--------\ninput8: n=25\noutput8: 24\n--------\ninput9: n=50\noutput9: 49\n--------\ninput10: n=100\noutput10: 99\n", "input_output_value": ["\ninput1: n=0\noutput1: 1\n", "\ninput2: n=1\noutput2: 1\n", "\ninput3: n=2\noutput3: 1\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <numeric>\n// TOFILL\nint main() {\n    cout << distinctIntegers(0) << endl;\n    cout << distinctIntegers(1) << endl;\n    cout << distinctIntegers(2) << endl;\n    cout << distinctIntegers(5) << endl;\n    cout << distinctIntegers(10) << endl;\n    cout << distinctIntegers(15) << endl;\n    cout << distinctIntegers(20) << endl;\n    cout << distinctIntegers(25) << endl;\n    cout << distinctIntegers(50) << endl;\n    cout << distinctIntegers(100) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumTime.cpp", "source_code_str": "    int minimumTime(vector<int>& nums1, vector<int>& nums2, int x) {\n        int n = nums1.size();\n        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n        vector<pair<int, int>> nums(n);\n        for (int i = 0; i < n; i++) {\n            nums[i] = {nums2[i], nums1[i]};\n        }\n        sort(nums.begin(), nums.end());\n        for (int j = 1; j <= n; j++) {\n            int b = nums[j - 1].first, a = nums[j - 1].second;\n            for (int i = j; i > 0; i--) {\n                dp[j][i] = max(dp[j - 1][i], dp[j - 1][i - 1] + i * b + a);\n            }\n        }\n        int s1 = accumulate(nums1.begin(), nums1.end(), 0);\n        int s2 = accumulate(nums2.begin(), nums2.end(), 0);\n        for (int i = 0; i <= n; i++) {\n            if (s2 * i + s1 - dp[n][i] <= x) {\n                return i;\n            }\n        }\n        return -1;\n    }", "source_code_block": "", "target_Lan": "java###minimumTime_Test.java", "reference_code": "    public static int minimumTime(List<Integer> nums1, List<Integer> nums2, int x) {\n        int n = nums1.size(), s1 = 0, s2 = 0;\n        int[][] dp = new int[n + 1][n + 1];\n        List<List<Integer>> nums = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int a = nums1.get(i), b = nums2.get(i);\n            nums.add(Arrays.asList(b, a));\n            s1 += a;\n            s2 += b;\n        }\n        Collections.sort(nums, (o1, o2) -> Integer.compare(o1.get(0), o2.get(0)));\n        for (int j = 1; j <= n; ++j) {\n            int b = nums.get(j - 1).get(0), a = nums.get(j - 1).get(1);\n            for (int i = j; i > 0; --i) {\n                dp[j][i] = Math.max(dp[j - 1][i], dp[j - 1][i - 1] + i * b + a);\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            if (s2 * i + s1 - dp[n][i] <= x) {\n                return i;\n            }\n        }\n        return -1;\n    }", "target_method_signature": "minimumTime", "source_method_signature": "minimumTime", "target_allMS": "    public static int minimumTime(List<Integer> nums1, List<Integer> nums2, int x) {", "source_allMS": "    int minimumTime(vector<int>& nums1, vector<int>& nums2, int x) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\npublic class minimumTime_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumTime(Arrays.asList(1, 2), Arrays.asList(3, 4), 10));\n        System.out.println(minimumTime(Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0), 0));\n        System.out.println(minimumTime(Arrays.asList(5, 6, 7), Arrays.asList(1, 2, 3), 100));\n        System.out.println(minimumTime(Arrays.asList(10, 20, 30), Arrays.asList(10, 20, 30), 250));\n        System.out.println(minimumTime(Arrays.asList(100000, 200000), Arrays.asList(300000, 400000), 1000000));\n        System.out.println(minimumTime(Arrays.asList(1, 7, 10), Arrays.asList(1, 3, 5), 60));\n        System.out.println(minimumTime(Arrays.asList(2, 4, 6), Arrays.asList(5, 7, 9), 100));\n        System.out.println(minimumTime(Arrays.asList(-1, -2, -3), Arrays.asList(-1, -2, -3), 10));\n        System.out.println(minimumTime(Arrays.asList(99999, 88888), Arrays.asList(77777, 66666), 10000000));\n        System.out.println(minimumTime(Arrays.asList(1, 3, 5), Arrays.asList(2, 4, 6), 20));\n    }\n}", "all_input_output_value": "\ninput1: nums1=[1, 2], nums2=[3, 4], x=10\noutput1: 0\n--------\ninput2: nums1=[0, 0, 0], nums2=[0, 0, 0], x=0\noutput2: 0\n--------\ninput3: nums1=[5, 6, 7], nums2=[1, 2, 3], x=100\noutput3: 0\n--------\ninput4: nums1=[10, 20, 30], nums2=[10, 20, 30], x=250\noutput4: 0\n--------\ninput5: nums1=[100000, 200000], nums2=[300000, 400000], x=1000000\noutput5: 0\n--------\ninput6: nums1=[1, 7, 10], nums2=[1, 3, 5], x=60\noutput6: 0\n--------\ninput7: nums1=[2, 4, 6], nums2=[5, 7, 9], x=100\noutput7: 0\n--------\ninput8: nums1=[-1, -2, -3], nums2=[-1, -2, -3], x=10\noutput8: 0\n--------\ninput9: nums1=[99999, 88888], nums2=[77777, 66666], x=10000000\noutput9: 0\n--------\ninput10: nums1=[1, 3, 5], nums2=[2, 4, 6], x=20\noutput10: 0\n", "input_output_value": ["\ninput1: nums1=[1, 2], nums2=[3, 4], x=10\noutput1: 0\n", "\ninput2: nums1=[0, 0, 0], nums2=[0, 0, 0], x=0\noutput2: 0\n", "\ninput3: nums1=[5, 6, 7], nums2=[1, 2, 3], x=100\noutput3: 0\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n// TOFILL\nint main() {\n    vector<int> nums1_1 = {1, 2}, nums2_1 = {3, 4}; int x1 = 10;\n    vector<int> nums1_2 = {0, 0, 0}, nums2_2 = {0, 0, 0}; int x2 = 0;\n    vector<int> nums1_3 = {5, 6, 7}, nums2_3 = {1, 2, 3}; int x3 = 100;\n    vector<int> nums1_4 = {10, 20, 30}, nums2_4 = {10, 20, 30}; int x4 = 250;\n    vector<int> nums1_5 = {100000, 200000}, nums2_5 = {300000, 400000}; int x5 = 1000000;\n    vector<int> nums1_6 = {1, 7, 10}, nums2_6 = {1, 3, 5}; int x6 = 60;\n    vector<int> nums1_7 = {2, 4, 6}, nums2_7 = {5, 7, 9}; int x7 = 100;\n    vector<int> nums1_8 = {-1, -2, -3}, nums2_8 = {-1, -2, -3}; int x8 = 10;\n    vector<int> nums1_9 = {99999, 88888}, nums2_9 = {77777, 66666}; int x9 = 10000000;\n    vector<int> nums1_10 = {1, 3, 5}, nums2_10 = {2, 4, 6}; int x10 = 20;\n\n    cout << minimumTime(nums1_1, nums2_1, x1) << endl;\n    cout << minimumTime(nums1_2, nums2_2, x2) << endl;\n    cout << minimumTime(nums1_3, nums2_3, x3) << endl;\n    cout << minimumTime(nums1_4, nums2_4, x4) << endl;\n    cout << minimumTime(nums1_5, nums2_5, x5) << endl;\n    cout << minimumTime(nums1_6, nums2_6, x6) << endl;\n    cout << minimumTime(nums1_7, nums2_7, x7) << endl;\n    cout << minimumTime(nums1_8, nums2_8, x8) << endl;\n    cout << minimumTime(nums1_9, nums2_9, x9) << endl;\n    cout << minimumTime(nums1_10, nums2_10, x10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minLength.cpp", "source_code_str": "    int minLength(string s) {\n        vector<int> st;\n        for (char c : s) {\n            st.push_back(c);\n            int m = st.size();\n            if (m >= 2 &&\n                (st[m - 2] == 'A' && st[m - 1] == 'B' ||\n                st[m - 2] == 'C' && st[m - 1] == 'D')) {\n                st.pop_back();\n                st.pop_back();\n            }\n        }\n        return st.size();\n    }", "source_code_block": "", "target_Lan": "java###minLength_Test.java", "reference_code": "    public static int minLength(String s) {\n        List<Character> stack = new ArrayList<Character>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            stack.add(c);\n            int m = stack.size();\n            if (m >= 2 &&\n                (stack.get(m - 2) == 'A' && stack.get(m - 1) == 'B' ||\n                stack.get(m - 2) == 'C' && stack.get(m - 1) == 'D')) {\n                stack.remove(m - 1);\n                stack.remove(m - 2);\n            }\n        }\n        return stack.size();\n    }", "target_method_signature": "minLength", "source_method_signature": "minLength", "target_allMS": "    public static int minLength(String s) {", "source_allMS": "    int minLength(string s) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class minLength_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minLength(\"\"));\n        System.out.println(minLength(\"AB\"));\n        System.out.println(minLength(\"AAB\"));\n        System.out.println(minLength(\"BAAC\"));\n        System.out.println(minLength(\"AABBCCDD\"));\n        System.out.println(minLength(\"AAA\"));\n        System.out.println(minLength(\"CC\"));\n        System.out.println(minLength(\"AABBCD\"));\n        System.out.println(minLength(\"ACBD\"));\n        System.out.println(minLength(\"BACDABCD\"));\n    }\n}", "all_input_output_value": "\ninput1: s=\"\"\noutput1: 0\n--------\ninput2: s=\"AB\"\noutput2: 0\n--------\ninput3: s=\"AAB\"\noutput3: 1\n--------\ninput4: s=\"BAAC\"\noutput4: 4\n--------\ninput5: s=\"AABBCCDD\"\noutput5: 0\n--------\ninput6: s=\"AAA\"\noutput6: 3\n--------\ninput7: s=\"CC\"\noutput7: 2\n--------\ninput8: s=\"AABBCD\"\noutput8: 0\n--------\ninput9: s=\"ACBD\"\noutput9: 4\n--------\ninput10: s=\"BACDABCD\"\noutput10: 2\n", "input_output_value": ["\ninput1: s=\"\"\noutput1: 0\n", "\ninput2: s=\"AB\"\noutput2: 0\n", "\ninput3: s=\"AAB\"\noutput3: 1\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    cout << minLength(\"\") << endl;         // Test input 1\n    cout << minLength(\"AB\") << endl;      // Test input 2\n    cout << minLength(\"AAB\") << endl;     // Test input 3\n    cout << minLength(\"BAAC\") << endl;    // Test input 4\n    cout << minLength(\"AABBCCDD\") << endl; // Test input 5\n    cout << minLength(\"AAA\") << endl;     // Test input 6\n    cout << minLength(\"CC\") << endl;      // Test input 7\n    cout << minLength(\"AABBCD\") << endl;  // Test input 8\n    cout << minLength(\"ACBD\") << endl;    // Test input 9\n    cout << minLength(\"BACDABCD\") << endl; // Test input 10\n}", "TAG": "Success"}
{"source_Lan": "cpp###addMinimum.cpp", "source_code_str": "    int addMinimum(string word) {\n        int n = word.size();\n        vector<int> d(n + 1);\n        for (int i = 1; i <= n; i++) {\n            d[i] = d[i - 1] + 2;\n            if (i > 1 && word[i - 1] > word[i - 2]) {\n                d[i] = d[i - 1] - 1;\n            }\n        }\n        return d[n];\n    }", "source_code_block": "", "target_Lan": "java###addMinimum_Test.java", "reference_code": "    public static int addMinimum(String word) {\n        int n = word.length();\n        int[] d = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            d[i] = d[i - 1] + 2;\n            if (i > 1 && word.charAt(i - 1) > word.charAt(i - 2)) {\n                d[i] = d[i - 1] - 1;\n            }\n        }\n        return d[n];\n    }", "target_method_signature": "addMinimum", "source_method_signature": "addMinimum", "target_allMS": "    public static int addMinimum(String word) {", "source_allMS": "    int addMinimum(string word) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class addMinimum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(addMinimum(\"\"));           // Edge case: empty string\n        System.out.println(addMinimum(\"a\"));          // Single character input\n        System.out.println(addMinimum(\"abc\"));        // Increasing order\n        System.out.println(addMinimum(\"cba\"));        // Decreasing order\n        System.out.println(addMinimum(\"aaa\"));        // All characters the same\n        System.out.println(addMinimum(\"abcabc\"));     // Mixed characters, but still an increasing sequence\n        System.out.println(addMinimum(\"aab\"));        // Characters cause a dip\n        System.out.println(addMinimum(\"aaab\"));       // Increasing sequence from duplicates\n        System.out.println(addMinimum(\"xyzuy\"));      // Mixed order\n        System.out.println(addMinimum(\"zyx\"));        // Strictly decreasing\n    }\n}", "all_input_output_value": "\ninput1: word=\"\"\noutput1: 0\n--------\ninput2: word=\"a\"\noutput2: 2\n--------\ninput3: word=\"abc\"\noutput3: 0\n--------\ninput4: word=\"cba\"\noutput4: 6\n--------\ninput5: word=\"aaa\"\noutput5: 6\n--------\ninput6: word=\"abcabc\"\noutput6: 0\n--------\ninput7: word=\"aab\"\noutput7: 3\n--------\ninput8: word=\"aaab\"\noutput8: 5\n--------\ninput9: word=\"xyzuy\"\noutput9: 1\n--------\ninput10: word=\"zyx\"\noutput10: 6\n", "input_output_value": ["\ninput1: word=\"\"\noutput1: 0\n", "\ninput2: word=\"a\"\noutput2: 2\n", "\ninput3: word=\"abc\"\noutput3: 0\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    cout << addMinimum(\"\") << endl;\n    cout << addMinimum(\"a\") << endl;\n    cout << addMinimum(\"abc\") << endl;\n    cout << addMinimum(\"cba\") << endl;\n    cout << addMinimum(\"aaa\") << endl;\n    cout << addMinimum(\"abcabc\") << endl;\n    cout << addMinimum(\"aab\") << endl;\n    cout << addMinimum(\"aaab\") << endl;\n    cout << addMinimum(\"xyzuy\") << endl;\n    cout << addMinimum(\"zyx\") << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###matchingCnt.cpp", "source_code_str": "    vector<int> matchingCnt(int n, vector<string>& X) {\n        unordered_map<int, array<int, 26>> map;\n        vector<int> ans(n);\n        for (int i = n - 1; i >= 0; i--) {\n            string x = X[i];\n            int cans = 0;\n            for (int j = 0; j < x.length(); j++) {\n                if (map.find(j) == map.end()) {\n                    map[j] = array<int, 26>{};\n                }\n                cans += map[j][x[j] - 'a'];\n                map[j][x[j] - 'a']++;\n            }\n            ans[i] = cans;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###matchingCnt_Test.java", "reference_code": "    public static int[] matchingCnt(int n, String[] X) {\n        Map<Integer, int[]> map = new HashMap<>();\n        int[] ans = new int[n];\n        for (int i = n - 1; i >= 0; i--) {\n            String x = X[i];\n            int cans = 0;\n            for (int j = 0; j < x.length(); j++) {\n                if (!map.containsKey(j)) {\n                    map.put(j, new int[26]);\n                }\n                cans = cans + map.get(j)[x.charAt(j) - 'a'];\n                map.get(j)[x.charAt(j) - 'a']++;\n            }\n            ans[i] = cans;\n        }\n        return ans;\n    }", "target_method_signature": "matchingCnt", "source_method_signature": "matchingCnt", "target_allMS": "    public static int[] matchingCnt(int n, String[] X) {", "source_allMS": "    vector<int> matchingCnt(int n, vector<string>& X) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class matchingCnt_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(java.util.Arrays.toString(matchingCnt(0, new String[]{})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(1, new String[]{\"a\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(2, new String[]{\"a\", \"a\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(3, new String[]{\"abc\", \"cab\", \"abc\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(3, new String[]{\"abcd\", \"abdc\", \"abcd\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(1, new String[]{\"abcdefghijklmnopqrstuvwxyz\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(3, new String[]{\"xyz\", \"abc\", \"def\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(4, new String[]{\"aaa\", \"aaa\", \"aaa\", \"aaa\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(5, new String[]{\"abcdef\", \"ghijkl\", \"mnopqr\", \"stuvwx\", \"yzabcd\"})));\n        System.out.println(java.util.Arrays.toString(matchingCnt(2, new String[]{\"abcd\", \"xyzzy\"})));\n    }\n}", "all_input_output_value": "\ninput1: n=0, X=[]\noutput1: []\n--------\ninput2: n=1, X=[\"a\"]\noutput2: [0]\n--------\ninput3: n=2, X=[\"a\", \"a\"]\noutput3: [1, 0]\n--------\ninput4: n=3, X=[\"abc\", \"cab\", \"abc\"]\noutput4: [3, 0, 0]\n--------\ninput5: n=3, X=[\"abcd\", \"abdc\", \"abcd\"]\noutput5: [6, 2, 0]\n--------\ninput6: n=1, X=[\"abcdefghijklmnopqrstuvwxyz\"]\noutput6: [0]\n--------\ninput7: n=3, X=[\"xyz\", \"abc\", \"def\"]\noutput7: [0, 0, 0]\n--------\ninput8: n=4, X=[\"aaa\", \"aaa\", \"aaa\", \"aaa\"]\noutput8: [9, 6, 3, 0]\n--------\ninput9: n=5, X=[\"abcdef\", \"ghijkl\", \"mnopqr\", \"stuvwx\", \"yzabcd\"]\noutput9: [0, 0, 0, 0, 0]\n--------\ninput10: n=2, X=[\"abcd\", \"xyzzy\"]\noutput10: [0, 0]\n", "input_output_value": ["\ninput1: n=0, X=[]\noutput1: []\n", "\ninput2: n=1, X=[\"a\"]\noutput2: [0]\n", "\ninput3: n=2, X=[\"a\", \"a\"]\noutput3: [1, 0]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <array>\n// TOFILL\nint main() {\n    vector<vector<string>> testInputs = {\n        {}, // n=0, X=[]\n        {\"a\"}, // n=1, X=[\"a\"]\n        {\"a\", \"a\"}, // n=2, X=[\"a\", \"a\"]\n        {\"abc\", \"cab\", \"abc\"}, // n=3, X=[\"abc\", \"cab\", \"abc\"]\n        {\"abcd\", \"abdc\", \"abcd\"}, // n=3, X=[\"abcd\", \"abdc\", \"abcd\"]\n        {\"abcdefghijklmnopqrstuvwxyz\"}, // n=1, X=[\"abcdefghijklmnopqrstuvwxyz\"]\n        {\"xyz\", \"abc\", \"def\"}, // n=3, X=[\"xyz\", \"abc\", \"def\"]\n        {\"aaa\", \"aaa\", \"aaa\", \"aaa\"}, // n=4, X=[\"aaa\", \"aaa\", \"aaa\", \"aaa\"]\n        {\"abcdef\", \"ghijkl\", \"mnopqr\", \"stuvwx\", \"yzabcd\"}, // n=5, X=[\"abcdef\", \"ghijkl\", \"mnopqr\", \"stuvwx\", \"yzabcd\"]\n        {\"abcd\", \"xyzzy\"} // n=2, X=[\"abcd\", \"xyzzy\"]\n    };\n\n    for(int i = 0; i < testInputs.size(); i++) {\n        vector<string> X = testInputs[i];\n        vector<int> result = matchingCnt(X.size(), X);\n        cout << \"Result for test input \" << i + 1 << \": \";\n        for(int r : result) {\n            cout << r << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###garbageCollection.cpp", "source_code_str": "    int garbageCollection(vector<string>& garbage, vector<int>& travel) {\n        unordered_map<char, int> distance;\n        int res = 0, cur_dis = 0;\n        for (int i = 0; i < garbage.size(); i++) {\n            res += garbage[i].size();\n            if (i > 0) {\n                cur_dis += travel[i - 1];\n            }\n            for (auto c : garbage[i]) {\n                distance[c] = cur_dis;\n            }\n        }\n        for (auto &[k, v] : distance) {\n            res += v;\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###garbageCollection_Test.java", "reference_code": "    public static int garbageCollection(String[] garbage, int[] travel) {\n        Map<Character, Integer> distance = new HashMap<>();\n        int res = 0, curDis = 0;\n        for (int i = 0; i < garbage.length; i++) {\n            res += garbage[i].length();\n            if (i > 0) {\n                curDis += travel[i - 1];\n            }\n            for (char c : garbage[i].toCharArray()) {\n                distance.put(c, curDis);\n            }\n        }\n        return res + distance.values().stream().reduce(0, Integer::sum);\n    }", "target_method_signature": "garbageCollection", "source_method_signature": "garbageCollection", "target_allMS": "    public static int garbageCollection(String[] garbage, int[] travel) {", "source_allMS": "    int garbageCollection(vector<string>& garbage, vector<int>& travel) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class garbageCollection_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(garbageCollection(new String[]{\"G\", \"P\", \"M\"}, new int[]{1, 2})); // Example Test Input 1\n        System.out.println(garbageCollection(new String[]{\"G\"}, new int[]{}));                // Example Test Input 2\n        System.out.println(garbageCollection(new String[]{\"G\", \"G\", \"G\"}, new int[]{10, 10})); // Example Test Input 3\n        System.out.println(garbageCollection(new String[]{\"P\", \"G\", \"M\", \"P\"}, new int[]{5, 5, 5})); // Example Test Input 4\n        System.out.println(garbageCollection(new String[]{\"G\", \"P\", \"M\", \"M\", \"G\"}, new int[]{1, 2, 3, 4})); // Example Test Input 5\n        System.out.println(garbageCollection(new String[]{\"M\", \"M\", \"M\"}, new int[]{0, 0})); // Example Test Input 6\n        System.out.println(garbageCollection(new String[]{\"G\", \"P\", \"G\"}, new int[]{0, 0})); // Example Test Input 7\n        System.out.println(garbageCollection(new String[]{}, new int[]{})); // Example Test Input 8\n        System.out.println(garbageCollection(new String[]{\"G\", \"P\"}, new int[]{1})); // Example Test Input 9\n        System.out.println(garbageCollection(new String[]{\"G\", \"G\", \"P\", \"M\", \"M\"}, new int[]{1, 2, 3, 4})); // Example Test Input 10\n    }\n}", "all_input_output_value": "\ninput1: garbage=[\"G\", \"P\", \"M\"], travel=[1, 2]\noutput1: 7\n--------\ninput2: garbage=[\"G\"], travel=[]\noutput2: 1\n--------\ninput3: garbage=[\"G\", \"G\", \"G\"], travel=[10, 10]\noutput3: 23\n--------\ninput4: garbage=[\"P\", \"G\", \"M\", \"P\"], travel=[5, 5, 5]\noutput4: 34\n--------\ninput5: garbage=[\"G\", \"P\", \"M\", \"M\", \"G\"], travel=[1, 2, 3, 4]\noutput5: 22\n--------\ninput6: garbage=[\"M\", \"M\", \"M\"], travel=[0, 0]\noutput6: 3\n--------\ninput7: garbage=[\"G\", \"P\", \"G\"], travel=[0, 0]\noutput7: 3\n--------\ninput8: garbage=[], travel=[]\noutput8: 0\n--------\ninput9: garbage=[\"G\", \"P\"], travel=[1]\noutput9: 3\n--------\ninput10: garbage=[\"G\", \"G\", \"P\", \"M\", \"M\"], travel=[1, 2, 3, 4]\noutput10: 19\n", "input_output_value": ["\ninput1: garbage=[\"G\", \"P\", \"M\"], travel=[1, 2]\noutput1: 7\n", "\ninput2: garbage=[\"G\"], travel=[]\noutput2: 1\n", "\ninput3: garbage=[\"G\", \"G\", \"G\"], travel=[10, 10]\noutput3: 23\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<string> garbage1 = {\"G\", \"P\", \"M\"};\n    vector<int> travel1 = {1, 2};\n    cout << garbageCollection(garbage1, travel1) << endl;\n\n    vector<string> garbage2 = {\"G\"};\n    vector<int> travel2 = {};\n    cout << garbageCollection(garbage2, travel2) << endl;\n\n    vector<string> garbage3 = {\"G\", \"G\", \"G\"};\n    vector<int> travel3 = {10, 10};\n    cout << garbageCollection(garbage3, travel3) << endl;\n\n    vector<string> garbage4 = {\"P\", \"G\", \"M\", \"P\"};\n    vector<int> travel4 = {5, 5, 5};\n    cout << garbageCollection(garbage4, travel4) << endl;\n\n    vector<string> garbage5 = {\"G\", \"P\", \"M\", \"M\", \"G\"};\n    vector<int> travel5 = {1, 2, 3, 4};\n    cout << garbageCollection(garbage5, travel5) << endl;\n\n    vector<string> garbage6 = {\"M\", \"M\", \"M\"};\n    vector<int> travel6 = {0, 0};\n    cout << garbageCollection(garbage6, travel6) << endl;\n\n    vector<string> garbage7 = {\"G\", \"P\", \"G\"};\n    vector<int> travel7 = {0, 0};\n    cout << garbageCollection(garbage7, travel7) << endl;\n\n    vector<string> garbage8 = {};\n    vector<int> travel8 = {};\n    cout << garbageCollection(garbage8, travel8) << endl;\n\n    vector<string> garbage9 = {\"G\", \"P\"};\n    vector<int> travel9 = {1};\n    cout << garbageCollection(garbage9, travel9) << endl;\n\n    vector<string> garbage10 = {\"G\", \"G\", \"P\", \"M\", \"M\"};\n    vector<int> travel10 = {1, 2, 3, 4};\n    cout << garbageCollection(garbage10, travel10) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###arrangingHorses.cpp", "source_code_str": "    vector<int> arrangingHorses(int n, int m, vector<vector<int>>& data) {\n        vector<int> inDegree(n, 0);\n        vector<vector<int>> adjList(n);\n        for (const auto& edge : data) {\n            int a = edge[0], b = edge[1];\n            adjList[b].push_back(a); \n            ++inDegree[a];\n        }\n        priority_queue<int, vector<int>, greater<int>> pq; \n        for (int i = 0; i < n; ++i) {\n            if (inDegree[i] == 0)\n                pq.push(i);\n        }\n        vector<int> order;\n        while (!pq.empty()) {\n            int horse = pq.top();\n            pq.pop();\n            order.push_back(horse);\n            for (int neigh : adjList[horse]) {\n                --inDegree[neigh];\n                if (inDegree[neigh] == 0)\n                    pq.push(neigh);\n            }\n        }\n        return order;\n    }", "source_code_block": "", "target_Lan": "java###arrangingHorses_Test.java", "reference_code": "    public static ArrayList<Integer> arrangingHorses(int n, int m, int[][] data) {\n        int[] inDegree = new int[n];\n        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();\n        for (int i = 0; i < n; i++) adjList.add(new ArrayList<>());\n        for (int[] edge : data) {\n            int a = edge[0], b = edge[1];\n            adjList.get(b).add(a); \n            ++inDegree[a];\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>(); \n        for (int i = 0; i < n; ++i) {\n            if (inDegree[i] == 0) pq.add(i);\n        }\n        ArrayList<Integer> order = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            int horse = pq.poll();\n            order.add(horse);\n            for (int neigh : adjList.get(horse)) {\n                --inDegree[neigh];\n                if (inDegree[neigh] == 0) pq.add(neigh);\n            }\n        }\n        return order;\n    }", "target_method_signature": "arrangingHorses", "source_method_signature": "arrangingHorses", "target_allMS": "    public static ArrayList<Integer> arrangingHorses(int n, int m, int[][] data) {", "source_allMS": "    vector<int> arrangingHorses(int n, int m, vector<vector<int>>& data) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\npublic class arrangingHorses_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test case 1: Single horse, no edges\n        int[][] data1 = {};\n        System.out.println(arrangingHorses(1, 0, data1));\n        \n        // Test case 2: Three horses, no edges\n        int[][] data2 = {};\n        System.out.println(arrangingHorses(3, 0, data2));\n        \n        // Test case 3: Valid edges forming a DAG\n        int[][] data3 = {{0, 1}, {1, 2}, {0, 2}};\n        System.out.println(arrangingHorses(3, 3, data3));\n        \n        // Test case 4: Chain of edges\n        int[][] data4 = {{0, 1}, {1, 2}, {2, 3}};\n        System.out.println(arrangingHorses(4, 3, data4));\n        \n        // Test case 5: Longer chain\n        int[][] data5 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};\n        System.out.println(arrangingHorses(5, 4, data5));\n        \n        // Test case 6: Branching edges\n        int[][] data6 = {{0, 1}, {0, 2}, {1, 3}};\n        System.out.println(arrangingHorses(5, 3, data6));\n        \n        // Test case 7: Contains cycle(edge cases not handled)\n        int[][] data7 = {{0, 1}, {1, 2}, {2, 0}, {3, 4}, {4, 3}};\n        System.out.println(arrangingHorses(5, 5, data7));\n        \n        // Test case 8: No horses, no edges\n        int[][] data8 = {};\n        System.out.println(arrangingHorses(0, 0, data8));\n        \n        // Test case 9: Two horses with one edge\n        int[][] data9 = {{0, 1}};\n        System.out.println(arrangingHorses(2, 1, data9));\n        \n        // Test case 10: DAG with multiple edges\n        int[][] data10 = {{5, 1}, {1, 2}, {1, 3}, {2, 4}, {3, 4}};\n        System.out.println(arrangingHorses(6, 5, data10));\n    }\n}", "all_input_output_value": "\ninput1: n=1, m=0, data=[]\noutput1: [0]\n--------\ninput2: n=3, m=0, data=[]\noutput2: [0, 1, 2]\n--------\ninput3: n=3, m=3, data=[[0, 1], [1, 2], [0, 2]]\noutput3: [2, 1, 0]\n--------\ninput4: n=4, m=3, data=[[0, 1], [1, 2], [2, 3]]\noutput4: [3, 2, 1, 0]\n--------\ninput5: n=5, m=4, data=[[0, 1], [1, 2], [2, 3], [3, 4]]\noutput5: [4, 3, 2, 1, 0]\n--------\ninput6: n=5, m=3, data=[[0, 1], [0, 2], [1, 3]]\noutput6: [2, 3, 1, 0, 4]\n--------\ninput7: n=5, m=5, data=[[0, 1], [1, 2], [2, 0], [3, 4], [4, 3]]\noutput7: []\n--------\ninput8: n=0, m=0, data=[]\noutput8: []\n--------\ninput9: n=2, m=1, data=[[0, 1]]\noutput9: [1, 0]\n--------\ninput10: n=6, m=5, data=[[5, 1], [1, 2], [1, 3], [2, 4], [3, 4]]\noutput10: [0, 4, 2, 3, 1, 5]\n", "input_output_value": ["\ninput1: n=1, m=0, data=[]\noutput1: [0]\n", "\ninput2: n=3, m=0, data=[]\noutput2: [0, 1, 2]\n", "\ninput3: n=3, m=3, data=[[0, 1], [1, 2], [0, 2]]\noutput3: [2, 1, 0]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n// TOFILL\nint main() {\n    vector<vector<int>> data1 = {};\n    vector<vector<int>> data2 = {};\n    vector<vector<int>> data3 = {{0, 1}, {1, 2}, {0, 2}};\n    vector<vector<int>> data4 = {{0, 1}, {1, 2}, {2, 3}};\n    vector<vector<int>> data5 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};\n    vector<vector<int>> data6 = {{0, 1}, {0, 2}, {1, 3}};\n    vector<vector<int>> data7 = {{0, 1}, {1, 2}, {2, 0}, {3, 4}, {4, 3}};\n    vector<vector<int>> data8 = {};\n    vector<vector<int>> data9 = {{0, 1}};\n    vector<vector<int>> data10 = {{5, 1}, {1, 2}, {1, 3}, {2, 4}, {3, 4}};\n\n    vector<int> result1 = arrangingHorses(1, 0, data1);\n    vector<int> result2 = arrangingHorses(3, 0, data2);\n    vector<int> result3 = arrangingHorses(3, 3, data3);\n    vector<int> result4 = arrangingHorses(4, 3, data4);\n    vector<int> result5 = arrangingHorses(5, 4, data5);\n    vector<int> result6 = arrangingHorses(5, 3, data6);\n    vector<int> result7 = arrangingHorses(5, 5, data7);\n    vector<int> result8 = arrangingHorses(0, 0, data8);\n    vector<int> result9 = arrangingHorses(2, 1, data9);\n    vector<int> result10 = arrangingHorses(6, 5, data10);\n\n    // Print the results\n    for(int horse : result1) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result2) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result3) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result4) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result5) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result6) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result7) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result8) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result9) cout << horse << \" \";\n    cout << endl;\n    for(int horse : result10) cout << horse << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###substringsAndPermutations.cpp", "source_code_str": "    vector<int> substringsAndPermutations(int n, int m, string s, vector<string>&arr){\n        map<char,vector<int>>mp;\n        for (int i=0;i<n;i++){\n            char ch=s[i];\n            mp[ch].push_back(i);\n        }\n        vector<int>ans;\n        for (auto j:arr){\n            int ma=0;\n            unordered_map<char,int>ct;\n            for (auto k:j){\n                ct[k]+=1;\n            }\n            for (auto k:j){\n                int ele=ct[k];\n                if (ele>mp[k].size()){\n                    ma=-1;\n                    break;\n                }\n                else {\n                    ma=max(ma,mp[k][ele-1]+1);\n                }\n            }\n            ans.push_back(ma);\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###substringsAndPermutations_Test.java", "reference_code": "    public static ArrayList<Integer> substringsAndPermutations(int n, int m, String s,\n                                                        String[] arr) {\n        Map<Character, List<Integer>> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            char ch = s.charAt(i);\n            mp.computeIfAbsent(ch, k -> new ArrayList<>()).add(i);\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n        for (int q = 0; q < m; q++) {\n            String query = arr[q];\n            int ma = 0;\n            Map<Character, Integer> ct = new HashMap<>();\n            for (char c : query.toCharArray()) {\n                ct.put(c, ct.getOrDefault(c, 0) + 1);\n            }\n            for (char c : query.toCharArray()) {\n                int ele = ct.get(c);\n                if (ele > mp.getOrDefault(c, Collections.emptyList()).size()) {\n                    ma = -1;\n                    break;\n                } else {\n                    ma = Math.max(ma, mp.get(c).get(ele - 1) + 1);\n                }\n            }\n            ans.add(ma);\n        }\n        return ans;\n    }", "target_method_signature": "substringsAndPermutations", "source_method_signature": "substringsAndPermutations", "target_allMS": "    public static ArrayList<Integer> substringsAndPermutations(int n, int m, String s,", "source_allMS": "    vector<int> substringsAndPermutations(int n, int m, string s, vector<string>&arr){", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class substringsAndPermutations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Input 1\n        int n1 = 5, m1 = 3;\n        String s1 = \"abcde\";\n        String[] arr1 = {\"a\", \"cd\", \"f\"};\n        System.out.println(substringsAndPermutations(n1, m1, s1, arr1));\n        \n        // Test Input 2\n        int n2 = 6, m2 = 2;\n        String s2 = \"fghijk\";\n        String[] arr2 = {\"fg\", \"xyz\"};\n        System.out.println(substringsAndPermutations(n2, m2, s2, arr2));\n        \n        // Test Input 3\n        int n3 = 3, m3 = 4;\n        String s3 = \"aaaaa\";\n        String[] arr3 = {\"a\", \"aa\", \"aaa\", \"b\"};\n        System.out.println(substringsAndPermutations(n3, m3, s3, arr3));\n        \n        // Test Input 4\n        int n4 = 0, m4 = 1;\n        String s4 = \"\";\n        String[] arr4 = {\"a\"};\n        System.out.println(substringsAndPermutations(n4, m4, s4, arr4));\n        \n        // Test Input 5\n        int n5 = 3, m5 = 1;\n        String s5 = \"abc\";\n        String[] arr5 = {\"abc\"};\n        System.out.println(substringsAndPermutations(n5, m5, s5, arr5));\n        \n        // Test Input 6\n        int n6 = 10, m6 = 3;\n        String s6 = \"abcdefghij\";\n        String[] arr6 = {\"ab\", \"hj\", \"zz\"};\n        System.out.println(substringsAndPermutations(n6, m6, s6, arr6));\n        \n        // Test Input 7\n        int n7 = 5, m7 = 2;\n        String s7 = \"abcab\";\n        String[] arr7 = {\"abc\", \"acb\"};\n        System.out.println(substringsAndPermutations(n7, m7, s7, arr7));\n        \n        // Test Input 8\n        int n8 = 7, m8 = 3;\n        String s8 = \"abcdefg\";\n        String[] arr8 = {\"gbd\", \"caf\", \"abcdefg\"};\n        System.out.println(substringsAndPermutations(n8, m8, s8, arr8));\n        \n        // Test Input 9\n        int n9 = 6, m9 = 2;\n        String s9 = \"aabbcc\";\n        String[] arr9 = {\"abc\", \"abcde\"};\n        System.out.println(substringsAndPermutations(n9, m9, s9, arr9));\n        \n        // Test Input 10\n        int n10 = 4, m10 = 1;\n        String s10 = \"zxyz\";\n        String[] arr10 = {\"zy\"};\n        System.out.println(substringsAndPermutations(n10, m10, s10, arr10));\n    }\n}", "all_input_output_value": "\ninput1: n=5, m=3, s=\"abcde\", arr=[\"a\", \"cd\", \"f\"]\noutput1: [1, 4, -1]\n--------\ninput2: n=6, m=2, s=\"fghijk\", arr=[\"fg\", \"xyz\"]\noutput2: [2, -1]\n--------\ninput3: n=3, m=4, s=\"aaaaa\", arr=[\"a\", \"aa\", \"aaa\", \"b\"]\noutput3: [1, 2, 3, -1]\n--------\ninput4: n=0, m=1, s=\"\", arr=[\"a\"]\noutput4: [-1]\n--------\ninput5: n=3, m=1, s=\"abc\", arr=[\"abc\"]\noutput5: [3]\n--------\ninput6: n=10, m=3, s=\"abcdefghij\", arr=[\"ab\", \"hj\", \"zz\"]\noutput6: [2, 10, -1]\n--------\ninput7: n=5, m=2, s=\"abcab\", arr=[\"abc\", \"acb\"]\noutput7: [3, 3]\n--------\ninput8: n=7, m=3, s=\"abcdefg\", arr=[\"gbd\", \"caf\", \"abcdefg\"]\noutput8: [7, 6, 7]\n--------\ninput9: n=6, m=2, s=\"aabbcc\", arr=[\"abc\", \"abcde\"]\noutput9: [5, -1]\n--------\ninput10: n=4, m=1, s=\"zxyz\", arr=[\"zy\"]\noutput10: [3]\n", "input_output_value": ["\ninput1: n=5, m=3, s=\"abcde\", arr=[\"a\", \"cd\", \"f\"]\noutput1: [1, 4, -1]\n", "\ninput2: n=6, m=2, s=\"fghijk\", arr=[\"fg\", \"xyz\"]\noutput2: [2, -1]\n", "\ninput3: n=3, m=4, s=\"aaaaa\", arr=[\"a\", \"aa\", \"aaa\", \"b\"]\noutput3: [1, 2, 3, -1]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<string> arr1 = {\"a\", \"cd\", \"f\"};\n    vector<int> result1 = substringsAndPermutations(5, 3, \"abcde\", arr1);\n    for(int res : result1) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr2 = {\"fg\", \"xyz\"};\n    vector<int> result2 = substringsAndPermutations(6, 2, \"fghijk\", arr2);\n    for(int res : result2) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr3 = {\"a\", \"aa\", \"aaa\", \"b\"};\n    vector<int> result3 = substringsAndPermutations(3, 4, \"aaaaa\", arr3);\n    for(int res : result3) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr4 = {\"a\"};\n    vector<int> result4 = substringsAndPermutations(0, 1, \"\", arr4);\n    for(int res : result4) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr5 = {\"abc\"};\n    vector<int> result5 = substringsAndPermutations(3, 1, \"abc\", arr5);\n    for(int res : result5) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr6 = {\"ab\", \"hj\", \"zz\"};\n    vector<int> result6 = substringsAndPermutations(10, 3, \"abcdefghij\", arr6);\n    for(int res : result6) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr7 = {\"abc\", \"acb\"};\n    vector<int> result7 = substringsAndPermutations(5, 2, \"abcab\", arr7);\n    for(int res : result7) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr8 = {\"gbd\", \"caf\", \"abcdefg\"};\n    vector<int> result8 = substringsAndPermutations(7, 3, \"abcdefg\", arr8);\n    for(int res : result8) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr9 = {\"abc\", \"abcde\"};\n    vector<int> result9 = substringsAndPermutations(6, 2, \"aabbcc\", arr9);\n    for(int res : result9) cout << res << \" \";\n    cout << endl;\n\n    vector<string> arr10 = {\"zy\"};\n    vector<int> result10 = substringsAndPermutations(4, 1, \"zxyz\", arr10);\n    for(int res : result10) cout << res << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###prefixDistinct.cpp", "source_code_str": "    vector<int> prefixDistinct(int n, vector<int> &arr)\n    {\n        vector<int>ans(n);\n        set<int>s;\n        for(int i=0;i<n;i++)\n        {\n            s.insert(arr[i]);\n            ans[i]=s.size();\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###prefixDistinct_Test.java", "reference_code": "    public static int[] prefixDistinct(int n, int arr[]){\n        int ans[] = new int[n];\n        Set<Integer> hs = new HashSet<>();\n        for(int i = 0; i < n; i++){\n            hs.add(arr[i]);\n            ans[i] = hs.size();\n        }\n        return ans;\n    }", "target_method_signature": "prefixDistinct", "source_method_signature": "prefixDistinct", "target_allMS": "    public static int[] prefixDistinct(int n, int arr[]){", "source_allMS": "    vector<int> prefixDistinct(int n, vector<int> &arr)", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.Arrays;\npublic class prefixDistinct_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Inputs\n        int[] result1 = prefixDistinct(0, new int[]{});\n        System.out.println(Arrays.toString(result1));\n\n        int[] result2 = prefixDistinct(5, new int[]{1, 2, 3, 4, 5});\n        System.out.println(Arrays.toString(result2));\n\n        int[] result3 = prefixDistinct(5, new int[]{2, 2, 2, 2, 2});\n        System.out.println(Arrays.toString(result3));\n\n        int[] result4 = prefixDistinct(6, new int[]{1, 2, 1, 3, 4, 2});\n        System.out.println(Arrays.toString(result4));\n\n        int[] result5 = prefixDistinct(5, new int[]{-1, -2, -3, -1, -2});\n        System.out.println(Arrays.toString(result5));\n\n        int[] result6 = prefixDistinct(7, new int[]{0, 1, 0, 2, 1, 0, 3});\n        System.out.println(Arrays.toString(result6));\n\n        int[] result7 = prefixDistinct(5, new int[]{1, 1, 2, 2, 3});\n        System.out.println(Arrays.toString(result7));\n\n        int[] result8 = prefixDistinct(4, new int[]{1, 0, 1, 0});\n        System.out.println(Arrays.toString(result8));\n\n        int[] result9 = prefixDistinct(3, new int[]{1, 2, 2});\n        System.out.println(Arrays.toString(result9));\n\n        int[] result10 = prefixDistinct(5, new int[]{5, 5, 5, 5, 5});\n        System.out.println(Arrays.toString(result10));\n    }\n}", "all_input_output_value": "\ninput1: n=0, arr=[]\noutput1: []\n--------\ninput2: n=5, arr=[1, 2, 3, 4, 5]\noutput2: [1, 2, 3, 4, 5]\n--------\ninput3: n=5, arr=[2, 2, 2, 2, 2]\noutput3: [1, 1, 1, 1, 1]\n--------\ninput4: n=6, arr=[1, 2, 1, 3, 4, 2]\noutput4: [1, 2, 2, 3, 4, 4]\n--------\ninput5: n=5, arr=[-1, -2, -3, -1, -2]\noutput5: [1, 2, 3, 3, 3]\n--------\ninput6: n=7, arr=[0, 1, 0, 2, 1, 0, 3]\noutput6: [1, 2, 2, 3, 3, 3, 4]\n--------\ninput7: n=5, arr=[1, 1, 2, 2, 3]\noutput7: [1, 1, 2, 2, 3]\n--------\ninput8: n=4, arr=[1, 0, 1, 0]\noutput8: [1, 2, 2, 2]\n--------\ninput9: n=3, arr=[1, 2, 2]\noutput9: [1, 2, 2]\n--------\ninput10: n=5, arr=[5, 5, 5, 5, 5]\noutput10: [1, 1, 1, 1, 1]\n", "input_output_value": ["\ninput1: n=0, arr=[]\noutput1: []\n", "\ninput2: n=5, arr=[1, 2, 3, 4, 5]\noutput2: [1, 2, 3, 4, 5]\n", "\ninput3: n=5, arr=[2, 2, 2, 2, 2]\noutput3: [1, 1, 1, 1, 1]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <set>\n// TOFILL\nint main() {\n    vector<int> arr1 = {};\n    vector<int> result1 = prefixDistinct(0, arr1);\n    for(int i : result1) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr2 = {1, 2, 3, 4, 5};\n    vector<int> result2 = prefixDistinct(5, arr2);\n    for(int i : result2) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr3 = {2, 2, 2, 2, 2};\n    vector<int> result3 = prefixDistinct(5, arr3);\n    for(int i : result3) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr4 = {1, 2, 1, 3, 4, 2};\n    vector<int> result4 = prefixDistinct(6, arr4);\n    for(int i : result4) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr5 = {-1, -2, -3, -1, -2};\n    vector<int> result5 = prefixDistinct(5, arr5);\n    for(int i : result5) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr6 = {0, 1, 0, 2, 1, 0, 3};\n    vector<int> result6 = prefixDistinct(7, arr6);\n    for(int i : result6) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr7 = {1, 1, 2, 2, 3};\n    vector<int> result7 = prefixDistinct(5, arr7);\n    for(int i : result7) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr8 = {1, 0, 1, 0};\n    vector<int> result8 = prefixDistinct(4, arr8);\n    for(int i : result8) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr9 = {1, 2, 2};\n    vector<int> result9 = prefixDistinct(3, arr9);\n    for(int i : result9) cout << i << \" \";\n    cout << endl;\n\n    vector<int> arr10 = {5, 5, 5, 5, 5};\n    vector<int> result10 = prefixDistinct(5, arr10);\n    for(int i : result10) cout << i << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###numberGame.cpp", "source_code_str": "    vector<int> numberGame(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i < nums.size(); i += 2) {\n            swap(nums[i], nums[i + 1]);\n        }\n        return nums;\n    }", "source_code_block": "", "target_Lan": "java###numberGame_Test.java", "reference_code": "    public static int[] numberGame(int[] nums) {\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i += 2) {\n            int tmp = nums[i];\n            nums[i] = nums[i + 1];\n            nums[i + 1] = tmp;\n        }\n        return nums;\n    }", "target_method_signature": "numberGame", "source_method_signature": "numberGame", "target_allMS": "    public static int[] numberGame(int[] nums) {", "source_allMS": "    vector<int> numberGame(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class numberGame_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(numberGame(new int[]{})));\n        System.out.println(Arrays.toString(numberGame(new int[]{8, 3})));\n        System.out.println(Arrays.toString(numberGame(new int[]{7, -2})));\n        System.out.println(Arrays.toString(numberGame(new int[]{4, -5, 2, 1})));\n        System.out.println(Arrays.toString(numberGame(new int[]{1, 2, 3, 4, 5, 6})));\n        System.out.println(Arrays.toString(numberGame(new int[]{1, -1, 2, -2, 3, -3})));\n    }\n}", "all_input_output_value": "\ninput1: nums=[]\noutput1: []\n--------\ninput2: nums=[8, 3]\noutput2: [8, 3]\n--------\ninput3: nums=[7, -2]\noutput3: [7, -2]\n--------\ninput4: nums=[4, -5, 2, 1]\noutput4: [1, -5, 4, 2]\n--------\ninput5: nums=[1, 2, 3, 4, 5, 6]\noutput5: [2, 1, 4, 3, 6, 5]\n--------\ninput6: nums=[1, -1, 2, -2, 3, -3]\noutput6: [-2, -3, 1, -1, 3, 2]\n", "input_output_value": ["\ninput1: nums=[]\noutput1: []\n", "\ninput2: nums=[8, 3]\noutput2: [8, 3]\n", "\ninput3: nums=[7, -2]\noutput3: [7, -2]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> nums1 = {};\n    vector<int> nums2 = {8, 3};\n    vector<int> nums3 = {7, -2};\n    vector<int> nums4 = {4, -5, 2, 1};\n    vector<int> nums5 = {1, 2, 3, 4, 5, 6};\n    vector<int> nums6 = {1, -1, 2, -2, 3, -3};\n\n    vector<int> result1 = numberGame(nums1);\n    vector<int> result2 = numberGame(nums2);\n    vector<int> result3 = numberGame(nums3);\n    vector<int> result4 = numberGame(nums4);\n    vector<int> result5 = numberGame(nums5);\n    vector<int> result6 = numberGame(nums6);\n    \n    for(int num : result1) cout << num << \" \";\n    cout << endl;\n    for(int num : result2) cout << num << \" \";\n    cout << endl;\n    for(int num : result3) cout << num << \" \";\n    cout << endl;\n    for(int num : result4) cout << num << \" \";\n    cout << endl;\n    for(int num : result5) cout << num << \" \";\n    cout << endl;\n    for(int num : result6) cout << num << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxResult.cpp", "source_code_str": "    int maxResult(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> dp(n);\n        dp[0] = nums[0];\n        deque<int> queue;\n        queue.push_back(0);\n        for (int i = 1; i < n; i++) {\n            while (!queue.empty() && queue.front() < i - k) {\n                queue.pop_front();\n            }\n            dp[i] = dp[queue.front()] + nums[i];\n            while (!queue.empty() && dp[queue.back()] <= dp[i]) {\n                queue.pop_back();\n            }\n            queue.push_back(i);\n        }\n        return dp[n - 1];\n    }", "source_code_block": "", "target_Lan": "java###maxResult_Test.java", "reference_code": "    public static int maxResult(int[] nums, int k) {\n        int n = nums.length;\n        int[] dp = new int[n];\n        dp[0] = nums[0];\n        Deque<Integer> queue = new ArrayDeque<>();\n        queue.offerLast(0);\n        for (int i = 1; i < n; i++) {\n            while (queue.peekFirst() < i - k) {\n                queue.pollFirst();\n            }\n            dp[i] = dp[queue.peekFirst()] + nums[i];\n            while (!queue.isEmpty() && dp[queue.peekLast()] <= dp[i]) {\n                queue.pollLast();\n            }\n            queue.offerLast(i);\n        }\n        return dp[n - 1];\n    }", "target_method_signature": "maxResult", "source_method_signature": "maxResult", "target_allMS": "    public static int maxResult(int[] nums, int k) {", "source_allMS": "    int maxResult(vector<int>& nums, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Deque;\nimport java.util.ArrayDeque;\npublic class maxResult_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxResult(new int[]{1, 2, 3}, 1)); // Expected output: 6\n        System.out.println(maxResult(new int[]{5, -1, 2, 10}, 2)); // Expected output: 16\n        System.out.println(maxResult(new int[]{-5, -1, -2, -3}, 3)); // Expected output: -1\n        System.out.println(maxResult(new int[]{1}, 1)); // Expected output: 1\n        System.out.println(maxResult(new int[]{2, 3, 4, 5, 6}, 5)); // Expected output: 20\n        System.out.println(maxResult(new int[]{10, -1, 10, -1, 10}, 3)); // Expected output: 29\n        System.out.println(maxResult(new int[]{0, 0, 0, 0}, 2)); // Expected output: 0\n        System.out.println(maxResult(new int[]{1, 3, -2, 4, -1}, 1)); // Expected output: 6\n        System.out.println(maxResult(new int[]{1, 0, 0, 1, 0, 1}, 2)); // Expected output: 3\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3], k=1\noutput1: 6\n--------\ninput2: nums=[5, -1, 2, 10], k=2\noutput2: 17\n--------\ninput3: nums=[-5, -1, -2, -3], k=3\noutput3: -8\n--------\ninput4: nums=[1], k=1\noutput4: 1\n--------\ninput5: nums=[2, 3, 4, 5, 6], k=5\noutput5: 20\n--------\ninput6: nums=[10, -1, 10, -1, 10], k=3\noutput6: 30\n--------\ninput7: nums=[0, 0, 0, 0], k=2\noutput7: 0\n--------\ninput8: nums=[1, 3, -2, 4, -1], k=1\noutput8: 5\n--------\ninput9: nums=[1, 0, 0, 1, 0, 1], k=2\noutput9: 3\n", "input_output_value": ["\ninput1: nums=[1, 2, 3], k=1\noutput1: 6\n", "\ninput2: nums=[5, -1, 2, 10], k=2\noutput2: 17\n", "\ninput3: nums=[-5, -1, -2, -3], k=3\noutput3: -8\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <deque>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 2, 3};\n    int k1 = 1;\n    cout << maxResult(input1, k1) << endl;\n\n    vector<int> input2 = {5, -1, 2, 10};\n    int k2 = 2;\n    cout << maxResult(input2, k2) << endl;\n\n    vector<int> input3 = {-5, -1, -2, -3};\n    int k3 = 3;\n    cout << maxResult(input3, k3) << endl;\n\n    vector<int> input4 = {1};\n    int k4 = 1;\n    cout << maxResult(input4, k4) << endl;\n\n    vector<int> input5 = {2, 3, 4, 5, 6};\n    int k5 = 5;\n    cout << maxResult(input5, k5) << endl;\n\n    vector<int> input6 = {10, -1, 10, -1, 10};\n    int k6 = 3;\n    cout << maxResult(input6, k6) << endl;\n\n    vector<int> input7 = {0, 0, 0, 0};\n    int k7 = 2;\n    cout << maxResult(input7, k7) << endl;\n\n    vector<int> input8 = {1, 3, -2, 4, -1};\n    int k8 = 1;\n    cout << maxResult(input8, k8) << endl;\n\n    vector<int> input9 = {1, 0, 0, 1, 0, 1};\n    int k9 = 2;\n    cout << maxResult(input9, k9) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###distinctDifferenceArray.cpp", "source_code_str": "    vector<int> distinctDifferenceArray(vector<int>& nums) {\n        int n = nums.size();\n        unordered_set<int> st;\n        vector<int> sufCnt(n + 1, 0);\n        for (int i = n - 1; i > 0; i--) {\n            st.insert(nums[i]);\n            sufCnt[i] = st.size();\n        }\n        vector<int> res;\n        st.clear();\n        for (int i = 0; i < n; i++) {\n            st.insert(nums[i]);\n            res.push_back(int(st.size()) - sufCnt[i + 1]);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###distinctDifferenceArray_Test.java", "reference_code": "    public static int[] distinctDifferenceArray(int[] nums) {\n        int n = nums.length;\n        Set<Integer> set = new HashSet<Integer>();\n        int[] sufCnt = new int[n + 1];\n        for (int i = n - 1; i > 0; i--) {\n            set.add(nums[i]);\n            sufCnt[i] = set.size();\n        }\n        int[] res = new int[n];\n        set.clear();\n        for (int i = 0; i < n; i++) {\n            set.add(nums[i]);\n            res[i] = set.size() - sufCnt[i + 1];\n        }\n        return res;\n    }", "target_method_signature": "distinctDifferenceArray", "source_method_signature": "distinctDifferenceArray", "target_allMS": "    public static int[] distinctDifferenceArray(int[] nums) {", "source_allMS": "    vector<int> distinctDifferenceArray(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class distinctDifferenceArray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] testInputs = {\n            {},                       // Edge case: empty array\n            {1},                      // Edge case: single element\n            {1, 1},                   // Edge case: two identical elements\n            {1, 2, 3},                // Case: all distinct elements\n            {1, 2, 2, 3},             // Mixed case: some duplicates\n            {3, 3, 3, 3, 3},          // Case: all identical elements\n            {1, 2, 3, 1, 2, 3},       // Cycle of distinct values\n            {1, 2, 1, 2, 1, 2},       // Alternating duplicates\n            {2, 2, 4, 5, 4},          // Mixed values with several duplicates\n            {5, 5, 5, 4, 4, 3, 2, 1}  // Descending values with repeated elements\n        };\n\n        for(int[] input : testInputs) {\n            int[] result = distinctDifferenceArray(input);\n            System.out.print(\"Input: \");\n            for(int num : input) {\n                System.out.print(num + \" \");\n            }\n            System.out.print(\" -> Output: \");\n            for(int res : result) {\n                System.out.print(res + \" \");\n            }\n            System.out.println();\n        }\n    }\n}", "all_input_output_value": "\ninput1: nums=[]\noutput1: \n--------\ninput2: nums=[1]\noutput2: 1 \n--------\ninput3: nums=[1, 1]\noutput3: 0 1 \n--------\ninput4: nums=[1, 2, 3]\noutput4: -1 1 3 \n--------\ninput5: nums=[1, 2, 2, 3]\noutput5: -1 0 1 3 \n--------\ninput6: nums=[3, 3, 3, 3, 3]\noutput6: 0 0 0 0 1 \n--------\ninput7: nums=[1, 2, 3, 1, 2, 3]\noutput7: -2 -1 0 1 2 3 \n--------\ninput8: nums=[1, 2, 1, 2, 1, 2]\noutput8: -1 0 0 0 1 2 \n--------\ninput9: nums=[2, 2, 4, 5, 4]\noutput9: -2 -1 0 2 3 \n--------\ninput10: nums=[5, 5, 5, 4, 4, 3, 2, 1]\noutput10: -4 -4 -3 -2 -1 1 3 5 \n", "input_output_value": ["\ninput1: nums=[]\noutput1: \n", "\ninput2: nums=[1]\noutput2: 1 \n", "\ninput3: nums=[1, 1]\noutput3: 0 1 \n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n// TOFILL\nint main() {\n    vector<vector<int>> testInputs = {\n        {},\n        {1},\n        {1, 1},\n        {1, 2, 3},\n        {1, 2, 2, 3},\n        {3, 3, 3, 3, 3},\n        {1, 2, 3, 1, 2, 3},\n        {1, 2, 1, 2, 1, 2},\n        {2, 2, 4, 5, 4},\n        {5, 5, 5, 4, 4, 3, 2, 1}\n    };\n\n    for(const auto& input : testInputs) {\n        vector<int> result = distinctDifferenceArray(const_cast<vector<int>&>(input));\n        for(const auto& value : result) {\n            cout << value << \" \";\n        }\n        cout << endl;\n    }\n}", "TAG": "Success"}
{"source_Lan": "cpp###findAnswer.cpp", "source_code_str": "  vector<int> findAnswer(int n, vector<int> &A)\n  {\n    vector<long long> pref(n, A[0]);\n    for (int i = 1; i < n; i++)\n    {\n      pref[i] = pref[i - 1] + A[i];\n    }\n    stack<int> s;\n    vector<int> res(n+1, 0);\n    for (int i = 0; i < n; i++)\n    {\n      if (pref[i] > 0)\n      {\n        res[0] = i + 1;\n        break;\n      }\n    }\n    for (int i = n - 1; i >= 0; i--)\n    {\n      while (!s.empty() && pref[s.top()] <= pref[i])\n        s.pop();\n      if (s.empty())\n        res[i+1] = 0;\n      else if (i < n - 1)\n        res[i + 1] = s.top() - i;\n      s.push(i);\n    }\n    res.pop_back();\n    return res;\n  }", "source_code_block": "", "target_Lan": "java###findAnswer_Test.java", "reference_code": "    public static ArrayList<Integer> findAnswer(int n, int[] A) \n    {\n        ArrayList<Long> pref = new ArrayList<>();\n        pref.add((long) A[0]);\n        \n        for (int i = 1; i < n; i++) {\n            pref.add(pref.get(i - 1) + A[i]);\n        }\n        Stack<Integer> s = new Stack<>();\n        ArrayList<Integer> res = new ArrayList<>();\n        for(int i=0;i<=n;i++)\n        {\n            res.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            if (pref.get(i) > 0) \n            {\n                res.set(0,i+1);\n                break;\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) \n        {\n            while (!s.isEmpty() && pref.get(s.peek()) <= pref.get(i)) {\n                s.pop();\n            }\n            if (s.isEmpty()) \n            {\n                res.set(i+1,0);\n            } \n            else if (i < n - 1) \n            {\n                res.set(i + 1, s.peek() - i);\n            }\n            s.push(i);\n        }\n        res.remove(res.size() - 1);\n        return res;\n    }", "target_method_signature": "findAnswer", "source_method_signature": "findAnswer", "target_allMS": "    public static ArrayList<Integer> findAnswer(int n, int[] A) ", "source_allMS": "  vector<int> findAnswer(int n, vector<int> &A)", "source_import": "#include <iostream>\n#include <vector>\n#include <stack>\nusing namespace std;", "target_import": "import java.util.ArrayList;\nimport java.util.Stack;", "commentTag": "//", "target_code_shell": "import java.util.ArrayList;\nimport java.util.Stack;\nimport java.util.ArrayList;\nimport java.util.Stack;\npublic class findAnswer_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] input1_A = {};\n\n        int[] input2_A = {-1, -2, -3, -4, -5};\n        System.out.println(findAnswer(5, input2_A));\n\n        int[] input3_A = {1, 2, 3, 4, 5};\n        System.out.println(findAnswer(5, input3_A));\n\n        int[] input4_A = {1, -2, 3, -4, 5};\n        System.out.println(findAnswer(5, input4_A));\n\n        int[] input5_A = {-1, 2, 3, -2, 1};\n        System.out.println(findAnswer(5, input5_A));\n\n        int[] input6_A = {0, 0, 0, 0, 0};\n        System.out.println(findAnswer(5, input6_A));\n\n        int[] input7_A = {10};\n        System.out.println(findAnswer(1, input7_A));\n\n        int[] input8_A = {-1, 0, 1};\n        System.out.println(findAnswer(3, input8_A));\n\n        int[] input9_A = {5, 5, -10, 5};\n        System.out.println(findAnswer(4, input9_A));\n\n        int[] input10_A = {10, -5, -5, 10, 10, -10};\n        System.out.println(findAnswer(6, input10_A));\n    }\n}", "input_output_value": ["\ninput1: n=5, A={-1, -2, -3, -4, -5}\noutput1: [0, 0, 0, 0, 0]\n", "\ninput2: n=5, A={1, 2, 3, 4, 5}\noutput2: [1, 1, 1, 1, 1]\n", "\ninput3: n=5, A={1, -2, 3, -4, 5}\noutput3: [1, 2, 1, 2, 1]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <stack>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stack>\n// TOFILL\nint main() {\n    vector<int> A1 = {-1, -2, -3, -4, -5};\n    vector<int> A2 = {1, 2, 3, 4, 5};\n    vector<int> A3 = {1, -2, 3, -4, 5};\n    vector<int> A4 = {-1, 2, 3, -2, 1};\n    vector<int> A5 = {0, 0, 0, 0, 0};\n    vector<int> A6 = {10};\n    vector<int> A7 = {-1, 0, 1};\n    vector<int> A8 = {5, 5, -10, 5};\n    vector<int> A9 = {10, -5, -5, 10, 10, -10};\n\n    vector<int> result1 = findAnswer(5, A1);\n    vector<int> result2 = findAnswer(5, A2);\n    vector<int> result3 = findAnswer(5, A3);\n    vector<int> result4 = findAnswer(5, A4);\n    vector<int> result5 = findAnswer(5, A5);\n    vector<int> result6 = findAnswer(1, A6);\n    vector<int> result7 = findAnswer(3, A7);\n    vector<int> result8 = findAnswer(4, A8);\n    vector<int> result9 = findAnswer(6, A9);\n\n    // Print results\n    for(int val : result1) cout << val << \" \";\n    cout << endl;\n    for(int val : result2) cout << val << \" \";\n    cout << endl;\n    for(int val : result3) cout << val << \" \";\n    cout << endl;\n    for(int val : result4) cout << val << \" \";\n    cout << endl;\n    for(int val : result5) cout << val << \" \";\n    cout << endl;\n    for(int val : result6) cout << val << \" \";\n    cout << endl;\n    for(int val : result7) cout << val << \" \";\n    cout << endl;\n    for(int val : result8) cout << val << \" \";\n    cout << endl;\n    for(int val : result9) cout << val << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success", "all_input_output_value": "\ninput1: n=5, A={-1, -2, -3, -4, -5}\noutput1: [0, 0, 0, 0, 0]\n--------\ninput2: n=5, A={1, 2, 3, 4, 5}\noutput2: [1, 1, 1, 1, 1]\n--------\ninput3: n=5, A={1, -2, 3, -4, 5}\noutput3: [1, 2, 1, 2, 1]\n--------\ninput4: n=5, A={-1, 2, 3, -2, 1}\noutput4: [2, 1, 1, 0, 1]\n--------\ninput5: n=5, A={0, 0, 0, 0, 0}\noutput5: [0, 0, 0, 0, 0]\n--------\ninput6: n=1, A={10}\noutput6: [1]\n--------\ninput7: n=3, A={-1, 0, 1}\noutput7: [0, 2, 1]\n--------\ninput8: n=4, A={5, 5, -10, 5}\noutput8: [1, 1, 0, 1]\n--------\ninput9: n=6, A={10, -5, -5, 10, 10, -10}\noutput9: [1, 4, 2, 1, 1, 0]\n"}
{"source_Lan": "cpp###buyChoco.cpp", "source_code_str": "    int buyChoco(vector<int>& prices, int money) {\n        int fi = INT_MAX, se = INT_MAX;\n        for (auto p : prices) {\n            if (p < fi) {\n                se = fi;\n                fi = p;\n            } else if (p < se) {\n                se = p;\n            }\n        }\n        return money < fi + se ? money : money - fi - se;\n    }", "source_code_block": "", "target_Lan": "java###buyChoco_Test.java", "reference_code": "    public static int buyChoco(int[] prices, int money) {\n        int fi = Integer.MAX_VALUE, se = Integer.MAX_VALUE;\n        for (int price : prices) {\n            if (price < fi) {\n                se = fi;\n                fi = price;\n            } else if (price < se) {\n                se = price;\n            }\n        }\n        return money < fi + se ? money : money - fi - se;\n    }", "target_method_signature": "buyChoco", "source_method_signature": "buyChoco", "source_allMS": "    int buyChoco(vector<int>& prices, int money) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <limits.h>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class buyChoco_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(buyChoco(new int[]{1, 2, 3}, 5)); // Expected output: 0\n        System.out.println(buyChoco(new int[]{1, 2}, 3));     // Expected output: 0\n        System.out.println(buyChoco(new int[]{1, 1, 1}, 2));  // Expected output: 2\n        System.out.println(buyChoco(new int[]{5, 10, 15}, 4)); // Expected output: 4\n        System.out.println(buyChoco(new int[]{10}, 10));      // Expected output: 10\n        System.out.println(buyChoco(new int[]{1, 3, 4}, 3));   // Expected output: 0\n        System.out.println(buyChoco(new int[]{}, 10));         // Expected output: 10\n        System.out.println(buyChoco(new int[]{3, 2, 1}, 6));   // Expected output: 0\n        System.out.println(buyChoco(new int[]{1, 2, 1}, 4));   // Expected output: 2\n        System.out.println(buyChoco(new int[]{5, 5, 5}, 12));  // Expected output: 2\n    }\n}", "all_input_output_value": "\ninput1: prices=[1, 2, 3], money=5\noutput1: 2\n--------\ninput2: prices=[1, 2], money=3\noutput2: 0\n--------\ninput3: prices=[1, 1, 1], money=2\noutput3: 0\n--------\ninput4: prices=[5, 10, 15], money=4\noutput4: 4\n--------\ninput5: prices=[10], money=10\noutput5: -2147483647\n--------\ninput6: prices=[1, 3, 4], money=3\noutput6: 3\n--------\ninput7: prices=[], money=10\noutput7: 12\n--------\ninput8: prices=[3, 2, 1], money=6\noutput8: 3\n--------\ninput9: prices=[1, 2, 1], money=4\noutput9: 2\n--------\ninput10: prices=[5, 5, 5], money=12\noutput10: 2\n", "target_allMS": "    public static int buyChoco(int[] prices, int money) {", "input_output_value": ["\ninput1: prices=[1, 2, 3], money=5\noutput1: 2\n", "\ninput2: prices=[1, 2], money=3\noutput2: 0\n", "\ninput3: prices=[1, 1, 1], money=2\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <limits.h>\n#include <iostream>\n#include <vector>\n#include <climits>\n// TOFILL\nint main() {\n    vector<int> prices1 = {1, 2, 3};\n    int money1 = 5;\n    cout << buyChoco(prices1, money1) << endl;\n\n    vector<int> prices2 = {1, 2};\n    int money2 = 3;\n    cout << buyChoco(prices2, money2) << endl;\n\n    vector<int> prices3 = {1, 1, 1};\n    int money3 = 2;\n    cout << buyChoco(prices3, money3) << endl;\n\n    vector<int> prices4 = {5, 10, 15};\n    int money4 = 4;\n    cout << buyChoco(prices4, money4) << endl;\n\n    vector<int> prices5 = {10};\n    int money5 = 10;\n    cout << buyChoco(prices5, money5) << endl;\n\n    vector<int> prices6 = {1, 3, 4};\n    int money6 = 3;\n    cout << buyChoco(prices6, money6) << endl;\n\n    vector<int> prices7 = {};\n    int money7 = 10;\n    cout << buyChoco(prices7, money7) << endl;\n\n    vector<int> prices8 = {3, 2, 1};\n    int money8 = 6;\n    cout << buyChoco(prices8, money8) << endl;\n\n    vector<int> prices9 = {1, 2, 1};\n    int money9 = 4;\n    cout << buyChoco(prices9, money9) << endl;\n\n    vector<int> prices10 = {5, 5, 5};\n    int money10 = 12;\n    cout << buyChoco(prices10, money10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###findPeakGrid.cpp", "source_code_str": "vector<int> findPeakGrid(vector<vector<int>>& mat) {\n        int m = mat.size();\n        int low = 0, high = m - 1;\n        while (low <= high) {\n            int i = (low + high) / 2;\n            int j = max_element(mat[i].begin(), mat[i].end()) - mat[i].begin();\n            if (i - 1 >= 0 && mat[i][j] < mat[i - 1][j]) {\n                high = i - 1;\n                continue;\n            }\n            if (i + 1 < m && mat[i][j] < mat[i + 1][j]) {\n                low = i + 1;\n                continue;\n            }\n            return {i, j};\n        }\n        return {}; \n    }", "source_code_block": "", "target_Lan": "java###findPeakGrid_Test.java", "reference_code": "public static int[] findPeakGrid(int[][] mat) {\n        int m = mat.length, n = mat[0].length;\n        int low = 0, high = m - 1;\n        while (low <= high) {\n            int i = (low + high) / 2;\n            int j = -1, maxElement = -1;\n            for (int k = 0; k < n; k++) {\n                if (mat[i][k] > maxElement) {\n                    j = k;\n                    maxElement = mat[i][k];\n                }\n            }\n            if (i - 1 >= 0 && mat[i][j] < mat[i - 1][j]) {\n                high = i - 1;\n                continue;\n            }\n            if (i + 1 < m && mat[i][j] < mat[i + 1][j]) {\n                low = i + 1;\n                continue;\n            }\n            return new int[]{i, j};\n        }\n        return new int[0]; \n    }", "target_method_signature": "findPeakGrid", "source_method_signature": "findPeakGrid", "source_allMS": "vector<int> findPeakGrid(vector<vector<int>>& mat) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class findPeakGrid_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 2, 3}, {6, 5, 4}, {7, 8, 9}};\n        int[][] input2 = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};\n        int[][] input3 = {{10, 20, 30}};\n        int[][] input4 = {{10}, {20}, {30}};\n        int[][] input5 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {1, 2, 3, 4}};\n        int[][] input6 = {{5, 10, 5}, {10, 15, 10}, {5, 10, 5}};\n        int[][] input7 = {{10, 8, 5}, {7, 6, 9}, {8, 9, 10}};\n        int[][] input8 = {{1, 3, 5}, {7, 9, 11}, {12, 14, 16}};\n        int[][] input9 = {{2, 1}, {3, 4}};\n        int[][] input10 = {{6, 7, 8, 9}, {7, 8, 9, 6}, {6, 7, 5, 8}};\n\n        System.out.println(Arrays.toString(findPeakGrid(input1)));\n        System.out.println(Arrays.toString(findPeakGrid(input2)));\n        System.out.println(Arrays.toString(findPeakGrid(input3)));\n        System.out.println(Arrays.toString(findPeakGrid(input4)));\n        System.out.println(Arrays.toString(findPeakGrid(input5)));\n        System.out.println(Arrays.toString(findPeakGrid(input6)));\n        System.out.println(Arrays.toString(findPeakGrid(input7)));\n        System.out.println(Arrays.toString(findPeakGrid(input8)));\n        System.out.println(Arrays.toString(findPeakGrid(input9)));\n        System.out.println(Arrays.toString(findPeakGrid(input10)));\n    }\n}", "all_input_output_value": "\ninput1: mat={{1, 2, 3}, {6, 5, 4}, {7, 8, 9}}\noutput1: [2, 2]\n--------\ninput2: mat={{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}\noutput2: [1, 0]\n--------\ninput3: mat={{10, 20, 30}}\noutput3: [0, 2]\n--------\ninput4: mat={{10}, {20}, {30}}\noutput4: [2, 0]\n--------\ninput5: mat={{1, 2, 3, 4}, {5, 6, 7, 8}, {1, 2, 3, 4}}\noutput5: [1, 3]\n--------\ninput6: mat={{5, 10, 5}, {10, 15, 10}, {5, 10, 5}}\noutput6: [1, 1]\n--------\ninput7: mat={{10, 8, 5}, {7, 6, 9}, {8, 9, 10}}\noutput7: [2, 2]\n--------\ninput8: mat={{1, 3, 5}, {7, 9, 11}, {12, 14, 16}}\noutput8: [2, 2]\n--------\ninput9: mat={{2, 1}, {3, 4}}\noutput9: [1, 1]\n--------\ninput10: mat={{6, 7, 8, 9}, {7, 8, 9, 6}, {6, 7, 5, 8}}\noutput10: [1, 2]\n", "target_allMS": "public static int[] findPeakGrid(int[][] mat) {", "input_output_value": ["\ninput1: mat={{1, 2, 3}, {6, 5, 4}, {7, 8, 9}}\noutput1: [2, 2]\n", "\ninput2: mat={{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}\noutput2: [1, 0]\n", "\ninput3: mat={{10, 20, 30}}\noutput3: [0, 2]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<vector<int>> mat1 = {{1, 2, 3}, {6, 5, 4}, {7, 8, 9}};\n    vector<vector<int>> mat2 = {{1, 1, 1}, {1, 1, 1}, {1, 1, 1}};\n    vector<vector<int>> mat3 = {{10, 20, 30}};\n    vector<vector<int>> mat4 = {{10}, {20}, {30}};\n    vector<vector<int>> mat5 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {1, 2, 3, 4}};\n    vector<vector<int>> mat6 = {{5, 10, 5}, {10, 15, 10}, {5, 10, 5}};\n    vector<vector<int>> mat7 = {{10, 8, 5}, {7, 6, 9}, {8, 9, 10}};\n    vector<vector<int>> mat8 = {{1, 3, 5}, {7, 9, 11}, {12, 14, 16}};\n    vector<vector<int>> mat9 = {{2, 1}, {3, 4}};\n    vector<vector<int>> mat10 = {{6, 7, 8, 9}, {7, 8, 9, 6}, {6, 7, 5, 8}};\n    \n    vector<int> result1 = findPeakGrid(mat1);\n    vector<int> result2 = findPeakGrid(mat2);\n    vector<int> result3 = findPeakGrid(mat3);\n    vector<int> result4 = findPeakGrid(mat4);\n    vector<int> result5 = findPeakGrid(mat5);\n    vector<int> result6 = findPeakGrid(mat6);\n    vector<int> result7 = findPeakGrid(mat7);\n    vector<int> result8 = findPeakGrid(mat8);\n    vector<int> result9 = findPeakGrid(mat9);\n    vector<int> result10 = findPeakGrid(mat10);\n\n    cout << \"Peak for mat1:(\" << result1[0] << \", \" << result1[1] << \")\" << endl;\n    cout << \"Peak for mat2:(\" << result2[0] << \", \" << result2[1] << \")\" << endl;\n    cout << \"Peak for mat3:(\" << result3[0] << \", \" << result3[1] << \")\" << endl;\n    cout << \"Peak for mat4:(\" << result4[0] << \", \" << result4[1] << \")\" << endl;\n    cout << \"Peak for mat5:(\" << result5[0] << \", \" << result5[1] << \")\" << endl;\n    cout << \"Peak for mat6:(\" << result6[0] << \", \" << result6[1] << \")\" << endl;\n    cout << \"Peak for mat7:(\" << result7[0] << \", \" << result7[1] << \")\" << endl;\n    cout << \"Peak for mat8:(\" << result8[0] << \", \" << result8[1] << \")\" << endl;\n    cout << \"Peak for mat9:(\" << result9[0] << \", \" << result9[1] << \")\" << endl;\n    cout << \"Peak for mat10:(\" << result10[0] << \", \" << result10[1] << \")\" << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###isAcronym.cpp", "source_code_str": "bool isAcronym(vector<string>& words, string s) {\n        if (s.size() != words.size()) {\n            return false;\n        }\n        for (int i = 0; i < s.size(); i++) {\n            if (words[i][0] != s[i]) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_block": "", "target_Lan": "java###isAcronym_Test.java", "reference_code": "public static boolean isAcronym(List<String> words, String s) {\n        if (words.size() != s.length()) {\n            return false;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            if (words.get(i).charAt(0) != s.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_method_signature": "isAcronym", "source_method_signature": "isAcronym", "source_allMS": "bool isAcronym(vector<string>& words, string s) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.List;\npublic class isAcronym_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(isAcronym(Arrays.asList(), \"\")); // input1\n        System.out.println(isAcronym(Arrays.asList(\"hello\"), \"h\")); // input2\n        System.out.println(isAcronym(Arrays.asList(\"hello\", \"world\"), \"h\")); // input3\n        System.out.println(isAcronym(Arrays.asList(\"hello\", \"world\"), \"hw\")); // input4\n        System.out.println(isAcronym(Arrays.asList(\"happy\", \"birthday\"), \"hb\")); // input5\n        System.out.println(isAcronym(Arrays.asList(\"java\", \"is\", \"fun\"), \"jif\")); // input6\n        System.out.println(isAcronym(Arrays.asList(\"java\", \"is\", \"awesome\"), \"jia\")); // input7\n        System.out.println(isAcronym(Arrays.asList(\"function\", \"are\", \"cool\"), \"fac\")); // input8\n        System.out.println(isAcronym(Arrays.asList(\"small\", \"steps\"), \"ss\")); // input9\n        System.out.println(isAcronym(Arrays.asList(\"long\", \"journey\", \"begins\", \"with\", \"one\"), \"ljbwo\")); // input10\n    }\n}", "all_input_output_value": "\ninput1: words=[], s=\"\"\noutput1: true\n--------\ninput2: words=[\"hello\"], s=\"h\"\noutput2: true\n--------\ninput3: words=[\"hello\", \"world\"], s=\"h\"\noutput3: false\n--------\ninput4: words=[\"hello\", \"world\"], s=\"hw\"\noutput4: true\n--------\ninput5: words=[\"happy\", \"birthday\"], s=\"hb\"\noutput5: true\n--------\ninput6: words=[\"java\", \"is\", \"fun\"], s=\"jif\"\noutput6: true\n--------\ninput7: words=[\"java\", \"is\", \"awesome\"], s=\"jia\"\noutput7: true\n--------\ninput8: words=[\"function\", \"are\", \"cool\"], s=\"fac\"\noutput8: true\n--------\ninput9: words=[\"small\", \"steps\"], s=\"ss\"\noutput9: true\n--------\ninput10: words=[\"long\", \"journey\", \"begins\", \"with\", \"one\"], s=\"ljbwo\"\noutput10: true\n", "target_allMS": "public static boolean isAcronym(List<String> words, String s) {", "input_output_value": ["\ninput1: words=[], s=\"\"\noutput1: true\n", "\ninput2: words=[\"hello\"], s=\"h\"\noutput2: true\n", "\ninput3: words=[\"hello\", \"world\"], s=\"h\"\noutput3: false\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<string> words1 = {};\n    string s1 = \"\";\n    cout << isAcronym(words1, s1) << endl;\n\n    vector<string> words2 = {\"hello\"};\n    string s2 = \"h\";\n    cout << isAcronym(words2, s2) << endl;\n\n    vector<string> words3 = {\"hello\", \"world\"};\n    string s3 = \"h\";\n    cout << isAcronym(words3, s3) << endl;\n\n    string s4 = \"hw\";\n    cout << isAcronym(words3, s4) << endl;\n\n    vector<string> words5 = {\"happy\", \"birthday\"};\n    string s5 = \"hb\";\n    cout << isAcronym(words5, s5) << endl;\n\n    vector<string> words6 = {\"java\", \"is\", \"fun\"};\n    string s6 = \"jif\";\n    cout << isAcronym(words6, s6) << endl;\n\n    vector<string> words7 = {\"java\", \"is\", \"awesome\"};\n    string s7 = \"jia\";\n    cout << isAcronym(words7, s7) << endl;\n\n    vector<string> words8 = {\"function\", \"are\", \"cool\"};\n    string s8 = \"fac\";\n    cout << isAcronym(words8, s8) << endl;\n\n    vector<string> words9 = {\"small\", \"steps\"};\n    string s9 = \"ss\";\n    cout << isAcronym(words9, s9) << endl;\n\n    vector<string> words10 = {\"long\", \"journey\", \"begins\", \"with\", \"one\"};\n    string s10 = \"ljbwo\";\n    cout << isAcronym(words10, s10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###possibleToStamp.cpp", "source_code_str": "bool possibleToStamp(vector<vector<int>>& grid, int stampHeight, int stampWidth) {\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> sum(m + 2, vector<int>(n + 2, 0));\n        vector<vector<int>> diff(m + 2, vector<int>(n + 2, 0));\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + grid[i - 1][j - 1];\n            }\n        }\n        for (int i = 1; i + stampHeight - 1 <= m; i++) {\n            for (int j = 1; j + stampWidth - 1 <= n; j++) {\n                int x = i + stampHeight - 1;\n                int y = j + stampWidth - 1;\n                if (sum[x][y] - sum[x][j - 1] - sum[i - 1][y] + sum[i - 1][j - 1] == 0) {\n                    diff[i][j]++;\n                    diff[i][y + 1]--;\n                    diff[x + 1][j]--;\n                    diff[x + 1][y + 1]++;\n                }\n            }\n        }\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n                if (diff[i][j] == 0 && grid[i - 1][j - 1] == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "source_code_block": "", "target_Lan": "java###possibleToStamp_Test.java", "reference_code": "    public static boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {\n        int m = grid.length, n = grid[0].length;\n        int[][] sum = new int[m + 2][n + 2];\n        int[][] diff = new int[m + 2][n + 2];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + grid[i - 1][j - 1];\n            }\n        }\n        for (int i = 1; i + stampHeight - 1 <= m; i++) {\n            for (int j = 1; j + stampWidth - 1 <= n; j++) {\n                int x = i + stampHeight - 1;\n                int y = j + stampWidth - 1;\n                if (sum[x][y] - sum[x][j - 1] - sum[i - 1][y] + sum[i - 1][j - 1] == 0) {\n                    diff[i][j]++;\n                    diff[i][y + 1]--;\n                    diff[x + 1][j]--;\n                    diff[x + 1][y + 1]++;\n                }\n            }\n        }\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                diff[i][j] += diff[i - 1][j] + diff[i][j - 1] - diff[i - 1][j - 1];\n                if (diff[i][j] == 0 && grid[i - 1][j - 1] == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }", "target_method_signature": "possibleToStamp", "source_method_signature": "possibleToStamp", "source_allMS": "bool possibleToStamp(vector<vector<int>>& grid, int stampHeight, int stampWidth) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class possibleToStamp_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(possibleToStamp(new int[][]{{0}}, 1, 1));\n        System.out.println(possibleToStamp(new int[][]{{0, 0}, {0, 0}}, 2, 2));\n        System.out.println(possibleToStamp(new int[][]{{1}}, 1, 1));\n        System.out.println(possibleToStamp(new int[][]{{0, 1}, {0, 0}}, 1, 2));\n        System.out.println(possibleToStamp(new int[][]{{0, 0, 1}, {0, 0, 0}}, 1, 3));\n        System.out.println(possibleToStamp(new int[][]{{0, 0, 0}, {0, 0, 0}}, 2, 3));\n        System.out.println(possibleToStamp(new int[][]{{0, 0}, {0, 1}}, 2, 1));\n        System.out.println(possibleToStamp(new int[][]{{1, 1}, {1, 1}}, 1, 1));\n        System.out.println(possibleToStamp(new int[][]{{0, 0, 0}, {0, 1, 0}}, 2, 1));\n        System.out.println(possibleToStamp(new int[][]{{0}}, 2, 2));\n    }\n}", "all_input_output_value": "\ninput1: grid=[[0]], stampHeight=1, stampWidth=1\noutput1: true\n--------\ninput2: grid=[[0, 0], [0, 0]], stampHeight=2, stampWidth=2\noutput2: true\n--------\ninput3: grid=[[1]], stampHeight=1, stampWidth=1\noutput3: true\n--------\ninput4: grid=[[0, 1], [0, 0]], stampHeight=1, stampWidth=2\noutput4: false\n--------\ninput5: grid=[[0, 0, 1], [0, 0, 0]], stampHeight=1, stampWidth=3\noutput5: false\n--------\ninput6: grid=[[0, 0, 0], [0, 0, 0]], stampHeight=2, stampWidth=3\noutput6: true\n--------\ninput7: grid=[[0, 0], [0, 1]], stampHeight=2, stampWidth=1\noutput7: false\n--------\ninput8: grid=[[1, 1], [1, 1]], stampHeight=1, stampWidth=1\noutput8: true\n--------\ninput9: grid=[[0, 0, 0], [0, 1, 0]], stampHeight=2, stampWidth=1\noutput9: false\n--------\ninput10: grid=[[0]], stampHeight=2, stampWidth=2\noutput10: false\n", "target_allMS": "    public static boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {", "input_output_value": ["\ninput1: grid=[[0]], stampHeight=1, stampWidth=1\noutput1: true\n", "\ninput2: grid=[[0, 0], [0, 0]], stampHeight=2, stampWidth=2\noutput2: true\n", "\ninput3: grid=[[1]], stampHeight=1, stampWidth=1\noutput3: true\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{0}};\n    cout << possibleToStamp(grid1, 1, 1) << endl;\n\n    vector<vector<int>> grid2 = {{0, 0}, {0, 0}};\n    cout << possibleToStamp(grid2, 2, 2) << endl;\n\n    vector<vector<int>> grid3 = {{1}};\n    cout << possibleToStamp(grid3, 1, 1) << endl;\n\n    vector<vector<int>> grid4 = {{0, 1}, {0, 0}};\n    cout << possibleToStamp(grid4, 1, 2) << endl;\n\n    vector<vector<int>> grid5 = {{0, 0, 1}, {0, 0, 0}};\n    cout << possibleToStamp(grid5, 1, 3) << endl;\n\n    vector<vector<int>> grid6 = {{0, 0, 0}, {0, 0, 0}};\n    cout << possibleToStamp(grid6, 2, 3) << endl;\n\n    vector<vector<int>> grid7 = {{0, 0}, {0, 1}};\n    cout << possibleToStamp(grid7, 2, 1) << endl;\n\n    vector<vector<int>> grid8 = {{1, 1}, {1, 1}};\n    cout << possibleToStamp(grid8, 1, 1) << endl;\n\n    vector<vector<int>> grid9 = {{0, 0, 0}, {0, 1, 0}};\n    cout << possibleToStamp(grid9, 2, 1) << endl;\n\n    vector<vector<int>> grid10 = {{0}};\n    cout << possibleToStamp(grid10, 2, 2) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###makeSmallestPalindrome.cpp", "source_code_str": "string makeSmallestPalindrome(string s) {\n        int left = 0, right = s.size() - 1;\n        while (left < right) {\n            if (s[left] != s[right]) {\n                s[left] = s[right] = min(s[left], s[right]);\n            }\n            ++left;\n            --right;\n        }\n        return s;\n    }", "source_code_block": "", "target_Lan": "java###makeSmallestPalindrome_Test.java", "reference_code": "    public static String makeSmallestPalindrome(String s) {\n        char[] arr = s.toCharArray();\n        int left = 0, right = arr.length - 1;\n        while (left < right) {\n            if (arr[left] != arr[right]) {\n                arr[left] = arr[right] = (char) Math.min(arr[left], arr[right]);\n            }\n            ++left;\n            --right;\n        }\n        return new String(arr);\n    }", "target_method_signature": "makeSmallestPalindrome", "source_method_signature": "makeSmallestPalindrome", "source_allMS": "string makeSmallestPalindrome(string s) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.Arrays;\npublic class makeSmallestPalindrome_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(makeSmallestPalindrome(\"\"));        // Test input 1\n        System.out.println(makeSmallestPalindrome(\"a\"));       // Test input 2\n        System.out.println(makeSmallestPalindrome(\"abc\"));     // Test input 3\n        System.out.println(makeSmallestPalindrome(\"race\"));    // Test input 4\n        System.out.println(makeSmallestPalindrome(\"abba\"));    // Test input 5\n        System.out.println(makeSmallestPalindrome(\"abcba\"));   // Test input 6\n        System.out.println(makeSmallestPalindrome(\"xyz\"));     // Test input 7\n        System.out.println(makeSmallestPalindrome(\"aabb\"));    // Test input 8\n        System.out.println(makeSmallestPalindrome(\"abcd\"));    // Test input 9\n        System.out.println(makeSmallestPalindrome(\"madam\"));   // Test input 10\n    }\n}", "all_input_output_value": "\ninput1: s=\"\"\noutput1: a\n--------\ninput2: s=\"a\"\noutput2: aba\n--------\ninput3: s=\"abc\"\noutput3: eaae\n--------\ninput4: s=\"race\"\noutput4: abba\n--------\ninput5: s=\"abba\"\noutput5: abcba\n--------\ninput6: s=\"abcba\"\noutput6: xyx\n--------\ninput7: s=\"xyz\"\noutput7: aaaa\n--------\ninput8: s=\"aabb\"\noutput8: abba\n--------\ninput9: s=\"abcd\"\noutput9: madam\n--------\ninput10: s=\"madam\"\noutput10: a\n", "target_allMS": "    public static String makeSmallestPalindrome(String s) {", "input_output_value": ["\ninput1: s=\"\"\noutput1: a\n", "\ninput2: s=\"a\"\noutput2: aba\n", "\ninput3: s=\"abc\"\noutput3: eaae\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << makeSmallestPalindrome(\"\") << endl;\n    cout << makeSmallestPalindrome(\"a\") << endl;\n    cout << makeSmallestPalindrome(\"abc\") << endl;\n    cout << makeSmallestPalindrome(\"race\") << endl;\n    cout << makeSmallestPalindrome(\"abba\") << endl;\n    cout << makeSmallestPalindrome(\"abcba\") << endl;\n    cout << makeSmallestPalindrome(\"xyz\") << endl;\n    cout << makeSmallestPalindrome(\"aabb\") << endl;\n    cout << makeSmallestPalindrome(\"abcd\") << endl;\n    cout << makeSmallestPalindrome(\"madam\") << endl;\n}"}
{"source_Lan": "cpp###maxTaxiEarnings.cpp", "source_code_str": "long long maxTaxiEarnings(int n, vector<vector<int>> &rides) {\n        vector<long long> dp(n + 1);\n        unordered_map<int, vector<vector<int>>> rideMap;\n        for (const auto &ride : rides) {\n            rideMap[ride[1]].push_back(ride);\n        }\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i - 1];\n            for (const auto &ride : rideMap[i]) {\n                dp[i] = max(dp[i], dp[ride[0]] + ride[1] - ride[0] + ride[2]);\n            }\n        }\n        return dp[n];\n    }", "source_code_block": "", "target_Lan": "java###maxTaxiEarnings_Test.java", "reference_code": "    public static long maxTaxiEarnings(int n, int[][] rides) {\n        long[] dp = new long[n + 1];\n        Map<Integer, List<int[]>> rideMap = new HashMap<Integer, List<int[]>>();\n        for (int[] ride : rides) {\n            rideMap.putIfAbsent(ride[1], new ArrayList<int[]>());\n            rideMap.get(ride[1]).add(ride);\n        }\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i - 1];\n            for (int[] ride : rideMap.getOrDefault(i, new ArrayList<int[]>())) {\n                dp[i] = Math.max(dp[i], dp[ride[0]] + ride[1] - ride[0] + ride[2]);\n            }\n        }\n        return dp[n];\n    }", "target_method_signature": "maxTaxiEarnings", "source_method_signature": "maxTaxiEarnings", "source_allMS": "long long maxTaxiEarnings(int n, vector<vector<int>> &rides) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.*;\npublic class maxTaxiEarnings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxTaxiEarnings(5, new int[][]{})); // Test Input 1\n        System.out.println(maxTaxiEarnings(5, new int[][]{{1, 2, 5}, {2, 3, 10}})); // Test Input 2\n        System.out.println(maxTaxiEarnings(5, new int[][]{{1, 3, 10}, {3, 5, 20}, {1, 5, 15}})); // Test Input 3\n        System.out.println(maxTaxiEarnings(4, new int[][]{{1, 2, 5}, {2, 4, 10}, {3, 4, 15}})); // Test Input 4\n        System.out.println(maxTaxiEarnings(10, new int[][]{{1, 5, 10}, {2, 6, 15}, {3, 7, 5}})); // Test Input 5\n        System.out.println(maxTaxiEarnings(6, new int[][]{{1, 6, 10}, {2, 6, 20}, {4, 6, 10}})); // Test Input 6\n        System.out.println(maxTaxiEarnings(7, new int[][]{{1, 2, 5}, {1, 3, 20}, {1, 4, 10}})); // Test Input 7\n        System.out.println(maxTaxiEarnings(8, new int[][]{{1, 4, 10}, {2, 5, 20}, {3, 6, 30}, {4, 7, 15}})); // Test Input 8\n        System.out.println(maxTaxiEarnings(10, new int[][]{{1, 3, 10}, {1, 5, 30}, {5, 10, 25}})); // Test Input 9\n        System.out.println(maxTaxiEarnings(1000, new int[][]{{1, 500, 100}, {200, 600, 250}, {400, 800, 400}})); // Test Input 10\n    }\n}", "all_input_output_value": "\ninput1: n=5, rides=[]\noutput1: 0\n--------\ninput2: n=5, rides=[[1, 2, 5], [2, 3, 10]]\noutput2: 17\n--------\ninput3: n=5, rides=[[1, 3, 10], [3, 5, 20], [1, 5, 15]]\noutput3: 34\n--------\ninput4: n=4, rides=[[1, 2, 5], [2, 4, 10], [3, 4, 15]]\noutput4: 22\n--------\ninput5: n=10, rides=[[1, 5, 10], [2, 6, 15], [3, 7, 5]]\noutput5: 19\n--------\ninput6: n=6, rides=[[1, 6, 10], [2, 6, 20], [4, 6, 10]]\noutput6: 24\n--------\ninput7: n=7, rides=[[1, 2, 5], [1, 3, 20], [1, 4, 10]]\noutput7: 22\n--------\ninput8: n=8, rides=[[1, 4, 10], [2, 5, 20], [3, 6, 30], [4, 7, 15]]\noutput8: 33\n--------\ninput9: n=10, rides=[[1, 3, 10], [1, 5, 30], [5, 10, 25]]\noutput9: 64\n--------\ninput10: n=1000, rides=[[1, 500, 100], [200, 600, 250], [400, 800, 400]]\noutput10: 800\n", "target_allMS": "    public static long maxTaxiEarnings(int n, int[][] rides) {", "input_output_value": ["\ninput1: n=5, rides=[]\noutput1: 0\n", "\ninput2: n=5, rides=[[1, 2, 5], [2, 3, 10]]\noutput2: 17\n", "\ninput3: n=5, rides=[[1, 3, 10], [3, 5, 20], [1, 5, 15]]\noutput3: 34\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<vector<int>> rides1 = {};\n    cout << maxTaxiEarnings(5, rides1) << endl;\n\n    vector<vector<int>> rides2 = {{1, 2, 5}, {2, 3, 10}};\n    cout << maxTaxiEarnings(5, rides2) << endl;\n\n    vector<vector<int>> rides3 = {{1, 3, 10}, {3, 5, 20}, {1, 5, 15}};\n    cout << maxTaxiEarnings(5, rides3) << endl;\n\n    vector<vector<int>> rides4 = {{1, 2, 5}, {2, 4, 10}, {3, 4, 15}};\n    cout << maxTaxiEarnings(4, rides4) << endl;\n\n    vector<vector<int>> rides5 = {{1, 5, 10}, {2, 6, 15}, {3, 7, 5}};\n    cout << maxTaxiEarnings(10, rides5) << endl;\n\n    vector<vector<int>> rides6 = {{1, 6, 10}, {2, 6, 20}, {4, 6, 10}};\n    cout << maxTaxiEarnings(6, rides6) << endl;\n\n    vector<vector<int>> rides7 = {{1, 2, 5}, {1, 3, 20}, {1, 4, 10}};\n    cout << maxTaxiEarnings(7, rides7) << endl;\n\n    vector<vector<int>> rides8 = {{1, 4, 10}, {2, 5, 20}, {3, 6, 30}, {4, 7, 15}};\n    cout << maxTaxiEarnings(8, rides8) << endl;\n\n    vector<vector<int>> rides9 = {{1, 3, 10}, {1, 5, 30}, {5, 10, 25}};\n    cout << maxTaxiEarnings(10, rides9) << endl;\n\n    vector<vector<int>> rides10 = {{1, 500, 100}, {200, 600, 250}, {400, 800, 400}};\n    cout << maxTaxiEarnings(1000, rides10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###carPooling.cpp", "source_code_str": "bool carPooling(vector<vector<int>>& trips, int capacity) {\n        int to_max = 0;\n        for (const auto& trip: trips) {\n            to_max = max(to_max, trip[2]);\n        }\n        vector<int> diff(to_max + 1);\n        for (const auto& trip: trips) {\n            diff[trip[1]] += trip[0];\n            diff[trip[2]] -= trip[0];\n        }\n        int count = 0;\n        for (int i = 0; i <= to_max; ++i) {\n            count += diff[i];\n            if (count > capacity) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_block": "", "target_Lan": "java###carPooling_Test.java", "reference_code": "public static boolean carPooling(int[][] trips, int capacity) {\n        int toMax = 0;\n        for (int[] trip : trips) {\n            toMax = Math.max(toMax, trip[2]);\n        }\n        int[] diff = new int[toMax + 1];\n        for (int[] trip : trips) {\n            diff[trip[1]] += trip[0];\n            diff[trip[2]] -= trip[0];\n        }\n        int count = 0;\n        for (int i = 0; i <= toMax; ++i) {\n            count += diff[i];\n            if (count > capacity) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_method_signature": "carPooling", "source_method_signature": "carPooling", "source_allMS": "bool carPooling(vector<vector<int>>& trips, int capacity) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class carPooling_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(carPooling(new int[][]{{2, 1, 5}, {3, 3, 7}}, 4)); // false\n        System.out.println(carPooling(new int[][]{{2, 1, 5}, {3, 5, 6}}, 4)); // true\n        System.out.println(carPooling(new int[][]{{1, 2, 4}, {4, 3, 5}, {2, 3, 8}}, 4)); // false\n        System.out.println(carPooling(new int[][]{{1, 0, 5}}, 1)); // false\n        System.out.println(carPooling(new int[][]{{5, 0, 5}, {3, 5, 10}, {2, 7, 9}}, 10)); // true\n        System.out.println(carPooling(new int[][]{{1, 1, 2}}, 1)); // true\n        System.out.println(carPooling(new int[][]{{1, 0, 1}, {2, 1, 2}, {3, 1, 3}}, 3)); // false\n        System.out.println(carPooling(new int[][]{{4, 1, 5}, {5, 2, 5}}, 7)); // true\n        System.out.println(carPooling(new int[][]{{2, 0, 3}, {3, 4, 6}, {1, 0, 4}}, 5)); // true\n        System.out.println(carPooling(new int[][]{{3, 1, 7}, {2, 4, 6}, {5, 2, 5}}, 10)); // true\n    }\n}", "all_input_output_value": "\ninput1: trips=[[2, 1, 5], [3, 3, 7]], capacity=4\noutput1: false\n--------\ninput2: trips=[[2, 1, 5], [3, 5, 6]], capacity=4\noutput2: true\n--------\ninput3: trips=[[1, 2, 4], [4, 3, 5], [2, 3, 8]], capacity=4\noutput3: false\n--------\ninput4: trips=[[1, 0, 5]], capacity=1\noutput4: false\n--------\ninput5: trips=[[5, 0, 5], [3, 5, 10], [2, 7, 9]], capacity=10\noutput5: true\n--------\ninput6: trips=[[1, 1, 2]], capacity=1\noutput6: true\n--------\ninput7: trips=[[1, 0, 1], [2, 1, 2], [3, 1, 3]], capacity=3\noutput7: false\n--------\ninput8: trips=[[4, 1, 5], [5, 2, 5]], capacity=7\noutput8: true\n--------\ninput9: trips=[[2, 0, 3], [3, 4, 6], [1, 0, 4]], capacity=5\noutput9: true\n--------\ninput10: trips=[[3, 1, 7], [2, 4, 6], [5, 2, 5]], capacity=10\noutput10: true\n", "target_allMS": "public static boolean carPooling(int[][] trips, int capacity) {", "input_output_value": ["\ninput1: trips=[[2, 1, 5], [3, 3, 7]], capacity=4\noutput1: false\n", "\ninput2: trips=[[2, 1, 5], [3, 5, 6]], capacity=4\noutput2: true\n", "\ninput3: trips=[[1, 2, 4], [4, 3, 5], [2, 3, 8]], capacity=4\noutput3: false\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<vector<int>>> testInputs = {\n        {{2, 1, 5}, {3, 3, 7}},   // capacity = 4\n        {{2, 1, 5}, {3, 5, 6}},   // capacity = 4\n        {{1, 2, 4}, {4, 3, 5}, {2, 3, 8}}, // capacity = 4\n        {{1, 0, 5}},              // capacity = 1\n        {{5, 0, 5}, {3, 5, 10}, {2, 7, 9}}, // capacity = 10\n        {{1, 1, 2}},              // capacity = 1\n        {{1, 0, 1}, {2, 1, 2}, {3, 1, 3}}, // capacity = 3\n        {{4, 1, 5}, {5, 2, 5}},   // capacity = 7\n        {{2, 0, 3}, {3, 4, 6}, {1, 0, 4}}, // capacity = 5\n        {{3, 1, 7}, {2, 4, 6}, {5, 2, 5}}  // capacity = 10\n    };\n    \n    vector<int> capacities = {4, 4, 4, 1, 10, 1, 3, 7, 5, 10};\n\n    for(size_t i = 0; i < testInputs.size(); ++i) {\n        cout <<(carPooling(testInputs[i], capacities[i]) ? \"True\" : \"False\") << endl;\n    }\n\n    return 0;\n}"}
{"source_Lan": "cpp###firstCompleteIndex.cpp", "source_code_str": "int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {\n        int n = mat.size();\n        int m = mat[0].size();\n        unordered_map<int, pair<int, int>> mp;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                mp[mat[i][j]] = {i, j};\n            }\n        }\n        vector<int> rowCnt(n, 0);\n        vector<int> colCnt(m, 0);\n        for (int i = 0; i < arr.size(); ++i) {\n            auto& v = mp[arr[i]];\n            ++rowCnt[v.first];\n            if (rowCnt[v.first] == m) {\n                return i;\n            }\n            ++colCnt[v.second];\n            if (colCnt[v.second] == n) {\n                return i;\n            }\n        }\n        return -1;\n    }", "source_code_block": "", "target_Lan": "java###firstCompleteIndex_Test.java", "reference_code": "public static int firstCompleteIndex(int[] arr, int[][] mat) {\n        int n = mat.length;\n        int m = mat[0].length;\n        Map<Integer, int[]> map = new HashMap<Integer, int[]>();\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                map.put(mat[i][j], new int[]{i, j});\n            }\n        }\n        int[] rowCnt = new int[n];\n        int[] colCnt = new int[m];\n        for (int i = 0; i < arr.length; ++i) {\n            int[] v = map.get(arr[i]);\n            ++rowCnt[v[0]];\n            if (rowCnt[v[0]] == m) {\n                return i;\n            }\n            ++colCnt[v[1]];\n            if (colCnt[v[1]] == n) {\n                return i;\n            }\n        }\n        return -1;\n    }", "target_method_signature": "firstCompleteIndex", "source_method_signature": "firstCompleteIndex", "source_allMS": "int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class firstCompleteIndex_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(firstCompleteIndex(new int[]{1, 2, 3, 4, 5}, new int[][]{{1, 2}, {3, 4}})); // Input_1\n        System.out.println(firstCompleteIndex(new int[]{1, 3, 2, 5, 4}, new int[][]{{1, 2}, {3, 4}})); // Input_2\n        System.out.println(firstCompleteIndex(new int[]{1, 1, 2, 2, 3}, new int[][]{{1, 2}, {3, 4}})); // Input_4\n        System.out.println(firstCompleteIndex(new int[]{}, new int[][]{{1, 2}, {3, 4}})); // Input_5\n        System.out.println(firstCompleteIndex(new int[]{1, 2, 3, 4}, new int[][]{{1, 20, 3}, {2, 4, 5}})); // Input_7\n        System.out.println(firstCompleteIndex(new int[]{10, 12, 13}, new int[][]{{10, 11, 12}, {13, 14, 15}})); // Input_8\n        System.out.println(firstCompleteIndex(new int[]{7, 8, 5, 6}, new int[][]{{8, 7}, {6, 5}})); // Input_9\n        System.out.println(firstCompleteIndex(new int[]{5, 4}, new int[][]{{5, 3, 2}, {1, 0, 4}})); // Input_10\n    }\n}", "all_input_output_value": "\ninput1: arr=[1, 2, 3, 4, 5], mat=[[1, 2], [3, 4]]\noutput1: 1\n--------\ninput2: arr=[1, 3, 2, 5, 4], mat=[[1, 2], [3, 4]]\noutput2: 1\n--------\ninput3: arr=[1, 1, 2, 2, 3], mat=[[1, 2], [3, 4]]\noutput3: 1\n--------\ninput4: arr=[], mat=[[1, 2], [3, 4]]\noutput4: -1\n--------\ninput5: arr=[1, 2, 3, 4], mat=[[1, 20, 3], [2, 4, 5]]\noutput5: 1\n--------\ninput6: arr=[10, 12, 13], mat=[[10, 11, 12], [13, 14, 15]]\noutput6: 2\n--------\ninput7: arr=[7, 8, 5, 6], mat=[[8, 7], [6, 5]]\noutput7: 1\n--------\ninput8: arr=[5, 4], mat=[[5, 3, 2], [1, 0, 4]]\noutput8: -1\n", "target_allMS": "public static int firstCompleteIndex(int[] arr, int[][] mat) {", "input_output_value": ["\ninput1: arr=[1, 2, 3, 4, 5], mat=[[1, 2], [3, 4]]\noutput1: 1\n", "\ninput2: arr=[1, 3, 2, 5, 4], mat=[[1, 2], [3, 4]]\noutput2: 1\n", "\ninput3: arr=[1, 1, 2, 2, 3], mat=[[1, 2], [3, 4]]\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<int> arr1 = {1, 2, 3, 4, 5};\n    vector<vector<int>> mat1 = {{1, 2}, {3, 4}};\n    cout << firstCompleteIndex(arr1, mat1) << endl;\n\n    vector<int> arr2 = {1, 3, 2, 5, 4};\n    vector<vector<int>> mat2 = {{1, 2}, {3, 4}};\n    cout << firstCompleteIndex(arr2, mat2) << endl;\n\n    vector<int> arr3 = {1, 1, 2, 2, 3};\n    vector<vector<int>> mat3 = {{1, 2}, {3, 4}};\n    cout << firstCompleteIndex(arr3, mat3) << endl;\n\n    vector<int> arr4 = {};\n    vector<vector<int>> mat4 = {{1, 2}, {3, 4}};\n    cout << firstCompleteIndex(arr4, mat4) << endl;\n\n    vector<int> arr5 = {1, 2, 3, 4};\n    vector<vector<int>> mat5 = {{1, 20, 3}, {2, 4, 5}};\n    cout << firstCompleteIndex(arr5, mat5) << endl;\n\n    vector<int> arr6 = {10, 12, 13};\n    vector<vector<int>> mat6 = {{10, 11, 12}, {13, 14, 15}};\n    cout << firstCompleteIndex(arr6, mat6) << endl;\n\n    vector<int> arr7 = {7, 8, 5, 6};\n    vector<vector<int>> mat7 = {{8, 7}, {6, 5}};\n    cout << firstCompleteIndex(arr7, mat7) << endl;\n\n    vector<int> arr8 = {5, 4};\n    vector<vector<int>> mat8 = {{5, 3, 2}, {1, 0, 4}};\n    cout << firstCompleteIndex(arr8, mat8) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###closeStrings.cpp", "source_code_str": "bool closeStrings(string word1, string word2) {\n        vector<int> count1(26), count2(26);\n        for (char c : word1) {\n            count1[c - 'a']++;\n        }\n        for (char c : word2) {\n            count2[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count1[i] > 0 && count2[i] == 0 || count1[i] == 0 && count2[i] > 0) {\n                return false;\n            }\n        }\n        sort(count1.begin(), count1.end());\n        sort(count2.begin(), count2.end());\n        return count1 == count2;\n    }", "source_code_block": "", "target_Lan": "java###closeStrings_Test.java", "reference_code": "public static boolean closeStrings(String word1, String word2) {\n        int[] count1 = new int[26], count2 = new int[26];\n        for (char c : word1.toCharArray()) {\n            count1[c - 'a']++;\n        }\n        for (char c : word2.toCharArray()) {\n            count2[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count1[i] > 0 && count2[i] == 0 || count1[i] == 0 && count2[i] > 0) {\n                return false;\n            }\n        }\n        Arrays.sort(count1);\n        Arrays.sort(count2);\n        return Arrays.equals(count1, count2);\n    }", "target_method_signature": "closeStrings", "source_method_signature": "closeStrings", "source_allMS": "bool closeStrings(string word1, string word2) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class closeStrings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(closeStrings(\"abc\", \"bac\"));        // True\n        System.out.println(closeStrings(\"aabb\", \"bbaa\"));      // True\n        System.out.println(closeStrings(\"aabbcc\", \"abc\"));     // False\n        System.out.println(closeStrings(\"abc\", \"def\"));        // False\n        System.out.println(closeStrings(\"\", \"\"));               // True\n        System.out.println(closeStrings(\"aa\", \"a\"));            // False\n        System.out.println(closeStrings(\"a\", \"aa\"));            // False\n        System.out.println(closeStrings(\"aabbcc\", \"ccbbbaaa\")); // False\n        System.out.println(closeStrings(\"xyz\", \"zyx\"));         // True\n        System.out.println(closeStrings(\"hello\", \"billion\"));   // False\n    }\n}", "all_input_output_value": "\ninput1: word1=\"abc\", word2=\"bac\"\noutput1: true\n--------\ninput2: word1=\"aabb\", word2=\"bbaa\"\noutput2: true\n--------\ninput3: word1=\"aabbcc\", word2=\"abc\"\noutput3: false\n--------\ninput4: word1=\"abc\", word2=\"def\"\noutput4: false\n--------\ninput5: word1=\"\", word2=\"\"\noutput5: true\n--------\ninput6: word1=\"aa\", word2=\"a\"\noutput6: false\n--------\ninput7: word1=\"a\", word2=\"aa\"\noutput7: false\n--------\ninput8: word1=\"aabbcc\", word2=\"ccbbbaaa\"\noutput8: false\n--------\ninput9: word1=\"xyz\", word2=\"zyx\"\noutput9: true\n--------\ninput10: word1=\"hello\", word2=\"billion\"\noutput10: false\n", "target_allMS": "public static boolean closeStrings(String word1, String word2) {", "input_output_value": ["\ninput1: word1=\"abc\", word2=\"bac\"\noutput1: true\n", "\ninput2: word1=\"aabb\", word2=\"bbaa\"\noutput2: true\n", "\ninput3: word1=\"aabbcc\", word2=\"abc\"\noutput3: false\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    cout << closeStrings(\"abc\", \"bac\") << endl;      // Expected output: 1(true)\n    cout << closeStrings(\"aabb\", \"bbaa\") << endl;    // Expected output: 1(true)\n    cout << closeStrings(\"aabbcc\", \"abc\") << endl;   // Expected output: 0(false)\n    cout << closeStrings(\"abc\", \"def\") << endl;      // Expected output: 0(false)\n    cout << closeStrings(\"\", \"\") << endl;             // Expected output: 1(true)\n    cout << closeStrings(\"aa\", \"a\") << endl;         // Expected output: 0(false)\n    cout << closeStrings(\"a\", \"aa\") << endl;         // Expected output: 0(false)\n    cout << closeStrings(\"aabbcc\", \"ccbbbaaa\") << endl; // Expected output: 1(true)\n    cout << closeStrings(\"xyz\", \"zyx\") << endl;      // Expected output: 1(true)\n    cout << closeStrings(\"hello\", \"billion\") << endl; // Expected output: 0(false)\n}"}
{"source_Lan": "cpp###findTheCity.cpp", "source_code_str": "int findTheCity(int n, vector<vector<int>> &edges, int distanceThreshold) {\n        pair<int, int> ans(INT_MAX / 2, -1);\n        vector<vector<int>> mp(n, vector<int>(n, INT_MAX / 2));\n        for (auto &eg: edges) {\n            int from = eg[0], to = eg[1], weight = eg[2];\n            mp[from][to] = mp[to][from] = weight;\n        }\n        for (int k = 0; k < n; ++k) {\n            mp[k][k] = 0;\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);\n                }\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            int cnt = 0;\n            for (int j = 0; j < n; ++j) {\n                if (mp[i][j] <= distanceThreshold) {\n                    cnt++;\n                }\n            }\n            if (cnt <= ans.first) {\n                ans = {cnt, i};\n            }\n        }\n        return ans.second;\n    }", "source_code_block": "", "target_Lan": "java###findTheCity_Test.java", "reference_code": "public static int findTheCity(int n, int[][] edges, int distanceThreshold) {\n        int[] ans = {Integer.MAX_VALUE / 2, -1};\n        int[][] mp = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(mp[i], Integer.MAX_VALUE / 2);\n        }\n        for (int[] eg : edges) {\n            int from = eg[0], to = eg[1], weight = eg[2];\n            mp[from][to] = mp[to][from] = weight;\n        }\n        for (int k = 0; k < n; ++k) {\n            mp[k][k] = 0;\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    mp[i][j] = Math.min(mp[i][j], mp[i][k] + mp[k][j]);\n                }\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            int cnt = 0;\n            for (int j = 0; j < n; ++j) {\n                if (mp[i][j] <= distanceThreshold) {\n                    cnt++;\n                }\n            }\n            if (cnt <= ans[0]) {\n                ans[0] = cnt;\n                ans[1] = i;\n            }\n        }\n        return ans[1];\n    }", "target_method_signature": "findTheCity", "source_method_signature": "findTheCity", "source_allMS": "int findTheCity(int n, vector<vector<int>> &edges, int distanceThreshold) {", "source_import": "#include <iostream>\n#include <vector>\n#include <climits>\n#include <algorithm>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class findTheCity_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findTheCity(3, new int[][]{{0,1,5},{1,2,10}}, 10));\n        System.out.println(findTheCity(4, new int[][]{{0,1,3},{0,2,6},{1,2,2},{1,3,4}}, 5));\n        System.out.println(findTheCity(5, new int[][]{{0,1,1},{1,2,2},{2,3,3},{3,4,4}}, 1));\n        System.out.println(findTheCity(5, new int[][]{{0,1,2},{1,2,3},{0,3,4},{3,4,5},{4,2,1}}, 5));\n        System.out.println(findTheCity(6, new int[][]{{0,1,10},{2,3,15},{4,5,25}}, 30));\n        System.out.println(findTheCity(2, new int[][]{}, 5));\n        System.out.println(findTheCity(4, new int[][]{{0,1,1},{1,2,1},{2,3,1},{3,0,10}}, 5));\n        System.out.println(findTheCity(5, new int[][]{{0,1,2},{1,2,2},{2,3,2},{3,4,2},{4,0,10}}, 6));\n        System.out.println(findTheCity(3, new int[][]{{0,1,2},{0,2,8},{1,2,5}}, 10));\n        System.out.println(findTheCity(5, new int[][]{{0,1,1},{1,2,1},{2,3,1},{3,4,1},{4,0,3}}, 2));\n    }\n}", "all_input_output_value": "\ninput1: n=3, edges=[[0,1,5],[1,2,10]], distanceThreshold=10\noutput1: 2\n--------\ninput2: n=4, edges=[[0,1,3],[0,2,6],[1,2,2],[1,3,4]], distanceThreshold=5\noutput2: 3\n--------\ninput3: n=5, edges=[[0,1,1],[1,2,2],[2,3,3],[3,4,4]], distanceThreshold=1\noutput3: 4\n--------\ninput4: n=5, edges=[[0,1,2],[1,2,3],[0,3,4],[3,4,5],[4,2,1]], distanceThreshold=5\noutput4: 3\n--------\ninput5: n=6, edges=[[0,1,10],[2,3,15],[4,5,25]], distanceThreshold=30\noutput5: 5\n--------\ninput6: n=2, edges=[], distanceThreshold=5\noutput6: 1\n--------\ninput7: n=4, edges=[[0,1,1],[1,2,1],[2,3,1],[3,0,10]], distanceThreshold=5\noutput7: 3\n--------\ninput8: n=5, edges=[[0,1,2],[1,2,2],[2,3,2],[3,4,2],[4,0,10]], distanceThreshold=6\noutput8: 4\n--------\ninput9: n=3, edges=[[0,1,2],[0,2,8],[1,2,5]], distanceThreshold=10\noutput9: 2\n--------\ninput10: n=5, edges=[[0,1,1],[1,2,1],[2,3,1],[3,4,1],[4,0,3]], distanceThreshold=2\noutput10: 4\n", "target_allMS": "public static int findTheCity(int n, int[][] edges, int distanceThreshold) {", "input_output_value": ["\ninput1: n=3, edges=[[0,1,5],[1,2,10]], distanceThreshold=10\noutput1: 2\n", "\ninput2: n=4, edges=[[0,1,3],[0,2,6],[1,2,2],[1,3,4]], distanceThreshold=5\noutput2: 3\n", "\ninput3: n=5, edges=[[0,1,1],[1,2,2],[2,3,3],[3,4,4]], distanceThreshold=1\noutput3: 4\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <climits>\n#include <algorithm>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <climits>\n// TOFILL\nint main() {\n    // Test input 1\n    vector<vector<int>> edges1 = {{0,1,5},{1,2,10}};\n    cout << findTheCity(3, edges1, 10) << endl;\n\n    // Test input 2\n    vector<vector<int>> edges2 = {{0,1,3},{0,2,6},{1,2,2},{1,3,4}};\n    cout << findTheCity(4, edges2, 5) << endl;\n\n    // Test input 3\n    vector<vector<int>> edges3 = {{0,1,1},{1,2,2},{2,3,3},{3,4,4}};\n    cout << findTheCity(5, edges3, 1) << endl;\n\n    // Test input 4\n    vector<vector<int>> edges4 = {{0,1,2},{1,2,3},{0,3,4},{3,4,5},{4,2,1}};\n    cout << findTheCity(5, edges4, 5) << endl;\n\n    // Test input 5\n    vector<vector<int>> edges5 = {{0,1,10},{2,3,15},{4,5,25}};\n    cout << findTheCity(6, edges5, 30) << endl;\n\n    // Test input 6\n    vector<vector<int>> edges6 = {};\n    cout << findTheCity(2, edges6, 5) << endl;\n\n    // Test input 7\n    vector<vector<int>> edges7 = {{0,1,1},{1,2,1},{2,3,1},{3,0,10}};\n    cout << findTheCity(4, edges7, 5) << endl;\n\n    // Test input 8\n    vector<vector<int>> edges8 = {{0,1,2},{1,2,2},{2,3,2},{3,4,2},{4,0,10}};\n    cout << findTheCity(5, edges8, 6) << endl;\n\n    // Test input 9\n    vector<vector<int>> edges9 = {{0,1,2},{0,2,8},{1,2,5}};\n    cout << findTheCity(3, edges9, 10) << endl;\n\n    // Test input 10\n    vector<vector<int>> edges10 = {{0,1,1},{1,2,1},{2,3,1},{3,4,1},{4,0,3}};\n    cout << findTheCity(5, edges10, 2) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###longestAlternatingSubarray.cpp", "source_code_str": "int longestAlternatingSubarray(vector<int>& nums, int threshold) {\n        int res = 0, dp = 0, n = nums.size();\n        for (int l = n - 1; l >= 0; l--) {\n            if (nums[l] > threshold) {\n                dp = 0;\n            } else if (l == n - 1 || nums[l] % 2 != nums[l + 1] % 2) {\n                dp++;\n            } else {\n                dp = 1;\n            }\n            if (nums[l] % 2 == 0) {\n                res = max(res, dp);\n            }\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###longestAlternatingSubarray_Test.java", "reference_code": "public static int longestAlternatingSubarray(int[] nums, int threshold) {\n        int res = 0, dp = 0;\n        for (int l = nums.length - 1; l >= 0; l--) {\n            if (nums[l] > threshold) {\n                dp = 0;\n            } else if (l == nums.length - 1 || nums[l] % 2 != nums[l + 1] % 2) {\n                dp++;\n            } else {\n                dp = 1;\n            }\n            if (nums[l] % 2 == 0) {\n                res = Math.max(res, dp);\n            }\n        }\n        return res;\n    }", "target_method_signature": "longestAlternatingSubarray", "source_method_signature": "longestAlternatingSubarray", "source_allMS": "int longestAlternatingSubarray(vector<int>& nums, int threshold) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class longestAlternatingSubarray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(longestAlternatingSubarray(new int[]{1, 2, 3, 4, 5}, 5)); // Test input 1\n        System.out.println(longestAlternatingSubarray(new int[]{2, 3, 4, 5, 6}, 3)); // Test input 2\n        System.out.println(longestAlternatingSubarray(new int[]{1, 2, 1, 2, 1}, 2)); // Test input 3\n        System.out.println(longestAlternatingSubarray(new int[]{10, 9, 8, 7, 6}, 10)); // Test input 4\n        System.out.println(longestAlternatingSubarray(new int[]{1, 3, 2, 4, 6}, 6)); // Test input 5\n        System.out.println(longestAlternatingSubarray(new int[]{5, 1, 2, 3}, 4)); // Test input 6\n        System.out.println(longestAlternatingSubarray(new int[]{7, 8, 9, 10}, 10)); // Test input 7\n        System.out.println(longestAlternatingSubarray(new int[]{0, 2, 4, 6, 8}, 3)); // Test input 8\n        System.out.println(longestAlternatingSubarray(new int[]{3}, 5)); // Test input 9\n        System.out.println(longestAlternatingSubarray(new int[]{}, 5)); // Test input 10\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3, 4, 5], threshold=5\noutput1: 4\n--------\ninput2: nums=[2, 3, 4, 5, 6], threshold=3\noutput2: 2\n--------\ninput3: nums=[1, 2, 1, 2, 1], threshold=2\noutput3: 4\n--------\ninput4: nums=[10, 9, 8, 7, 6], threshold=10\noutput4: 5\n--------\ninput5: nums=[1, 3, 2, 4, 6], threshold=6\noutput5: 1\n--------\ninput6: nums=[5, 1, 2, 3], threshold=4\noutput6: 2\n--------\ninput7: nums=[7, 8, 9, 10], threshold=10\noutput7: 3\n--------\ninput8: nums=[0, 2, 4, 6, 8], threshold=3\noutput8: 1\n--------\ninput9: nums=[3], threshold=5\noutput9: 0\n--------\ninput10: nums=[], threshold=5\noutput10: 0\n", "target_allMS": "public static int longestAlternatingSubarray(int[] nums, int threshold) {", "input_output_value": ["\ninput1: nums=[1, 2, 3, 4, 5], threshold=5\noutput1: 4\n", "\ninput2: nums=[2, 3, 4, 5, 6], threshold=3\noutput2: 2\n", "\ninput3: nums=[1, 2, 1, 2, 1], threshold=2\noutput3: 4\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 2, 3, 4, 5};\n    cout << longestAlternatingSubarray(input1, 5) << endl;\n\n    vector<int> input2 = {2, 3, 4, 5, 6};\n    cout << longestAlternatingSubarray(input2, 3) << endl;\n\n    vector<int> input3 = {1, 2, 1, 2, 1};\n    cout << longestAlternatingSubarray(input3, 2) << endl;\n\n    vector<int> input4 = {10, 9, 8, 7, 6};\n    cout << longestAlternatingSubarray(input4, 10) << endl;\n\n    vector<int> input5 = {1, 3, 2, 4, 6};\n    cout << longestAlternatingSubarray(input5, 6) << endl;\n\n    vector<int> input6 = {5, 1, 2, 3};\n    cout << longestAlternatingSubarray(input6, 4) << endl;\n\n    vector<int> input7 = {7, 8, 9, 10};\n    cout << longestAlternatingSubarray(input7, 10) << endl;\n\n    vector<int> input8 = {0, 2, 4, 6, 8};\n    cout << longestAlternatingSubarray(input8, 3) << endl;\n\n    vector<int> input9 = {3};\n    cout << longestAlternatingSubarray(input9, 5) << endl;\n\n    vector<int> input10 = {};\n    cout << longestAlternatingSubarray(input10, 5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###findTheLongestBalancedSubstring.cpp", "source_code_str": "int findTheLongestBalancedSubstring(string s) {\n        int res = 0, n = s.size();\n        vector<int> count(2);\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '1') {\n                count[1]++;\n                res = max(res, 2 * min(count[0], count[1]));\n            } else if (i == 0 || s[i - 1] == '1') {\n                count[0] = 1;\n                count[1] = 0;\n            } else {\n                count[0]++;\n            }\n        }\n        return res;            \n    }", "source_code_block": "", "target_Lan": "java###findTheLongestBalancedSubstring_Test.java", "reference_code": "public static int findTheLongestBalancedSubstring(String s) {\n        int res = 0;\n        int n = s.length();\n        int[] count = new int[2];\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n                count[1]++;\n                res = Math.max(res, 2 * Math.min(count[0], count[1]));\n            } else if (i == 0 || s.charAt(i - 1) == '1') {\n                count[0] = 1;\n                count[1] = 0;\n            } else {\n                count[0]++;\n            }\n        }\n        return res;\n    }", "target_method_signature": "findTheLongestBalancedSubstring", "source_method_signature": "findTheLongestBalancedSubstring", "source_allMS": "int findTheLongestBalancedSubstring(string s) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.Arrays;\npublic class findTheLongestBalancedSubstring_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findTheLongestBalancedSubstring(\"\"));\n        System.out.println(findTheLongestBalancedSubstring(\"0011\"));\n        System.out.println(findTheLongestBalancedSubstring(\"111\"));\n        System.out.println(findTheLongestBalancedSubstring(\"000\"));\n        System.out.println(findTheLongestBalancedSubstring(\"0101\"));\n        System.out.println(findTheLongestBalancedSubstring(\"0\"));\n        System.out.println(findTheLongestBalancedSubstring(\"1\"));\n        System.out.println(findTheLongestBalancedSubstring(\"000011111000011111\"));\n        System.out.println(findTheLongestBalancedSubstring(\"00001111\"));\n        System.out.println(findTheLongestBalancedSubstring(\"01\"));\n    }\n}", "all_input_output_value": "\ninput1: s=\"\"\noutput1: 0\n--------\ninput2: s=\"0011\"\noutput2: 4\n--------\ninput3: s=\"111\"\noutput3: 0\n--------\ninput4: s=\"000\"\noutput4: 0\n--------\ninput5: s=\"0101\"\noutput5: 2\n--------\ninput6: s=\"0\"\noutput6: 0\n--------\ninput7: s=\"1\"\noutput7: 0\n--------\ninput8: s=\"000011111000011111\"\noutput8: 8\n--------\ninput9: s=\"00001111\"\noutput9: 8\n--------\ninput10: s=\"01\"\noutput10: 2\n", "target_allMS": "public static int findTheLongestBalancedSubstring(String s) {", "input_output_value": ["\ninput1: s=\"\"\noutput1: 0\n", "\ninput2: s=\"0011\"\noutput2: 4\n", "\ninput3: s=\"111\"\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    cout << findTheLongestBalancedSubstring(\"\") << endl;\n    cout << findTheLongestBalancedSubstring(\"0011\") << endl;\n    cout << findTheLongestBalancedSubstring(\"111\") << endl;\n    cout << findTheLongestBalancedSubstring(\"000\") << endl;\n    cout << findTheLongestBalancedSubstring(\"0101\") << endl;\n    cout << findTheLongestBalancedSubstring(\"0\") << endl;\n    cout << findTheLongestBalancedSubstring(\"1\") << endl;\n    cout << findTheLongestBalancedSubstring(\"000011111000011111\") << endl;\n    cout << findTheLongestBalancedSubstring(\"00001111\") << endl;\n    cout << findTheLongestBalancedSubstring(\"01\") << endl;\n}"}
{"source_Lan": "cpp###countDigits.cpp", "source_code_str": "int countDigits(int num) {\n        int t = num, res = 0;\n        while (t) {\n            if (num % (t % 10) == 0) {\n                res += 1;\n            }\n            t /= 10;\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###countDigits_Test.java", "reference_code": "public static int countDigits(int num) {\n        int t = num;\n        int res = 0;\n        while (t != 0) {\n            if (num % (t % 10) == 0) {\n                res++;\n            }\n            t /= 10;\n        }\n        return res;\n    }", "target_method_signature": "countDigits", "source_method_signature": "countDigits", "source_allMS": "int countDigits(int num) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.lang.Math;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.lang.Math;\n\npublic class countDigits_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countDigits(0));\n        System.out.println(countDigits(5));\n        System.out.println(countDigits(12));\n        System.out.println(countDigits(24));\n        System.out.println(countDigits(36));\n        System.out.println(countDigits(-42));\n        System.out.println(countDigits(7));\n    }\n}", "all_input_output_value": "\ninput1: num=0\noutput1: 0\n--------\ninput2: num=5\noutput2: 1\n--------\ninput3: num=12\noutput3: 2\n--------\ninput4: num=24\noutput4: 2\n--------\ninput5: num=36\noutput5: 2\n--------\ninput6: num=-42\noutput6: 1\n--------\ninput7: num=7\noutput7: 1\n", "target_allMS": "public static int countDigits(int num) {", "input_output_value": ["\ninput1: num=0\noutput1: 0\n", "\ninput2: num=5\noutput2: 1\n", "\ninput3: num=12\noutput3: 2\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <iostream>\n// TOFILL\nint main() {\n    cout << countDigits(0) << endl;\n    cout << countDigits(5) << endl;\n    cout << countDigits(12) << endl;\n    cout << countDigits(24) << endl;\n    cout << countDigits(36) << endl;\n    cout << countDigits(-42) << endl;\n    cout << countDigits(7) << endl;\n}"}
{"source_Lan": "cpp###categorizeBox.cpp", "source_code_str": "string categorizeBox(int length, int width, int height, int mass) {\n        long long maxd = max(length, max(width, height)), vol = 1L * length * width * height;\n        bool isBulky = maxd >= 10000 || vol >= 1000000000, isHeavy = mass >= 100;\n        if (isBulky && isHeavy) {\n             return \"Both\";\n        } else if (isBulky) {\n            return \"Bulky\";\n        } else if (isHeavy) {\n            return \"Heavy\";\n        } else {\n            return \"Neither\";\n        }\n    }", "source_code_block": "", "target_Lan": "java###categorizeBox_Test.java", "reference_code": "public static String categorizeBox(int length, int width, int height, int mass) {\n        long maxd = Math.max(length, Math.max(width, height)), vol = 1L * length * width * height;\n        boolean isBulky = maxd >= 10000 || vol >= 1000000000, isHeavy = mass >= 100;\n        if (isBulky && isHeavy) {\n             return \"Both\";\n        } else if (isBulky) {\n            return \"Bulky\";\n        } else if (isHeavy) {\n            return \"Heavy\";\n        } else {\n            return \"Neither\";\n        }\n    }", "target_method_signature": "categorizeBox", "source_method_signature": "categorizeBox", "source_allMS": "string categorizeBox(int length, int width, int height, int mass) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class categorizeBox_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(categorizeBox(10001, 1, 1, 100));   // Both\n        System.out.println(categorizeBox(10001, 1, 1, 50));    // Bulky\n        System.out.println(categorizeBox(1, 1, 1, 100));        // Heavy\n        System.out.println(categorizeBox(1, 1, 1, 50));         // Neither\n        System.out.println(categorizeBox(100, 100, 100, 150));  // Both\n        System.out.println(categorizeBox(100, 100, 100, 50));   // Bulky\n        System.out.println(categorizeBox(1, 1, 1, 200));         // Heavy\n        System.out.println(categorizeBox(9999, 9999, 9999, 99)); // Neither\n        System.out.println(categorizeBox(9999, 9999, 9999, 100)); // Heavy\n        System.out.println(categorizeBox(10000, 10000, 10000, 100)); // Both\n    }\n}", "all_input_output_value": "\ninput1: length=10001, width=1, height=1, mass=100\noutput1: Both\n--------\ninput2: length=10001, width=1, height=1, mass=50\noutput2: Bulky\n--------\ninput3: length=1, width=1, height=1, mass=100\noutput3: Heavy\n--------\ninput4: length=1, width=1, height=1, mass=50\noutput4: Neither\n--------\ninput5: length=100, width=100, height=100, mass=150\noutput5: Both\n--------\ninput6: length=100, width=100, height=100, mass=50\noutput6: Bulky\n--------\ninput7: length=1, width=1, height=1, mass=200\noutput7: Heavy\n--------\ninput8: length=9999, width=9999, height=9999, mass=99\noutput8: Neither\n--------\ninput9: length=9999, width=9999, height=9999, mass=100\noutput9: Heavy\n--------\ninput10: length=10000, width=10000, height=10000, mass=100\noutput10: Both\n", "target_allMS": "public static String categorizeBox(int length, int width, int height, int mass) {", "input_output_value": ["\ninput1: length=10001, width=1, height=1, mass=100\noutput1: Both\n", "\ninput2: length=10001, width=1, height=1, mass=50\noutput2: Bulky\n", "\ninput3: length=1, width=1, height=1, mass=100\noutput3: Heavy\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << categorizeBox(10001, 1, 1, 100) << endl;\n    cout << categorizeBox(10001, 1, 1, 50) << endl;\n    cout << categorizeBox(1, 1, 1, 100) << endl;\n    cout << categorizeBox(1, 1, 1, 50) << endl;\n    cout << categorizeBox(100, 100, 100, 150) << endl;\n    cout << categorizeBox(100, 100, 100, 50) << endl;\n    cout << categorizeBox(1, 1, 1, 200) << endl;\n    cout << categorizeBox(9999, 9999, 9999, 99) << endl;\n    cout << categorizeBox(9999, 9999, 9999, 100) << endl;\n    cout << categorizeBox(10000, 10000, 10000, 100) << endl;\n}"}
{"source_Lan": "cpp###maxKelements.cpp", "source_code_str": "long long maxKelements(vector<int>& nums, int k) {\n        priority_queue<int> q(nums.begin(), nums.end());\n        long long ans = 0;\n        for (int _ = 0; _ < k; ++_) {\n            int x = q.top();\n            q.pop();\n            ans += x;\n            q.push((x + 2) / 3);\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maxKelements_Test.java", "reference_code": "public static long maxKelements(int[] nums, int k) {\n        PriorityQueue<Integer> q = new PriorityQueue<Integer>((a, b) -> b - a);\n        for (int num : nums) {\n            q.offer(num);\n        }\n        long ans = 0;\n        for (int i = 0; i < k; ++i) {\n            int x = q.poll();\n            ans += x;\n            q.offer((x + 2) / 3);\n        }\n        return ans;\n    }", "target_method_signature": "maxKelements", "source_method_signature": "maxKelements", "source_allMS": "long long maxKelements(vector<int>& nums, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;", "target_import": "import java.util.PriorityQueue;", "commentTag": "//", "target_code_shell": "import java.util.PriorityQueue;\nimport java.util.PriorityQueue;\npublic class maxKelements_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxKelements(new int[]{1, 2, 3}, 2));\n        System.out.println(maxKelements(new int[]{-1, -2, -3}, 3));\n        System.out.println(maxKelements(new int[]{5, 10, 15}, 3));\n        System.out.println(maxKelements(new int[]{0}, 1));\n        System.out.println(maxKelements(new int[]{7, 7, 7}, 2));\n        System.out.println(maxKelements(new int[]{100000, 200000, 300000}, 2));\n        System.out.println(maxKelements(new int[]{1, 0, -1}, 2));\n        System.out.println(maxKelements(new int[]{10}, 0));\n        System.out.println(maxKelements(new int[]{-1, 4, 7, 0}, 4));\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3], k=2\noutput1: 5\n--------\ninput2: nums=[-1, -2, -3], k=3\noutput2: -1\n--------\ninput3: nums=[5, 10, 15], k=3\noutput3: 30\n--------\ninput4: nums=[0], k=1\noutput4: 0\n--------\ninput5: nums=[7, 7, 7], k=2\noutput5: 14\n--------\ninput6: nums=[100000, 200000, 300000], k=2\noutput6: 500000\n--------\ninput7: nums=[1, 0, -1], k=2\noutput7: 2\n--------\ninput8: nums=[10], k=0\noutput8: 0\n--------\ninput9: nums=[-1, 4, 7, 0], k=4\noutput9: 16\n", "target_allMS": "public static long maxKelements(int[] nums, int k) {", "input_output_value": ["\ninput1: nums=[1, 2, 3], k=2\noutput1: 5\n", "\ninput2: nums=[-1, -2, -3], k=3\noutput2: -1\n", "\ninput3: nums=[5, 10, 15], k=3\noutput3: 30\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n// TOFILL\nint main() {\n    // Test input 1\n    vector<int> nums1 = {1, 2, 3};\n    int k1 = 2;\n    cout << maxKelements(nums1, k1) << endl;\n\n    // Test input 2\n    vector<int> nums2 = {-1, -2, -3};\n    int k2 = 3;\n    cout << maxKelements(nums2, k2) << endl;\n\n    // Test input 3\n    vector<int> nums3 = {5, 10, 15};\n    int k3 = 3;\n    cout << maxKelements(nums3, k3) << endl;\n\n    // Test input 4\n    vector<int> nums4 = {0};\n    int k4 = 1;\n    cout << maxKelements(nums4, k4) << endl;\n\n    // Test input 5\n    vector<int> nums5 = {7, 7, 7};\n    int k5 = 2;\n    cout << maxKelements(nums5, k5) << endl;\n\n    // Test input 6\n    vector<int> nums6 = {100000, 200000, 300000};\n    int k6 = 2;\n    cout << maxKelements(nums6, k6) << endl;\n\n    // Test input 7\n    vector<int> nums7 = {1, 0, -1};\n    int k7 = 2;\n    cout << maxKelements(nums7, k7) << endl;\n\n    // Test input 8\n    vector<int> nums8 = {10};\n    int k8 = 0;\n    cout << maxKelements(nums8, k8) << endl;\n\n    // Test input 9\n    vector<int> nums9 = {-1, 4, 7, 0};\n    int k9 = 4;\n    cout << maxKelements(nums9, k9) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minimumOneBitOperations.cpp", "source_code_str": "int minimumOneBitOperations(int n) {\n        int ans = 0;\n        int sign = 1;\n        for (int i = 29; i >= 0; --i) {\n            if (n & (1 << i)) {\n                ans += sign * ((1 << (i + 1)) - 1);\n                sign = -sign;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minimumOneBitOperations_Test.java", "reference_code": "public static int minimumOneBitOperations(int n) {\n        int ans = 0;\n        int sign = 1;\n        for (int i = 29; i >= 0; --i) {\n            if ((n & (1 << i)) != 0) {\n                ans += sign * ((1 << (i + 1)) - 1);\n                sign = -sign;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "minimumOneBitOperations", "source_method_signature": "minimumOneBitOperations", "source_allMS": "int minimumOneBitOperations(int n) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.Arrays;\npublic class minimumOneBitOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInputs = {0, 1, 2, 3, 4, 5, 15, 16, 2147483647, 31};\n        \n        for(int n : testInputs) {\n            System.out.println(minimumOneBitOperations(n));\n        }\n    }\n}", "all_input_output_value": "\ninput1: n=0\noutput1: 0\n--------\ninput2: n=1\noutput2: 1\n--------\ninput3: n=2\noutput3: 3\n--------\ninput4: n=3\noutput4: 2\n--------\ninput5: n=4\noutput5: 7\n--------\ninput6: n=5\noutput6: 6\n--------\ninput7: n=15\noutput7: 10\n--------\ninput8: n=16\noutput8: 31\n--------\ninput9: n=2147483647\noutput9: 715827882\n--------\ninput10: n=31\noutput10: 21\n", "target_allMS": "public static int minimumOneBitOperations(int n) {", "input_output_value": ["\ninput1: n=0\noutput1: 0\n", "\ninput2: n=1\noutput2: 1\n", "\ninput3: n=2\noutput3: 3\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <iostream>\n// TOFILL\nint main() {\n    cout << minimumOneBitOperations(0) << endl;\n    cout << minimumOneBitOperations(1) << endl;\n    cout << minimumOneBitOperations(2) << endl;\n    cout << minimumOneBitOperations(3) << endl;\n    cout << minimumOneBitOperations(4) << endl;\n    cout << minimumOneBitOperations(5) << endl;\n    cout << minimumOneBitOperations(15) << endl;\n    cout << minimumOneBitOperations(16) << endl;\n    cout << minimumOneBitOperations(2147483647) << endl;\n    cout << minimumOneBitOperations(31) << endl;\n}"}
{"source_Lan": "cpp###successfulPairs.cpp", "source_code_str": "vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {\n        vector<int> res(spells.size());\n        vector<int> idx(spells.size());\n        iota(idx.begin(), idx.end(), 0);\n        sort(idx.begin(), idx.end(), [&](int a, int b) {\n            return spells[a] < spells[b];\n        });\n        sort(potions.begin(), potions.end(), [](int a, int b) {\n            return a > b;\n        });\n        for (int i = 0, j = 0; i < spells.size(); ++i) {\n            int p = idx[i];\n            int v = spells[p];\n            while (j < potions.size() && (long long) potions[j] * v >= success) {\n                ++j;\n            }\n            res[p] = j;\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###successfulPairs_Test.java", "reference_code": "public static int[] successfulPairs(int[] spells, int[] potions, long success) {\n        int n = spells.length, m = potions.length;\n        int[] res = new int[n];\n        int[][] idx = new int[n][2];\n        for (int i = 0; i < n; ++i) {\n            idx[i][0] = spells[i];\n            idx[i][1] = i;\n        }\n        Arrays.sort(potions);\n        for (int i = 0, j = m - 1; i < j; ++i, --j) {\n            int temp = potions[i];\n            potions[i] = potions[j];\n            potions[j] = temp;\n        }\n        Arrays.sort(idx, (a, b) -> a[0] - b[0]);\n        for (int i = 0, j = 0; i < n; ++i) {\n            int p = idx[i][1];\n            int v = idx[i][0];\n            while (j < m && (long) potions[j] * v >= success) {\n                ++j;\n            }\n            res[p] = j;\n        }\n        return res;\n    }", "target_method_signature": "successfulPairs", "source_method_signature": "successfulPairs", "source_allMS": "vector<int> successfulPairs(vector<int>& spells, vector<int>& potions, long long success) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class successfulPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1\n        int[] result1 = successfulPairs(new int[]{}, new int[]{}, 5);\n        System.out.println(Arrays.toString(result1));\n\n        // Test input 2\n        int[] result2 = successfulPairs(new int[]{10}, new int[]{2}, 15);\n        System.out.println(Arrays.toString(result2));\n\n        // Test input 3\n        int[] result3 = successfulPairs(new int[]{5}, new int[]{4}, 20);\n        System.out.println(Arrays.toString(result3));\n\n        // Test input 4\n        int[] result4 = successfulPairs(new int[]{3, 1, 4}, new int[]{1, 2, 3}, 8);\n        System.out.println(Arrays.toString(result4));\n\n        // Test input 5\n        int[] result5 = successfulPairs(new int[]{0, 0, 0}, new int[]{1, 2, 3}, 0);\n        System.out.println(Arrays.toString(result5));\n\n        // Test input 6\n        int[] result6 = successfulPairs(new int[]{1, 2}, new int[]{1, 2, 3}, 3);\n        System.out.println(Arrays.toString(result6));\n\n        // Test input 7\n        int[] result7 = successfulPairs(new int[]{1000, 2000}, new int[]{1, 1, 1}, 1000);\n        System.out.println(Arrays.toString(result7));\n\n        // Test input 8\n        int[] result8 = successfulPairs(new int[]{1, 2, 3}, new int[]{10, 20, 30}, 50);\n        System.out.println(Arrays.toString(result8));\n\n        // Test input 9\n        int[] result9 = successfulPairs(new int[]{-5, -3}, new int[]{1, 2, 3}, -10);\n        System.out.println(Arrays.toString(result9));\n\n        // Test input 10\n        int[] result10 = successfulPairs(new int[]{1, 2, 3, 4, 5}, new int[]{5, 4, 3, 2, 1}, 10);\n        System.out.println(Arrays.toString(result10));\n    }\n}", "all_input_output_value": "\ninput1: spells=[], potions=[], success=5\noutput1: []\n--------\ninput2: spells=[10], potions=[2], success=15\noutput2: [1]\n--------\ninput3: spells=[5], potions=[4], success=20\noutput3: [1]\n--------\ninput4: spells=[3, 1, 4], potions=[1, 2, 3], success=8\noutput4: [1, 0, 2]\n--------\ninput5: spells=[0, 0, 0], potions=[1, 2, 3], success=0\noutput5: [3, 3, 3]\n--------\ninput6: spells=[1, 2], potions=[1, 2, 3], success=3\noutput6: [1, 2]\n--------\ninput7: spells=[1000, 2000], potions=[1, 1, 1], success=1000\noutput7: [3, 3]\n--------\ninput8: spells=[1, 2, 3], potions=[10, 20, 30], success=50\noutput8: [0, 1, 2]\n--------\ninput9: spells=[-5, -3], potions=[1, 2, 3], success=-10\noutput9: [0, 3]\n--------\ninput10: spells=[1, 2, 3, 4, 5], potions=[5, 4, 3, 2, 1], success=10\noutput10: [0, 1, 2, 3, 4]\n", "target_allMS": "public static int[] successfulPairs(int[] spells, int[] potions, long success) {", "input_output_value": ["\ninput1: spells=[], potions=[], success=5\noutput1: []\n", "\ninput2: spells=[10], potions=[2], success=15\noutput2: [1]\n", "\ninput3: spells=[5], potions=[4], success=20\noutput3: [1]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> spells1 = {};\n    vector<int> potions1 = {};\n    long long success1 = 5;\n    vector<int> result1 = successfulPairs(spells1, potions1, success1);\n    for(int r : result1) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells2 = {10};\n    vector<int> potions2 = {2};\n    long long success2 = 15;\n    vector<int> result2 = successfulPairs(spells2, potions2, success2);\n    for(int r : result2) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells3 = {5};\n    vector<int> potions3 = {4};\n    long long success3 = 20;\n    vector<int> result3 = successfulPairs(spells3, potions3, success3);\n    for(int r : result3) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells4 = {3, 1, 4};\n    vector<int> potions4 = {1, 2, 3};\n    long long success4 = 8;\n    vector<int> result4 = successfulPairs(spells4, potions4, success4);\n    for(int r : result4) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells5 = {0, 0, 0};\n    vector<int> potions5 = {1, 2, 3};\n    long long success5 = 0;\n    vector<int> result5 = successfulPairs(spells5, potions5, success5);\n    for(int r : result5) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells6 = {1, 2};\n    vector<int> potions6 = {1, 2, 3};\n    long long success6 = 3;\n    vector<int> result6 = successfulPairs(spells6, potions6, success6);\n    for(int r : result6) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells7 = {1000, 2000};\n    vector<int> potions7 = {1, 1, 1};\n    long long success7 = 1000;\n    vector<int> result7 = successfulPairs(spells7, potions7, success7);\n    for(int r : result7) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells8 = {1, 2, 3};\n    vector<int> potions8 = {10, 20, 30};\n    long long success8 = 50;\n    vector<int> result8 = successfulPairs(spells8, potions8, success8);\n    for(int r : result8) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells9 = {-5, -3};\n    vector<int> potions9 = {1, 2, 3};\n    long long success9 = -10;\n    vector<int> result9 = successfulPairs(spells9, potions9, success9);\n    for(int r : result9) cout << r << \" \";\n    cout << endl;\n\n    vector<int> spells10 = {1, 2, 3, 4, 5};\n    vector<int> potions10 = {5, 4, 3, 2, 1};\n    long long success10 = 10;\n    vector<int> result10 = successfulPairs(spells10, potions10, success10);\n    for(int r : result10) cout << r << \" \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###tupleSameProduct.cpp", "source_code_str": "int tupleSameProduct(vector<int>& nums) {\n        int n = nums.size();\n        int ans = 0;\n        unordered_map<int, int> cnt;\n        for (int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                cnt[nums[i] * nums[j]]++;\n            }\n        }\n        for (auto &[k, v] : cnt) {\n            ans += v * (v - 1) * 4;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###tupleSameProduct_Test.java", "reference_code": "    public static int tupleSameProduct(int[] nums) {\n        int n = nums.length;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                int key = nums[i] * nums[j];\n                cnt.put(key, cnt.getOrDefault(key, 0) + 1);\n            }\n        }\n        int ans = 0;\n        for (Integer v : cnt.values()) {\n            ans += v * (v - 1) * 4;\n        }\n        return ans;\n    }", "target_method_signature": "tupleSameProduct", "source_method_signature": "tupleSameProduct", "source_allMS": "int tupleSameProduct(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class tupleSameProduct_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(tupleSameProduct(new int[]{1})); // Test Input 1\n        System.out.println(tupleSameProduct(new int[]{1, 2})); // Test Input 2\n        System.out.println(tupleSameProduct(new int[]{2, 2, 4})); // Test Input 3\n        System.out.println(tupleSameProduct(new int[]{1, -1, 2, -2})); // Test Input 4\n        System.out.println(tupleSameProduct(new int[]{1, 2, 3, 4, 6})); // Test Input 5\n        System.out.println(tupleSameProduct(new int[]{0, 0, 0})); // Test Input 6\n        System.out.println(tupleSameProduct(new int[]{1, 1, 1, 1})); // Test Input 7\n        System.out.println(tupleSameProduct(new int[]{2, 2, 2, 3, 4, 6})); // Test Input 8\n        System.out.println(tupleSameProduct(new int[]{-1, 1, -1, 1, 1})); // Test Input 9\n        System.out.println(tupleSameProduct(new int[]{3, 3, 6, 6})); // Test Input 10\n    }\n}", "all_input_output_value": "\ninput1: nums=[1]\noutput1: 0\n--------\ninput2: nums=[1, 2]\noutput2: 0\n--------\ninput3: nums=[2, 2, 4]\noutput3: 8\n--------\ninput4: nums=[1, -1, 2, -2]\noutput4: 16\n--------\ninput5: nums=[1, 2, 3, 4, 6]\noutput5: 16\n--------\ninput6: nums=[0, 0, 0]\noutput6: 24\n--------\ninput7: nums=[1, 1, 1, 1]\noutput7: 120\n--------\ninput8: nums=[2, 2, 2, 3, 4, 6]\noutput8: 120\n--------\ninput9: nums=[-1, 1, -1, 1, 1]\noutput9: 168\n--------\ninput10: nums=[3, 3, 6, 6]\noutput10: 48\n", "target_allMS": "    public static int tupleSameProduct(int[] nums) {", "input_output_value": ["\ninput1: nums=[1]\noutput1: 0\n", "\ninput2: nums=[1, 2]\noutput2: 0\n", "\ninput3: nums=[2, 2, 4]\noutput3: 8\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<int> input1 = {1};\n    vector<int> input2 = {1, 2};\n    vector<int> input3 = {2, 2, 4};\n    vector<int> input4 = {1, -1, 2, -2};\n    vector<int> input5 = {1, 2, 3, 4, 6};\n    vector<int> input6 = {0, 0, 0};\n    vector<int> input7 = {1, 1, 1, 1};\n    vector<int> input8 = {2, 2, 2, 3, 4, 6};\n    vector<int> input9 = {-1, 1, -1, 1, 1};\n    vector<int> input10 = {3, 3, 6, 6};\n\n    cout << tupleSameProduct(input1) << endl;\n    cout << tupleSameProduct(input2) << endl;\n    cout << tupleSameProduct(input3) << endl;\n    cout << tupleSameProduct(input4) << endl;\n    cout << tupleSameProduct(input5) << endl;\n    cout << tupleSameProduct(input6) << endl;\n    cout << tupleSameProduct(input7) << endl;\n    cout << tupleSameProduct(input8) << endl;\n    cout << tupleSameProduct(input9) << endl;\n    cout << tupleSameProduct(input10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###sumOfMultiples.cpp", "source_code_str": "int sumOfMultiples(int n) {\n        int res = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\n                res += i;\n            }\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###sumOfMultiples_Test.java", "reference_code": "public static int sumOfMultiples(int n) {\n        int res = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\n                res += i;\n            }\n        }\n        return res;\n    }", "target_method_signature": "sumOfMultiples", "source_method_signature": "sumOfMultiples", "source_allMS": "int sumOfMultiples(int n) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\n\npublic class sumOfMultiples_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(sumOfMultiples(0));\n        System.out.println(sumOfMultiples(1));\n        System.out.println(sumOfMultiples(3));\n        System.out.println(sumOfMultiples(5));\n        System.out.println(sumOfMultiples(7));\n        System.out.println(sumOfMultiples(10));\n        System.out.println(sumOfMultiples(15));\n        System.out.println(sumOfMultiples(20));\n        System.out.println(sumOfMultiples(30));\n        System.out.println(sumOfMultiples(-5));\n    }\n}", "all_input_output_value": "\ninput1: n=0\noutput1: 0\n--------\ninput2: n=1\noutput2: 0\n--------\ninput3: n=3\noutput3: 3\n--------\ninput4: n=5\noutput4: 8\n--------\ninput5: n=7\noutput5: 21\n--------\ninput6: n=10\noutput6: 40\n--------\ninput7: n=15\noutput7: 81\n--------\ninput8: n=20\noutput8: 119\n--------\ninput9: n=30\noutput9: 274\n--------\ninput10: n=-5\noutput10: 0\n", "target_allMS": "public static int sumOfMultiples(int n) {", "input_output_value": ["\ninput1: n=0\noutput1: 0\n", "\ninput2: n=1\noutput2: 0\n", "\ninput3: n=3\noutput3: 3\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <iostream>\n// TOFILL\nint main() {\n    cout << sumOfMultiples(0) << endl;  // Test input: n=0\n    cout << sumOfMultiples(1) << endl;  // Test input: n=1\n    cout << sumOfMultiples(3) << endl;  // Test input: n=3\n    cout << sumOfMultiples(5) << endl;  // Test input: n=5\n    cout << sumOfMultiples(7) << endl;  // Test input: n=7\n    cout << sumOfMultiples(10) << endl; // Test input: n=10\n    cout << sumOfMultiples(15) << endl; // Test input: n=15\n    cout << sumOfMultiples(20) << endl; // Test input: n=20\n    cout << sumOfMultiples(30) << endl; // Test input: n=30\n    cout << sumOfMultiples(-5) << endl; // Test input: n=-5\n}"}
{"source_Lan": "cpp###splitNum.cpp", "source_code_str": "int splitNum(int num) {\n        string stnum = to_string(num);\n        sort(stnum.begin(), stnum.end());\n        int num1 = 0, num2 = 0;\n        for (int i = 0; i < stnum.size(); ++i) {\n            if (i % 2 == 0) {\n                num1 = num1 * 10 + (stnum[i] - '0');\n            }\n            else {\n                num2 = num2 * 10 + (stnum[i] - '0');\n            }\n        }\n        return num1 + num2;\n    }", "source_code_block": "", "target_Lan": "java###splitNum_Test.java", "reference_code": "public static int splitNum(int num) {\n        char[] stnum = Integer.toString(num).toCharArray();\n        Arrays.sort(stnum);\n        int num1 = 0, num2 = 0;\n        for (int i = 0; i < stnum.length; ++i) {\n            if (i % 2 == 0) {\n                num1 = num1 * 10 + (stnum[i] - '0');\n            } else {\n                num2 = num2 * 10 + (stnum[i] - '0');\n            }\n        }\n        return num1 + num2;\n    }", "target_method_signature": "splitNum", "source_method_signature": "splitNum", "source_allMS": "int splitNum(int num) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class splitNum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(splitNum(0));               // edge case for zero\n        System.out.println(splitNum(5));               // single digit\n        System.out.println(splitNum(12345));           // all distinct digits\n        System.out.println(splitNum(112233));          // repeating digits\n        System.out.println(splitNum(987654321));       // all distinct digits in descending order\n        System.out.println(splitNum(10));              // two digits with zero\n        System.out.println(splitNum(1001));            // leading zeros in formed numbers\n        System.out.println(splitNum(22));              // same digit case\n        System.out.println(splitNum(999));             // large digits, not unique\n        System.out.println(splitNum(2147483647));      // maximum value for a 32-bit integer\n    }\n}", "all_input_output_value": "\ninput1: num=0\noutput1: 0\n--------\ninput2: num=5\noutput2: 5\n--------\ninput3: num=12345\noutput3: 159\n--------\ninput4: num=112233\noutput4: 246\n--------\ninput5: num=987654321\noutput5: 16047\n--------\ninput6: num=10\noutput6: 1\n--------\ninput7: num=1001\noutput7: 2\n--------\ninput8: num=22\noutput8: 4\n--------\ninput9: num=999\noutput9: 108\n--------\ninput10: num=2147483647\noutput10: 37945\n", "target_allMS": "public static int splitNum(int num) {", "input_output_value": ["\ninput1: num=0\noutput1: 0\n", "\ninput2: num=5\noutput2: 5\n", "\ninput3: num=12345\noutput3: 159\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <iostream>\n#include <string>\n#include <algorithm>\n// TOFILL\nint main() {\n    cout << splitNum(0) << endl;\n    cout << splitNum(5) << endl;\n    cout << splitNum(12345) << endl;\n    cout << splitNum(112233) << endl;\n    cout << splitNum(987654321) << endl;\n    cout << splitNum(10) << endl;\n    cout << splitNum(1001) << endl;\n    cout << splitNum(22) << endl;\n    cout << splitNum(999) << endl;\n    cout << splitNum(2147483647) << endl;\n}"}
{"source_Lan": "cpp###filterRestaurants.cpp", "source_code_str": "vector<int> filterRestaurants(vector<vector<int>>& restaurants, int veganFriendly, int maxPrice, int maxDistance) {\n        int n = restaurants.size();\n        vector<vector<int>> filtered;\n        for (int i = 0; i < n; i++) {\n            if (restaurants[i][3] <= maxPrice && restaurants[i][4] <= maxDistance && !(veganFriendly && !restaurants[i][2])) {\n                filtered.push_back(restaurants[i]);\n            }\n        }\n        sort(filtered.begin(), filtered.end(), [](vector<int> &v1, vector<int> &v2) -> bool {\n            return v1[1] > v2[1] || (v1[1] == v2[1] && v1[0] > v2[0]);\n        });\n        vector<int> res;\n        for (auto &v : filtered) {\n            res.push_back(v[0]);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###filterRestaurants_Test.java", "reference_code": "public static List<Integer> filterRestaurants(int[][] restaurants, int veganFriendly, int maxPrice, int maxDistance) {\n        int n = restaurants.length;\n        List<int[]> filtered = new ArrayList<int[]>();\n        for (int i = 0; i < n; i++) {\n            if (restaurants[i][3] <= maxPrice && restaurants[i][4] <= maxDistance && !(veganFriendly == 1 && restaurants[i][2] == 0)) {\n                filtered.add(restaurants[i]);\n            }\n        }\n        Collections.sort(filtered, (a, b) -> {\n            if (a[1] != b[1]) {\n                return b[1] - a[1];\n            } else {\n                return b[0] - a[0];\n            }\n        });\n        List<Integer> res = new ArrayList<Integer>();\n        for (int[] v : filtered) {\n            res.add(v[0]);\n        }\n        return res;\n    }", "target_method_signature": "filterRestaurants", "source_method_signature": "filterRestaurants", "source_allMS": "vector<int> filterRestaurants(vector<vector<int>>& restaurants, int veganFriendly, int maxPrice, int maxDistance) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\npublic class filterRestaurants_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 4, 1, 40, 10}, {2, 3, 0, 50, 5}, {3, 5, 1, 30, 3}, {4, 2, 1, 20, 2}};\n        System.out.println(filterRestaurants(input1, 1, 50, 10));\n        \n        int[][] input2 = {{1, 4, 0, 20, 5}, {2, 3, 1, 30, 10}, {3, 5, 0, 60, 7}, {4, 2, 0, 15, 5}};\n        System.out.println(filterRestaurants(input2, 0, 25, 10));\n        \n        int[][] input3 = {{1, 5, 1, 10, 10}, {2, 3, 1, 20, 5}};\n        System.out.println(filterRestaurants(input3, 1, 15, 10));\n        \n        int[][] input4 = {{1, 4, 1, 30, 5}, {2, 3, 1, 20, 3}, {3, 5, 0, 70, 8}};\n        System.out.println(filterRestaurants(input4, 1, 25, 9));\n        \n        int[][] input5 = {{1, 3, 1, 15, 1}, {2, 4, 1, 40, 20}};\n        System.out.println(filterRestaurants(input5, 1, 50, 25));\n        \n        int[][] input6 = {{1, 1, 0, 90, 100}, {2, 2, 0, 50, 50}};\n        System.out.println(filterRestaurants(input6, 0, 100, 100));\n        \n        int[][] input7 = {{1, 5, 1, 50, 50}, {2, 3, 1, 20, 5}, {3, 4, 1, 20, 5}};\n        System.out.println(filterRestaurants(input7, 1, 50, 50));\n        \n        int[][] input8 = {{1, 5, 0, 40, 40}, {2, 4, 1, 25, 25}, {3, 3, 0, 15, 15}};\n        System.out.println(filterRestaurants(input8, 0, 30, 30));\n        \n        int[][] input9 = {{1, 5, 0, 20, 20}, {2, 1, 0, 100, 100}, {3, 2, 1, 0, 50}};\n        System.out.println(filterRestaurants(input9, 1, 10, 10));\n        \n        int[][] input10 = {};\n        System.out.println(filterRestaurants(input10, 0, 10, 10));\n    }\n}", "all_input_output_value": "\ninput1: restaurants=[[1, 4, 1, 40, 10], [2, 3, 0, 50, 5], [3, 5, 1, 30, 3], [4, 2, 1, 20, 2]], veganFriendly=1, maxPrice=50, maxDistance=10\noutput1: [3, 1, 4]\n--------\ninput2: restaurants=[[1, 4, 0, 20, 5], [2, 3, 1, 30, 10], [3, 5, 0, 60, 7], [4, 2, 0, 15, 5]], veganFriendly=0, maxPrice=25, maxDistance=10\noutput2: [1, 4]\n--------\ninput3: restaurants=[[1, 5, 1, 10, 10], [2, 3, 1, 20, 5]], veganFriendly=1, maxPrice=15, maxDistance=10\noutput3: [1]\n--------\ninput4: restaurants=[[1, 4, 1, 30, 5], [2, 3, 1, 20, 3], [3, 5, 0, 70, 8]], veganFriendly=1, maxPrice=25, maxDistance=9\noutput4: [2]\n--------\ninput5: restaurants=[[1, 3, 1, 15, 1], [2, 4, 1, 40, 20]], veganFriendly=1, maxPrice=50, maxDistance=25\noutput5: [2, 1]\n--------\ninput6: restaurants=[[1, 1, 0, 90, 100], [2, 2, 0, 50, 50]], veganFriendly=0, maxPrice=100, maxDistance=100\noutput6: [2, 1]\n--------\ninput7: restaurants=[[1, 5, 1, 50, 50], [2, 3, 1, 20, 5], [3, 4, 1, 20, 5]], veganFriendly=1, maxPrice=50, maxDistance=50\noutput7: [1, 3, 2]\n--------\ninput8: restaurants=[[1, 5, 0, 40, 40], [2, 4, 1, 25, 25], [3, 3, 0, 15, 15]], veganFriendly=0, maxPrice=30, maxDistance=30\noutput8: [2, 3]\n--------\ninput9: restaurants=[[1, 5, 0, 20, 20], [2, 1, 0, 100, 100], [3, 2, 1, 0, 50]], veganFriendly=1, maxPrice=10, maxDistance=10\noutput9: []\n--------\ninput10: restaurants=[], veganFriendly=0, maxPrice=10, maxDistance=10\noutput10: []\n", "target_allMS": "public static List<Integer> filterRestaurants(int[][] restaurants, int veganFriendly, int maxPrice, int maxDistance) {", "input_output_value": ["\ninput1: restaurants=[[1, 4, 1, 40, 10], [2, 3, 0, 50, 5], [3, 5, 1, 30, 3], [4, 2, 1, 20, 2]], veganFriendly=1, maxPrice=50, maxDistance=10\noutput1: [3, 1, 4]\n", "\ninput2: restaurants=[[1, 4, 0, 20, 5], [2, 3, 1, 30, 10], [3, 5, 0, 60, 7], [4, 2, 0, 15, 5]], veganFriendly=0, maxPrice=25, maxDistance=10\noutput2: [1, 4]\n", "\ninput3: restaurants=[[1, 5, 1, 10, 10], [2, 3, 1, 20, 5]], veganFriendly=1, maxPrice=15, maxDistance=10\noutput3: [1]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<vector<int>> restaurants1 = {{1, 4, 1, 40, 10}, {2, 3, 0, 50, 5}, {3, 5, 1, 30, 3}, {4, 2, 1, 20, 2}};\n    vector<int> result1 = filterRestaurants(restaurants1, 1, 50, 10);\n    for(int id : result1) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants2 = {{1, 4, 0, 20, 5}, {2, 3, 1, 30, 10}, {3, 5, 0, 60, 7}, {4, 2, 0, 15, 5}};\n    vector<int> result2 = filterRestaurants(restaurants2, 0, 25, 10);\n    for(int id : result2) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants3 = {{1, 5, 1, 10, 10}, {2, 3, 1, 20, 5}};\n    vector<int> result3 = filterRestaurants(restaurants3, 1, 15, 10);\n    for(int id : result3) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants4 = {{1, 4, 1, 30, 5}, {2, 3, 1, 20, 3}, {3, 5, 0, 70, 8}};\n    vector<int> result4 = filterRestaurants(restaurants4, 1, 25, 9);\n    for(int id : result4) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants5 = {{1, 3, 1, 15, 1}, {2, 4, 1, 40, 20}};\n    vector<int> result5 = filterRestaurants(restaurants5, 1, 50, 25);\n    for(int id : result5) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants6 = {{1, 1, 0, 90, 100}, {2, 2, 0, 50, 50}};\n    vector<int> result6 = filterRestaurants(restaurants6, 0, 100, 100);\n    for(int id : result6) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants7 = {{1, 5, 1, 50, 50}, {2, 3, 1, 20, 5}, {3, 4, 1, 20, 5}};\n    vector<int> result7 = filterRestaurants(restaurants7, 1, 50, 50);\n    for(int id : result7) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants8 = {{1, 5, 0, 40, 40}, {2, 4, 1, 25, 25}, {3, 3, 0, 15, 15}};\n    vector<int> result8 = filterRestaurants(restaurants8, 0, 30, 30);\n    for(int id : result8) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants9 = {{1, 5, 0, 20, 20}, {2, 1, 0, 100, 100}, {3, 2, 1, 0, 50}};\n    vector<int> result9 = filterRestaurants(restaurants9, 1, 10, 10);\n    for(int id : result9) cout << id << \" \";\n    cout << endl;\n\n    vector<vector<int>> restaurants10 = {};\n    vector<int> result10 = filterRestaurants(restaurants10, 0, 10, 10);\n    for(int id : result10) cout << id << \" \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minCapability.cpp", "source_code_str": "int minCapability(vector<int>& nums, int k) {\n        int lower = *min_element(nums.begin(), nums.end());\n        int upper = *max_element(nums.begin(), nums.end());\n        while (lower <= upper) {\n            int middle = (lower + upper) / 2;\n            int count = 0;\n            bool visited = false;\n            for (int x : nums) {\n                if (x <= middle && !visited) {\n                    count++;\n                    visited = true;\n                } else {\n                    visited = false;\n                }\n            }\n            if (count >= k) {\n                upper = middle - 1;\n            } else {\n                lower = middle + 1;\n            }\n        }\n        return lower;\n    }", "source_code_block": "", "target_Lan": "java###minCapability_Test.java", "reference_code": "public static int minCapability(int[] nums, int k) {\n        int lower = Arrays.stream(nums).min().getAsInt();\n        int upper = Arrays.stream(nums).max().getAsInt();\n        while (lower <= upper) {\n            int middle = (lower + upper) / 2;\n            int count = 0;\n            boolean visited = false;\n            for (int x : nums) {\n                if (x <= middle && !visited) {\n                    count++;\n                    visited = true;\n                } else {\n                    visited = false;\n                }\n            }\n            if (count >= k) {\n                upper = middle - 1;\n            } else {\n                lower = middle + 1;\n            }\n        }\n        return lower;\n    }", "target_method_signature": "minCapability", "source_method_signature": "minCapability", "source_allMS": "int minCapability(vector<int>& nums, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minCapability_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minCapability(new int[]{1, 2, 3, 4, 5}, 2));\n        System.out.println(minCapability(new int[]{5, 5, 5, 5, 5}, 3));\n        System.out.println(minCapability(new int[]{1, 3, 2, 5, 4}, 1));\n        System.out.println(minCapability(new int[]{10, 20, 30}, 2));\n        System.out.println(minCapability(new int[]{1, 1, 1, 1, 1}, 1));\n        System.out.println(minCapability(new int[]{1, 2, 2, 3}, 2));\n        System.out.println(minCapability(new int[]{7, 1, 5, 2, 3}, 4));\n        System.out.println(minCapability(new int[]{-5, -1, 0, 1, 2}, 3));\n        System.out.println(minCapability(new int[]{10, 9, 8, 7, 6}, 3));\n        System.out.println(minCapability(new int[]{1, 1000000, 500000}, 3));\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3, 4, 5], k=2\noutput1: 3\n--------\ninput2: nums=[5, 5, 5, 5, 5], k=3\noutput2: 5\n--------\ninput3: nums=[1, 3, 2, 5, 4], k=1\noutput3: 1\n--------\ninput4: nums=[10, 20, 30], k=2\noutput4: 30\n--------\ninput5: nums=[1, 1, 1, 1, 1], k=1\noutput5: 1\n--------\ninput6: nums=[1, 2, 2, 3], k=2\noutput6: 2\n--------\ninput7: nums=[7, 1, 5, 2, 3], k=4\noutput7: 8\n--------\ninput8: nums=[-5, -1, 0, 1, 2], k=3\noutput8: 2\n--------\ninput9: nums=[10, 9, 8, 7, 6], k=3\noutput9: 10\n--------\ninput10: nums=[1, 1000000, 500000], k=3\noutput10: 1000001\n", "target_allMS": "public static int minCapability(int[] nums, int k) {", "input_output_value": ["\ninput1: nums=[1, 2, 3, 4, 5], k=2\noutput1: 3\n", "\ninput2: nums=[5, 5, 5, 5, 5], k=3\noutput2: 5\n", "\ninput3: nums=[1, 3, 2, 5, 4], k=1\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> nums1 = {1, 2, 3, 4, 5};\n    cout << minCapability(nums1, 2) << endl;\n\n    vector<int> nums2 = {5, 5, 5, 5, 5};\n    cout << minCapability(nums2, 3) << endl;\n    \n    vector<int> nums3 = {1, 3, 2, 5, 4};\n    cout << minCapability(nums3, 1) << endl;\n\n    vector<int> nums4 = {10, 20, 30};\n    cout << minCapability(nums4, 2) << endl;\n\n    vector<int> nums5 = {1, 1, 1, 1, 1};\n    cout << minCapability(nums5, 1) << endl;\n\n    vector<int> nums6 = {1, 2, 2, 3};\n    cout << minCapability(nums6, 2) << endl;\n\n    vector<int> nums7 = {7, 1, 5, 2, 3};\n    cout << minCapability(nums7, 4) << endl;\n\n    vector<int> nums8 = {-5, -1, 0, 1, 2};\n    cout << minCapability(nums8, 3) << endl;\n\n    vector<int> nums9 = {10, 9, 8, 7, 6};\n    cout << minCapability(nums9, 3) << endl;\n\n    vector<int> nums10 = {1, 1000000, 500000};\n    cout << minCapability(nums10, 3) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###distMoney.cpp", "source_code_str": "int distMoney(int money, int children) {\n        if (money < children) {\n            return -1;\n        }\n        money -= children;\n        int cnt = min(money / 7, children);\n        money -= cnt * 7;\n        children -= cnt;\n        if ((children == 0 && money > 0) || (children == 1 && money == 3)) {\n            cnt--;\n        }\n        return cnt;\n    }", "source_code_block": "", "target_Lan": "java###distMoney_Test.java", "reference_code": "public static int distMoney(int money, int children) {\n        if (money < children) {\n            return -1;\n        }\n        money -= children;\n        int cnt = Math.min(money / 7, children);\n        money -= cnt * 7;\n        children -= cnt;\n        if ((children == 0 && money > 0) || (children == 1 && money == 3)) {\n            cnt--;\n        }\n        return cnt;\n    }", "target_method_signature": "distMoney", "source_method_signature": "distMoney", "source_allMS": "int distMoney(int money, int children) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class distMoney_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(distMoney(0, 1));   // Expected output: -1\n        System.out.println(distMoney(10, 2));  // Expected output: 1\n        System.out.println(distMoney(20, 3));  // Expected output: 2\n        System.out.println(distMoney(7, 1));   // Expected output: 1\n        System.out.println(distMoney(14, 3));  // Expected output: 2\n        System.out.println(distMoney(3, 1));   // Expected output: -1\n        System.out.println(distMoney(16, 3));  // Expected output: 2\n        System.out.println(distMoney(11, 2));  // Expected output: 1\n        System.out.println(distMoney(18, 5));  // Expected output: 2\n        System.out.println(distMoney(10, 3));  // Expected output: 1\n    }\n}", "all_input_output_value": "\ninput1: money=0, children=1\noutput1: -1\n--------\ninput2: money=10, children=2\noutput2: 1\n--------\ninput3: money=20, children=3\noutput3: 1\n--------\ninput4: money=7, children=1\noutput4: 0\n--------\ninput5: money=14, children=3\noutput5: 1\n--------\ninput6: money=3, children=1\noutput6: 0\n--------\ninput7: money=16, children=3\noutput7: 1\n--------\ninput8: money=11, children=2\noutput8: 1\n--------\ninput9: money=18, children=5\noutput9: 1\n--------\ninput10: money=10, children=3\noutput10: 1\n", "target_allMS": "public static int distMoney(int money, int children) {", "input_output_value": ["\ninput1: money=0, children=1\noutput1: -1\n", "\ninput2: money=10, children=2\noutput2: 1\n", "\ninput3: money=20, children=3\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <iostream>\n// TOFILL\nint main() {\n    cout << distMoney(0, 1) << endl;\n    cout << distMoney(10, 2) << endl;\n    cout << distMoney(20, 3) << endl;\n    cout << distMoney(7, 1) << endl;\n    cout << distMoney(14, 3) << endl;\n    cout << distMoney(3, 1) << endl;\n    cout << distMoney(16, 3) << endl;\n    cout << distMoney(11, 2) << endl;\n    cout << distMoney(18, 5) << endl;\n    cout << distMoney(10, 3) << endl;\n}"}
{"source_Lan": "cpp###queensAttacktheKing.cpp", "source_code_str": "vector<vector<int>> queensAttacktheKing(vector<vector<int>>& queens, vector<int>& king) {\n        unordered_set<int> queen_pos;\n        for (const auto& queen: queens) {\n            int x = queen[0], y = queen[1];\n            queen_pos.insert(x * 8 + y);\n        }\n        vector<vector<int>> ans;\n        for (int dx = -1; dx <= 1; ++dx) {\n            for (int dy = -1; dy <= 1; ++dy) {\n                if (dx == 0 && dy == 0) {\n                    continue;\n                }\n                int kx = king[0] + dx, ky = king[1] + dy;\n                while (kx >= 0 && kx < 8 && ky >= 0 && ky < 8) {\n                    int pos = kx * 8 + ky;\n                    if (queen_pos.count(pos)) {\n                        ans.push_back({kx, ky});\n                        break;\n                    }\n                    kx += dx;\n                    ky += dy;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###queensAttacktheKing_Test.java", "reference_code": "public static List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {\n        Set<Integer> queenPos = new HashSet<Integer>();\n        for (int[] queen : queens) {\n            int x = queen[0], y = queen[1];\n            queenPos.add(x * 8 + y);\n        }\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        for (int dx = -1; dx <= 1; ++dx) {\n            for (int dy = -1; dy <= 1; ++dy) {\n                if (dx == 0 && dy == 0) {\n                    continue;\n                }\n                int kx = king[0] + dx, ky = king[1] + dy;\n                while (kx >= 0 && kx < 8 && ky >= 0 && ky < 8) {\n                    int pos = kx * 8 + ky;\n                    if (queenPos.contains(pos)) {\n                        List<Integer> posList = new ArrayList<Integer>();\n                        posList.add(kx);\n                        posList.add(ky);\n                        ans.add(posList);\n                        break;\n                    }\n                    kx += dx;\n                    ky += dy;\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "queensAttacktheKing", "source_method_signature": "queensAttacktheKing", "source_allMS": "vector<vector<int>> queensAttacktheKing(vector<vector<int>>& queens, vector<int>& king) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.*;\npublic class queensAttacktheKing_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] queens1 = {{0, 1}};\n        int[] king1 = {0, 0};\n        System.out.println(queensAttacktheKing(queens1, king1));\n\n        int[][] queens2 = {{1, 0}};\n        int[] king2 = {0, 0};\n        System.out.println(queensAttacktheKing(queens2, king2));\n\n        int[][] queens3 = {{1, 1}};\n        int[] king3 = {0, 0};\n        System.out.println(queensAttacktheKing(queens3, king3));\n\n        int[][] queens4 = {};\n        int[] king4 = {4, 4};\n        System.out.println(queensAttacktheKing(queens4, king4));\n\n        int[][] queens5 = {{2, 2}, {3, 3}, {5, 5}};\n        int[] king5 = {4, 4};\n        System.out.println(queensAttacktheKing(queens5, king5));\n\n        int[][] queens6 = {{0, 7}, {4, 4}, {7, 0}};\n        int[] king6 = {4, 0};\n        System.out.println(queensAttacktheKing(queens6, king6));\n\n        int[][] queens7 = {{5, 5}, {5, 6}, {6, 5}};\n        int[] king7 = {6, 6};\n        System.out.println(queensAttacktheKing(queens7, king7));\n\n        int[][] queens8 = {{3, 3}, {1, 5}, {5, 1}};\n        int[] king8 = {4, 4};\n        System.out.println(queensAttacktheKing(queens8, king8));\n\n        int[][] queens9 = {{6, 0}, {0, 6}};\n        int[] king9 = {4, 4};\n        System.out.println(queensAttacktheKing(queens9, king9));\n\n        int[][] queens10 = {{2, 4}, {3, 0}, {7, 7}};\n        int[] king10 = {4, 4};\n        System.out.println(queensAttacktheKing(queens10, king10));\n    }\n}", "all_input_output_value": "\ninput1: queens=[[0, 1]], king=[0, 0]\noutput1: [[0, 1]]\n--------\ninput2: queens=[[1, 0]], king=[0, 0]\noutput2: [[1, 0]]\n--------\ninput3: queens=[[1, 1]], king=[0, 0]\noutput3: [[1, 1]]\n--------\ninput4: queens=[], king=[4, 4]\noutput4: []\n--------\ninput5: queens=[[2, 2], [3, 3], [5, 5]], king=[4, 4]\noutput5: [[3, 3], [5, 5]]\n--------\ninput6: queens=[[0, 7], [4, 4], [7, 0]], king=[4, 0]\noutput6: [[4, 4], [7, 0]]\n--------\ninput7: queens=[[5, 5], [5, 6], [6, 5]], king=[6, 6]\noutput7: [[5, 5], [5, 6], [6, 5]]\n--------\ninput8: queens=[[3, 3], [1, 5], [5, 1]], king=[4, 4]\noutput8: [[3, 3]]\n--------\ninput9: queens=[[6, 0], [0, 6]], king=[4, 4]\noutput9: []\n--------\ninput10: queens=[[2, 4], [3, 0], [7, 7]], king=[4, 4]\noutput10: [[2, 4], [7, 7]]\n", "target_allMS": "public static List<List<Integer>> queensAttacktheKing(int[][] queens, int[] king) {", "input_output_value": ["\ninput1: queens=[[0, 1]], king=[0, 0]\noutput1: [[0, 1]]\n", "\ninput2: queens=[[1, 0]], king=[0, 0]\noutput2: [[1, 0]]\n", "\ninput3: queens=[[1, 1]], king=[0, 0]\noutput3: [[1, 1]]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n// TOFILL\nint main() {\n    vector<vector<int>> queens1 = {{0, 1}};\n    vector<int> king1 = {0, 0};\n    vector<vector<int>> result1 = queensAttacktheKing(queens1, king1);\n    \n    vector<vector<int>> queens2 = {{1, 0}};\n    vector<int> king2 = {0, 0};\n    vector<vector<int>> result2 = queensAttacktheKing(queens2, king2);\n    \n    vector<vector<int>> queens3 = {{1, 1}};\n    vector<int> king3 = {0, 0};\n    vector<vector<int>> result3 = queensAttacktheKing(queens3, king3);\n    \n    vector<vector<int>> queens4 = {};\n    vector<int> king4 = {4, 4};\n    vector<vector<int>> result4 = queensAttacktheKing(queens4, king4);\n    \n    vector<vector<int>> queens5 = {{2, 2}, {3, 3}, {5, 5}};\n    vector<int> king5 = {4, 4};\n    vector<vector<int>> result5 = queensAttacktheKing(queens5, king5);\n    \n    vector<vector<int>> queens6 = {{0, 7}, {4, 4}, {7, 0}};\n    vector<int> king6 = {4, 0};\n    vector<vector<int>> result6 = queensAttacktheKing(queens6, king6);\n    \n    vector<vector<int>> queens7 = {{5, 5}, {5, 6}, {6, 5}};\n    vector<int> king7 = {6, 6};\n    vector<vector<int>> result7 = queensAttacktheKing(queens7, king7);\n    \n    vector<vector<int>> queens8 = {{3, 3}, {1, 5}, {5, 1}};\n    vector<int> king8 = {4, 4};\n    vector<vector<int>> result8 = queensAttacktheKing(queens8, king8);\n    \n    vector<vector<int>> queens9 = {{6, 0}, {0, 6}};\n    vector<int> king9 = {4, 4};\n    vector<vector<int>> result9 = queensAttacktheKing(queens9, king9);\n    \n    vector<vector<int>> queens10 = {{2, 4}, {3, 0}, {7, 7}};\n    vector<int> king10 = {4, 4};\n    vector<vector<int>> result10 = queensAttacktheKing(queens10, king10);\n    \n    // Print results for all test cases\n    for(const auto& res : result1) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result2) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result3) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result4) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result5) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result6) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result7) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result8) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result9) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n    for(const auto& res : result10) cout << \"[\" << res[0] << \", \" << res[1] << \"] \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###checkValidGrid.cpp", "source_code_str": "bool checkValidGrid(vector<vector<int>>& grid) {\n        if (grid[0][0] != 0) {\n            return false;\n        }\n        int n = grid.size();\n        vector<array<int, 2>> indices(n * n);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                indices[grid[i][j]] = {i, j};\n            }\n        }\n        for (int i = 1; i < indices.size(); i++) {\n            int dx = abs(indices[i][0] - indices[i - 1][0]);\n            int dy = abs(indices[i][1] - indices[i - 1][1]);\n            if (dx * dy != 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "source_code_block": "", "target_Lan": "java###checkValidGrid_Test.java", "reference_code": "public static boolean checkValidGrid(int[][] grid) {\n        if (grid[0][0] != 0) {\n            return false;\n        }\n        int n = grid.length;\n        int[][] indices = new int[n * n][2];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                indices[grid[i][j]][0] = i;\n                indices[grid[i][j]][1] = j;\n            }\n        }\n        for (int i = 1; i < n * n; i++) {\n            int dx = Math.abs(indices[i][0] - indices[i - 1][0]);\n            int dy = Math.abs(indices[i][1] - indices[i - 1][1]);\n            if (dx * dy != 2) {\n                return false;\n            }\n        }\n        return true;\n    }", "target_method_signature": "checkValidGrid", "source_method_signature": "checkValidGrid", "source_allMS": "bool checkValidGrid(vector<vector<int>>& grid) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <array>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class checkValidGrid_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(checkValidGrid(new int[][]{{0}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1}, {2, 3}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1, 2}, {7, 6, 3}, {8, 5, 4}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 2}, {1, 3}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1}, {3, 2}}));\n        System.out.println(checkValidGrid(new int[][]{{0}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1, 2}, {5, 4, 3}, {6, 7, 8}}));\n        System.out.println(checkValidGrid(new int[][]{{0, 1, 2}, {3, 5, 4}, {7, 8, 6}}));\n    }\n}", "all_input_output_value": "\ninput1: grid=[[0]]\noutput1: true\n--------\ninput2: grid=[[0, 1], [2, 3]]\noutput2: false\n--------\ninput3: grid=[[0, 1, 2], [7, 6, 3], [8, 5, 4]]\noutput3: false\n--------\ninput4: grid=[[0, 2], [1, 3]]\noutput4: false\n--------\ninput5: grid=[[0, 1], [3, 2]]\noutput5: false\n--------\ninput6: grid=[[0]]\noutput6: true\n--------\ninput7: grid=[[0, 1, 2], [5, 4, 3], [6, 7, 8]]\noutput7: false\n--------\ninput8: grid=[[0, 1, 2], [3, 5, 4], [7, 8, 6]]\noutput8: false\n", "target_allMS": "public static boolean checkValidGrid(int[][] grid) {", "input_output_value": ["\ninput1: grid=[[0]]\noutput1: true\n", "\ninput2: grid=[[0, 1], [2, 3]]\noutput2: false\n", "\ninput3: grid=[[0, 1, 2], [7, 6, 3], [8, 5, 4]]\noutput3: false\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <array>\n#include <iostream>\n#include <vector>\n#include <array>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{0}};\n    vector<vector<int>> grid2 = {{0, 1}, {2, 3}};\n    vector<vector<int>> grid3 = {{0, 1, 2}, {7, 6, 3}, {8, 5, 4}};\n    vector<vector<int>> grid4 = {{0, 2}, {1, 3}};\n    vector<vector<int>> grid5 = {{0, 1}, {3, 2}};\n    vector<vector<int>> grid6 = {{0}};\n    vector<vector<int>> grid7 = {{0, 1, 2}, {5, 4, 3}, {6, 7, 8}};\n    vector<vector<int>> grid8 = {{0, 1, 2}, {3, 5, 4}, {7, 8, 6}};\n\n    cout << checkValidGrid(grid1) << endl;\n    cout << checkValidGrid(grid2) << endl;\n    cout << checkValidGrid(grid3) << endl;\n    cout << checkValidGrid(grid4) << endl;\n    cout << checkValidGrid(grid5) << endl;\n    cout << checkValidGrid(grid6) << endl;\n    cout << checkValidGrid(grid7) << endl;\n    cout << checkValidGrid(grid8) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###findTheArrayConcVal.cpp", "source_code_str": "long long findTheArrayConcVal(vector<int>& nums) {\n        long long ans = 0;\n        for (int i = 0, j = nums.size() - 1; i <= j; i++, j--) {\n            if (i != j) {\n                ans += stoi(to_string(nums[i]) + to_string(nums[j]));\n            } else {\n                ans += nums[i];\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###findTheArrayConcVal_Test.java", "reference_code": "public static long findTheArrayConcVal(int[] nums) {\n        long ans = 0;\n        for (int i = 0, j = nums.length - 1; i <= j; i++, j--) {\n            if (i != j) {\n                ans += Integer.parseInt(Integer.toString(nums[i]) + Integer.toString(nums[j]));\n            } else {\n                ans += nums[i];\n            }\n        }\n        return ans;\n    }", "target_method_signature": "findTheArrayConcVal", "source_method_signature": "findTheArrayConcVal", "source_allMS": "long long findTheArrayConcVal(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class findTheArrayConcVal_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findTheArrayConcVal(new int[]{})); // Test input 1: []\n        System.out.println(findTheArrayConcVal(new int[]{5})); // Test input 2: [5]\n        System.out.println(findTheArrayConcVal(new int[]{3, 7})); // Test input 3: [3, 7]\n        System.out.println(findTheArrayConcVal(new int[]{4, 2, 6})); // Test input 4: [4, 2, 6]\n        System.out.println(findTheArrayConcVal(new int[]{2, 4, 8, 1, 3})); // Test input 5: [2, 4, 8, 1, 3]\n        System.out.println(findTheArrayConcVal(new int[]{1, 2, 3, 4, 5, 6, 7})); // Test input 6: [1, 2, 3, 4, 5, 6, 7]\n        System.out.println(findTheArrayConcVal(new int[]{9, 9})); // Test input 7: [9, 9]\n        System.out.println(findTheArrayConcVal(new int[]{10, 20, 30})); // Test input 8: [10, 20, 30]\n        System.out.println(findTheArrayConcVal(new int[]{-1, 0, 1})); // Test input 9: [-1, 0, 1]\n    }\n}", "all_input_output_value": "\ninput1: nums=[]\noutput1: 0\n--------\ninput2: nums=[5]\noutput2: 5\n--------\ninput3: nums=[3, 7]\noutput3: 37\n--------\ninput4: nums=[4, 2, 6]\noutput4: 48\n--------\ninput5: nums=[2, 4, 8, 1, 3]\noutput5: 72\n--------\ninput6: nums=[1, 2, 3, 4, 5, 6, 7]\noutput6: 82\n--------\ninput7: nums=[9, 9]\noutput7: 99\n--------\ninput8: nums=[10, 20, 30]\noutput8: 1050\n--------\ninput9: nums=[-1, 0, 1]\noutput9: -11\n", "target_allMS": "public static long findTheArrayConcVal(int[] nums) {", "input_output_value": ["\ninput1: nums=[]\noutput1: 0\n", "\ninput2: nums=[5]\noutput2: 5\n", "\ninput3: nums=[3, 7]\noutput3: 37\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    vector<int> input2 = {5};\n    vector<int> input3 = {3, 7};\n    vector<int> input4 = {4, 2, 6};\n    vector<int> input5 = {2, 4, 8, 1, 3};\n    vector<int> input6 = {1, 2, 3, 4, 5, 6, 7};\n    vector<int> input7 = {9, 9};\n    vector<int> input8 = {10, 20, 30};\n    vector<int> input9 = {-1, 0, 1};\n\n    cout << findTheArrayConcVal(input1) << endl;\n    cout << findTheArrayConcVal(input2) << endl;\n    cout << findTheArrayConcVal(input3) << endl;\n    cout << findTheArrayConcVal(input4) << endl;\n    cout << findTheArrayConcVal(input5) << endl;\n    cout << findTheArrayConcVal(input6) << endl;\n    cout << findTheArrayConcVal(input7) << endl;\n    cout << findTheArrayConcVal(input8) << endl;\n    cout << findTheArrayConcVal(input9) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minTrioDegree.cpp", "source_code_str": "int minTrioDegree(int n, vector<vector<int>>& edges) {\n        vector<vector<int>> g(n, vector<int>(n));\n        vector<int> degree(n);\n        for (auto&& edge: edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            g[x][y] = g[y][x] = 1;\n            ++degree[x];\n            ++degree[y];\n        }\n        int ans = INT_MAX;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (g[i][j] == 1) {\n                    for (int k = j + 1; k < n; ++k) {\n                        if (g[i][k] == 1 && g[j][k] == 1) {\n                            ans = min(ans, degree[i] + degree[j] + degree[k] - 6);\n                        }\n                    }\n                }\n            }\n        }\n        return ans == INT_MAX ? -1 : ans;\n    }", "source_code_block": "", "target_Lan": "java###minTrioDegree_Test.java", "reference_code": "    public static int minTrioDegree(int n, int[][] edges) {\n        int[][] g = new int[n][n];\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            g[x][y] = g[y][x] = 1;\n            ++degree[x];\n            ++degree[y];\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (g[i][j] == 1) {\n                    for (int k = j + 1; k < n; ++k) {\n                        if (g[i][k] == 1 && g[j][k] == 1) {\n                            ans = Math.min(ans, degree[i] + degree[j] + degree[k] - 6);\n                        }\n                    }\n                }\n            }\n        }\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }", "target_method_signature": "minTrioDegree", "source_method_signature": "minTrioDegree", "source_allMS": "int minTrioDegree(int n, vector<vector<int>>& edges) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <climits>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minTrioDegree_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minTrioDegree(3, new int[][]{{1, 2}, {2, 3}})); // Test Input 1\n        System.out.println(minTrioDegree(4, new int[][]{{1, 2}, {3, 4}})); // Test Input 2\n        System.out.println(minTrioDegree(5, new int[][]{{1, 2}, {2, 3}, {3, 1}, {4, 5}})); // Test Input 3\n        System.out.println(minTrioDegree(5, new int[][]{{1, 2}, {2, 3}, {3, 1}, {1, 4}, {2, 4}, {3, 4}})); // Test Input 4\n        System.out.println(minTrioDegree(6, new int[][]{{1, 2}, {2, 3}, {1, 3}, {4, 5}, {5, 6}, {4, 6}})); // Test Input 5\n        System.out.println(minTrioDegree(5, new int[][]{})); // Test Input 6\n        System.out.println(minTrioDegree(2, new int[][]{{1, 2}})); // Test Input 7\n        System.out.println(minTrioDegree(7, new int[][]{{1, 2}, {1, 3}, {2, 4}, {4, 5}, {1, 6}, {6, 7}, {2, 5}})); // Test Input 8\n        System.out.println(minTrioDegree(6, new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 5}, {2, 6}})); // Test Input 9\n        System.out.println(minTrioDegree(5, new int[][]{{1, 2}, {1, 3}, {2, 3}, {1, 4}, {2, 4}, {4, 5}})); // Test Input 10\n    }\n}", "all_input_output_value": "\ninput1: n=3, edges=[[1, 2], [2, 3]]\noutput1: -1\n--------\ninput2: n=4, edges=[[1, 2], [3, 4]]\noutput2: -1\n--------\ninput3: n=5, edges=[[1, 2], [2, 3], [3, 1], [4, 5]]\noutput3: 0\n--------\ninput4: n=5, edges=[[1, 2], [2, 3], [3, 1], [1, 4], [2, 4], [3, 4]]\noutput4: 3\n--------\ninput5: n=6, edges=[[1, 2], [2, 3], [1, 3], [4, 5], [5, 6], [4, 6]]\noutput5: 0\n--------\ninput6: n=5, edges=[]\noutput6: -1\n--------\ninput7: n=2, edges=[[1, 2]]\noutput7: -1\n--------\ninput8: n=7, edges=[[1, 2], [1, 3], [2, 4], [4, 5], [1, 6], [6, 7], [2, 5]]\noutput8: 1\n--------\ninput9: n=6, edges=[[1, 2], [2, 3], [3, 4], [4, 1], [1, 5], [2, 6]]\noutput9: -1\n--------\ninput10: n=5, edges=[[1, 2], [1, 3], [2, 3], [1, 4], [2, 4], [4, 5]]\noutput10: 2\n", "target_allMS": "    public static int minTrioDegree(int n, int[][] edges) {", "input_output_value": ["\ninput1: n=3, edges=[[1, 2], [2, 3]]\noutput1: -1\n", "\ninput2: n=4, edges=[[1, 2], [3, 4]]\noutput2: -1\n", "\ninput3: n=5, edges=[[1, 2], [2, 3], [3, 1], [4, 5]]\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <climits>\n#include <iostream>\n#include <vector>\n#include <climits>\n// TOFILL\nint main() {\n    vector<vector<int>> edges1 = {{1, 2}, {2, 3}};\n    cout << minTrioDegree(3, edges1) << endl;\n    \n    vector<vector<int>> edges2 = {{1, 2}, {3, 4}};\n    cout << minTrioDegree(4, edges2) << endl;\n    \n    vector<vector<int>> edges3 = {{1, 2}, {2, 3}, {3, 1}, {4, 5}};\n    cout << minTrioDegree(5, edges3) << endl;\n    \n    vector<vector<int>> edges4 = {{1, 2}, {2, 3}, {3, 1}, {1, 4}, {2, 4}, {3, 4}};\n    cout << minTrioDegree(5, edges4) << endl;\n    \n    vector<vector<int>> edges5 = {{1, 2}, {2, 3}, {1, 3}, {4, 5}, {5, 6}, {4, 6}};\n    cout << minTrioDegree(6, edges5) << endl;\n    \n    vector<vector<int>> edges6 = {};\n    cout << minTrioDegree(5, edges6) << endl;\n    \n    vector<vector<int>> edges7 = {{1, 2}};\n    cout << minTrioDegree(2, edges7) << endl;\n    \n    vector<vector<int>> edges8 = {{1, 2}, {1, 3}, {2, 4}, {4, 5}, {1, 6}, {6, 7}, {2, 5}};\n    cout << minTrioDegree(7, edges8) << endl;\n    \n    vector<vector<int>> edges9 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 5}, {2, 6}};\n    cout << minTrioDegree(6, edges9) << endl;\n    \n    vector<vector<int>> edges10 = {{1, 2}, {1, 3}, {2, 3}, {1, 4}, {2, 4}, {4, 5}};\n    cout << minTrioDegree(5, edges10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minimumJumps.cpp", "source_code_str": "int minimumJumps(vector<int>& forbidden, int a, int b, int x) {\n        queue<tuple<int, int, int>> q;\n        unordered_set<int> visited;\n        q.emplace(0, 1, 0);\n        visited.emplace(0);\n        int lower = 0, upper = max(*max_element(forbidden.begin(), forbidden.end()) + a, x) + b;\n        unordered_set<int> forbiddenSet(forbidden.begin(), forbidden.end());\n        while (!q.empty()) {\n            auto [position, direction, step] = q.front();\n            q.pop();\n            if (position == x) {\n                return step;\n            }\n            int nextPosition = position + a;\n            int nextDirection = 1;\n            if (lower <= nextPosition && nextPosition <= upper && !visited.count(nextPosition * nextDirection) && !forbiddenSet.count(nextPosition)) {\n                visited.emplace(nextPosition * nextDirection);\n                q.emplace(nextPosition, nextDirection, step + 1);\n            }\n            if (direction == 1) {\n                nextPosition = position - b;\n                nextDirection = -1;\n                if (lower <= nextPosition && nextPosition <= upper && !visited.count(nextPosition * nextDirection) && !forbiddenSet.count(nextPosition)) {\n                    visited.emplace(nextPosition * nextDirection);\n                    q.emplace(nextPosition, nextDirection, step + 1);\n                }\n            }\n        }\n        return -1;\n    }", "source_code_block": "", "target_Lan": "java###minimumJumps_Test.java", "reference_code": "public static int minimumJumps(int[] forbidden, int a, int b, int x) {\n        Queue<int[]> queue = new ArrayDeque<int[]>();\n        Set<Integer> visited = new HashSet<Integer>();\n        queue.offer(new int[]{0, 1, 0});\n        visited.add(0);\n        int lower = 0, upper = Math.max(Arrays.stream(forbidden).max().getAsInt() + a, x) + b;\n        Set<Integer> forbiddenSet = new HashSet<Integer>();\n        for (int position : forbidden) {\n            forbiddenSet.add(position);\n        }\n        while (!queue.isEmpty()) {\n            int[] arr = queue.poll();\n            int position = arr[0], direction = arr[1], step = arr[2];\n            if (position == x) {\n                return step;\n            }\n            int nextPosition = position + a;\n            int nextDirection = 1;\n            if (lower <= nextPosition && nextPosition <= upper && !visited.contains(nextPosition * nextDirection) && !forbiddenSet.contains(nextPosition)) {\n                visited.add(nextPosition * nextDirection);\n                queue.offer(new int[]{nextPosition, nextDirection, step + 1});\n            }\n            if (direction == 1) {\n                nextPosition = position - b;\n                nextDirection = -1;\n                if (lower <= nextPosition && nextPosition <= upper && !visited.contains(nextPosition * nextDirection) && !forbiddenSet.contains(nextPosition)) {\n                    visited.add(nextPosition * nextDirection);\n                    queue.offer(new int[]{nextPosition, nextDirection, step + 1});\n                }\n            }\n        }\n        return -1;\n    }", "target_method_signature": "minimumJumps", "source_method_signature": "minimumJumps", "source_allMS": "int minimumJumps(vector<int>& forbidden, int a, int b, int x) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <unordered_set>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.*;\npublic class minimumJumps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumJumps(new int[]{1, 2}, 1, 2, 5)); // Test input 2\n        System.out.println(minimumJumps(new int[]{4}, 4, 1, 8)); // Test input 3\n        System.out.println(minimumJumps(new int[]{2, 4, 6}, 2, 3, 5)); // Test input 4\n        System.out.println(minimumJumps(new int[]{0, 1}, 1, 2, 5)); // Test input 5\n        System.out.println(minimumJumps(new int[]{1, 3, 5, 7}, 3, 1, 10)); // Test input 6\n        System.out.println(minimumJumps(new int[]{5, 10}, 2, 3, 11)); // Test input 7\n        System.out.println(minimumJumps(new int[]{1, 4, 7}, 3, 2, 5)); // Test input 8\n        System.out.println(minimumJumps(new int[]{0, 2, 3}, 1, 1, 3)); // Test input 9\n        System.out.println(minimumJumps(new int[]{5}, 5, 5, 10)); // Test input 10\n    }\n}", "all_input_output_value": "\ninput1: forbidden=[1, 2], a=1, b=2, x=5\noutput1: -1\n--------\ninput2: forbidden=[4], a=4, b=1, x=8\noutput2: -1\n--------\ninput3: forbidden=[2, 4, 6], a=2, b=3, x=5\noutput3: -1\n--------\ninput4: forbidden=[0, 1], a=1, b=2, x=5\noutput4: -1\n--------\ninput5: forbidden=[1, 3, 5, 7], a=3, b=1, x=10\noutput5: -1\n--------\ninput6: forbidden=[5, 10], a=2, b=3, x=11\noutput6: -1\n--------\ninput7: forbidden=[1, 4, 7], a=3, b=2, x=5\noutput7: -1\n--------\ninput8: forbidden=[0, 2, 3], a=1, b=1, x=3\noutput8: -1\n--------\ninput9: forbidden=[5], a=5, b=5, x=10\noutput9: -1\n", "target_allMS": "public static int minimumJumps(int[] forbidden, int a, int b, int x) {", "input_output_value": ["\ninput1: forbidden=[1, 2], a=1, b=2, x=5\noutput1: -1\n", "\ninput2: forbidden=[4], a=4, b=1, x=8\noutput2: -1\n", "\ninput3: forbidden=[2, 4, 6], a=2, b=3, x=5\noutput3: -1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <unordered_set>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <queue>\n#include <tuple>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> forbidden1 = {1, 2}; \n    cout << minimumJumps(forbidden1, 1, 2, 5) << endl;\n\n    vector<int> forbidden2 = {4}; \n    cout << minimumJumps(forbidden2, 4, 1, 8) << endl;\n\n    vector<int> forbidden3 = {2, 4, 6}; \n    cout << minimumJumps(forbidden3, 2, 3, 5) << endl;\n\n    vector<int> forbidden4 = {0, 1}; \n    cout << minimumJumps(forbidden4, 1, 2, 5) << endl;\n\n    vector<int> forbidden5 = {1, 3, 5, 7}; \n    cout << minimumJumps(forbidden5, 3, 1, 10) << endl;\n\n    vector<int> forbidden6 = {5, 10}; \n    cout << minimumJumps(forbidden6, 2, 3, 11) << endl;\n\n    vector<int> forbidden7 = {1, 4, 7}; \n    cout << minimumJumps(forbidden7, 3, 2, 5) << endl;\n\n    vector<int> forbidden8 = {0, 2, 3}; \n    cout << minimumJumps(forbidden8, 1, 1, 3) << endl;\n\n    vector<int> forbidden9 = {5}; \n    cout << minimumJumps(forbidden9, 5, 5, 10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###countPairs.cpp", "source_code_str": "vector<int> countPairs(int n, vector<vector<int>>& edges, vector<int>& queries) {\n        vector<int> degree(n);\n        unordered_map<int, int> cnt;\n        for (auto edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            if (x > y) {\n                swap(x, y);\n            }\n            degree[x]++;\n            degree[y]++;\n            cnt[x * n + y]++;\n        }\n        vector<int> arr = degree;\n        vector<int> ans;\n        sort(arr.begin(), arr.end());\n        for (int bound : queries) {\n            int total = 0;\n            for (int i = 0, j = n - 1; i < n; i++) {\n                while (j > i && arr[i] + arr[j] > bound) {\n                    j--;\n                }\n                total += n - 1 - max(i, j);\n            }\n            for (auto &[val, freq] : cnt) {\n                int x = val / n;\n                int y = val % n;\n                if (degree[x] + degree[y] > bound && degree[x] + degree[y] - freq <= bound) {\n                    total--;\n                }\n            }\n            ans.emplace_back(total);\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###countPairs_Test.java", "reference_code": "public static int[] countPairs(int n, int[][] edges, int[] queries) {\n        int[] degree = new int[n];\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        for (int[] edge : edges) {\n            int x = edge[0] - 1, y = edge[1] - 1;\n            if (x > y) {\n                int temp = x;\n                x = y;\n                y = temp;\n            }\n            degree[x]++;\n            degree[y]++;\n            cnt.put(x * n + y, cnt.getOrDefault(x * n + y, 0) + 1);\n        }\n        int[] arr = Arrays.copyOf(degree, n);\n        int[] ans = new int[queries.length];\n        Arrays.sort(arr);\n        for (int k = 0; k < queries.length; k++) {\n            int bound = queries[k], total = 0;\n            for (int i = 0, j = n - 1; i < n; i++) {\n                while (j > i && arr[i] + arr[j] > bound) {\n                    j--;\n                }\n                total += n - 1 - Math.max(i, j);\n            }\n            for (Map.Entry<Integer, Integer> entry : cnt.entrySet()) {\n                int val = entry.getKey(), freq = entry.getValue();\n                int x = val / n, y = val % n;\n                if (degree[x] + degree[y] > bound && degree[x] + degree[y] - freq <= bound) {\n                    total--;\n                }\n            }\n            ans[k] = total;\n        }\n        return ans;\n    }", "target_method_signature": "countPairs", "source_method_signature": "countPairs", "source_allMS": "vector<int> countPairs(int n, vector<vector<int>>& edges, vector<int>& queries) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class countPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Inputs\n        int n1 = 1, n2 = 2, n3 = 3, n4 = 4, n5 = 5, n6 = 5, n7 = 5, n8 = 4, n9 = 6, n10 = 6;\n        int[][] edges1 = {};\n        int[][] edges2 = {{1, 2}};\n        int[][] edges3 = {{1, 2}, {2, 3}};\n        int[][] edges4 = {{1, 2}, {2, 3}, {3, 4}};\n        int[][] edges5 = {{1, 2}, {1, 3}, {2, 4}, {3, 5}};\n        int[][] edges6 = {{1, 2}, {2, 3}, {3, 4}, {1, 4}, {4, 5}};\n        int[][] edges7 = {{1, 2}, {2, 3}, {3, 4}, {3, 5}};\n        int[][] edges8 = {{1, 2}, {1, 3}, {2, 3}, {2, 4}};\n        int[][] edges9 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {1, 6}};\n        int[][] edges10 = {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}};\n        \n        int[] queries1 = {0};\n        int[] queries2 = {1};\n        int[] queries3 = {2};\n        int[] queries4 = {3};\n        int[] queries5 = {4};\n        int[] queries6 = {5};\n        int[] queries7 = {6};\n        int[] queries8 = {4};\n        int[] queries9 = {5};\n        int[] queries10 = {10};\n        \n        // Execute test cases\n        System.out.println(Arrays.toString(countPairs(n1, edges1, queries1)));\n        System.out.println(Arrays.toString(countPairs(n2, edges2, queries2)));\n        System.out.println(Arrays.toString(countPairs(n3, edges3, queries3)));\n        System.out.println(Arrays.toString(countPairs(n4, edges4, queries4)));\n        System.out.println(Arrays.toString(countPairs(n5, edges5, queries5)));\n        System.out.println(Arrays.toString(countPairs(n6, edges6, queries6)));\n        System.out.println(Arrays.toString(countPairs(n7, edges7, queries7)));\n        System.out.println(Arrays.toString(countPairs(n8, edges8, queries8)));\n        System.out.println(Arrays.toString(countPairs(n9, edges9, queries9)));\n        System.out.println(Arrays.toString(countPairs(n10, edges10, queries10)));\n    }\n}", "all_input_output_value": "\ninput1: n=1, edges=[], queries={0}\noutput1: [0]\n--------\ninput2: n=2, edges={{1, 2}}, queries={1}\noutput2: [0]\n--------\ninput3: n=3, edges={{1, 2}, {2, 3}}, queries={2}\noutput3: [0]\n--------\ninput4: n=4, edges={{1, 2}, {2, 3}, {3, 4}}, queries={3}\noutput4: [0]\n--------\ninput5: n=5, edges={{1, 2}, {1, 3}, {2, 4}, {3, 5}}, queries={4}\noutput5: [0]\n--------\ninput6: n=5, edges={{1, 2}, {2, 3}, {3, 4}, {1, 4}, {4, 5}}, queries={5}\noutput6: [0]\n--------\ninput7: n=5, edges={{1, 2}, {2, 3}, {3, 4}, {3, 5}}, queries={6}\noutput7: [0]\n--------\ninput8: n=4, edges={{1, 2}, {1, 3}, {2, 3}, {2, 4}}, queries={4}\noutput8: [0]\n--------\ninput9: n=6, edges={{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {1, 6}}, queries={5}\noutput9: [0]\n--------\ninput10: n=6, edges={{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}}, queries={10}\noutput10: [0]\n", "target_allMS": "public static int[] countPairs(int n, int[][] edges, int[] queries) {", "input_output_value": ["\ninput1: n=1, edges=[], queries={0}\noutput1: [0]\n", "\ninput2: n=2, edges={{1, 2}}, queries={1}\noutput2: [0]\n", "\ninput3: n=3, edges={{1, 2}, {2, 3}}, queries={2}\noutput3: [0]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<vector<int>> edges1 = {};\n    vector<int> queries1 = {0};\n    vector<int> result1 = countPairs(1, edges1, queries1);\n    for(int res : result1) cout << res << \" \";\n    \n    vector<vector<int>> edges2 = {{1, 2}};\n    vector<int> queries2 = {1};\n    vector<int> result2 = countPairs(2, edges2, queries2);\n    for(int res : result2) cout << res << \" \";\n    \n    vector<vector<int>> edges3 = {{1, 2}, {2, 3}};\n    vector<int> queries3 = {2};\n    vector<int> result3 = countPairs(3, edges3, queries3);\n    for(int res : result3) cout << res << \" \";\n    \n    vector<vector<int>> edges4 = {{1, 2}, {2, 3}, {3, 4}};\n    vector<int> queries4 = {3};\n    vector<int> result4 = countPairs(4, edges4, queries4);\n    for(int res : result4) cout << res << \" \";\n    \n    vector<vector<int>> edges5 = {{1, 2}, {1, 3}, {2, 4}, {3, 5}};\n    vector<int> queries5 = {4};\n    vector<int> result5 = countPairs(5, edges5, queries5);\n    for(int res : result5) cout << res << \" \";\n    \n    vector<vector<int>> edges6 = {{1, 2}, {2, 3}, {3, 4}, {1, 4}, {4, 5}};\n    vector<int> queries6 = {5};\n    vector<int> result6 = countPairs(5, edges6, queries6);\n    for(int res : result6) cout << res << \" \";\n    \n    vector<vector<int>> edges7 = {{1, 2}, {2, 3}, {3, 4}, {3, 5}};\n    vector<int> queries7 = {6};\n    vector<int> result7 = countPairs(5, edges7, queries7);\n    for(int res : result7) cout << res << \" \";\n    \n    vector<vector<int>> edges8 = {{1, 2}, {1, 3}, {2, 3}, {2, 4}};\n    vector<int> queries8 = {4};\n    vector<int> result8 = countPairs(4, edges8, queries8);\n    for(int res : result8) cout << res << \" \";\n    \n    vector<vector<int>> edges9 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {1, 6}};\n    vector<int> queries9 = {5};\n    vector<int> result9 = countPairs(6, edges9, queries9);\n    for(int res : result9) cout << res << \" \";\n    \n    vector<vector<int>> edges10 = {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}};\n    vector<int> queries10 = {10};\n    vector<int> result10 = countPairs(6, edges10, queries10);\n    for(int res : result10) cout << res << \" \";\n\n    return 0;\n}"}
{"source_Lan": "cpp###captureForts.cpp", "source_code_str": "int captureForts(vector<int>& forts) {\n        int ans = 0, pre = -1;\n        for (int i = 0; i < forts.size(); i++) {\n            if (forts[i] == 1 || forts[i] == -1) {\n                if (pre >= 0 && forts[i] != forts[pre]) {\n                    ans = max(ans, i - pre - 1);\n                }\n                pre = i;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###captureForts_Test.java", "reference_code": "public static int captureForts(int[] forts) {\n        int n = forts.length;\n        int ans = 0, pre = -1;\n        for (int i = 0; i < n; i++) {\n            if (forts[i] == 1 || forts[i] == -1) {\n                if (pre >= 0 && forts[i] != forts[pre]) {\n                    ans = Math.max(ans, i - pre - 1);\n                }\n                pre = i;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "captureForts", "source_method_signature": "captureForts", "source_allMS": "int captureForts(vector<int>& forts) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class captureForts_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(captureForts(new int[]{}));  // No forts\n        System.out.println(captureForts(new int[]{0, 0, 0, 0}));  // All empty\n        System.out.println(captureForts(new int[]{1}));  // Single occupied fort\n        System.out.println(captureForts(new int[]{1, 0, -1}));  // Two different sides with one empty between\n        System.out.println(captureForts(new int[]{0, 1, 0, -1}));  // One empty between occupied\n        System.out.println(captureForts(new int[]{1, 0, 0, 0, -1}));  // Valid pair with multiple spaces in between\n        System.out.println(captureForts(new int[]{1, -1}));  // Adjacent different occupied forts\n        System.out.println(captureForts(new int[]{1, 0, 0, -1, 0, 0, 1}));  // Multiple valid pairs with different sizes of empty forts\n        System.out.println(captureForts(new int[]{1, 0, 0, 0}));  // Only one side occupied at the start\n        System.out.println(captureForts(new int[]{-1, -1, -1}));  // All occupied by the same side\n    }\n}", "all_input_output_value": "\ninput1: forts=[]\noutput1: 0\n--------\ninput2: forts=[0, 0, 0, 0]\noutput2: 0\n--------\ninput3: forts=[1]\noutput3: 0\n--------\ninput4: forts=[1, 0, -1]\noutput4: 1\n--------\ninput5: forts=[0, 1, 0, -1]\noutput5: 1\n--------\ninput6: forts=[1, 0, 0, 0, -1]\noutput6: 3\n--------\ninput7: forts=[1, -1]\noutput7: 0\n--------\ninput8: forts=[1, 0, 0, -1, 0, 0, 1]\noutput8: 2\n--------\ninput9: forts=[1, 0, 0, 0]\noutput9: 0\n--------\ninput10: forts=[-1, -1, -1]\noutput10: 0\n", "target_allMS": "public static int captureForts(int[] forts) {", "input_output_value": ["\ninput1: forts=[]\noutput1: 0\n", "\ninput2: forts=[0, 0, 0, 0]\noutput2: 0\n", "\ninput3: forts=[1]\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    vector<int> input2 = {0, 0, 0, 0};\n    vector<int> input3 = {1};\n    vector<int> input4 = {1, 0, -1};\n    vector<int> input5 = {0, 1, 0, -1};\n    vector<int> input6 = {1, 0, 0, 0, -1};\n    vector<int> input7 = {1, -1};\n    vector<int> input8 = {1, 0, 0, -1, 0, 0, 1};\n    vector<int> input9 = {1, 0, 0, 0};\n    vector<int> input10 = {-1, -1, -1};\n\n    cout << captureForts(input1) << endl;\n    cout << captureForts(input2) << endl;\n    cout << captureForts(input3) << endl;\n    cout << captureForts(input4) << endl;\n    cout << captureForts(input5) << endl;\n    cout << captureForts(input6) << endl;\n    cout << captureForts(input7) << endl;\n    cout << captureForts(input8) << endl;\n    cout << captureForts(input9) << endl;\n    cout << captureForts(input10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###ways.cpp", "source_code_str": "int ways(vector<string>& pizza, int k) {\n        int m = pizza.size(), n = pizza[0].size(), mod = 1e9 + 7;\n        vector<vector<int>> apples(m + 1, vector<int>(n + 1));\n        vector<vector<vector<int>>> dp(k + 1, vector<vector<int>>(m + 1, vector<int>(n + 1)));\n        \n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                apples[i][j] = apples[i][j + 1] + apples[i + 1][j] - apples[i + 1][j + 1] + (pizza[i][j] == 'A');\n                dp[1][i][j] = apples[i][j] > 0;\n            }\n        }\n        for (int ki = 2; ki <= k; ki++) {\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    \n                    for (int i2 = i + 1; i2 < m; i2++) {\n                        if (apples[i][j] > apples[i2][j]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i2][j]) % mod;\n                        }\n                    }\n                    \n                    for (int j2 = j + 1; j2 < n; j2++) {\n                        if (apples[i][j] > apples[i][j2]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i][j2]) % mod;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[k][0][0];\n    }", "source_code_block": "", "target_Lan": "java###ways_Test.java", "reference_code": "public static int ways(String[] pizza, int k) {\n        int m = pizza.length, n = pizza[0].length(), mod = 1_000_000_007;\n        int[][] apples = new int[m + 1][n + 1];\n        int[][][] dp = new int[k + 1][m + 1][n + 1];\n        \n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                apples[i][j] = apples[i][j + 1] + apples[i + 1][j] - apples[i + 1][j + 1] + (pizza[i].charAt(j) == 'A' ? 1 : 0);\n                dp[1][i][j] = apples[i][j] > 0 ? 1 : 0;\n            }\n        }\n        for (int ki = 2; ki <= k; ki++) {\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    \n                    for (int i2 = i + 1; i2 < m; i2++) {\n                        if (apples[i][j] > apples[i2][j]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i2][j]) % mod;\n                        }\n                    }\n                    \n                    for (int j2 = j + 1; j2 < n; j2++) {\n                        if (apples[i][j] > apples[i][j2]) {\n                            dp[ki][i][j] = (dp[ki][i][j] + dp[ki - 1][i][j2]) % mod;\n                        }\n                    }\n                }\n            }\n        }\n        return dp[k][0][0];\n    }", "target_method_signature": "ways", "source_method_signature": "ways", "source_allMS": "int ways(vector<string>& pizza, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class ways_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(ways(new String[]{\"A\"}, 1));\n        System.out.println(ways(new String[]{\"AAA\", \"AAA\"}, 1));\n        System.out.println(ways(new String[]{\"AA\", \"AA\"}, 2));\n        System.out.println(ways(new String[]{\"AA\", \"AA\"}, 3));\n        System.out.println(ways(new String[]{\"A\", \"A\"}, 2));\n        System.out.println(ways(new String[]{\"AB\", \"AA\", \"AA\"}, 2));\n        System.out.println(ways(new String[]{\"A\", \"B\"}, 1));\n        System.out.println(ways(new String[]{\"A\"}, 1));\n        System.out.println(ways(new String[]{\"AAA\", \"BBB\", \"AAA\"}, 2));\n    }\n}", "all_input_output_value": "\ninput1: pizza=[\"A\"], k=1\noutput1: 1\n--------\ninput2: pizza=[\"AAA\", \"AAA\"], k=1\noutput2: 1\n--------\ninput3: pizza=[\"AA\", \"AA\"], k=2\noutput3: 2\n--------\ninput4: pizza=[\"AA\", \"AA\"], k=3\noutput4: 2\n--------\ninput5: pizza=[\"A\", \"A\"], k=2\noutput5: 1\n--------\ninput6: pizza=[\"AB\", \"AA\", \"AA\"], k=2\noutput6: 3\n--------\ninput7: pizza=[\"A\", \"B\"], k=1\noutput7: 1\n--------\ninput8: pizza=[\"A\"], k=1\noutput8: 1\n--------\ninput9: pizza=[\"AAA\", \"BBB\", \"AAA\"], k=2\noutput9: 4\n", "target_allMS": "public static int ways(String[] pizza, int k) {", "input_output_value": ["\ninput1: pizza=[\"A\"], k=1\noutput1: 1\n", "\ninput2: pizza=[\"AAA\", \"AAA\"], k=1\noutput2: 1\n", "\ninput3: pizza=[\"AA\", \"AA\"], k=2\noutput3: 2\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<string> pizza1 = {\"A\"};\n    cout << ways(pizza1, 1) << endl;\n\n    vector<string> pizza2 = {\"AAA\", \"AAA\"};\n    cout << ways(pizza2, 1) << endl;\n\n    vector<string> pizza3 = {\"AA\", \"AA\"};\n    cout << ways(pizza3, 2) << endl;\n\n    vector<string> pizza4 = {\"AA\", \"AA\"};\n    cout << ways(pizza4, 3) << endl;\n\n    vector<string> pizza5 = {\"A\", \"A\"};\n    cout << ways(pizza5, 2) << endl;\n\n    vector<string> pizza6 = {\"AB\", \"AA\", \"AA\"};\n    cout << ways(pizza6, 2) << endl;\n\n    vector<string> pizza7 = {\"A\", \"B\"};\n    cout << ways(pizza7, 1) << endl;\n\n    vector<string> pizza8 = {\"A\"};\n    cout << ways(pizza8, 1) << endl;\n\n    vector<string> pizza9 = {\"AAA\", \"BBB\", \"AAA\"};\n    cout << ways(pizza9, 2) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###findReplaceString.cpp", "source_code_str": "string findReplaceString(string s, vector<int>& indices, vector<string>& sources, vector<string>& targets) {\n        int n = s.size(), m = indices.size();\n        vector<int> ops(m);\n        iota(ops.begin(), ops.end(), 0);\n        sort(ops.begin(), ops.end(), [&](int i, int j) { return indices[i] < indices[j]; });\n        string ans;\n        int pt = 0;\n        for (int i = 0; i < n;) {\n            while (pt < m && indices[ops[pt]] < i) {\n                ++pt;\n            }\n            bool succeed = false;\n            while (pt < m && indices[ops[pt]] == i) {\n                if (s.substr(i, sources[ops[pt]].size()) == sources[ops[pt]]) {\n                    succeed = true;\n                    break;\n                }\n                ++pt;\n            }\n            if (succeed) {\n                ans += targets[ops[pt]];\n                i += sources[ops[pt]].size();\n            }\n            else {\n                ans += s[i];\n                ++i;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###findReplaceString_Test.java", "reference_code": "public static String findReplaceString(String s, int[] indices, String[] sources, String[] targets) {\n        int n = s.length(), m = indices.length;\n        List<Integer> ops = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            ops.add(i);\n        }\n        ops.sort((i, j) -> indices[i] - indices[j]);\n        StringBuilder ans = new StringBuilder();\n        int pt = 0;\n        for (int i = 0; i < n;) {\n            while (pt < m && indices[ops.get(pt)] < i) {\n                pt++;\n            }\n            boolean succeed = false;\n            while (pt < m && indices[ops.get(pt)] == i) {\n                if (s.substring(i, Math.min(i + sources[ops.get(pt)].length(), n)).equals(sources[ops.get(pt)])) {\n                    succeed = true;\n                    break;\n                }\n                pt++;\n            }\n            if (succeed) {\n                ans.append(targets[ops.get(pt)]);\n                i += sources[ops.get(pt)].length();\n            } else {\n                ans.append(s.charAt(i));\n                i++;\n            }\n        }\n        return ans.toString();\n    }", "target_method_signature": "findReplaceString", "source_method_signature": "findReplaceString", "source_allMS": "string findReplaceString(string s, vector<int>& indices, vector<string>& sources, vector<string>& targets) {", "source_import": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <numeric>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class findReplaceString_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findReplaceString(\"abcd\", new int[]{0}, new String[]{\"a\"}, new String[]{\"x\"}));\n        System.out.println(findReplaceString(\"hello world\", new int[]{6}, new String[]{\"world\"}, new String[]{\"universe\"}));\n        System.out.println(findReplaceString(\"test input\", new int[]{0, 5}, new String[]{\"test\", \"input\"}, new String[]{\"exam\", \"data\"}));\n        System.out.println(findReplaceString(\"replace a b c\", new int[]{8, 0}, new String[]{\"a\", \"replace\"}, new String[]{\"x\", \"y\"}));\n        System.out.println(findReplaceString(\"banana\", new int[]{0, 2}, new String[]{\"ba\", \"na\"}, new String[]{\"xy\", \"zz\"}));\n        System.out.println(findReplaceString(\"abcd\", new int[]{0, 1, 2}, new String[]{\"a\", \"b\", \"c\"}, new String[]{\"1\", \"2\", \"3\"}));\n        System.out.println(findReplaceString(\"abcabc\", new int[]{0, 3}, new String[]{\"abc\", \"abc\"}, new String[]{\"xyz\", \"123\"}));\n        System.out.println(findReplaceString(\"abcabc\", new int[]{0}, new String[]{\"ab\"}, new String[]{\"XY\"}));\n        System.out.println(findReplaceString(\"testing\", new int[]{0, 4}, new String[]{\"test\", \"ing\"}, new String[]{\"done\", \"complete\"}));\n        System.out.println(findReplaceString(\"matrix\", new int[]{0, 1}, new String[]{\"m\", \"at\"}, new String[]{\"M\", \"A\"}));\n    }\n}", "all_input_output_value": "\ninput1: s=\"abcd\", indices=[0], sources=[\"a\"], targets=[\"x\"]\noutput1: xbcd\n--------\ninput2: s=\"hello world\", indices=[6], sources=[\"world\"], targets=[\"universe\"]\noutput2: hello universe\n--------\ninput3: s=\"test input\", indices=[0, 5], sources=[\"test\", \"input\"], targets=[\"exam\", \"data\"]\noutput3: exam data\n--------\ninput4: s=\"replace a b c\", indices=[8, 0], sources=[\"a\", \"replace\"], targets=[\"x\", \"y\"]\noutput4: y x b c\n--------\ninput5: s=\"banana\", indices=[0, 2], sources=[\"ba\", \"na\"], targets=[\"xy\", \"zz\"]\noutput5: xyzzna\n--------\ninput6: s=\"abcd\", indices=[0, 1, 2], sources=[\"a\", \"b\", \"c\"], targets=[\"1\", \"2\", \"3\"]\noutput6: 123d\n--------\ninput7: s=\"abcabc\", indices=[0, 3], sources=[\"abc\", \"abc\"], targets=[\"xyz\", \"123\"]\noutput7: xyz123\n--------\ninput8: s=\"abcabc\", indices=[0], sources=[\"ab\"], targets=[\"XY\"]\noutput8: XYcabc\n--------\ninput9: s=\"testing\", indices=[0, 4], sources=[\"test\", \"ing\"], targets=[\"done\", \"complete\"]\noutput9: donecomplete\n--------\ninput10: s=\"matrix\", indices=[0, 1], sources=[\"m\", \"at\"], targets=[\"M\", \"A\"]\noutput10: MArix\n", "target_allMS": "public static String findReplaceString(String s, int[] indices, String[] sources, String[] targets) {", "input_output_value": ["\ninput1: s=\"abcd\", indices=[0], sources=[\"a\"], targets=[\"x\"]\noutput1: xbcd\n", "\ninput2: s=\"hello world\", indices=[6], sources=[\"world\"], targets=[\"universe\"]\noutput2: hello universe\n", "\ninput3: s=\"test input\", indices=[0, 5], sources=[\"test\", \"input\"], targets=[\"exam\", \"data\"]\noutput3: exam data\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <numeric>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> indices1 = {0};\n    vector<string> sources1 = {\"a\"};\n    vector<string> targets1 = {\"x\"};\n    cout << findReplaceString(\"abcd\", indices1, sources1, targets1) << endl;\n\n    vector<int> indices2 = {6};\n    vector<string> sources2 = {\"world\"};\n    vector<string> targets2 = {\"universe\"};\n    cout << findReplaceString(\"hello world\", indices2, sources2, targets2) << endl;\n\n    vector<int> indices3 = {0, 5};\n    vector<string> sources3 = {\"test\", \"input\"};\n    vector<string> targets3 = {\"exam\", \"data\"};\n    cout << findReplaceString(\"test input\", indices3, sources3, targets3) << endl;\n\n    vector<int> indices4 = {8, 0};\n    vector<string> sources4 = {\"a\", \"replace\"};\n    vector<string> targets4 = {\"x\", \"y\"};\n    cout << findReplaceString(\"replace a b c\", indices4, sources4, targets4) << endl;\n\n    vector<int> indices5 = {0, 2};\n    vector<string> sources5 = {\"ba\", \"na\"};\n    vector<string> targets5 = {\"xy\", \"zz\"};\n    cout << findReplaceString(\"banana\", indices5, sources5, targets5) << endl;\n\n    vector<int> indices6 = {0, 1, 2};\n    vector<string> sources6 = {\"a\", \"b\", \"c\"};\n    vector<string> targets6 = {\"1\", \"2\", \"3\"};\n    cout << findReplaceString(\"abcd\", indices6, sources6, targets6) << endl;\n\n    vector<int> indices7 = {0, 3};\n    vector<string> sources7 = {\"abc\", \"abc\"};\n    vector<string> targets7 = {\"xyz\", \"123\"};\n    cout << findReplaceString(\"abcabc\", indices7, sources7, targets7) << endl;\n\n    vector<int> indices8 = {0};\n    vector<string> sources8 = {\"ab\"};\n    vector<string> targets8 = {\"XY\"};\n    cout << findReplaceString(\"abcabc\", indices8, sources8, targets8) << endl;\n\n    vector<int> indices9 = {0, 4};\n    vector<string> sources9 = {\"test\", \"ing\"};\n    vector<string> targets9 = {\"done\", \"complete\"};\n    cout << findReplaceString(\"testing\", indices9, sources9, targets9) << endl;\n\n    vector<int> indices10 = {0, 1};\n    vector<string> sources10 = {\"m\", \"at\"};\n    vector<string> targets10 = {\"M\", \"A\"};\n    cout << findReplaceString(\"matrix\", indices10, sources10, targets10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###circularGameLosers.cpp", "source_code_str": "vector<int> circularGameLosers(int n, int k) {\n        vector<bool> visit(n, false);\n        for (int i = k, j = 0; !visit[j]; i += k) {\n            visit[j] = true;\n            j = (j + i) % n;\n        }\n        vector<int> ans;\n        for (int i = 0; i < n; i++) {\n            if (!visit[i]) {\n                ans.emplace_back(i + 1);\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###circularGameLosers_Test.java", "reference_code": "public static int[] circularGameLosers(int n, int k) {\n        boolean[] visit = new boolean[n];\n        for (int i = k, j = 0; !visit[j]; i += k) {\n            visit[j] = true;\n            j = (j + i) % n;\n        }\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            if (!visit[i]) {\n                list.add(i + 1);\n            }\n        }\n        int[] ans = new int[list.size()];\n        for (int i = 0; i < list.size(); i++) {\n            ans[i] = list.get(i);\n        }\n        return ans;\n    }", "target_method_signature": "circularGameLosers", "source_method_signature": "circularGameLosers", "source_allMS": "vector<int> circularGameLosers(int n, int k) {", "source_import": "#include <iostream>\n#include <vector>\nusing namespace std;", "target_import": "import java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class circularGameLosers_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] result1 = circularGameLosers(1, 1);\n        System.out.println(java.util.Arrays.toString(result1));\n\n        int[] result2 = circularGameLosers(5, 1);\n        System.out.println(java.util.Arrays.toString(result2));\n\n        int[] result3 = circularGameLosers(5, 2);\n        System.out.println(java.util.Arrays.toString(result3));\n\n        int[] result4 = circularGameLosers(10, 3);\n        System.out.println(java.util.Arrays.toString(result4));\n\n        int[] result5 = circularGameLosers(6, 6);\n        System.out.println(java.util.Arrays.toString(result5));\n\n        int[] result6 = circularGameLosers(10, 10);\n        System.out.println(java.util.Arrays.toString(result6));\n\n        int[] result7 = circularGameLosers(3, 2);\n        System.out.println(java.util.Arrays.toString(result7));\n\n        int[] result8 = circularGameLosers(4, 5);\n        System.out.println(java.util.Arrays.toString(result8));\n\n\n        int[] result10 = circularGameLosers(7, 3);\n        System.out.println(java.util.Arrays.toString(result10));\n    }\n}", "all_input_output_value": "\ninput1: n=1, k=1\noutput1: []\n--------\ninput2: n=5, k=1\noutput2: [3, 5]\n--------\ninput3: n=5, k=2\noutput3: [4, 5]\n--------\ninput4: n=10, k=3\noutput4: [2, 3, 5, 6, 7, 8]\n--------\ninput5: n=6, k=6\noutput5: [2, 3, 4, 5, 6]\n--------\ninput6: n=10, k=10\noutput6: [2, 3, 4, 5, 6, 7, 8, 9, 10]\n--------\ninput7: n=3, k=2\noutput7: [2]\n--------\ninput8: n=4, k=5\noutput8: []\n--------\ninput9: n=7, k=3\noutput9: [2, 6, 7]\n", "target_allMS": "public static int[] circularGameLosers(int n, int k) {", "input_output_value": ["\ninput1: n=1, k=1\noutput1: []\n", "\ninput2: n=5, k=1\noutput2: [3, 5]\n", "\ninput3: n=5, k=2\noutput3: [4, 5]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> result;\n\n    result = circularGameLosers(1, 1);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    result = circularGameLosers(5, 1);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    result = circularGameLosers(5, 2);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    result = circularGameLosers(10, 3);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    result = circularGameLosers(6, 6);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    result = circularGameLosers(10, 10);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    result = circularGameLosers(3, 2);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    result = circularGameLosers(4, 5);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    result = circularGameLosers(7, 3);\n    for(int i : result) cout << i << \" \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###maxScore.cpp", "source_code_str": "int maxScore(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> prerow(m, vector<int>(n));\n        vector<vector<int>> precol(m, vector<int>(n));\n        vector<vector<int>> f(m, vector<int>(n, INT_MIN));\n        int ans = INT_MIN;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i > 0) {\n                    f[i][j] = max(f[i][j], grid[i][j] + precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    f[i][j] = max(f[i][j], grid[i][j] + prerow[i][j - 1]);\n                }\n                ans = max(ans, f[i][j]);\n                prerow[i][j] = precol[i][j] = max(f[i][j], 0) - grid[i][j];\n                if (i > 0) {\n                    precol[i][j] = max(precol[i][j], precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    prerow[i][j] = max(prerow[i][j], prerow[i][j - 1]);\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maxScore_Test.java", "reference_code": "public static int maxScore(List<List<Integer>> grid) {\n        int m = grid.size(), n = grid.get(0).size();\n        int[][] prerow = new int[m][n];\n        int[][] precol = new int[m][n];\n        int[][] f = new int[m][n];\n        for (int i = 0; i < m; ++i) {\n            Arrays.fill(f[i], Integer.MIN_VALUE);\n        }\n        int ans = Integer.MIN_VALUE;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i > 0) {\n                    f[i][j] = Math.max(f[i][j], grid.get(i).get(j) + precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    f[i][j] = Math.max(f[i][j], grid.get(i).get(j) + prerow[i][j - 1]);\n                }\n                ans = Math.max(ans, f[i][j]);\n                prerow[i][j] = precol[i][j] = Math.max(f[i][j], 0) - grid.get(i).get(j);\n                if (i > 0) {\n                    precol[i][j] = Math.max(precol[i][j], precol[i - 1][j]);\n                }\n                if (j > 0) {\n                    prerow[i][j] = Math.max(prerow[i][j], prerow[i][j - 1]);\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "maxScore", "source_method_signature": "maxScore", "source_allMS": "int maxScore(vector<vector<int>>& grid) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <climits>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class maxScore_Test {\n// TOFILL\n    public static void main(String[] args) {\n        List<List<Integer>> input1 = new ArrayList<>(Arrays.asList(Arrays.asList(0)));\n        List<List<Integer>> input2 = new ArrayList<>(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4)));\n        List<List<Integer>> input3 = new ArrayList<>(Arrays.asList(Arrays.asList(5, -2), Arrays.asList(-1, 6)));\n        List<List<Integer>> input4 = new ArrayList<>(Arrays.asList(Arrays.asList(-1, -1), Arrays.asList(-1, -1)));\n        List<List<Integer>> input5 = new ArrayList<>(Arrays.asList(Arrays.asList(10)));\n        List<List<Integer>> input6 = new ArrayList<>(Arrays.asList(Arrays.asList(1), Arrays.asList(2), Arrays.asList(3)));\n        List<List<Integer>> input7 = new ArrayList<>(Arrays.asList(Arrays.asList(3, 1, 2), Arrays.asList(4, -1, 5), Arrays.asList(1, 2, 3)));\n        List<List<Integer>> input8 = new ArrayList<>(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(-1, -2), Arrays.asList(3, 4)));\n        List<List<Integer>> input9 = new ArrayList<>(Arrays.asList(Arrays.asList(10, 20, 30), Arrays.asList(1, 2, 1), Arrays.asList(5, 10, 15)));\n        \n        System.out.println(maxScore(input1)); // Output: 0\n        System.out.println(maxScore(input2)); // Output: 10\n        System.out.println(maxScore(input3)); // Output: 11\n        System.out.println(maxScore(input4)); // Output: -1\n        System.out.println(maxScore(input5)); // Output: 10\n        System.out.println(maxScore(input6)); // Output: 6\n        System.out.println(maxScore(input7)); // Output: 14\n        System.out.println(maxScore(input8)); // Output: 9\n        System.out.println(maxScore(input9)); // Output: 65\n    }\n}", "all_input_output_value": "\ninput1: grid=[[0]]\noutput1: -2147483648\n--------\ninput2: grid=[[1, 2], [3, 4]]\noutput2: 3\n--------\ninput3: grid=[[5, -2], [-1, 6]]\noutput3: 8\n--------\ninput4: grid=[[-1, -1], [-1, -1]]\noutput4: 0\n--------\ninput5: grid=[[10]]\noutput5: -2147483648\n--------\ninput6: grid=[[1], [2], [3]]\noutput6: 2\n--------\ninput7: grid=[[3, 1, 2], [4, -1, 5], [1, 2, 3]]\noutput7: 6\n--------\ninput8: grid=[[1, 2], [-1, -2], [3, 4]]\noutput8: 6\n--------\ninput9: grid=[[10, 20, 30], [1, 2, 1], [5, 10, 15]]\noutput9: 20\n", "target_allMS": "public static int maxScore(List<List<Integer>> grid) {", "input_output_value": ["\ninput1: grid=[[0]]\noutput1: -2147483648\n", "\ninput2: grid=[[1, 2], [3, 4]]\noutput2: 3\n", "\ninput3: grid=[[5, -2], [-1, 6]]\noutput3: 8\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <climits>\n#include <iostream>\n#include <vector>\n#include <climits>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{0}};\n    vector<vector<int>> grid2 = {{1, 2}, {3, 4}};\n    vector<vector<int>> grid3 = {{5, -2}, {-1, 6}};\n    vector<vector<int>> grid4 = {{-1, -1}, {-1, -1}};\n    vector<vector<int>> grid5 = {{10}};\n    vector<vector<int>> grid6 = {{1}, {2}, {3}};\n    vector<vector<int>> grid7 = {{3, 1, 2}, {4, -1, 5}, {1, 2, 3}};\n    vector<vector<int>> grid8 = {{1, 2}, {-1, -2}, {3, 4}};\n    vector<vector<int>> grid9 = {{10, 20, 30}, {1, 2, 1}, {5, 10, 15}};\n\n    cout << maxScore(grid1) << endl;\n    cout << maxScore(grid2) << endl;\n    cout << maxScore(grid3) << endl;\n    cout << maxScore(grid4) << endl;\n    cout << maxScore(grid5) << endl;\n    cout << maxScore(grid6) << endl;\n    cout << maxScore(grid7) << endl;\n    cout << maxScore(grid8) << endl;\n    cout << maxScore(grid9) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###leftmostBuildingQueries.cpp", "source_code_str": "vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {\n        int n = heights.size();\n        int m = queries.size();\n        vector<vector<pair<int, int>>> query(n);\n        vector<int> ans(m);\n        vector<int> st;\n        for (int i = 0; i < m; i++) {\n            int a = queries[i][0];\n            int b = queries[i][1];\n            if (a > b) swap(a, b);\n            if (a == b || heights[a] < heights[b]) {\n                ans[i] = b;\n                continue;\n            }\n            query[b].push_back(make_pair(i, heights[a]));\n        }\n        int top = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j < query[i].size(); j++) {\n                int q = query[i][j].first;\n                int val = query[i][j].second;\n                if (top == -1 || heights[st[0]] <= val) {\n                    ans[q] = -1;\n                    continue;\n                }\n                int l = 0, r = top;\n                while (l <= r) {\n                    int mid = (l + r) >> 1;\n                    if (heights[st[mid]] > val) {\n                        l = mid + 1;\n                    } else {\n                        r = mid - 1;\n                    }\n                }\n                ans[q] = st[r];\n            }\n            while (top >= 0 && heights[st[top]] <= heights[i]) {\n                st.pop_back();\n                top--;\n            }\n            st.push_back(i);\n            top++;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###leftmostBuildingQueries_Test.java", "reference_code": "public static int[] leftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.length;\n        int m = queries.length;\n        List<int[]>[] query = new List[n];\n        for (int i = 0; i < n; i++) {\n            query[i] = new ArrayList<int[]>();\n        }\n        int[] ans = new int[m];\n        List<Integer> st = new ArrayList<Integer>();\n        for (int i = 0; i < m; i++) {\n            int a = queries[i][0];\n            int b = queries[i][1];\n            if (a > b) {\n                int temp = a;\n                a = b;\n                b = temp;\n            }\n            if (a == b || heights[a] < heights[b]) {\n                ans[i] = b;\n                continue;\n            }\n            query[b].add(new int[]{i, heights[a]});\n        }\n        int top = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j < query[i].size(); j++) {\n                int q = query[i].get(j)[0];\n                int val = query[i].get(j)[1];\n                if (top == -1 || heights[st.get(0)] <= val) {\n                    ans[q] = -1;\n                    continue;\n                }\n                int l = 0, r = top;\n                while (l <= r) {\n                    int mid = (l + r) >> 1;\n                    if (heights[st.get(mid)] > val) {\n                        l = mid + 1;\n                    } else {\n                        r = mid - 1;\n                    }\n                }\n                ans[q] = st.get(r);\n            }\n            while (top >= 0 && heights[st.get(top)] <= heights[i]) {\n                st.remove(st.size() - 1);\n                top--;\n            }\n            st.add(i);\n            top++;\n        }\n        return ans;\n    }", "target_method_signature": "leftmostBuildingQueries", "source_method_signature": "leftmostBuildingQueries", "source_allMS": "vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.List;\npublic class leftmostBuildingQueries_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] heights1 = {3, 5, 2, 8, 4};\n        int[][] queries1 = {{0, 1}, {1, 3}, {2, 4}, {4, 0}, {1, 1}};\n        int[] result1 = leftmostBuildingQueries(heights1, queries1);\n        for(int res : result1) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n        \n        int[] heights2 = {1, 2, 3, 4};\n        int[][] queries2 = {{0, 3}, {3, 0}, {1, 2}, {2, 2}, {0, 0}};\n        int[] result2 = leftmostBuildingQueries(heights2, queries2);\n        for(int res : result2) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights3 = {5, 1, 4, 2};\n        int[][] queries3 = {{2, 3}, {3, 2}, {0, 1}, {1, 0}, {1, 3}};\n        int[] result3 = leftmostBuildingQueries(heights3, queries3);\n        for(int res : result3) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights4 = {10, 20, 5, 15};\n        int[][] queries4 = {{0, 3}, {3, 2}, {2, 1}, {1, 0}, {0, 0}};\n        int[] result4 = leftmostBuildingQueries(heights4, queries4);\n        for(int res : result4) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights5 = {1};\n        int[][] queries5 = {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};\n        int[] result5 = leftmostBuildingQueries(heights5, queries5);\n        for(int res : result5) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights6 = {4, 2, 5, 3, 1};\n        int[][] queries6 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {0, 4}};\n        int[] result6 = leftmostBuildingQueries(heights6, queries6);\n        for(int res : result6) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights7 = {7, 6, 5, 4, 3, 2, 1};\n        int[][] queries7 = {{0, 6}, {1, 5}, {2, 4}, {3, 3}, {6, 0}};\n        int[] result7 = leftmostBuildingQueries(heights7, queries7);\n        for(int res : result7) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights8 = {0, 0, 0};\n        int[][] queries8 = {{0, 1}, {1, 2}, {2, 0}, {0, 0}, {1, 1}};\n        int[] result8 = leftmostBuildingQueries(heights8, queries8);\n        for(int res : result8) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights9 = {6, 3, 8, 2, 7};\n        int[][] queries9 = {{0, 2}, {0, 3}, {2, 4}, {3, 1}, {1, 0}};\n        int[] result9 = leftmostBuildingQueries(heights9, queries9);\n        for(int res : result9) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n\n        int[] heights10 = {10, 9, 10, 10};\n        int[][] queries10 = {{0, 1}, {1, 2}, {2, 3}, {3, 0}, {1, 1}};\n        int[] result10 = leftmostBuildingQueries(heights10, queries10);\n        for(int res : result10) {\n            System.out.print(res + \" \");\n        }\n        System.out.println();\n    }\n}", "all_input_output_value": "\ninput1: heights=[3, 5, 2, 8, 4], queries=[[0, 1], [1, 3], [2, 4], [4, 0], [1, 1]]\noutput1: 1 3 4 4 1 \n--------\ninput2: heights=[1, 2, 3, 4], queries=[[0, 3], [3, 0], [1, 2], [2, 2], [0, 0]]\noutput2: 3 3 2 2 0 \n--------\ninput3: heights=[5, 1, 4, 2], queries=[[2, 3], [3, 2], [0, 1], [1, 0], [1, 3]]\noutput3: -1 -1 -1 -1 3 \n--------\ninput4: heights=[10, 20, 5, 15], queries=[[0, 3], [3, 2], [2, 1], [1, 0], [0, 0]]\noutput4: 3 3 -1 1 0 \n--------\ninput5: heights=[1], queries=[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\noutput5: 0 0 0 0 0 \n--------\ninput6: heights=[4, 2, 5, 3, 1], queries=[[0, 1], [1, 2], [2, 3], [3, 4], [0, 4]]\noutput6: 2 2 -1 -1 -1 \n--------\ninput7: heights=[7, 6, 5, 4, 3, 2, 1], queries=[[0, 6], [1, 5], [2, 4], [3, 3], [6, 0]]\noutput7: -1 -1 -1 3 -1 \n--------\ninput8: heights=[0, 0, 0], queries=[[0, 1], [1, 2], [2, 0], [0, 0], [1, 1]]\noutput8: -1 -1 -1 0 1 \n--------\ninput9: heights=[6, 3, 8, 2, 7], queries=[[0, 2], [0, 3], [2, 4], [3, 1], [1, 0]]\noutput9: 2 4 -1 4 2 \n--------\ninput10: heights=[10, 9, 10, 10], queries=[[0, 1], [1, 2], [2, 3], [3, 0], [1, 1]]\noutput10: -1 2 -1 -1 1 \n", "target_allMS": "public static int[] leftmostBuildingQueries(int[] heights, int[][] queries) {", "input_output_value": ["\ninput1: heights=[3, 5, 2, 8, 4], queries=[[0, 1], [1, 3], [2, 4], [4, 0], [1, 1]]\noutput1: 1 3 4 4 1 \n", "\ninput2: heights=[1, 2, 3, 4], queries=[[0, 3], [3, 0], [1, 2], [2, 2], [0, 0]]\noutput2: 3 3 2 2 0 \n", "\ninput3: heights=[5, 1, 4, 2], queries=[[2, 3], [3, 2], [0, 1], [1, 0], [1, 3]]\noutput3: -1 -1 -1 -1 3 \n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> heights1 = {3, 5, 2, 8, 4};\n    vector<vector<int>> queries1 = {{0, 1}, {1, 3}, {2, 4}, {4, 0}, {1, 1}};\n    \n    vector<int> heights2 = {1, 2, 3, 4};\n    vector<vector<int>> queries2 = {{0, 3}, {3, 0}, {1, 2}, {2, 2}, {0, 0}};\n    \n    vector<int> heights3 = {5, 1, 4, 2};\n    vector<vector<int>> queries3 = {{2, 3}, {3, 2}, {0, 1}, {1, 0}, {1, 3}};\n    \n    vector<int> heights4 = {10, 20, 5, 15};\n    vector<vector<int>> queries4 = {{0, 3}, {3, 2}, {2, 1}, {1, 0}, {0, 0}};\n    \n    vector<int> heights5 = {1};\n    vector<vector<int>> queries5 = {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}};\n    \n    vector<int> heights6 = {4, 2, 5, 3, 1};\n    vector<vector<int>> queries6 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {0, 4}};\n    \n    vector<int> heights7 = {7, 6, 5, 4, 3, 2, 1};\n    vector<vector<int>> queries7 = {{0, 6}, {1, 5}, {2, 4}, {3, 3}, {6, 0}};\n    \n    vector<int> heights8 = {0, 0, 0};\n    vector<vector<int>> queries8 = {{0, 1}, {1, 2}, {2, 0}, {0, 0}, {1, 1}};\n    \n    vector<int> heights9 = {6, 3, 8, 2, 7};\n    vector<vector<int>> queries9 = {{0, 2}, {0, 3}, {2, 4}, {3, 1}, {1, 0}};\n    \n    vector<int> heights10 = {10, 9, 10, 10};\n    vector<vector<int>> queries10 = {{0, 1}, {1, 2}, {2, 3}, {3, 0}, {1, 1}};\n    \n    // Execute the queries for each test input\n    auto result1 = leftmostBuildingQueries(heights1, queries1);\n    auto result2 = leftmostBuildingQueries(heights2, queries2);\n    auto result3 = leftmostBuildingQueries(heights3, queries3);\n    auto result4 = leftmostBuildingQueries(heights4, queries4);\n    auto result5 = leftmostBuildingQueries(heights5, queries5);\n    auto result6 = leftmostBuildingQueries(heights6, queries6);\n    auto result7 = leftmostBuildingQueries(heights7, queries7);\n    auto result8 = leftmostBuildingQueries(heights8, queries8);\n    auto result9 = leftmostBuildingQueries(heights9, queries9);\n    auto result10 = leftmostBuildingQueries(heights10, queries10);\n    \n    // Print results\n    for(int r : result1) cout << r << \" \";\n    cout << endl;\n    for(int r : result2) cout << r << \" \";\n    cout << endl;\n    for(int r : result3) cout << r << \" \";\n    cout << endl;\n    for(int r : result4) cout << r << \" \";\n    cout << endl;\n    for(int r : result5) cout << r << \" \";\n    cout << endl;\n    for(int r : result6) cout << r << \" \";\n    cout << endl;\n    for(int r : result7) cout << r << \" \";\n    cout << endl;\n    for(int r : result8) cout << r << \" \";\n    cout << endl;\n    for(int r : result9) cout << r << \" \";\n    cout << endl;\n    for(int r : result10) cout << r << \" \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###shortestDistanceAfterQueries.cpp", "source_code_str": "vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<vector<int>> from(n);\n        vector<int> f(n);\n        iota(f.begin(), f.end(), 0);\n        vector<int> ans(queries.size());\n        for (int qi = 0; qi < queries.size(); qi++) {\n            int l = queries[qi][0], r = queries[qi][1];\n            from[r].push_back(l);\n            if (f[l] + 1 < f[r]) {\n                f[r] = f[l] + 1;\n                for (int i = r + 1; i < n; i++) {\n                    f[i] = min(f[i], f[i - 1] + 1);\n                    for (int j : from[i]) {\n                        f[i] = min(f[i], f[j] + 1);\n                    }\n                }\n            }\n            ans[qi] = f[n - 1];\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###shortestDistanceAfterQueries_Test.java", "reference_code": "public static int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        List<Integer>[] from = new ArrayList[n];\n        Arrays.setAll(from, i -> new ArrayList<>());\n        int[] f = new int[n];\n        for (int i = 1; i < n; i++) {\n            f[i] = i;\n        }\n        int[] ans = new int[queries.length];\n        for (int qi = 0; qi < queries.length; qi++) {\n            int l = queries[qi][0];\n            int r = queries[qi][1];\n            from[r].add(l);\n            if (f[l] + 1 < f[r]) {\n                f[r] = f[l] + 1;\n                for (int i = r + 1; i < n; i++) {\n                    f[i] = Math.min(f[i], f[i - 1] + 1);\n                    for (int j : from[i]) {\n                        f[i] = Math.min(f[i], f[j] + 1);\n                    }\n                }\n            }\n            ans[qi] = f[n - 1];\n        }\n        return ans;\n    }", "target_method_signature": "shortestDistanceAfterQueries", "source_method_signature": "shortestDistanceAfterQueries", "source_allMS": "vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <numeric>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class shortestDistanceAfterQueries_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(1, new int[][]{{0, 0}}))); // Minimal case\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(2, new int[][]{{0, 1}}))); // Simple connection\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(3, new int[][]{{0, 1}, {1, 2}}))); // Sequential connections\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(4, new int[][]{{0, 2}, {1, 3}, {2, 3}}))); // Overlapping ranges\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(5, new int[][]{{0, 1}, {1, 4}, {3, 4}}))); // Mixed connections\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(5, new int[][]{{0, 4}, {0, 3}, {2, 4}}))); // Wide-ranging connections\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(6, new int[][]{{0, 1}, {4, 5}, {2, 5}, {3, 4}}))); // Different endpoints\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(10, new int[][]{{0, 5}, {2, 8}, {5, 9}}))); // Larger size with non-sequential\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(10, new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}}))); // Chained connections\n        System.out.println(Arrays.toString(shortestDistanceAfterQueries(10, new int[][]{{0, 1}, {1, 1}, {1, 8}, {4, 5}}))); // Multiple same and different connections\n    }\n}", "all_input_output_value": "\ninput1: n=1, queries=[[0, 0]]\noutput1: [0]\n--------\ninput2: n=2, queries=[[0, 1]]\noutput2: [1]\n--------\ninput3: n=3, queries=[[0, 1], [1, 2]]\noutput3: [2, 2]\n--------\ninput4: n=4, queries=[[0, 2], [1, 3], [2, 3]]\noutput4: [2, 2, 2]\n--------\ninput5: n=5, queries=[[0, 1], [1, 4], [3, 4]]\noutput5: [4, 2, 2]\n--------\ninput6: n=5, queries=[[0, 4], [0, 3], [2, 4]]\noutput6: [1, 1, 1]\n--------\ninput7: n=6, queries=[[0, 1], [4, 5], [2, 5], [3, 4]]\noutput7: [5, 5, 3, 3]\n--------\ninput8: n=10, queries=[[0, 5], [2, 8], [5, 9]]\noutput8: [5, 4, 2]\n--------\ninput9: n=10, queries=[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\noutput9: [9, 9, 9, 9, 9]\n--------\ninput10: n=10, queries=[[0, 1], [1, 1], [1, 8], [4, 5]]\noutput10: [9, 9, 3, 3]\n", "target_allMS": "public static int[] shortestDistanceAfterQueries(int n, int[][] queries) {", "input_output_value": ["\ninput1: n=1, queries=[[0, 0]]\noutput1: [0]\n", "\ninput2: n=2, queries=[[0, 1]]\noutput2: [1]\n", "\ninput3: n=3, queries=[[0, 1], [1, 2]]\noutput3: [2, 2]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <iostream>\n#include <vector>\n#include <numeric>\n// TOFILL\nint main() {\n    vector<vector<int>> queries1 = {{0, 0}};\n    vector<int> result1 = shortestDistanceAfterQueries(1, queries1);\n    for(int distance : result1) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries2 = {{0, 1}};\n    vector<int> result2 = shortestDistanceAfterQueries(2, queries2);\n    for(int distance : result2) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries3 = {{0, 1}, {1, 2}};\n    vector<int> result3 = shortestDistanceAfterQueries(3, queries3);\n    for(int distance : result3) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries4 = {{0, 2}, {1, 3}, {2, 3}};\n    vector<int> result4 = shortestDistanceAfterQueries(4, queries4);\n    for(int distance : result4) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries5 = {{0, 1}, {1, 4}, {3, 4}};\n    vector<int> result5 = shortestDistanceAfterQueries(5, queries5);\n    for(int distance : result5) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries6 = {{0, 4}, {0, 3}, {2, 4}};\n    vector<int> result6 = shortestDistanceAfterQueries(5, queries6);\n    for(int distance : result6) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries7 = {{0, 1}, {4, 5}, {2, 5}, {3, 4}};\n    vector<int> result7 = shortestDistanceAfterQueries(6, queries7);\n    for(int distance : result7) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries8 = {{0, 5}, {2, 8}, {5, 9}};\n    vector<int> result8 = shortestDistanceAfterQueries(10, queries8);\n    for(int distance : result8) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries9 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}};\n    vector<int> result9 = shortestDistanceAfterQueries(10, queries9);\n    for(int distance : result9) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries10 = {{0, 1}, {1, 1}, {1, 8}, {4, 5}};\n    vector<int> result10 = shortestDistanceAfterQueries(10, queries10);\n    for(int distance : result10) {\n        cout << distance << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minFlips.cpp", "source_code_str": "int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int diff_row = 0;\n        for (auto& row : grid) {\n            for (int j = 0; j < n / 2; j++) {\n                diff_row += row[j] != row[n - 1 - j];\n            }\n        }\n        int diff_col = 0;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < m / 2; i++) {\n                diff_col += grid[i][j] != grid[m - 1 - i][j];\n            }\n        }\n        return min(diff_row, diff_col);\n    }", "source_code_block": "", "target_Lan": "java###minFlips_Test.java", "reference_code": "    public static int minFlips(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int diffRow = 0;\n        for (int[] row : grid) {\n            for (int j = 0; j < n / 2; j++) {\n                if (row[j] != row[n - 1 - j]) {\n                    diffRow++;\n                }\n            }\n        }\n        int diffCol = 0;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][j] != grid[m - 1 - i][j]) {\n                    diffCol++;\n                }\n            }\n        }\n        return Math.min(diffRow, diffCol);\n    }", "target_method_signature": "minFlips", "source_method_signature": "minFlips", "source_allMS": "int minFlips(vector<vector<int>>& grid) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minFlips_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{0}}; \n        int[][] input2 = {{0, 0}, {0, 0}}; \n        int[][] input3 = {{0, 1}, {1, 0}}; \n        int[][] input4 = {{1, 1, 1}, {1, 0, 1}, {1, 1, 1}}; \n        int[][] input5 = {{1, 0}, {1, 0}, {0, 1}}; \n        int[][] input6 = {{1, 0, 1}, {0, 1, 0}, {1, 0, 1}}; \n        int[][] input7 = {{1, 1}, {1, 0}, {0, 0}}; \n        int[][] input8 = {{0, 0, 1, 1}, {1, 1, 0, 0}, {0, 1, 0, 1}}; \n        int[][] input9 = {{1, 0}, {0, 1}, {1, 0}, {0, 1}}; \n        int[][] input10 = {{0, 1, 0}, {1, 0, 1}, {0, 1, 0}}; \n        \n        System.out.println(minFlips(input1)); // Expected output: 0\n        System.out.println(minFlips(input2)); // Expected output: 0\n        System.out.println(minFlips(input3)); // Expected output: 1\n        System.out.println(minFlips(input4)); // Expected output: 1\n        System.out.println(minFlips(input5)); // Expected output: 2\n        System.out.println(minFlips(input6)); // Expected output: 0\n        System.out.println(minFlips(input7)); // Expected output: 1\n        System.out.println(minFlips(input8)); // Expected output: 2\n        System.out.println(minFlips(input9)); // Expected output: 0\n        System.out.println(minFlips(input10)); // Expected output: 0\n    }\n}", "all_input_output_value": "\ninput1: grid={{0}}\noutput1: 0\n--------\ninput2: grid={{0, 0}, {0, 0}}\noutput2: 0\n--------\ninput3: grid={{0, 1}, {1, 0}}\noutput3: 2\n--------\ninput4: grid={{1, 1, 1}, {1, 0, 1}, {1, 1, 1}}\noutput4: 0\n--------\ninput5: grid={{1, 0}, {1, 0}, {0, 1}}\noutput5: 2\n--------\ninput6: grid={{1, 0, 1}, {0, 1, 0}, {1, 0, 1}}\noutput6: 0\n--------\ninput7: grid={{1, 1}, {1, 0}, {0, 0}}\noutput7: 1\n--------\ninput8: grid={{0, 0, 1, 1}, {1, 1, 0, 0}, {0, 1, 0, 1}}\noutput8: 2\n--------\ninput9: grid={{1, 0}, {0, 1}, {1, 0}, {0, 1}}\noutput9: 4\n--------\ninput10: grid={{0, 1, 0}, {1, 0, 1}, {0, 1, 0}}\noutput10: 0\n", "target_allMS": "    public static int minFlips(int[][] grid) {", "input_output_value": ["\ninput1: grid={{0}}\noutput1: 0\n", "\ninput2: grid={{0, 0}, {0, 0}}\noutput2: 0\n", "\ninput3: grid={{0, 1}, {1, 0}}\noutput3: 2\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{0}};\n    vector<vector<int>> grid2 = {{0, 0}, {0, 0}};\n    vector<vector<int>> grid3 = {{0, 1}, {1, 0}};\n    vector<vector<int>> grid4 = {{1, 1, 1}, {1, 0, 1}, {1, 1, 1}};\n    vector<vector<int>> grid5 = {{1, 0}, {1, 0}, {0, 1}};\n    vector<vector<int>> grid6 = {{1, 0, 1}, {0, 1, 0}, {1, 0, 1}};\n    vector<vector<int>> grid7 = {{1, 1}, {1, 0}, {0, 0}};\n    vector<vector<int>> grid8 = {{0, 0, 1, 1}, {1, 1, 0, 0}, {0, 1, 0, 1}};\n    vector<vector<int>> grid9 = {{1, 0}, {0, 1}, {1, 0}, {0, 1}};\n    vector<vector<int>> grid10 = {{0, 1, 0}, {1, 0, 1}, {0, 1, 0}};\n\n    cout << minFlips(grid1) << endl;\n    cout << minFlips(grid2) << endl;\n    cout << minFlips(grid3) << endl;\n    cout << minFlips(grid4) << endl;\n    cout << minFlips(grid5) << endl;\n    cout << minFlips(grid6) << endl;\n    cout << minFlips(grid7) << endl;\n    cout << minFlips(grid8) << endl;\n    cout << minFlips(grid9) << endl;\n    cout << minFlips(grid10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###canAliceWin.cpp", "source_code_str": "bool canAliceWin(vector<int>& nums) {\n        int s = 0;\n        for (int x : nums) {\n            s += x < 10 ? x : -x;\n        }\n        return s; \n    }", "source_code_block": "", "target_Lan": "java###canAliceWin_Test.java", "reference_code": "public static boolean canAliceWin(int[] nums) {\n        int s = 0;\n        for (int x : nums) {\n            s += x < 10 ? x : -x;\n        }\n        return s != 0;\n    }", "target_method_signature": "canAliceWin", "source_method_signature": "canAliceWin", "source_allMS": "bool canAliceWin(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class canAliceWin_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(canAliceWin(new int[]{0})); // Test Input 1\n        System.out.println(canAliceWin(new int[]{8, 1})); // Test Input 2\n        System.out.println(canAliceWin(new int[]{10, 20})); // Test Input 3\n        System.out.println(canAliceWin(new int[]{5, 15, 3})); // Test Input 4\n        System.out.println(canAliceWin(new int[]{8, 2, 2, 10})); // Test Input 5\n        System.out.println(canAliceWin(new int[]{})); // Test Input 6\n        System.out.println(canAliceWin(new int[]{10})); // Test Input 7\n        System.out.println(canAliceWin(new int[]{5, 5, 5, 5})); // Test Input 8\n        System.out.println(canAliceWin(new int[]{10, 10, 10})); // Test Input 9\n        System.out.println(canAliceWin(new int[]{1, 9, 20, 5})); // Test Input 10\n    }\n}", "all_input_output_value": "\ninput1: nums=[0]\noutput1: false\n--------\ninput2: nums=[8, 1]\noutput2: true\n--------\ninput3: nums=[10, 20]\noutput3: true\n--------\ninput4: nums=[5, 15, 3]\noutput4: true\n--------\ninput5: nums=[8, 2, 2, 10]\noutput5: true\n--------\ninput6: nums=[]\noutput6: false\n--------\ninput7: nums=[10]\noutput7: true\n--------\ninput8: nums=[5, 5, 5, 5]\noutput8: true\n--------\ninput9: nums=[10, 10, 10]\noutput9: true\n--------\ninput10: nums=[1, 9, 20, 5]\noutput10: true\n", "target_allMS": "public static boolean canAliceWin(int[] nums) {", "input_output_value": ["\ninput1: nums=[0]\noutput1: false\n", "\ninput2: nums=[8, 1]\noutput2: true\n", "\ninput3: nums=[10, 20]\noutput3: true\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {0};\n    vector<int> input2 = {8, 1};\n    vector<int> input3 = {10, 20};\n    vector<int> input4 = {5, 15, 3};\n    vector<int> input5 = {8, 2, 2, 10};\n    vector<int> input6 = {};\n    vector<int> input7 = {10};\n    vector<int> input8 = {5, 5, 5, 5};\n    vector<int> input9 = {10, 10, 10};\n    vector<int> input10 = {1, 9, 20, 5};\n\n    cout << canAliceWin(input1) << endl;\n    cout << canAliceWin(input2) << endl;\n    cout << canAliceWin(input3) << endl;\n    cout << canAliceWin(input4) << endl;\n    cout << canAliceWin(input5) << endl;\n    cout << canAliceWin(input6) << endl;\n    cout << canAliceWin(input7) << endl;\n    cout << canAliceWin(input8) << endl;\n    cout << canAliceWin(input9) << endl;\n    cout << canAliceWin(input10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###numberOfSubstrings.cpp", "source_code_str": "int numberOfSubstrings(string s) {\n        int n = s.length();\n        vector<int> a;\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                a.push_back(i);\n            }\n        }\n        int tot1 = n - a.size();\n        a.push_back(n); \n        int ans = 0, i = 0; \n        for (int left = 0; left < n; left++) {\n            if (s[left] == '1') {\n                ans += a[i] - left; \n            }\n            for (int k = i; k < a.size() - 1; k++) {\n                int cnt0 = k - i + 1;\n                if (cnt0 * cnt0 > tot1) {\n                    break;\n                }\n                int cnt1 = a[k] - left - (k - i);\n                ans += max(a[k + 1] - a[k] - max(cnt0 * cnt0 - cnt1, 0), 0);\n            }\n            if (s[left] == '0') {\n                i++; \n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###numberOfSubstrings_Test.java", "reference_code": "public static int numberOfSubstrings(String S) {\n        char[] s = S.toCharArray();\n        int n = s.length;\n        int m = 0;\n        int[] a = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                a[m++] = i;\n            }\n        }\n        int tot1 = n - m;\n        a[m] = n; \n        int ans = 0;\n        int i = 0; \n        for (int left = 0; left < n; left++) {\n            if (s[left] == '1') {\n                ans += a[i] - left; \n            }\n            for (int k = i; k < m; k++) {\n                int cnt0 = k - i + 1;\n                if (cnt0 * cnt0 > tot1) {\n                    break;\n                }\n                int cnt1 = a[k] - left - (k - i);\n                ans += Math.max(a[k + 1] - a[k] - Math.max(cnt0 * cnt0 - cnt1, 0), 0);\n            }\n            if (s[left] == '0') {\n                i++; \n            }\n        }\n        return ans;\n    }", "target_method_signature": "numberOfSubstrings", "source_method_signature": "numberOfSubstrings", "source_allMS": "int numberOfSubstrings(string s) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class numberOfSubstrings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(numberOfSubstrings(\"\"));               // Edge case: empty string\n        System.out.println(numberOfSubstrings(\"0\"));              // Single character: just '0'\n        System.out.println(numberOfSubstrings(\"1\"));              // Single character: just '1'\n        System.out.println(numberOfSubstrings(\"0000\"));           // All '0's\n        System.out.println(numberOfSubstrings(\"1111\"));           // All '1's\n        System.out.println(numberOfSubstrings(\"010101\"));         // Alternating pattern\n        System.out.println(numberOfSubstrings(\"00001111\"));       // Segregated groups of '0's and '1's\n        System.out.println(numberOfSubstrings(\"11110000\"));       // Another segregated groups\n        System.out.println(numberOfSubstrings(\"10101010\"));       // Equal number of '0's and '1's, alternating\n        System.out.println(numberOfSubstrings(\"0110101110\"));     // A complex example with mixed characters\n    }\n}", "all_input_output_value": "\ninput1: S=\"\"\noutput1: 0\n--------\ninput2: S=\"0\"\noutput2: 0\n--------\ninput3: S=\"1\"\noutput3: 1\n--------\ninput4: S=\"0000\"\noutput4: 0\n--------\ninput5: S=\"1111\"\noutput5: 10\n--------\ninput6: S=\"010101\"\noutput6: 10\n--------\ninput7: S=\"00001111\"\noutput7: 15\n--------\ninput8: S=\"11110000\"\noutput8: 15\n--------\ninput9: S=\"10101010\"\noutput9: 14\n--------\ninput10: S=\"0110101110\"\noutput10: 34\n", "target_allMS": "public static int numberOfSubstrings(String S) {", "input_output_value": ["\ninput1: S=\"\"\noutput1: 0\n", "\ninput2: S=\"0\"\noutput2: 0\n", "\ninput3: S=\"1\"\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    cout << numberOfSubstrings(\"\") << endl;\n    cout << numberOfSubstrings(\"0\") << endl;\n    cout << numberOfSubstrings(\"1\") << endl;\n    cout << numberOfSubstrings(\"0000\") << endl;\n    cout << numberOfSubstrings(\"1111\") << endl;\n    cout << numberOfSubstrings(\"010101\") << endl;\n    cout << numberOfSubstrings(\"00001111\") << endl;\n    cout << numberOfSubstrings(\"11110000\") << endl;\n    cout << numberOfSubstrings(\"10101010\") << endl;\n    cout << numberOfSubstrings(\"0110101110\") << endl;\n}"}
{"source_Lan": "cpp###minSwaps.cpp", "source_code_str": "int minSwaps(string S) {\n        int evenSum = 0, oddSum = 0;\n        int n = S.size();\n        \n        for (int i = 0; i < n; i++) {\n            if (i & 1)\n                oddSum += (S[i] == '1');\n            else\n                evenSum += (S[i] == '1');\n        }\n        \n        int difference = abs(oddSum - evenSum);\n        \n        if (difference & 1)\n            return -1;\n        \n        return difference / 2;\n    }", "source_code_block": "", "target_Lan": "java###minSwaps_Test.java", "reference_code": "public static int minSwaps(String S) {\n        int evenSum = 0, oddSum = 0;\n        int n = S.length();\n        \n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 1)\n                oddSum += (S.charAt(i) == '1') ? 1 : 0;\n            else\n                evenSum += (S.charAt(i) == '1') ? 1 : 0;\n        }\n        \n        int difference = Math.abs(oddSum - evenSum);\n        \n        if (difference % 2 == 1) return -1;\n        \n        return difference / 2;\n    }", "target_method_signature": "minSwaps", "source_method_signature": "minSwaps", "source_allMS": "int minSwaps(string S) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <cmath>", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minSwaps_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minSwaps(\"1010\"));     // Expected output: 0\n        System.out.println(minSwaps(\"1100\"));     // Expected output: 1\n        System.out.println(minSwaps(\"0000\"));     // Expected output: 0\n        System.out.println(minSwaps(\"1111\"));     // Expected output: 2\n        System.out.println(minSwaps(\"0101\"));     // Expected output: 0\n        System.out.println(minSwaps(\"0110\"));     // Expected output: 1\n        System.out.println(minSwaps(\"1001\"));     // Expected output: 1\n        System.out.println(minSwaps(\"111000\"));   // Expected output: 1\n        System.out.println(minSwaps(\"000111\"));   // Expected output: -1\n        System.out.println(minSwaps(\"10101\"));    // Expected output: 0\n    }\n}", "all_input_output_value": "\ninput1: S=\"1010\"\noutput1: 1\n--------\ninput2: S=\"1100\"\noutput2: 0\n--------\ninput3: S=\"0000\"\noutput3: 0\n--------\ninput4: S=\"1111\"\noutput4: 0\n--------\ninput5: S=\"0101\"\noutput5: 1\n--------\ninput6: S=\"0110\"\noutput6: 0\n--------\ninput7: S=\"1001\"\noutput7: 0\n--------\ninput8: S=\"111000\"\noutput8: -1\n--------\ninput9: S=\"000111\"\noutput9: -1\n--------\ninput10: S=\"10101\"\noutput10: -1\n", "target_allMS": "public static int minSwaps(String S) {", "input_output_value": ["\ninput1: S=\"1010\"\noutput1: 1\n", "\ninput2: S=\"1100\"\noutput2: 0\n", "\ninput3: S=\"0000\"\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <cmath>\n#include <iostream>\n#include <string>\n#include <cstdlib> // for abs\n// TOFILL\nint main() {\n    cout << minSwaps(\"1010\") << endl;\n    cout << minSwaps(\"1100\") << endl;\n    cout << minSwaps(\"0000\") << endl;\n    cout << minSwaps(\"1111\") << endl;\n    cout << minSwaps(\"0101\") << endl;\n    cout << minSwaps(\"0110\") << endl;\n    cout << minSwaps(\"1001\") << endl;\n    cout << minSwaps(\"111000\") << endl;\n    cout << minSwaps(\"000111\") << endl;\n    cout << minSwaps(\"10101\") << endl;\n}"}
{"source_Lan": "cpp###countUniques.cpp", "source_code_str": "int countUniques(vector<int> a, int k, int l, int r) {\n        \n        unordered_set<int> set;\n        int dup = 0;\n        for (int i : a) {\n            if (!set.insert(i).second) {\n                dup++;\n            }\n        }\n        int unique = set.size();\n        for (int i = l; i <= r; i++) {\n            if (k > 0 && dup > 0 && set.find(i) == set.end()) {\n                unique++;\n                k--;\n                dup--;\n            }\n        }\n        return unique;\n    }", "source_code_block": "", "target_Lan": "java###countUniques_Test.java", "reference_code": "public static int countUniques(int[] a, int k, int l, int r) {\n        Set<Integer> set = new HashSet<>();\n        int dup = 0;\n        for(int i : a) if(!set.add(i)) dup++;\n        int unique = set.size();\n        for(int i = l ; i <= r ; i++)\n            if(k>0 && dup>0 && !set.contains(i)){\n                unique++; k--; dup--;\n            }\n        return unique;\n    }", "target_method_signature": "countUniques", "source_method_signature": "countUniques", "source_allMS": "int countUniques(vector<int> a, int k, int l, int r) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class countUniques_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countUniques(new int[]{}, 2, 1, 5)); // Test input 1\n        System.out.println(countUniques(new int[]{1, 2, 3}, 2, 4, 6)); // Test input 2\n        System.out.println(countUniques(new int[]{1, 2, 2, 2}, 1, 1, 5)); // Test input 3\n        System.out.println(countUniques(new int[]{5, 5, 5}, 0, 1, 3)); // Test input 4\n        System.out.println(countUniques(new int[]{3, 3, 3, 3}, 2, 4, 4)); // Test input 5\n        System.out.println(countUniques(new int[]{7, 8, 9}, 1, 1, 10)); // Test input 6\n        System.out.println(countUniques(new int[]{4, 4, 4, 4}, 3, -1, 2)); // Test input 7\n        System.out.println(countUniques(new int[]{1, 2, 3, 4, 5}, 0, 1, 5)); // Test input 8\n        System.out.println(countUniques(new int[]{10, 10, 10}, 5, 11, 15)); // Test input 9\n        System.out.println(countUniques(new int[]{1, 2, 3, 3, 4}, 1, 1, 4)); // Test input 10\n    }\n}", "all_input_output_value": "\ninput1: a=[], k=2, l=1, r=5\noutput1: 0\n--------\ninput2: a=[1, 2, 3], k=2, l=4, r=6\noutput2: 3\n--------\ninput3: a=[1, 2, 2, 2], k=1, l=1, r=5\noutput3: 3\n--------\ninput4: a=[5, 5, 5], k=0, l=1, r=3\noutput4: 1\n--------\ninput5: a=[3, 3, 3, 3], k=2, l=4, r=4\noutput5: 2\n--------\ninput6: a=[7, 8, 9], k=1, l=1, r=10\noutput6: 3\n--------\ninput7: a=[4, 4, 4, 4], k=3, l=-1, r=2\noutput7: 4\n--------\ninput8: a=[1, 2, 3, 4, 5], k=0, l=1, r=5\noutput8: 5\n--------\ninput9: a=[10, 10, 10], k=5, l=11, r=15\noutput9: 3\n--------\ninput10: a=[1, 2, 3, 3, 4], k=1, l=1, r=4\noutput10: 4\n", "target_allMS": "public static int countUniques(int[] a, int k, int l, int r) {", "input_output_value": ["\ninput1: a=[], k=2, l=1, r=5\noutput1: 0\n", "\ninput2: a=[1, 2, 3], k=2, l=4, r=6\noutput2: 3\n", "\ninput3: a=[1, 2, 2, 2], k=1, l=1, r=5\noutput3: 3\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n// TOFILL\nint main() {\n    cout << countUniques({}, 2, 1, 5) << endl;\n    cout << countUniques({1, 2, 3}, 2, 4, 6) << endl;\n    cout << countUniques({1, 2, 2, 2}, 1, 1, 5) << endl;\n    cout << countUniques({5, 5, 5}, 0, 1, 3) << endl;\n    cout << countUniques({3, 3, 3, 3}, 2, 4, 4) << endl;\n    cout << countUniques({7, 8, 9}, 1, 1, 10) << endl;\n    cout << countUniques({4, 4, 4, 4}, 3, -1, 2) << endl;\n    cout << countUniques({1, 2, 3, 4, 5}, 0, 1, 5) << endl;\n    cout << countUniques({10, 10, 10}, 5, 11, 15) << endl;\n    cout << countUniques({1, 2, 3, 3, 4}, 1, 1, 4) << endl;\n}"}
{"source_Lan": "cpp###maxLength.cpp", "source_code_str": "int maxLength(vector<int> arr) {\n        \n        int ans = 0;\n        int N = arr.size();\n        for (int i = 0; i < N; i++) {\n            int or_val = 0;\n            for (int j = i; j < N; j++) {\n                or_val = or_val | arr[j];\n                int x = __builtin_popcount(or_val);\n                if (x == (int)log2(or_val) + 1) {\n                    ans = max(ans, j - i + 1);\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maxLength_Test.java", "reference_code": "public static int maxLength(int N, int[] arr) {\n        int ans = 0;\n        for(int i = 0 ; i < N; i++){\n            int or = 0;\n            for(int j = i ; j < N; j++){\n                or = or | arr[j];\n                int x = Integer.bitCount(or);\n                if(x == Integer.toBinaryString(or).length()){\n                    ans = Math.max(ans , j - i + 1);\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "maxLength", "source_method_signature": "maxLength", "source_allMS": "int maxLength(vector<int> arr) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class maxLength_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxLength(0, new int[]{}));\n        System.out.println(maxLength(1, new int[]{1}));\n        System.out.println(maxLength(5, new int[]{2, 2, 2, 2, 2}));\n        System.out.println(maxLength(4, new int[]{1, 2, 4, 8}));\n        System.out.println(maxLength(6, new int[]{1, 1, 2, 3, 5, 8}));\n        System.out.println(maxLength(3, new int[]{15, 14, 13}));\n        System.out.println(maxLength(3, new int[]{1, 3, 2}));\n        System.out.println(maxLength(5, new int[]{1, 2, 3, 4, 5}));\n        System.out.println(maxLength(5, new int[]{7, 7, 7, 1, 2}));\n        System.out.println(maxLength(4, new int[]{9, 6, 3, 15}));\n    }\n}", "all_input_output_value": "\ninput1: N=0, arr=[]\noutput1: 0\n--------\ninput2: N=1, arr=[1]\noutput2: 1\n--------\ninput3: N=5, arr=[2, 2, 2, 2, 2]\noutput3: 0\n--------\ninput4: N=4, arr=[1, 2, 4, 8]\noutput4: 4\n--------\ninput5: N=6, arr=[1, 1, 2, 3, 5, 8]\noutput5: 6\n--------\ninput6: N=3, arr=[15, 14, 13]\noutput6: 3\n--------\ninput7: N=3, arr=[1, 3, 2]\noutput7: 3\n--------\ninput8: N=5, arr=[1, 2, 3, 4, 5]\noutput8: 5\n--------\ninput9: N=5, arr=[7, 7, 7, 1, 2]\noutput9: 5\n--------\ninput10: N=4, arr=[9, 6, 3, 15]\noutput10: 4\n", "target_allMS": "public static int maxLength(int N, int[] arr) {", "input_output_value": ["\ninput1: N=0, arr=[]\noutput1: 0\n", "\ninput2: N=1, arr=[1]\noutput2: 1\n", "\ninput3: N=5, arr=[2, 2, 2, 2, 2]\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <vector>\n#include <cmath>\n// TOFILL\nint main() {\n    cout << maxLength({}) << endl; // N=0, arr=[]\n    cout << maxLength({1}) << endl; // N=1, arr=[1]\n    cout << maxLength({2, 2, 2, 2, 2}) << endl; // N=5, arr=[2, 2, 2, 2, 2]\n    cout << maxLength({1, 2, 4, 8}) << endl; // N=4, arr=[1, 2, 4, 8]\n    cout << maxLength({1, 1, 2, 3, 5, 8}) << endl; // N=6, arr=[1, 1, 2, 3, 5, 8]\n    cout << maxLength({15, 14, 13}) << endl; // N=3, arr=[15, 14, 13]\n    cout << maxLength({1, 3, 2}) << endl; // N=3, arr=[1, 3, 2]\n    cout << maxLength({1, 2, 3, 4, 5}) << endl; // N=5, arr=[1, 2, 3, 4, 5]\n    cout << maxLength({7, 7, 7, 1, 2}) << endl; // N=5, arr=[7, 7, 7, 1, 2]\n    cout << maxLength({9, 6, 3, 15}) << endl; // N=4, arr=[9, 6, 3, 15]\n}"}
{"source_Lan": "cpp###firstWord.cpp", "source_code_str": "string firstWord(int n, vector<string> &dictionary) {\n        \n        sort(dictionary.begin(), dictionary.end());\n        for(int i=0;i<n;i++) {\n            for(int j=i+1;j<n;j++) {\n                if(dictionary[i]==dictionary[j]){\n                    return \"Invalid\";\n                }\n            }\n        }\n        return dictionary[0];\n    }", "source_code_block": "", "target_Lan": "java###firstWord_Test.java", "reference_code": "public static String firstWord(int n, String[] dictionary) {\n        \n        Arrays.sort(dictionary);\n        Set<String> seenWords = new HashSet<>();\n        for (String word : dictionary) {\n            if (seenWords.contains(word)) {\n                return \"Invalid\";\n            }\n            seenWords.add(word);\n        }\n        return dictionary[0];\n    }", "target_method_signature": "firstWord", "source_method_signature": "firstWord", "source_allMS": "string firstWord(int n, vector<string> &dictionary) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class firstWord_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(firstWord(1, new String[]{\"apple\"}));\n        System.out.println(firstWord(3, new String[]{\"banana\", \"apple\", \"cherry\"}));\n        System.out.println(firstWord(4, new String[]{\"banana\", \"apple\", \"apple\", \"cherry\"}));\n        System.out.println(firstWord(5, new String[]{\"cat\", \"bat\", \"rat\", \"ant\", \"dog\"}));\n        System.out.println(firstWord(2, new String[]{\"hello\", \"hi\"}));\n        System.out.println(firstWord(6, new String[]{\"zebra\", \"elephant\", \"ant\", \"lion\", \"tiger\", \"monkey\"}));\n        System.out.println(firstWord(3, new String[]{\"zebra\", \"ant\", \"ant\"}));\n        System.out.println(firstWord(4, new String[]{\"hello\", \"world\", \"hello\", \"java\"}));\n        System.out.println(firstWord(7, new String[]{\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abc\", \"abcde\"}));\n    }\n}", "all_input_output_value": "\ninput1: n=1, dictionary=[\"apple\"]\noutput1: apple\n--------\ninput2: n=3, dictionary=[\"banana\", \"apple\", \"cherry\"]\noutput2: apple\n--------\ninput3: n=4, dictionary=[\"banana\", \"apple\", \"apple\", \"cherry\"]\noutput3: Invalid\n--------\ninput4: n=5, dictionary=[\"cat\", \"bat\", \"rat\", \"ant\", \"dog\"]\noutput4: ant\n--------\ninput5: n=2, dictionary=[\"hello\", \"hi\"]\noutput5: hello\n--------\ninput6: n=6, dictionary=[\"zebra\", \"elephant\", \"ant\", \"lion\", \"tiger\", \"monkey\"]\noutput6: ant\n--------\ninput7: n=3, dictionary=[\"zebra\", \"ant\", \"ant\"]\noutput7: Invalid\n--------\ninput8: n=4, dictionary=[\"hello\", \"world\", \"hello\", \"java\"]\noutput8: Invalid\n--------\ninput9: n=7, dictionary=[\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abc\", \"abcde\"]\noutput9: Invalid\n", "target_allMS": "public static String firstWord(int n, String[] dictionary) {", "input_output_value": ["\ninput1: n=1, dictionary=[\"apple\"]\noutput1: apple\n", "\ninput2: n=3, dictionary=[\"banana\", \"apple\", \"cherry\"]\noutput2: apple\n", "\ninput3: n=4, dictionary=[\"banana\", \"apple\", \"apple\", \"cherry\"]\noutput3: Invalid\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<string> dict1 = {\"apple\"};\n    cout << firstWord(1, dict1) << endl;\n\n    vector<string> dict2 = {\"banana\", \"apple\", \"cherry\"};\n    cout << firstWord(3, dict2) << endl;\n\n    vector<string> dict3 = {\"banana\", \"apple\", \"apple\", \"cherry\"};\n    cout << firstWord(4, dict3) << endl;\n\n    vector<string> dict4 = {\"cat\", \"bat\", \"rat\", \"ant\", \"dog\"};\n    cout << firstWord(5, dict4) << endl;\n\n    vector<string> dict5 = {\"hello\", \"hi\"};\n    cout << firstWord(2, dict5) << endl;\n\n    vector<string> dict6 = {\"zebra\", \"elephant\", \"ant\", \"lion\", \"tiger\", \"monkey\"};\n    cout << firstWord(6, dict6) << endl;\n\n    vector<string> dict7 = {\"zebra\", \"ant\", \"ant\"};\n    cout << firstWord(3, dict7) << endl;\n\n    vector<string> dict8 = {\"hello\", \"world\", \"hello\", \"java\"};\n    cout << firstWord(4, dict8) << endl;\n\n    vector<string> dict9 = {\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abc\", \"abcde\"};\n    cout << firstWord(7, dict9) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###longestSubarray.cpp", "source_code_str": "int longestSubarray(int n, vector<int> &arr) {\n        \n        int ans=-1;\n        for(int i=0;i<n;i++){\n            int count=0;\n            int sum=0;\n            for(int j=i;j<n;j++) {\n                count++;\n                sum += arr[j];\n                if(count == sum){\n                    ans = max(ans, count);\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###longestSubarray_Test.java", "reference_code": "public static int longestSubarray(int n, int[] arr) {\n        int ans = -1;\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            int sum = 0;\n            for (int j = i; j < n; j++) {\n                count++;\n                sum += arr[j];\n                if (count == sum) {\n                    ans = Math.max(ans, count);\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "longestSubarray", "source_method_signature": "longestSubarray", "source_allMS": "int longestSubarray(int n, vector<int> &arr) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class longestSubarray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(longestSubarray(4, new int[]{1, 2, 3, 0})); // Expected output: 3\n        System.out.println(longestSubarray(5, new int[]{1, 1, 1, 1, 4})); // Expected output: 4\n        System.out.println(longestSubarray(3, new int[]{0, 0, 0})); // Expected output: 1\n        System.out.println(longestSubarray(5, new int[]{1, 1, 1, 1, 1})); // Expected output: 3\n        System.out.println(longestSubarray(6, new int[]{1, 0, 1, 2, 3, 4})); // Expected output: 3\n        System.out.println(longestSubarray(5, new int[]{2, 2, 2, 2, 2})); // Expected output: -1\n        System.out.println(longestSubarray(0, new int[]{})); // Expected output: -1\n        System.out.println(longestSubarray(2, new int[]{4, 5})); // Expected output: -1\n        System.out.println(longestSubarray(3, new int[]{-1, -2, -3})); // Expected output: -1\n        System.out.println(longestSubarray(1, new int[]{1})); // Expected output: 1\n    }\n}", "all_input_output_value": "\ninput1: n=4, arr=[1, 2, 3, 0]\noutput1: 3\n--------\ninput2: n=5, arr=[1, 1, 1, 1, 4]\noutput2: 4\n--------\ninput3: n=3, arr=[0, 0, 0]\noutput3: 1\n--------\ninput4: n=5, arr=[1, 1, 1, 1, 1]\noutput4: 3\n--------\ninput5: n=6, arr=[1, 0, 1, 2, 3, 4]\noutput5: 3\n--------\ninput6: n=5, arr=[2, 2, 2, 2, 2]\noutput6: -1\n--------\ninput7: n=0, arr=[]\noutput7: -1\n--------\ninput8: n=2, arr=[4, 5]\noutput8: -1\n--------\ninput9: n=3, arr=[-1, -2, -3]\noutput9: -1\n--------\ninput10: n=1, arr=[1]\noutput10: 1\n", "target_allMS": "public static int longestSubarray(int n, int[] arr) {", "input_output_value": ["\ninput1: n=4, arr=[1, 2, 3, 0]\noutput1: 3\n", "\ninput2: n=5, arr=[1, 1, 1, 1, 4]\noutput2: 4\n", "\ninput3: n=3, arr=[0, 0, 0]\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> arr1 = {1, 2, 3, 0};\n    cout << longestSubarray(4, arr1) << endl;\n    \n    vector<int> arr2 = {1, 1, 1, 1, 4};\n    cout << longestSubarray(5, arr2) << endl;\n\n    vector<int> arr3 = {0, 0, 0};\n    cout << longestSubarray(3, arr3) << endl;\n\n    vector<int> arr4 = {1, 1, 1, 1, 1};\n    cout << longestSubarray(5, arr4) << endl;\n\n    vector<int> arr5 = {1, 0, 1, 2, 3, 4};\n    cout << longestSubarray(6, arr5) << endl;\n\n    vector<int> arr6 = {2, 2, 2, 2, 2};\n    cout << longestSubarray(5, arr6) << endl;\n\n    vector<int> arr7 = {};\n    cout << longestSubarray(0, arr7) << endl;\n\n    vector<int> arr8 = {4, 5};\n    cout << longestSubarray(2, arr8) << endl;\n\n    vector<int> arr9 = {-1, -2, -3};\n    cout << longestSubarray(3, arr9) << endl;\n\n    vector<int> arr10 = {1};\n    cout << longestSubarray(1, arr10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###reachAlice.cpp", "source_code_str": "string reachAlice(int d, int x, int y, int k) {\n        int t1 = d / x;\n        int t2 = d / y + k;\n        if (t1 <= t2)\n            return \"Walk\";\n        return \"Bike\";\n    }", "source_code_block": "", "target_Lan": "java###reachAlice_Test.java", "reference_code": "public static String reachAlice(int d, int x, int y, int k) {\n        int p = d / x;\n        int q = d / y;\n        q += k;\n        return (p <= q) ? \"Walk\" : \"Bike\";\n    }", "target_method_signature": "reachAlice", "source_method_signature": "reachAlice", "source_allMS": "string reachAlice(int d, int x, int y, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\n\npublic class reachAlice_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(reachAlice(0, 1, 1, 0));    // Expected output: \"Walk\"\n        System.out.println(reachAlice(10, 2, 5, 1));    // Expected output: \"Walk\"\n        System.out.println(reachAlice(10, 5, 2, 0));    // Expected output: \"Bike\"\n        System.out.println(reachAlice(15, 3, 3, 0));    // Expected output: \"Walk\"\n        System.out.println(reachAlice(20, 1, 1, 20));   // Expected output: \"Bike\"\n        System.out.println(reachAlice(20, 4, 5, 0));    // Expected output: \"Walk\"\n        System.out.println(reachAlice(100, 10, 5, 10)); // Expected output: \"Bike\"\n        System.out.println(reachAlice(50, 5, 10, 5));   // Expected output: \"Walk\"\n        System.out.println(reachAlice(30, 3, 1, 0));    // Expected output: \"Bike\"\n    }\n}", "all_input_output_value": "\ninput1: d=0, x=1, y=1, k=0\noutput1: \"Walk\"\n--------\ninput2: d=10, x=2, y=5, k=1\noutput2: \"Walk\"\n--------\ninput3: d=10, x=5, y=2, k=0\noutput3: \"Bike\"\n--------\ninput4: d=15, x=3, y=3, k=0\noutput4: \"Walk\"\n--------\ninput5: d=20, x=1, y=1, k=20\noutput5: \"Bike\"\n--------\ninput6: d=20, x=4, y=5, k=0\noutput6: \"Walk\"\n--------\ninput7: d=100, x=10, y=5, k=10\noutput7: \"Bike\"\n--------\ninput8: d=50, x=5, y=10, k=5\noutput8: \"Walk\"\n--------\ninput9: d=30, x=3, y=1, k=0\noutput9: \"Bike\"\n", "target_allMS": "public static String reachAlice(int d, int x, int y, int k) {", "input_output_value": ["\ninput1: d=0, x=1, y=1, k=0\noutput1: \"Walk\"\n", "\ninput2: d=10, x=2, y=5, k=1\noutput2: \"Walk\"\n", "\ninput3: d=10, x=5, y=2, k=0\noutput3: \"Bike\"\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << reachAlice(0, 1, 1, 0) << endl;\n    cout << reachAlice(10, 2, 5, 1) << endl;\n    cout << reachAlice(10, 5, 2, 0) << endl;\n    cout << reachAlice(15, 3, 3, 0) << endl;\n    cout << reachAlice(20, 1, 1, 20) << endl;\n    cout << reachAlice(20, 4, 5, 0) << endl;\n    cout << reachAlice(100, 10, 5, 10) << endl;\n    cout << reachAlice(50, 5, 10, 5) << endl;\n    cout << reachAlice(30, 3, 1, 0) << endl;\n}"}
{"source_Lan": "cpp###removeOrder.cpp", "source_code_str": "vector<int> removeOrder(int n, vector<int> &arr, string str) {\n        sort(arr.begin(), arr.end());\n        int i = 0, j = n - 1;\n        vector<int> ans(n);\n        for (int k = 0; k < n; k++) {\n            if (str[k] == '0')\n                ans[k] = arr[i++];\n            else\n                ans[k] = arr[j--];\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###removeOrder_Test.java", "reference_code": "public static int[] removeOrder(int n, int[] arr, String str) {\n        Arrays.sort(arr);\n        int i = 0, j = n - 1;\n        int[] ans = new int[n];\n        int idx = 0;\n        for (char ch : str.toCharArray()) {\n            if (ch == '0')\n                ans[idx++] = arr[i++];\n            else\n                ans[idx++] = arr[j--];\n        }\n        return ans;\n    }", "target_method_signature": "removeOrder", "source_method_signature": "removeOrder", "source_allMS": "vector<int> removeOrder(int n, vector<int> &arr, string str) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class removeOrder_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] result1 = removeOrder(3, new int[]{3, 1, 2}, \"001\");\n        System.out.println(Arrays.toString(result1)); // Expected output: [1, 2, 3]\n        \n        int[] result2 = removeOrder(4, new int[]{10, 20, 30, 40}, \"0101\");\n        System.out.println(Arrays.toString(result2)); // Expected output: [20, 30, 10, 40]\n        \n        int[] result3 = removeOrder(5, new int[]{-10, -20, 0, 20, 10}, \"00000\");\n        System.out.println(Arrays.toString(result3)); // Expected output: [-20, -10, 0, 10, 20]\n        \n        int[] result4 = removeOrder(5, new int[]{-5, -1, 1, 2, 3}, \"11111\");\n        System.out.println(Arrays.toString(result4)); // Expected output: [3, 2, 1, -1, -5]\n        \n        int[] result5 = removeOrder(6, new int[]{5, 3, 8, 6, 2, 4}, \"001101\");\n        System.out.println(Arrays.toString(result5)); // Expected output: [2, 3, 4, 8, 6, 5]\n        \n        int[] result6 = removeOrder(1, new int[]{42}, \"0\");\n        System.out.println(Arrays.toString(result6)); // Expected output: [42]\n        \n        int[] result7 = removeOrder(2, new int[]{1, 100}, \"10\");\n        System.out.println(Arrays.toString(result7)); // Expected output: [100, 1]\n        \n        int[] result8 = removeOrder(4, new int[]{50, 30, 20, 10}, \"1110\");\n        System.out.println(Arrays.toString(result8)); // Expected output: [30, 20, 10, 50]\n        \n        int[] result9 = removeOrder(0, new int[]{}, \"\");\n        System.out.println(Arrays.toString(result9)); // Expected output: []\n        \n        int[] result10 = removeOrder(3, new int[]{-100, -50, -200}, \"010\");\n        System.out.println(Arrays.toString(result10)); // Expected output: [-100, -200, -50]\n    }\n}", "all_input_output_value": "\ninput1: n=3, arr=[3, 1, 2], str=\"001\"\noutput1: [1, 2, 3]\n--------\ninput2: n=4, arr=[10, 20, 30, 40], str=\"0101\"\noutput2: [10, 40, 20, 30]\n--------\ninput3: n=5, arr=[-10, -20, 0, 20, 10], str=\"00000\"\noutput3: [-20, -10, 0, 10, 20]\n--------\ninput4: n=5, arr=[-5, -1, 1, 2, 3], str=\"11111\"\noutput4: [3, 2, 1, -1, -5]\n--------\ninput5: n=6, arr=[5, 3, 8, 6, 2, 4], str=\"001101\"\noutput5: [2, 3, 8, 6, 4, 5]\n--------\ninput6: n=1, arr=[42], str=\"0\"\noutput6: [42]\n--------\ninput7: n=2, arr=[1, 100], str=\"10\"\noutput7: [100, 1]\n--------\ninput8: n=4, arr=[50, 30, 20, 10], str=\"1110\"\noutput8: [50, 30, 20, 10]\n--------\ninput9: n=0, arr=[], str=\"\"\noutput9: []\n--------\ninput10: n=3, arr=[-100, -50, -200], str=\"010\"\noutput10: [-200, -50, -100]\n", "target_allMS": "public static int[] removeOrder(int n, int[] arr, String str) {", "input_output_value": ["\ninput1: n=3, arr=[3, 1, 2], str=\"001\"\noutput1: [1, 2, 3]\n", "\ninput2: n=4, arr=[10, 20, 30, 40], str=\"0101\"\noutput2: [10, 40, 20, 30]\n", "\ninput3: n=5, arr=[-10, -20, 0, 20, 10], str=\"00000\"\noutput3: [-20, -10, 0, 10, 20]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> arr1 = {3, 1, 2};\n    string str1 = \"001\";\n    vector<int> result1 = removeOrder(3, arr1, str1);\n    for(int num : result1) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr2 = {10, 20, 30, 40};\n    string str2 = \"0101\";\n    vector<int> result2 = removeOrder(4, arr2, str2);\n    for(int num : result2) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr3 = {-10, -20, 0, 20, 10};\n    string str3 = \"00000\";\n    vector<int> result3 = removeOrder(5, arr3, str3);\n    for(int num : result3) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr4 = {-5, -1, 1, 2, 3};\n    string str4 = \"11111\";\n    vector<int> result4 = removeOrder(5, arr4, str4);\n    for(int num : result4) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr5 = {5, 3, 8, 6, 2, 4};\n    string str5 = \"001101\";\n    vector<int> result5 = removeOrder(6, arr5, str5);\n    for(int num : result5) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr6 = {42};\n    string str6 = \"0\";\n    vector<int> result6 = removeOrder(1, arr6, str6);\n    for(int num : result6) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr7 = {1, 100};\n    string str7 = \"10\";\n    vector<int> result7 = removeOrder(2, arr7, str7);\n    for(int num : result7) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr8 = {50, 30, 20, 10};\n    string str8 = \"1110\";\n    vector<int> result8 = removeOrder(4, arr8, str8);\n    for(int num : result8) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr9 = {};\n    string str9 = \"\";\n    vector<int> result9 = removeOrder(0, arr9, str9);\n    for(int num : result9) cout << num << \" \";\n    cout << endl;\n\n    vector<int> arr10 = {-100, -50, -200};\n    string str10 = \"010\";\n    vector<int> result10 = removeOrder(3, arr10, str10);\n    for(int num : result10) cout << num << \" \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###timeTravel.cpp", "source_code_str": "    int timeTravel(int n, vector<int> &arr) {\n        int ans = 0;\n        for(int i = 1; i < n; i++)\n            ans += (arr[i] > arr[i - 1] ? 1 : (arr[i] < arr[i - 1] ? 2 : 0));\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###timeTravel_Test.java", "reference_code": "    public static int timeTravel(int n, int[] arr) {\n        int ans = 0;\n        for(int i = 1; i < n; i++)\n            ans += (arr[i] > arr[i - 1] ? 1 : (arr[i] < arr[i - 1] ? 2 : 0));\n        return ans;\n    }", "target_method_signature": "timeTravel", "source_method_signature": "timeTravel", "target_allMS": "    public static int timeTravel(int n, int[] arr) {", "source_allMS": "    int timeTravel(int n, vector<int> &arr) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class timeTravel_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(timeTravel(1, new int[]{5})); // Test input 1\n        System.out.println(timeTravel(5, new int[]{1, 2, 3, 4, 5})); // Test input 2\n        System.out.println(timeTravel(5, new int[]{5, 4, 3, 2, 1})); // Test input 3\n        System.out.println(timeTravel(5, new int[]{1, 3, 2, 4, 2})); // Test input 4\n        System.out.println(timeTravel(3, new int[]{10, 10, 10})); // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: n=1, arr=[5]\noutput1: 0\n--------\ninput2: n=5, arr=[1, 2, 3, 4, 5]\noutput2: 4\n--------\ninput3: n=5, arr=[5, 4, 3, 2, 1]\noutput3: 8\n--------\ninput4: n=5, arr=[1, 3, 2, 4, 2]\noutput4: 6\n--------\ninput5: n=3, arr=[10, 10, 10]\noutput5: 0\n", "input_output_value": ["\ninput1: n=1, arr=[5]\noutput1: 0\n", "\ninput2: n=5, arr=[1, 2, 3, 4, 5]\noutput2: 4\n", "\ninput3: n=5, arr=[5, 4, 3, 2, 1]\noutput3: 8\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> arr1 = {5};\n    cout << timeTravel(1, arr1) << endl;\n\n    vector<int> arr2 = {1, 2, 3, 4, 5};\n    cout << timeTravel(5, arr2) << endl;\n\n    vector<int> arr3 = {5, 4, 3, 2, 1};\n    cout << timeTravel(5, arr3) << endl;\n\n    vector<int> arr4 = {1, 3, 2, 4, 2};\n    cout << timeTravel(5, arr4) << endl;\n\n    vector<int> arr5 = {10, 10, 10};\n    cout << timeTravel(3, arr5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###isMagicArray.cpp", "source_code_str": "    bool isMagicArray(int n, vector<int> &arr) {\n        for (int i=1;i<n;i++){\n            if ((arr[i]%2==0 && arr[i-1]%2==0) || (arr[i]%2!=0 && arr[i-1]%2!=0)) return 0;\n        }\n        return 1;\n    }", "source_code_block": "", "target_Lan": "java###isMagicArray_Test.java", "reference_code": "    public static boolean isMagicArray(int n, int[] arr) {\n        \n        for (int i = 1; i < n; i++) {\n            \n            if ((arr[i] % 2 == 0 && arr[i - 1] % 2 == 0) || (arr[i] % 2 != 0 && arr[i - 1] % 2 != 0)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }", "target_method_signature": "isMagicArray", "source_method_signature": "isMagicArray", "target_allMS": "    public static boolean isMagicArray(int n, int[] arr) {", "source_allMS": "    bool isMagicArray(int n, vector<int> &arr) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isMagicArray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1: alternating odd and even\n        int[] arr1 = {1, 2, 1, 2};\n        System.out.println(isMagicArray(arr1.length, arr1));\n        \n        // Test input 2: consecutive evens\n        int[] arr2 = {2, 4, 6, 1, 3};\n        System.out.println(isMagicArray(arr2.length, arr2));\n        \n        // Test input 3: consecutive odds\n        int[] arr3 = {1, 3, 5, 7};\n        System.out.println(isMagicArray(arr3.length, arr3));\n        \n        // Test input 4: single element\n        int[] arr4 = {2};\n        System.out.println(isMagicArray(arr4.length, arr4));\n        \n        // Test input 5: empty array\n        int[] arr5 = {};\n        System.out.println(isMagicArray(arr5.length, arr5));\n    }\n}", "all_input_output_value": "\ninput1: arr={1, 2, 1, 2}\noutput1: true\n--------\ninput2: arr={2, 4, 6, 1, 3}\noutput2: false\n--------\ninput3: arr={1, 3, 5, 7}\noutput3: false\n--------\ninput4: arr={2}\noutput4: true\n--------\ninput5: arr={}\noutput5: true\n", "input_output_value": ["\ninput1: arr={1, 2, 1, 2}\noutput1: true\n", "\ninput2: arr={2, 4, 6, 1, 3}\noutput2: false\n", "\ninput3: arr={1, 3, 5, 7}\noutput3: false\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> arr1 = {1, 2, 1, 2};\n    vector<int> arr2 = {2, 4, 6, 1, 3};\n    vector<int> arr3 = {1, 3, 5, 7};\n    vector<int> arr4 = {2};\n    vector<int> arr5 = {};\n\n    cout << isMagicArray(arr1.size(), arr1) << endl;\n    cout << isMagicArray(arr2.size(), arr2) << endl;\n    cout << isMagicArray(arr3.size(), arr3) << endl;\n    cout << isMagicArray(arr4.size(), arr4) << endl;\n    cout << isMagicArray(arr5.size(), arr5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###matrixConundrum.cpp", "source_code_str": "    bool matrixConundrum(int n, int m, vector<string> &mat) {\n        string play = \"play\";\n        int fnd = 0;\n        for (int i = 0; i < m; ++i) {\n            bool check = false;\n            for (int j = 0; j < n; ++j) {\n                if (mat[j][i] == play[fnd]) {\n                    check = true;\n                }\n            }\n            if (check) {\n                ++fnd;\n                if (fnd == 4) {\n                    break;\n                }\n            }\n        }\n        if (fnd == 4)\n            return true;\n        return false;\n    }", "source_code_block": "", "target_Lan": "java###matrixConundrum_Test.java", "reference_code": "    public static boolean matrixConundrum(int n, int m, List<String> mat) {\n        String play = \"play\";\n        int fnd = 0;\n        for (int i = 0; i < m; ++i) {\n            boolean check = false;\n            for (int j = 0; j < n; ++j) {\n                if (mat.get(j).charAt(i) == play.charAt(fnd)) {\n                    check = true;\n                }\n            }\n            if (check) {\n                ++fnd;\n                if (fnd == 4) {\n                    break;\n                }\n            }\n        }\n        return fnd == 4;\n    }", "target_method_signature": "matrixConundrum", "source_method_signature": "matrixConundrum", "target_allMS": "    public static boolean matrixConundrum(int n, int m, List<String> mat) {", "source_allMS": "    bool matrixConundrum(int n, int m, vector<string> &mat) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.List;\npublic class matrixConundrum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        List<String> input1 = Arrays.asList(\"paaa\", \"llaa\", \"yyyy\", \"aaaa\");\n        System.out.println(matrixConundrum(4, 4, input1)); // should return true\n\n        List<String> input2 = Arrays.asList(\"abcde\", \"fghij\", \"klmno\");\n        System.out.println(matrixConundrum(3, 5, input2)); // should return false\n\n        List<String> input3 = Arrays.asList(\"pxyz\", \"lqrs\", \"abct\", \"deut\");\n        System.out.println(matrixConundrum(4, 4, input3)); // should return true\n\n        List<String> input4 = Arrays.asList(\"ppp\", \"lll\", \"aaa\", \"yyy\");\n        System.out.println(matrixConundrum(4, 3, input4)); // should return true\n\n        List<String> input5 = Arrays.asList(\"pm\", \"al\");\n        System.out.println(matrixConundrum(2, 2, input5)); // should return false\n    }\n}", "all_input_output_value": "\ninput1: n=4, m=4, mat=[\"paaa\", \"llaa\", \"yyyy\", \"aaaa\"]\noutput1: true\n--------\ninput2: n=3, m=5, mat=[\"abcde\", \"fghij\", \"klmno\"]\noutput2: false\n--------\ninput3: n=4, m=4, mat=[\"pxyz\", \"lqrs\", \"abct\", \"deut\"]\noutput3: false\n--------\ninput4: n=4, m=3, mat=[\"ppp\", \"lll\", \"aaa\", \"yyy\"]\noutput4: false\n--------\ninput5: n=2, m=2, mat=[\"pm\", \"al\"]\noutput5: false\n", "input_output_value": ["\ninput1: n=4, m=4, mat=[\"paaa\", \"llaa\", \"yyyy\", \"aaaa\"]\noutput1: true\n", "\ninput2: n=3, m=5, mat=[\"abcde\", \"fghij\", \"klmno\"]\noutput2: false\n", "\ninput3: n=4, m=4, mat=[\"pxyz\", \"lqrs\", \"abct\", \"deut\"]\noutput3: false\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<string> mat1 = {\"paaa\", \"llaa\", \"yyyy\", \"aaaa\"};\n    cout << matrixConundrum(4, 4, mat1) << endl;\n\n    vector<string> mat2 = {\"abcde\", \"fghij\", \"klmno\"};\n    cout << matrixConundrum(3, 5, mat2) << endl;\n\n    vector<string> mat3 = {\"pxyz\", \"lqrs\", \"abct\", \"deut\"};\n    cout << matrixConundrum(4, 4, mat3) << endl;\n\n    vector<string> mat4 = {\"ppp\", \"lll\", \"aaa\", \"yyy\"};\n    cout << matrixConundrum(4, 3, mat4) << endl;\n\n    vector<string> mat5 = {\"pm\", \"al\"};\n    cout << matrixConundrum(2, 2, mat5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###isFriend.cpp", "source_code_str": "    string isFriend(int n, int x, int y, vector<int> &arr) {\n        for (auto j:arr){\n            if (x+j==y) return \"yes\";\n        }\n        return \"no\";\n    }", "source_code_block": "", "target_Lan": "java###isFriend_Test.java", "reference_code": "    public static String isFriend(int n, int x, int y, int[] arr) {\n        for(int e : arr)\n            if(x + e == y)\n                return \"yes\";\n        return \"no\";\n    }", "target_method_signature": "isFriend", "source_method_signature": "isFriend", "target_allMS": "    public static String isFriend(int n, int x, int y, int[] arr) {", "source_allMS": "    string isFriend(int n, int x, int y, vector<int> &arr) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class isFriend_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(isFriend(3, 5, 8, new int[]{3, 1, 2}));  // Should return \"yes\"\n        System.out.println(isFriend(3, 5, 10, new int[]{1, 1, 2})); // Should return \"no\"\n        System.out.println(isFriend(0, 5, 5, new int[]{}));         // Should return \"no\"\n        System.out.println(isFriend(2, 10, 15, new int[]{5, 10})); // Should return \"yes\"\n        System.out.println(isFriend(4, -2, 0, new int[]{-1, 1, 0, 2})); // Should return \"yes\"\n    }\n}", "all_input_output_value": "\ninput1: n=3, x=5, y=8, arr={3, 1, 2}\noutput1: yes\n--------\ninput2: n=3, x=5, y=10, arr={1, 1, 2}\noutput2: no\n--------\ninput3: n=0, x=5, y=5, arr={}\noutput3: no\n--------\ninput4: n=2, x=10, y=15, arr={5, 10}\noutput4: yes\n--------\ninput5: n=4, x=-2, y=0, arr={-1, 1, 0, 2}\noutput5: yes\n", "input_output_value": ["\ninput1: n=3, x=5, y=8, arr={3, 1, 2}\noutput1: yes\n", "\ninput2: n=3, x=5, y=10, arr={1, 1, 2}\noutput2: no\n", "\ninput3: n=0, x=5, y=5, arr={}\noutput3: no\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<int> arr1 = {3, 1, 2};\n    cout << isFriend(3, 5, 8, arr1) << endl; // Test Input 1\n\n    vector<int> arr2 = {1, 1, 2};\n    cout << isFriend(3, 5, 10, arr2) << endl; // Test Input 2\n\n    vector<int> arr3 = {};\n    cout << isFriend(0, 5, 5, arr3) << endl; // Test Input 3\n\n    vector<int> arr4 = {5, 10};\n    cout << isFriend(2, 10, 15, arr4) << endl; // Test Input 4\n\n    vector<int> arr5 = {-1, 1, 0, 2};\n    cout << isFriend(4, -2, 0, arr5) << endl; // Test Input 5\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###geekTasks.cpp", "source_code_str": "    long long geekTasks(int n, int m, int q, vector<vector<int>> &tasks) {\n        long long int total = 0;\n        long long int a,b, minA, minB;\n        for(long long int i=0; i<q; i++)\n        {\n            a = tasks[i][0];\n            b = tasks[i][1];\n            a += 1;\n            b += 1;\n            if(i==0){\n                minA=a;\n                minB=b;\n            }\n            if(a<minA){\n                minA=a;\n            }\n            if(b<minB){\n                minB=b;\n            }\n        }\n        vector<int> col(n, 0);\n        for(auto i : tasks){\n            long long int x = i[1] + 1;\n            col[i[0]] = max((long long int)col[i[0]], x);\n        }\n        long long int maxi = 0;\n        for(int i = n - 1; i >= 0; i--){\n            maxi = max(maxi, (long long int)col[i]);\n            total += maxi;\n        }\n        long long int cellsWithMaxValue = minA*minB;\n        total -= cellsWithMaxValue;\n        return total;\n    }", "source_code_block": "", "target_Lan": "java###geekTasks_Test.java", "reference_code": "    public static long geekTasks(int n, int m, int q, int[][] tasks) {\n        long total = 0;\n        long minA = Long.MAX_VALUE, minB = Long.MAX_VALUE;\n        \n        for (int i = 0; i < q; i++) {\n            int a = tasks[i][0] + 1;\n            int b = tasks[i][1] + 1;\n            minA = Math.min(minA, a);\n            minB = Math.min(minB, b);\n        }\n        int[] col = new int[n]; \n        \n        for (int[] task : tasks) {\n            int x = task[1] + 1;\n            col[task[0]] = Math.max(col[task[0]], x);\n        }\n        long maxColValue = 0;\n        \n        for (int i = n - 1; i >= 0; i--) {\n            maxColValue = Math.max(maxColValue, col[i]);\n            total += maxColValue;\n        }\n        long cellsWithMaxValue = minA * minB;\n        \n        return total - cellsWithMaxValue;\n    }", "target_method_signature": "geekTasks", "source_method_signature": "geekTasks", "target_allMS": "    public static long geekTasks(int n, int m, int q, int[][] tasks) {", "source_allMS": "    long long geekTasks(int n, int m, int q, vector<vector<int>> &tasks) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class geekTasks_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] tasks1 = {{0, 0}};\n        System.out.println(geekTasks(1, 1, 1, tasks1));\n\n        int[][] tasks2 = {{0, 1}, {1, 0}};\n        System.out.println(geekTasks(2, 2, 2, tasks2));\n\n        int[][] tasks3 = {{0, 1}, {1, 2}, {2, 0}};\n        System.out.println(geekTasks(3, 3, 3, tasks3));\n\n        int[][] tasks4 = {{0, 4}, {1, 3}, {0, 3}, {1, 7}};\n        System.out.println(geekTasks(2, 5, 4, tasks4));\n\n        int[][] tasks5 = {{0, 0}, {0, 1}, {2, 2}, {3, 4}, {0, 3}};\n        System.out.println(geekTasks(5, 5, 5, tasks5));\n    }\n}", "all_input_output_value": "\ninput1: n=1, m=1, q=1, tasks={{0, 0}}\noutput1: 0\n--------\ninput2: n=2, m=2, q=2, tasks={{0, 1}, {1, 0}}\noutput2: 2\n--------\ninput3: n=3, m=3, q=3, tasks={{0, 1}, {1, 2}, {2, 0}}\noutput3: 6\n--------\ninput4: n=2, m=5, q=4, tasks={{0, 4}, {1, 3}, {0, 3}, {1, 7}}\noutput4: 12\n--------\ninput5: n=5, m=5, q=5, tasks={{0, 0}, {0, 1}, {2, 2}, {3, 4}, {0, 3}}\noutput5: 19\n", "input_output_value": ["\ninput1: n=1, m=1, q=1, tasks={{0, 0}}\noutput1: 0\n", "\ninput2: n=2, m=2, q=2, tasks={{0, 1}, {1, 0}}\noutput2: 2\n", "\ninput3: n=3, m=3, q=3, tasks={{0, 1}, {1, 2}, {2, 0}}\noutput3: 6\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    // Test Input 1\n    vector<vector<int>> tasks1 = {{0, 0}};\n    cout << geekTasks(1, 1, 1, tasks1) << endl;\n\n    // Test Input 2\n    vector<vector<int>> tasks2 = {{0, 1}, {1, 0}};\n    cout << geekTasks(2, 2, 2, tasks2) << endl;\n\n    // Test Input 3\n    vector<vector<int>> tasks3 = {{0, 1}, {1, 2}, {2, 0}};\n    cout << geekTasks(3, 3, 3, tasks3) << endl;\n\n    // Test Input 4\n    vector<vector<int>> tasks4 = {{0, 4}, {1, 3}, {0, 3}, {1, 7}};\n    cout << geekTasks(2, 5, 4, tasks4) << endl;\n\n    // Test Input 5\n    vector<vector<int>> tasks5 = {{0, 0}, {0, 1}, {2, 2}, {3, 4}, {0, 3}};\n    cout << geekTasks(5, 5, 5, tasks5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###areaOfMaxDiagonal.cpp", "source_code_str": "    int areaOfMaxDiagonal(vector<vector<int>> &dimensions) {\n        int ans = 0, max_l = 0;\n        for (auto &d: dimensions) {\n            int x = d[0], y = d[1];\n            int l = x * x + y * y;\n            if (l > max_l || (l == max_l && x * y > ans)) {\n                max_l = l;\n                ans = x * y;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###areaOfMaxDiagonal_Test.java", "reference_code": "    public static int areaOfMaxDiagonal(int[][] dimensions) {\n        int ans = 0, maxL = 0;\n        for (int[] d : dimensions) {\n            int x = d[0], y = d[1];\n            int l = x * x + y * y;\n            if (l > maxL || (l == maxL && x * y > ans)) {\n                maxL = l;\n                ans = x * y;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "areaOfMaxDiagonal", "source_method_signature": "areaOfMaxDiagonal", "target_allMS": "    public static int areaOfMaxDiagonal(int[][] dimensions) {", "source_allMS": "    int areaOfMaxDiagonal(vector<vector<int>> &dimensions) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class areaOfMaxDiagonal_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{0, 0}, {1, 1}, {2, 3}, {3, 4}, {5, 5}};\n        int[][] input2 = {{-1, 2}, {2, 3}, {3, -4}, {4, 5}, {5, 5}};\n        int[][] input3 = {{1, 1}, {1, 2}, {2, 1}};\n        int[][] input4 = {{3, 4}, {4, 3}, {5, 5}};\n        int[][] input5 = {{10, 10}, {20, 20}, {10, 25}};\n\n        System.out.println(areaOfMaxDiagonal(input1));\n        System.out.println(areaOfMaxDiagonal(input2));\n        System.out.println(areaOfMaxDiagonal(input3));\n        System.out.println(areaOfMaxDiagonal(input4));\n        System.out.println(areaOfMaxDiagonal(input5));\n    }\n}", "all_input_output_value": "\ninput1: dimensions={{0, 0}, {1, 1}, {2, 3}, {3, 4}, {5, 5}}\noutput1: 25\n--------\ninput2: dimensions={{-1, 2}, {2, 3}, {3, -4}, {4, 5}, {5, 5}}\noutput2: 25\n--------\ninput3: dimensions={{1, 1}, {1, 2}, {2, 1}}\noutput3: 2\n--------\ninput4: dimensions={{3, 4}, {4, 3}, {5, 5}}\noutput4: 25\n--------\ninput5: dimensions={{10, 10}, {20, 20}, {10, 25}}\noutput5: 400\n", "input_output_value": ["\ninput1: dimensions={{0, 0}, {1, 1}, {2, 3}, {3, 4}, {5, 5}}\noutput1: 25\n", "\ninput2: dimensions={{-1, 2}, {2, 3}, {3, -4}, {4, 5}, {5, 5}}\noutput2: 25\n", "\ninput3: dimensions={{1, 1}, {1, 2}, {2, 1}}\noutput3: 2\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> input1 = {{0, 0}, {1, 1}, {2, 3}, {3, 4}, {5, 5}};\n    vector<vector<int>> input2 = {{-1, 2}, {2, 3}, {3, -4}, {4, 5}, {5, 5}};\n    vector<vector<int>> input3 = {{1, 1}, {1, 2}, {2, 1}};\n    vector<vector<int>> input4 = {{3, 4}, {4, 3}, {5, 5}};\n    vector<vector<int>> input5 = {{10, 10}, {20, 20}, {10, 25}};\n\n    cout << areaOfMaxDiagonal(input1) << endl;\n    cout << areaOfMaxDiagonal(input2) << endl;\n    cout << areaOfMaxDiagonal(input3) << endl;\n    cout << areaOfMaxDiagonal(input4) << endl;\n    cout << areaOfMaxDiagonal(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minOrAfterOperations.cpp", "source_code_str": "    int minOrAfterOperations(vector<int> &nums, int k) {\n        int ans = 0, mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0, and_res = -1; \n            for (int x : nums) {\n                and_res &= x & mask;\n                if (and_res) {\n                    cnt++; \n                } else {\n                    and_res = -1; \n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; \n                mask ^= 1 << b; \n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minOrAfterOperations_Test.java", "reference_code": "    public static int minOrAfterOperations(int[] nums, int k) {\n        int ans = 0;\n        int mask = 0;\n        for (int b = 29; b >= 0; b--) {\n            mask |= 1 << b;\n            int cnt = 0; \n            int and = -1; \n            for (int x : nums) {\n                and &= x & mask;\n                if (and != 0) {\n                    cnt++; \n                } else {\n                    and = -1; \n                }\n            }\n            if (cnt > k) {\n                ans |= 1 << b; \n                mask ^= 1 << b; \n            }\n        }\n        return ans;\n    }", "target_method_signature": "minOrAfterOperations", "source_method_signature": "minOrAfterOperations", "target_allMS": "    public static int minOrAfterOperations(int[] nums, int k) {", "source_allMS": "    int minOrAfterOperations(vector<int> &nums, int k) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minOrAfterOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minOrAfterOperations(new int[]{1, 2, 3}, 1));\n        System.out.println(minOrAfterOperations(new int[]{10, 20, 30, 40}, 2));\n        System.out.println(minOrAfterOperations(new int[]{0, 0, 0}, 1));\n        System.out.println(minOrAfterOperations(new int[]{-1, -2, -3, -4}, 3));\n        System.out.println(minOrAfterOperations(new int[]{15, 7, 8, 16}, 4));\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3], k=1\noutput1: 3\n--------\ninput2: nums=[10, 20, 30, 40], k=2\noutput2: 8\n--------\ninput3: nums=[0, 0, 0], k=1\noutput3: 0\n--------\ninput4: nums=[-1, -2, -3, -4], k=3\noutput4: 1073741820\n--------\ninput5: nums=[15, 7, 8, 16], k=4\noutput5: 0\n", "input_output_value": ["\ninput1: nums=[1, 2, 3], k=1\noutput1: 3\n", "\ninput2: nums=[10, 20, 30, 40], k=2\noutput2: 8\n", "\ninput3: nums=[0, 0, 0], k=1\noutput3: 0\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> nums1 = {1, 2, 3};\n    int k1 = 1;\n    cout << minOrAfterOperations(nums1, k1) << endl;\n\n    vector<int> nums2 = {10, 20, 30, 40};\n    int k2 = 2;\n    cout << minOrAfterOperations(nums2, k2) << endl;\n\n    vector<int> nums3 = {0, 0, 0};\n    int k3 = 1;\n    cout << minOrAfterOperations(nums3, k3) << endl;\n\n    vector<int> nums4 = {-1, -2, -3, -4};\n    int k4 = 3;\n    cout << minOrAfterOperations(nums4, k4) << endl;\n\n    vector<int> nums5 = {15, 7, 8, 16};\n    int k5 = 4;\n    cout << minOrAfterOperations(nums5, k5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###longestMonotonicSubarray.cpp", "source_code_str": "    int longestMonotonicSubarray(vector<int> &a) {\n        int ans = 1;\n        int i = 0, n = a.size();\n        while (i < n - 1) {\n            if (a[i + 1] == a[i]) {\n                i++; \n                continue;\n            }\n            int i0 = i; \n            bool inc = a[i + 1] > a[i]; \n            i += 2; \n            while (i < n && a[i] != a[i - 1] && (a[i] > a[i - 1]) == inc) {\n                i++;\n            }\n            \n            ans = max(ans, i - i0);\n            i--;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###longestMonotonicSubarray_Test.java", "reference_code": "    public static int longestMonotonicSubarray(int[] a) {\n        int ans = 1;\n        int i = 0, n = a.length;\n        while (i < n - 1) {\n            if (a[i + 1] == a[i]) {\n                i++; \n                continue;\n            }\n            int i0 = i; \n            boolean inc = a[i + 1] > a[i]; \n            i += 2; \n            while (i < n && a[i] != a[i - 1] && (a[i] > a[i - 1]) == inc) {\n                i++;\n            }\n            \n            ans = Math.max(ans, i - i0);\n            i--;\n        }\n        return ans;\n    }", "target_method_signature": "longestMonotonicSubarray", "source_method_signature": "longestMonotonicSubarray", "target_allMS": "    public static int longestMonotonicSubarray(int[] a) {", "source_allMS": "    int longestMonotonicSubarray(vector<int> &a) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class longestMonotonicSubarray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(longestMonotonicSubarray(new int[]{1, 2, 3, 4, 5}));          // Regular increasing sequence\n        System.out.println(longestMonotonicSubarray(new int[]{5, 4, 3, 2, 1}));          // Regular decreasing sequence\n        System.out.println(longestMonotonicSubarray(new int[]{2, 2, 2, 2, 2}));          // All equal elements\n        System.out.println(longestMonotonicSubarray(new int[]{1, 3, 2, 4, 5, 4, 3}));    // Mixed increasing and decreasing\n        System.out.println(longestMonotonicSubarray(new int[]{}));                        // Edge case: empty array\n    }\n}", "all_input_output_value": "\ninput1: a=[1, 2, 3, 4, 5]\noutput1: 5\n--------\ninput2: a=[5, 4, 3, 2, 1]\noutput2: 5\n--------\ninput3: a=[2, 2, 2, 2, 2]\noutput3: 1\n--------\ninput4: a=[1, 3, 2, 4, 5, 4, 3]\noutput4: 3\n--------\ninput5: a=[]\noutput5: 1\n", "input_output_value": ["\ninput1: a=[1, 2, 3, 4, 5]\noutput1: 5\n", "\ninput2: a=[5, 4, 3, 2, 1]\noutput2: 5\n", "\ninput3: a=[2, 2, 2, 2, 2]\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 2, 3, 4, 5};\n    vector<int> input2 = {5, 4, 3, 2, 1};\n    vector<int> input3 = {2, 2, 2, 2, 2};\n    vector<int> input4 = {1, 3, 2, 4, 5, 4, 3};\n    vector<int> input5 = {};\n\n    cout << longestMonotonicSubarray(input1) << endl;\n    cout << longestMonotonicSubarray(input2) << endl;\n    cout << longestMonotonicSubarray(input3) << endl;\n    cout << longestMonotonicSubarray(input4) << endl;\n    cout << longestMonotonicSubarray(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###sumDigitDifferences.cpp", "source_code_str": "    long long sumDigitDifferences(vector<int>& nums) {\n        long long ans = 0;\n        vector<array<int, 10>> cnt(to_string(nums[0]).length());\n        for (int k = 0; k < nums.size(); k++) {\n            int x = nums[k];\n            for (int i = 0; x; x /= 10, i++) {\n                int d = x % 10;\n                ans += k - cnt[i][d]++;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###sumDigitDifferences_Test.java", "reference_code": "    public static long sumDigitDifferences(int[] nums) {\n        long ans = 0;\n        int[][] cnt = new int[Integer.toString(nums[0]).length()][10];\n        for (int k = 0; k < nums.length; k++) {\n            int x = nums[k];\n            for (int i = 0; x > 0; x /= 10, i++) {\n                int d = x % 10;\n                ans += k - cnt[i][d]++;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "sumDigitDifferences", "source_method_signature": "sumDigitDifferences", "target_allMS": "    public static long sumDigitDifferences(int[] nums) {", "source_allMS": "    long long sumDigitDifferences(vector<int>& nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class sumDigitDifferences_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(sumDigitDifferences(new int[]{1}));                // Single element case\n        System.out.println(sumDigitDifferences(new int[]{12, 34}));          // Two different numbers with unique digits\n        System.out.println(sumDigitDifferences(new int[]{11, 11}));          // Identical numbers to see if differences are counted correctly\n        System.out.println(sumDigitDifferences(new int[]{123, 456, 789}));   // Multiple numbers for complexity\n        System.out.println(sumDigitDifferences(new int[]{100, 200, 300}));    // Leading zeros represented as integers\n    }\n}", "all_input_output_value": "\ninput1: nums=[1]\noutput1: 0\n--------\ninput2: nums=[12, 34]\noutput2: 2\n--------\ninput3: nums=[11, 11]\noutput3: 0\n--------\ninput4: nums=[123, 456, 789]\noutput4: 9\n--------\ninput5: nums=[100, 200, 300]\noutput5: 3\n", "input_output_value": ["\ninput1: nums=[1]\noutput1: 0\n", "\ninput2: nums=[12, 34]\noutput2: 2\n", "\ninput3: nums=[11, 11]\noutput3: 0\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <array>\n// TOFILL\nint main() {\n    vector<int> input1 = {1};\n    vector<int> input2 = {12, 34};\n    vector<int> input3 = {11, 11};\n    vector<int> input4 = {123, 456, 789};\n    vector<int> input5 = {100, 200, 300};\n\n    cout << sumDigitDifferences(input1) << endl;\n    cout << sumDigitDifferences(input2) << endl;\n    cout << sumDigitDifferences(input3) << endl;\n    cout << sumDigitDifferences(input4) << endl;\n    cout << sumDigitDifferences(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumLength.cpp", "source_code_str": "    int maximumLength(vector<int>& nums, int k) {\n        int ans = 0;\n        vector<vector<int>> f(k, vector<int>(k));\n        for (int x : nums) {\n            x %= k;\n            for (int y = 0; y < k; y++) {\n                f[y][x] = f[x][y] + 1;\n                ans = max(ans, f[y][x]);\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maximumLength_Test.java", "reference_code": "    public static int maximumLength(int[] nums, int k) {\n        int ans = 0;\n        int[][] f = new int[k][k];\n        for (int x : nums) {\n            x %= k;\n            for (int y = 0; y < k; y++) {\n                f[y][x] = f[x][y] + 1;\n                ans = Math.max(ans, f[y][x]);\n            }\n        }\n        return ans;\n    }", "target_method_signature": "maximumLength", "source_method_signature": "maximumLength", "target_allMS": "    public static int maximumLength(int[] nums, int k) {", "source_allMS": "    int maximumLength(vector<int>& nums, int k) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumLength_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumLength(new int[]{}, 3)); // Test input 1\n        System.out.println(maximumLength(new int[]{1, 1, 1}, 2)); // Test input 2\n        System.out.println(maximumLength(new int[]{3, 6, 9, 12}, 3)); // Test input 4\n        System.out.println(maximumLength(new int[]{7, 8, 16, 23}, 1)); // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: nums=[], k=3\noutput1: 0\n--------\ninput2: nums=[1, 1, 1], k=2\noutput2: 3\n--------\ninput3: nums=[3, 6, 9, 12], k=3\noutput3: 4\n--------\ninput4: nums=[7, 8, 16, 23], k=1\noutput4: 4\n", "input_output_value": ["\ninput1: nums=[], k=3\noutput1: 0\n", "\ninput2: nums=[1, 1, 1], k=2\noutput2: 3\n", "\ninput3: nums=[3, 6, 9, 12], k=3\noutput3: 4\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    vector<int> input2 = {1, 1, 1};\n    vector<int> input3 = {3, 6, 9, 12};\n    vector<int> input4 = {7, 8, 16, 23};\n    \n    cout << maximumLength(input1, 3) << endl;\n    cout << maximumLength(input2, 2) << endl;\n    cout << maximumLength(input3, 3) << endl;\n    cout << maximumLength(input4, 1) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###triangleType.cpp", "source_code_str": "    string triangleType(vector<int> &nums) {\n        sort(nums.begin(), nums.end());\n        int x = nums[0], y = nums[1], z = nums[2];\n        if (x + y <= z) { \n            return \"none\";\n        }\n        if (x == z) { \n            return \"equilateral\";\n        }\n        if (x == y || y == z) {\n            return \"isosceles\";\n        }\n        return \"scalene\";\n    }", "source_code_block": "", "target_Lan": "java###triangleType_Test.java", "reference_code": "    public static String triangleType(int[] nums) {\n        Arrays.sort(nums);\n        int x = nums[0];\n        int y = nums[1];\n        int z = nums[2];\n        if (x + y <= z) { \n            return \"none\";\n        }\n        if (x == z) { \n            return \"equilateral\";\n        }\n        if (x == y || y == z) {\n            return \"isosceles\";\n        }\n        return \"scalene\";\n    }", "target_method_signature": "triangleType", "source_method_signature": "triangleType", "target_allMS": "    public static String triangleType(int[] nums) {", "source_allMS": "    string triangleType(vector<int> &nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class triangleType_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(triangleType(new int[]{1, 2, 3})); // Output: none\n        System.out.println(triangleType(new int[]{3, 3, 3})); // Output: equilateral\n        System.out.println(triangleType(new int[]{3, 3, 5})); // Output: isosceles\n        System.out.println(triangleType(new int[]{3, 4, 5})); // Output: scalene\n        System.out.println(triangleType(new int[]{0, 0, 0})); // Output: equilateral\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3]\noutput1: none\n--------\ninput2: nums=[3, 3, 3]\noutput2: equilateral\n--------\ninput3: nums=[3, 3, 5]\noutput3: isosceles\n--------\ninput4: nums=[3, 4, 5]\noutput4: scalene\n--------\ninput5: nums=[0, 0, 0]\noutput5: none\n", "input_output_value": ["\ninput1: nums=[1, 2, 3]\noutput1: none\n", "\ninput2: nums=[3, 3, 3]\noutput2: equilateral\n", "\ninput3: nums=[3, 3, 5]\noutput3: isosceles\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 2, 3};\n    vector<int> input2 = {3, 3, 3};\n    vector<int> input3 = {3, 3, 5};\n    vector<int> input4 = {3, 4, 5};\n    vector<int> input5 = {0, 0, 0};\n\n    cout << triangleType(input1) << endl;\n    cout << triangleType(input2) << endl;\n    cout << triangleType(input3) << endl;\n    cout << triangleType(input4) << endl;\n    cout << triangleType(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###countAlternatingSubarrays.cpp", "source_code_str": "    long long countAlternatingSubarrays(vector<int>& nums) {\n        long long res = 0, cur = 0;\n        int pre = -1;\n        for (int a : nums) {\n            cur = (pre != a) ? cur + 1 : 1;\n            pre = a;\n            res += cur;\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###countAlternatingSubarrays_Test.java", "reference_code": "    public static long countAlternatingSubarrays(int[] nums) {\n        long res = 0, cur = 0;\n        int pre = -1;\n        for (int a : nums) {\n            cur = (pre != a) ? cur + 1 : 1;\n            pre = a;\n            res += cur;\n        }\n        return res;\n    }", "target_method_signature": "countAlternatingSubarrays", "source_method_signature": "countAlternatingSubarrays", "target_allMS": "    public static long countAlternatingSubarrays(int[] nums) {", "source_allMS": "    long long countAlternatingSubarrays(vector<int>& nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countAlternatingSubarrays_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countAlternatingSubarrays(new int[]{})); // Test case with an empty array\n        System.out.println(countAlternatingSubarrays(new int[]{1, 1, 1, 1})); // Test case with a constant array\n        System.out.println(countAlternatingSubarrays(new int[]{1, 0, 1, 0, 1})); // Test case with alternate integers\n        System.out.println(countAlternatingSubarrays(new int[]{1, 2, 1, 2, 1, 2})); // Test case with a large alternating sequence\n        System.out.println(countAlternatingSubarrays(new int[]{-1, 1, -1, 1, -1})); // Test case with negative and positive integers\n    }\n}", "all_input_output_value": "\ninput1: nums=[]\noutput1: 0\n--------\ninput2: nums=[1, 1, 1, 1]\noutput2: 4\n--------\ninput3: nums=[1, 0, 1, 0, 1]\noutput3: 15\n--------\ninput4: nums=[1, 2, 1, 2, 1, 2]\noutput4: 21\n--------\ninput5: nums=[-1, 1, -1, 1, -1]\noutput5: 15\n", "input_output_value": ["\ninput1: nums=[]\noutput1: 0\n", "\ninput2: nums=[1, 1, 1, 1]\noutput2: 4\n", "\ninput3: nums=[1, 0, 1, 0, 1]\noutput3: 15\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    vector<int> input2 = {1, 1, 1, 1};\n    vector<int> input3 = {1, 0, 1, 0, 1};\n    vector<int> input4 = {1, 2, 1, 2, 1, 2};\n    vector<int> input5 = {-1, 1, -1, 1, -1};\n\n    cout << countAlternatingSubarrays(input1) << endl; // Test input 1\n    cout << countAlternatingSubarrays(input2) << endl; // Test input 2\n    cout << countAlternatingSubarrays(input3) << endl; // Test input 3\n    cout << countAlternatingSubarrays(input4) << endl; // Test input 4\n    cout << countAlternatingSubarrays(input5) << endl; // Test input 5\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###modifiedMatrix.cpp", "source_code_str": "    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        int m = matrix[0].size();\n        for (int j = 0; j < m; j++) {\n            int zd = -1;\n            for (int i = 0; i < n; i++) {\n                zd = max(zd, matrix[i][j]);\n            }\n            for (int i = 0; i < n; i++) {\n                if (matrix[i][j] == -1) {\n                    matrix[i][j] = zd;\n                }\n            }\n        }\n        return matrix;\n    }", "source_code_block": "", "target_Lan": "java###modifiedMatrix_Test.java", "reference_code": "    public static int[][] modifiedMatrix(int[][] matrix) {\n        int n = matrix.length; \n        int m = matrix[0].length; \n        for (int j = 0; j < m; j++) {\n            int zd = -1; \n            for (int i = 0; i < n; i++) {\n                zd = Math.max(zd, matrix[i][j]); \n            }\n            for (int i = 0; i < n; i++) {\n                if (matrix[i][j] == -1) {\n                    matrix[i][j] = zd; \n                }\n            }\n        }\n        return matrix; \n    }", "target_method_signature": "modifiedMatrix", "source_method_signature": "modifiedMatrix", "target_allMS": "    public static int[][] modifiedMatrix(int[][] matrix) {", "source_allMS": "    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class modifiedMatrix_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[][] input1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int[][] input2 = {{1, -1, 3}, {4, 5, -1}, {7, 8, 9}};\n        int[][] input3 = {{-1, -1, -1}, {-1, -1, -1}, {-1, -1, -1}};\n        int[][] input4 = {{-5, -3, -1}, {-2, -4, -6}};\n        int[][] input5 = {{1, -1, 3}, {-4, 5, -1}, {7, -1, 9}};\n\n        System.out.println(\"Modified input 1: \" + Arrays.deepToString(modifiedMatrix(input1)));\n        System.out.println(\"Modified input 2: \" + Arrays.deepToString(modifiedMatrix(input2)));\n        System.out.println(\"Modified input 3: \" + Arrays.deepToString(modifiedMatrix(input3)));\n        System.out.println(\"Modified input 4: \" + Arrays.deepToString(modifiedMatrix(input4)));\n        System.out.println(\"Modified input 5: \" + Arrays.deepToString(modifiedMatrix(input5)));\n    }\n}", "all_input_output_value": "\ninput1: matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\noutput1: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n--------\ninput2: matrix=[[1, -1, 3], [4, 5, -1], [7, 8, 9]]\noutput2: [[1, 8, 3], [4, 5, 9], [7, 8, 9]]\n--------\ninput3: matrix=[[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]\noutput3: [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]\n--------\ninput4: matrix=[[-5, -3, -1], [-2, -4, -6]]\noutput4: [[-5, -3, -1], [-2, -4, -6]]\n--------\ninput5: matrix=[[1, -1, 3], [-4, 5, -1], [7, -1, 9]]\noutput5: [[1, 5, 3], [-4, 5, 9], [7, 5, 9]]\n", "input_output_value": ["\ninput1: matrix=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\noutput1: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n", "\ninput2: matrix=[[1, -1, 3], [4, 5, -1], [7, 8, 9]]\noutput2: [[1, 8, 3], [4, 5, 9], [7, 8, 9]]\n", "\ninput3: matrix=[[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]\noutput3: [[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> matrix1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    vector<vector<int>> result1 = modifiedMatrix(matrix1);\n    for(const auto& row : result1) {\n        for(int val : row) {\n            cout << val << \" \";\n        }\n        cout << endl;\n    }\n\n    vector<vector<int>> matrix2 = {{1, -1, 3}, {4, 5, -1}, {7, 8, 9}};\n    vector<vector<int>> result2 = modifiedMatrix(matrix2);\n    for(const auto& row : result2) {\n        for(int val : row) {\n            cout << val << \" \";\n        }\n        cout << endl;\n    }\n\n    vector<vector<int>> matrix3 = {{-1, -1, -1}, {-1, -1, -1}, {-1, -1, -1}};\n    vector<vector<int>> result3 = modifiedMatrix(matrix3);\n    for(const auto& row : result3) {\n        for(int val : row) {\n            cout << val << \" \";\n        }\n        cout << endl;\n    }\n\n    vector<vector<int>> matrix4 = {{-5, -3, -1}, {-2, -4, -6}};\n    vector<vector<int>> result4 = modifiedMatrix(matrix4);\n    for(const auto& row : result4) {\n        for(int val : row) {\n            cout << val << \" \";\n        }\n        cout << endl;\n    }\n\n    vector<vector<int>> matrix5 = {{1, -1, 3}, {-4, 5, -1}, {7, -1, 9}};\n    vector<vector<int>> result5 = modifiedMatrix(matrix5);\n    for(const auto& row : result5) {\n        for(int val : row) {\n            cout << val << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###findChampion.cpp", "source_code_str": "    int findChampion(int n, vector<vector<int>>& edges) {\n        vector<int> degree(n);\n        for (auto e : edges) {\n            degree[e[1]]++;\n        }\n        int champion = -1;\n        for (int i = 0; i < n; i++) {\n            if (degree[i] == 0) {\n                if (champion == -1) {\n                    champion = i;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        return champion;\n    }", "source_code_block": "", "target_Lan": "java###findChampion_Test.java", "reference_code": "    public static int findChampion(int n, int[][] edges) {\n        int[] degree = new int[n];\n        for (int[] e : edges) {\n            degree[e[1]]++;\n        }\n        int champion = -1;\n        for (int i = 0; i < n; i++) {\n            if (degree[i] == 0) {\n                if (champion == -1) {\n                    champion = i;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        return champion;\n    }", "target_method_signature": "findChampion", "source_method_signature": "findChampion", "target_allMS": "    public static int findChampion(int n, int[][] edges) {", "source_allMS": "    int findChampion(int n, vector<vector<int>>& edges) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findChampion_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findChampion(5, new int[][]{{0, 1}, {0, 2}, {1, 3}, {2, 4}}));  // One champion(node 0)\n        System.out.println(findChampion(5, new int[][]{{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 0}}));  // No champion(cycle)\n        System.out.println(findChampion(3, new int[][]{{1, 0}, {2, 0}}));  // Multiple champions(nodes 1 and 2)\n        System.out.println(findChampion(4, new int[][]{{0, 1}, {2, 3}, {1, 2}}));  // One champion(node 3)\n        System.out.println(findChampion(0, new int[][]{}));  // No nodes, edge case\n    }\n}", "all_input_output_value": "\ninput1: n=5, edges={{0, 1}, {0, 2}, {1, 3}, {2, 4}}\noutput1: 0\n--------\ninput2: n=5, edges={{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 0}}\noutput2: -1\n--------\ninput3: n=3, edges={{1, 0}, {2, 0}}\noutput3: -1\n--------\ninput4: n=4, edges={{0, 1}, {2, 3}, {1, 2}}\noutput4: 0\n--------\ninput5: n=0, edges={}\noutput5: -1\n", "input_output_value": ["\ninput1: n=5, edges={{0, 1}, {0, 2}, {1, 3}, {2, 4}}\noutput1: 0\n", "\ninput2: n=5, edges={{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 0}}\noutput2: -1\n", "\ninput3: n=3, edges={{1, 0}, {2, 0}}\noutput3: -1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> edges1 = {{0, 1}, {0, 2}, {1, 3}, {2, 4}};\n    cout << findChampion(5, edges1) << endl;\n\n    vector<vector<int>> edges2 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 0}};\n    cout << findChampion(5, edges2) << endl;\n\n    vector<vector<int>> edges3 = {{1, 0}, {2, 0}};\n    cout << findChampion(3, edges3) << endl;\n\n    vector<vector<int>> edges4 = {{0, 1}, {2, 3}, {1, 2}};\n    cout << findChampion(4, edges4) << endl;\n\n    vector<vector<int>> edges5 = {};\n    cout << findChampion(0, edges5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###firstDayBeenInAllRooms.cpp", "source_code_str": "    int firstDayBeenInAllRooms(vector<int>& nextVisit) {\n        int mod = 1e9 + 7;\n        int len = nextVisit.size();\n        vector<int> dp(len);\n        dp[0] = 2; \n        for (int i = 1; i < len; i++) {\n            int to = nextVisit[i];\n            dp[i] = 2 + dp[i - 1];\n            if (to != 0) {\n                dp[i] = (dp[i] - dp[to - 1] + mod) % mod; \n            }\n            dp[i] = (dp[i] + dp[i - 1]) % mod;\n        }\n        return dp[len - 2]; \n    }", "source_code_block": "", "target_Lan": "java###firstDayBeenInAllRooms_Test.java", "reference_code": "    public static int firstDayBeenInAllRooms(int[] nextVisit) {\n        int mod = 1000000007;\n        int len = nextVisit.length;\n        int[] dp = new int[len];\n        dp[0] = 2; \n        for (int i = 1; i < len; i++) {\n            int to = nextVisit[i];\n            dp[i] = 2 + dp[i - 1];\n            if (to != 0) {\n                dp[i] = (dp[i] - dp[to - 1] + mod) % mod; \n            }\n            dp[i] = (dp[i] + dp[i - 1]) % mod;\n        }\n        return dp[len - 2]; \n    }", "target_method_signature": "firstDayBeenInAllRooms", "source_method_signature": "firstDayBeenInAllRooms", "target_allMS": "    public static int firstDayBeenInAllRooms(int[] nextVisit) {", "source_allMS": "    int firstDayBeenInAllRooms(vector<int>& nextVisit) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class firstDayBeenInAllRooms_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(firstDayBeenInAllRooms(new int[]{0, 0})); // Test input 2\n        System.out.println(firstDayBeenInAllRooms(new int[]{0, 1, 2})); // Test input 3\n        System.out.println(firstDayBeenInAllRooms(new int[]{1, 2, 0})); // Test input 4\n        System.out.println(firstDayBeenInAllRooms(new int[]{1, 2, 0, 1, 2})); // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: nextVisit=[0, 0]\noutput1: 2\n--------\ninput2: nextVisit=[0, 1, 2]\noutput2: 4\n--------\ninput3: nextVisit=[1, 2, 0]\noutput3: 2\n--------\ninput4: nextVisit=[1, 2, 0, 1, 2]\noutput4: 12\n", "input_output_value": ["\ninput1: nextVisit=[0, 0]\noutput1: 2\n", "\ninput2: nextVisit=[0, 1, 2]\noutput2: 4\n", "\ninput3: nextVisit=[1, 2, 0]\noutput3: 2\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {0, 0};\n    vector<int> input2 = {0, 1, 2};\n    vector<int> input3 = {1, 2, 0};\n    vector<int> input4 = {1, 2, 0, 1, 2};\n    \n    cout << firstDayBeenInAllRooms(input1) << endl;\n    cout << firstDayBeenInAllRooms(input2) << endl;\n    cout << firstDayBeenInAllRooms(input3) << endl;\n    cout << firstDayBeenInAllRooms(input4) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxArrayValue.cpp", "source_code_str": "    long long maxArrayValue(vector<int>& nums) {\n        long long sum = nums.back();\n        for (int i = nums.size() - 2; i >= 0; i--) {\n            sum = nums[i] <= sum ? nums[i] + sum : nums[i];\n        }\n        return sum;\n    }", "source_code_block": "", "target_Lan": "java###maxArrayValue_Test.java", "reference_code": "    public static long maxArrayValue(int[] nums) {\n        long sum = nums[nums.length - 1];\n        for (int i = nums.length - 2; i >= 0; i--) {\n            sum = nums[i] <= sum ? nums[i] + sum : nums[i];\n        }\n        return sum;\n    }", "target_method_signature": "maxArrayValue", "source_method_signature": "maxArrayValue", "target_allMS": "    public static long maxArrayValue(int[] nums) {", "source_allMS": "    long long maxArrayValue(vector<int>& nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxArrayValue_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxArrayValue(new int[]{5}));           // Single element case\n        System.out.println(maxArrayValue(new int[]{1, 2, 3}));     // All increasing values\n        System.out.println(maxArrayValue(new int[]{3, 2, 1}));     // All decreasing values\n        System.out.println(maxArrayValue(new int[]{-1, -2, -3}));  // All negative values\n        System.out.println(maxArrayValue(new int[]{10, -5, 20}));  // Mixed values with a positive and a negative\n    }\n}", "all_input_output_value": "\ninput1: nums=[5]\noutput1: 5\n--------\ninput2: nums=[1, 2, 3]\noutput2: 6\n--------\ninput3: nums=[3, 2, 1]\noutput3: 3\n--------\ninput4: nums=[-1, -2, -3]\noutput4: -1\n--------\ninput5: nums=[10, -5, 20]\noutput5: 25\n", "input_output_value": ["\ninput1: nums=[5]\noutput1: 5\n", "\ninput2: nums=[1, 2, 3]\noutput2: 6\n", "\ninput3: nums=[3, 2, 1]\noutput3: 3\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {5};\n    vector<int> input2 = {1, 2, 3};\n    vector<int> input3 = {3, 2, 1};\n    vector<int> input4 = {-1, -2, -3};\n    vector<int> input5 = {10, -5, 20};\n\n    cout << maxArrayValue(input1) << endl;\n    cout << maxArrayValue(input2) << endl;\n    cout << maxArrayValue(input3) << endl;\n    cout << maxArrayValue(input4) << endl;\n    cout << maxArrayValue(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minIncrements.cpp", "source_code_str": "    int minIncrements(int n, vector<int>& cost) {\n        int ans = 0;\n        for (int i = n - 2; i > 0; i -= 2) {\n            ans += abs(cost[i] - cost[i + 1]);\n            \n            cost[i / 2] += max(cost[i], cost[i + 1]);\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minIncrements_Test.java", "reference_code": "    public static int minIncrements(int n, int[] cost) {\n        int ans = 0;\n        for (int i = n - 2; i > 0; i -= 2) {\n            ans += Math.abs(cost[i] - cost[i + 1]);\n            \n            cost[i / 2] += Math.max(cost[i], cost[i + 1]);\n        }\n        return ans;\n    }", "target_method_signature": "minIncrements", "source_method_signature": "minIncrements", "target_allMS": "    public static int minIncrements(int n, int[] cost) {", "source_allMS": "    int minIncrements(int n, vector<int>& cost) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minIncrements_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minIncrements(2, new int[]{1, 2}));\n        System.out.println(minIncrements(3, new int[]{5, 10, 20}));\n        System.out.println(minIncrements(4, new int[]{-5, -10, -15, -20}));\n        System.out.println(minIncrements(4, new int[]{100000, 200000, 300000, 400000}));\n        System.out.println(minIncrements(3, new int[]{7, 7, 7}));\n    }\n}", "all_input_output_value": "\ninput1: n=2, cost=[1, 2]\noutput1: 0\n--------\ninput2: n=3, cost=[5, 10, 20]\noutput2: 10\n--------\ninput3: n=4, cost=[-5, -10, -15, -20]\noutput3: 5\n--------\ninput4: n=4, cost=[100000, 200000, 300000, 400000]\noutput4: 100000\n--------\ninput5: n=3, cost=[7, 7, 7]\noutput5: 0\n", "input_output_value": ["\ninput1: n=2, cost=[1, 2]\noutput1: 0\n", "\ninput2: n=3, cost=[5, 10, 20]\noutput2: 10\n", "\ninput3: n=4, cost=[-5, -10, -15, -20]\noutput3: 5\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <cstdlib> // for abs()\n// TOFILL\nint main() {\n    vector<int> cost1 = {1, 2};\n    cout << minIncrements(2, cost1) << endl;\n\n    vector<int> cost2 = {5, 10, 20};\n    cout << minIncrements(3, cost2) << endl;\n\n    vector<int> cost3 = {-5, -10, -15, -20};\n    cout << minIncrements(4, cost3) << endl;\n\n    vector<int> cost4 = {100000, 200000, 300000, 400000};\n    cout << minIncrements(4, cost4) << endl;\n\n    vector<int> cost5 = {7, 7, 7};\n    cout << minIncrements(3, cost5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxNumberOfAlloys.cpp", "source_code_str": "    int maxNumberOfAlloys(int n, int k, int budget, vector<vector<int>>& composition, vector<int>& stock, vector<int>& cost) {\n        int left = 1, right = 2e8, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            bool valid = false;\n            for (int i = 0; i < k; ++i) {\n                long long spend = 0;\n                for (int j = 0; j < n; ++j) {\n                    spend += max(static_cast<long long>(composition[i][j]) * mid - stock[j], 0LL) * cost[j];\n                }\n                if (spend <= budget) {\n                    valid = true;\n                    break;\n                }\n            }\n            if (valid) {\n                ans = mid;\n                left = mid + 1;\n            }\n            else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maxNumberOfAlloys_Test.java", "reference_code": "    public static int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {\n        int left = 1, right = 200000000, ans = 0;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            boolean valid = false;\n            for (int i = 0; i < k; ++i) {\n                long spend = 0;\n                for (int j = 0; j < n; ++j) {\n                    spend += Math.max((long) composition.get(i).get(j) * mid - stock.get(j), 0) * cost.get(j);\n                }\n                if (spend <= budget) {\n                    valid = true;\n                    break;\n                }\n            }\n            if (valid) {\n                ans = mid;\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "maxNumberOfAlloys", "source_method_signature": "maxNumberOfAlloys", "target_allMS": "    public static int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {", "source_allMS": "    int maxNumberOfAlloys(int n, int k, int budget, vector<vector<int>>& composition, vector<int>& stock, vector<int>& cost) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\npublic class maxNumberOfAlloys_Test {\n// TOFILL\n    public static void main(String[] args) {\n        List<List<Integer>> composition1 = new ArrayList<>();\n        composition1.add(Arrays.asList(1, 2));\n        List<Integer> stock1 = Arrays.asList(1, 1);\n        List<Integer> cost1 = Arrays.asList(500, 200);\n        System.out.println(maxNumberOfAlloys(2, 1, 1000, composition1, stock1, cost1));\n\n        List<List<Integer>> composition2 = new ArrayList<>();\n        composition2.add(Arrays.asList(1, 1, 1));\n        composition2.add(Arrays.asList(2, 2, 2));\n        List<Integer> stock2 = Arrays.asList(1, 1, 1);\n        List<Integer> cost2 = Arrays.asList(200, 300, 400);\n        System.out.println(maxNumberOfAlloys(3, 2, 3000, composition2, stock2, cost2));\n\n        List<List<Integer>> composition3 = new ArrayList<>();\n        composition3.add(Arrays.asList(3, 5));\n        List<Integer> stock3 = Arrays.asList(10, 5);\n        List<Integer> cost3 = Arrays.asList(100, 200);\n        System.out.println(maxNumberOfAlloys(2, 1, 0, composition3, stock3, cost3));\n\n        List<List<Integer>> composition4 = new ArrayList<>();\n        composition4.add(Arrays.asList(1));\n        List<Integer> stock4 = Arrays.asList(0);\n        List<Integer> cost4 = Arrays.asList(1000);\n        System.out.println(maxNumberOfAlloys(1, 1, 10000, composition4, stock4, cost4));\n\n        List<List<Integer>> composition5 = new ArrayList<>();\n        composition5.add(Arrays.asList(1, 2, 1));\n        composition5.add(Arrays.asList(2, 1, 3));\n        List<Integer> stock5 = Arrays.asList(10, 5, 3);\n        List<Integer> cost5 = Arrays.asList(100, 200, 300);\n        System.out.println(maxNumberOfAlloys(3, 2, 5000, composition5, stock5, cost5));\n    }\n}", "all_input_output_value": "\ninput1: n=2, k=1, budget=1000, composition=[[1, 2]], stock=[1, 1], cost=[500, 200]\noutput1: 1\n--------\ninput2: n=3, k=2, budget=3000, composition=[[1, 1, 1], [2, 2, 2]], stock=[1, 1, 1], cost=[200, 300, 400]\noutput2: 4\n--------\ninput3: n=2, k=1, budget=0, composition=[[3, 5]], stock=[10, 5], cost=[100, 200]\noutput3: 1\n--------\ninput4: n=1, k=1, budget=10000, composition=[[1]], stock=[0], cost=[1000]\noutput4: 10\n--------\ninput5: n=3, k=2, budget=5000, composition=[[1, 2, 1], [2, 1, 3]], stock=[10, 5, 3], cost=[100, 200, 300]\noutput5: 9\n", "input_output_value": ["\ninput1: n=2, k=1, budget=1000, composition=[[1, 2]], stock=[1, 1], cost=[500, 200]\noutput1: 1\n", "\ninput2: n=3, k=2, budget=3000, composition=[[1, 1, 1], [2, 2, 2]], stock=[1, 1, 1], cost=[200, 300, 400]\noutput2: 4\n", "\ninput3: n=2, k=1, budget=0, composition=[[3, 5]], stock=[10, 5], cost=[100, 200]\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> composition1 = {{1, 2}};\n    vector<int> stock1 = {1, 1};\n    vector<int> cost1 = {500, 200};\n    cout << maxNumberOfAlloys(2, 1, 1000, composition1, stock1, cost1) << endl;\n\n    vector<vector<int>> composition2 = {{1, 1, 1}, {2, 2, 2}};\n    vector<int> stock2 = {1, 1, 1};\n    vector<int> cost2 = {200, 300, 400};\n    cout << maxNumberOfAlloys(3, 2, 3000, composition2, stock2, cost2) << endl;\n\n    vector<vector<int>> composition3 = {{3, 5}};\n    vector<int> stock3 = {10, 5};\n    vector<int> cost3 = {100, 200};\n    cout << maxNumberOfAlloys(2, 1, 0, composition3, stock3, cost3) << endl;\n\n    vector<vector<int>> composition4 = {{1}};\n    vector<int> stock4 = {0};\n    vector<int> cost4 = {1000};\n    cout << maxNumberOfAlloys(1, 1, 10000, composition4, stock4, cost4) << endl;\n\n    vector<vector<int>> composition5 = {{1, 2, 1}, {2, 1, 3}};\n    vector<int> stock5 = {10, 5, 3};\n    vector<int> cost5 = {100, 200, 300};\n    cout << maxNumberOfAlloys(3, 2, 5000, composition5, stock5, cost5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###findEnemies.cpp", "source_code_str": "    vector<vector<int>> findEnemies(int n, int m, int k, vector<int> &col, vector<int> &count) {\n        vector<vector<int>> answer(n, vector<int>(m, -1));\n        int curr = 0;\n        int ind = 0;\n        while(curr < k && ind < n){\n            int total = count[ind];\n            while(total--){\n                answer[ind][col[curr]] = curr;\n                curr += 1;\n            }\n            ind += 1;\n        }\n        return answer;\n    }", "source_code_block": "", "target_Lan": "java###findEnemies_Test.java", "reference_code": "    public static ArrayList<ArrayList<Integer>> findEnemies(int n, int m, int k, int[] col, int[] count) {\n        ArrayList<ArrayList<Integer>> answer = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            ArrayList<Integer> row = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                row.add(-1);\n            }\n            answer.add(row);\n        }\n        int curr = 0;\n        int ind = 0;\n        while (curr < k && ind < n) {\n            int total = count[ind];\n            while (total-- > 0) {\n                answer.get(ind).set(col[curr], curr);\n                curr += 1;\n            }\n            ind += 1;\n        }\n        return answer;\n    }", "target_method_signature": "findEnemies", "source_method_signature": "findEnemies", "target_allMS": "    public static ArrayList<ArrayList<Integer>> findEnemies(int n, int m, int k, int[] col, int[] count) {", "source_allMS": "    vector<vector<int>> findEnemies(int n, int m, int k, vector<int> &col, vector<int> &count) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\npublic class findEnemies_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int n1 = 3, m1 = 4, k1 = 5;\n        int[] col1 = {0, 2, 1, 3, 2};\n        int[] count1 = {2, 2, 1};\n        System.out.println(findEnemies(n1, m1, k1, col1, count1));\n\n        int n2 = 2, m2 = 2, k2 = 3;\n        int[] col2 = {0, 0, 1};\n        int[] count2 = {2, 1};\n        System.out.println(findEnemies(n2, m2, k2, col2, count2));\n\n        int n3 = 2, m3 = 3, k3 = 4;\n        int[] col3 = {0, 1, 2, 1};\n        int[] count3 = {2, 2};\n        System.out.println(findEnemies(n3, m3, k3, col3, count3));\n\n        int n4 = 1, m4 = 1, k4 = 0;\n        int[] col4 = {};\n        int[] count4 = {};\n        System.out.println(findEnemies(n4, m4, k4, col4, count4));\n\n        int n5 = 3, m5 = 3, k5 = 6;\n        int[] col5 = {0, 1, 2, 1, 0, 2};\n        int[] count5 = {2, 2, 2};\n        System.out.println(findEnemies(n5, m5, k5, col5, count5));\n    }\n}", "all_input_output_value": "\ninput1: n=3, m=4, k=5, col=[0, 2, 1, 3, 2], count=[2, 2, 1]\noutput1: [[0, -1, 1, -1], [-1, 2, -1, 3], [-1, -1, 4, -1]]\n--------\ninput2: n=2, m=2, k=3, col=[0, 0, 1], count=[2, 1]\noutput2: [[1, -1], [-1, 2]]\n--------\ninput3: n=2, m=3, k=4, col=[0, 1, 2, 1], count=[2, 2]\noutput3: [[0, 1, -1], [-1, 3, 2]]\n--------\ninput4: n=1, m=1, k=0, col=[], count=[]\noutput4: [[-1]]\n--------\ninput5: n=3, m=3, k=6, col=[0, 1, 2, 1, 0, 2], count=[2, 2, 2]\noutput5: [[0, 1, -1], [-1, 3, 2], [4, -1, 5]]\n", "input_output_value": ["\ninput1: n=3, m=4, k=5, col=[0, 2, 1, 3, 2], count=[2, 2, 1]\noutput1: [[0, -1, 1, -1], [-1, 2, -1, 3], [-1, -1, 4, -1]]\n", "\ninput2: n=2, m=2, k=3, col=[0, 0, 1], count=[2, 1]\noutput2: [[1, -1], [-1, 2]]\n", "\ninput3: n=2, m=3, k=4, col=[0, 1, 2, 1], count=[2, 2]\noutput3: [[0, 1, -1], [-1, 3, 2]]\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> col1 = {0, 2, 1, 3, 2};\n    vector<int> count1 = {2, 2, 1};\n    auto result1 = findEnemies(3, 4, 5, col1, count1);\n    \n    for(const auto& row : result1) {\n        for(int num : row) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n\n    vector<int> col2 = {0, 0, 1};\n    vector<int> count2 = {2, 1};\n    auto result2 = findEnemies(2, 2, 3, col2, count2);\n    \n    for(const auto& row : result2) {\n        for(int num : row) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n\n    vector<int> col3 = {0, 1, 2, 1};\n    vector<int> count3 = {2, 2};\n    auto result3 = findEnemies(2, 3, 4, col3, count3);\n    \n    for(const auto& row : result3) {\n        for(int num : row) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n\n    // Test input with zero enemies\n    vector<int> col4 = {};\n    vector<int> count4 = {};\n    auto result4 = findEnemies(1, 1, 0, col4, count4);\n    \n    for(const auto& row : result4) {\n        for(int num : row) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n\n    vector<int> col5 = {0, 1, 2, 1, 0, 2};\n    vector<int> count5 = {2, 2, 2};\n    auto result5 = findEnemies(3, 3, 6, col5, count5);\n    \n    for(const auto& row : result5) {\n        for(int num : row) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxPoints.cpp", "source_code_str": "    long long maxPoints(int n, vector<vector<int>> &arr) {\n        long long dp[200001] = {};\n        for (int i = n - 1; i >= 0; --i){\n            dp[i] = max(arr[i][0] + dp[arr[i][1] + i + 1], dp[i + 1]);\n}\n        return dp[0];\n    }", "source_code_block": "", "target_Lan": "java###maxPoints_Test.java", "reference_code": "    public static long maxPoints(int n, int[][] arr) {\n        long[] dp = new long[200001];\n        for (int i = n - 1; i >= 0; --i){\n            dp[i] = Math.max(arr[i][0] + dp[arr[i][1] + i + 1], dp[i + 1]);\n}\n        return dp[0];\n    }", "target_method_signature": "maxPoints", "source_method_signature": "maxPoints", "target_allMS": "    public static long maxPoints(int n, int[][] arr) {", "source_allMS": "    long long maxPoints(int n, vector<vector<int>> &arr) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maxPoints_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxPoints(3, new int[][]{{10, 1}, {20, 2}, {30, 1}}));\n        System.out.println(maxPoints(4, new int[][]{{1, 1}, {2, 2}, {3, 1}, {5, 3}}));\n        System.out.println(maxPoints(5, new int[][]{{100000, 4}, {200000, 3}, {300000, 2}, {400000, 1}, {500000, 0}}));\n        System.out.println(maxPoints(2, new int[][]{{10, 0}, {15, 1}}));\n        System.out.println(maxPoints(3, new int[][]{{1, 0}, {-1, 1}, {2, 0}}));\n    }\n}", "all_input_output_value": "\ninput1: n=3, arr={{10, 1}, {20, 2}, {30, 1}}\noutput1: 40\n--------\ninput2: n=4, arr={{1, 1}, {2, 2}, {3, 1}, {5, 3}}\noutput2: 6\n--------\ninput3: n=5, arr={{100000, 4}, {200000, 3}, {300000, 2}, {400000, 1}, {500000, 0}}\noutput3: 500000\n--------\ninput4: n=2, arr={{10, 0}, {15, 1}}\noutput4: 25\n--------\ninput5: n=3, arr={{1, 0}, {-1, 1}, {2, 0}}\noutput5: 3\n", "input_output_value": ["\ninput1: n=3, arr={{10, 1}, {20, 2}, {30, 1}}\noutput1: 40\n", "\ninput2: n=4, arr={{1, 1}, {2, 2}, {3, 1}, {5, 3}}\noutput2: 6\n", "\ninput3: n=5, arr={{100000, 4}, {200000, 3}, {300000, 2}, {400000, 1}, {500000, 0}}\noutput3: 500000\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<vector<int>> arr1 = {{10, 1}, {20, 2}, {30, 1}};\n    cout << maxPoints(3, arr1) << endl;\n\n    vector<vector<int>> arr2 = {{1, 1}, {2, 2}, {3, 1}, {5, 3}};\n    cout << maxPoints(4, arr2) << endl;\n\n    vector<vector<int>> arr3 = {{100000, 4}, {200000, 3}, {300000, 2}, {400000, 1}, {500000, 0}};\n    cout << maxPoints(5, arr3) << endl;\n\n    vector<vector<int>> arr4 = {{10, 0}, {15, 1}};\n    cout << maxPoints(2, arr4) << endl;\n\n    vector<vector<int>> arr5 = {{1, 0}, {-1, 1}, {2, 0}};\n    cout << maxPoints(3, arr5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumStrongIndices.cpp", "source_code_str": "    int maximumStrongIndices(int n, int x, int y, vector<int> &a, vector<int> &b) {\n        int j = 0, ans = 0;\n        for (int i = 0; i < n; i++) {\n            while (j < n && b[j] < a[i] - x)\n                j++;\n            if (j < n && b[j] <= a[i] + y) {\n                ans++;\n                j++;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maximumStrongIndices_Test.java", "reference_code": "    public static int maximumStrongIndices(int n, int x, int y, int[] a, int[] b) {\n        int j = 0, ans = 0;\n        for (int i = 0; i < n; i++) {\n            while (j < n && b[j] < a[i] - x) {\n                j++;\n            }\n            if (j < n && b[j] <= a[i] + y) {\n                ans++;\n                j++;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "maximumStrongIndices", "source_method_signature": "maximumStrongIndices", "target_allMS": "    public static int maximumStrongIndices(int n, int x, int y, int[] a, int[] b) {", "source_allMS": "    int maximumStrongIndices(int n, int x, int y, vector<int> &a, vector<int> &b) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumStrongIndices_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1\n        int n1 = 5, x1 = 2, y1 = 3;\n        int[] a1 = {1, 5, 8, 10, 15};\n        int[] b1 = {0, 3, 5, 10, 13};\n        System.out.println(maximumStrongIndices(n1, x1, y1, a1, b1));\n\n        // Test input 2\n        int n2 = 5, x2 = 10, y2 = 5;\n        int[] a2 = {1, 5, 15, 20, 25};\n        int[] b2 = {0, 1, 2, 3, 4};\n        System.out.println(maximumStrongIndices(n2, x2, y2, a2, b2));\n\n        // Test input 3\n        int n3 = 4, x3 = 1, y3 = 4;\n        int[] a3 = {2, 4, 6, 8};\n        int[] b3 = {1, 3, 5, 7};\n        System.out.println(maximumStrongIndices(n3, x3, y3, a3, b3));\n\n        // Test input 4\n        int n4 = 3, x4 = 3, y4 = 3;\n        int[] a4 = {10, 15, 20};\n        int[] b4 = {7, 10, 23};\n        System.out.println(maximumStrongIndices(n4, x4, y4, a4, b4));\n\n        // Test input 5\n        int n5 = 3, x5 = 0, y5 = 0;\n        int[] a5 = {1, 2, 3};\n        int[] b5 = {1, 2, 3};\n        System.out.println(maximumStrongIndices(n5, x5, y5, a5, b5));\n    }\n}", "all_input_output_value": "\ninput1: n=5, x=2, y=3, a={1, 5, 8, 10, 15}, b={0, 3, 5, 10, 13}\noutput1: 4\n--------\ninput2: n=5, x=10, y=5, a={1, 5, 15, 20, 25}, b={0, 1, 2, 3, 4}\noutput2: 2\n--------\ninput3: n=4, x=1, y=4, a={2, 4, 6, 8}, b={1, 3, 5, 7}\noutput3: 4\n--------\ninput4: n=3, x=3, y=3, a={10, 15, 20}, b={7, 10, 23}\noutput4: 2\n--------\ninput5: n=3, x=0, y=0, a={1, 2, 3}, b={1, 2, 3}\noutput5: 3\n", "input_output_value": ["\ninput1: n=5, x=2, y=3, a={1, 5, 8, 10, 15}, b={0, 3, 5, 10, 13}\noutput1: 4\n", "\ninput2: n=5, x=10, y=5, a={1, 5, 15, 20, 25}, b={0, 1, 2, 3, 4}\noutput2: 2\n", "\ninput3: n=4, x=1, y=4, a={2, 4, 6, 8}, b={1, 3, 5, 7}\noutput3: 4\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> a1 = {1, 5, 8, 10, 15}, b1 = {0, 3, 5, 10, 13};\n    vector<int> a2 = {1, 5, 15, 20, 25}, b2 = {0, 1, 2, 3, 4};\n    vector<int> a3 = {2, 4, 6, 8}, b3 = {1, 3, 5, 7};\n    vector<int> a4 = {10, 15, 20}, b4 = {7, 10, 23};\n    vector<int> a5 = {1, 2, 3}, b5 = {1, 2, 3};\n\n    cout << maximumStrongIndices(5, 2, 3, a1, b1) << endl;\n    cout << maximumStrongIndices(5, 10, 5, a2, b2) << endl;\n    cout << maximumStrongIndices(4, 1, 4, a3, b3) << endl;\n    cout << maximumStrongIndices(3, 3, 3, a4, b4) << endl;\n    cout << maximumStrongIndices(3, 0, 0, a5, b5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumPushes.cpp", "source_code_str": "    int minimumPushes(string &word) {\n        int n = word.length();\n        int k = n / 8;\n        return (k * 4 + n % 8) * (k + 1);\n    }", "source_code_block": "", "target_Lan": "java###minimumPushes_Test.java", "reference_code": "    public static int minimumPushes(String word) {\n        int n = word.length();\n        int k = n / 8;\n        return (k * 4 + n % 8) * (k + 1);\n    }", "target_method_signature": "minimumPushes", "source_method_signature": "minimumPushes", "target_allMS": "    public static int minimumPushes(String word) {", "source_allMS": "    int minimumPushes(string &word) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class minimumPushes_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumPushes(\"\"));                // Edge case: empty string\n        System.out.println(minimumPushes(\"a\"));               // Single character\n        System.out.println(minimumPushes(\"abcdefg\"));         // One less than a full set of 8(7 characters)\n        System.out.println(minimumPushes(\"abcdefgh\"));        // Exactly one full set of 8 characters\n        System.out.println(minimumPushes(\"abcdefghabcdefgh\")); // Two full sets of 8 characters(16 characters)\n    }\n}", "all_input_output_value": "\ninput1: word=\"\"\noutput1: 0\n--------\ninput2: word=\"a\"\noutput2: 1\n--------\ninput3: word=\"abcdefg\"\noutput3: 7\n--------\ninput4: word=\"abcdefgh\"\noutput4: 8\n--------\ninput5: word=\"abcdefghabcdefgh\"\noutput5: 24\n", "input_output_value": ["\ninput1: word=\"\"\noutput1: 0\n", "\ninput2: word=\"a\"\noutput2: 1\n", "\ninput3: word=\"abcdefg\"\noutput3: 7\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    string input1 = \"\";\n    string input2 = \"a\";\n    string input3 = \"abcdefg\";\n    string input4 = \"abcdefgh\";\n    string input5 = \"abcdefghabcdefgh\";\n\n    cout << minimumPushes(input1) << endl;\n    cout << minimumPushes(input2) << endl;\n    cout << minimumPushes(input3) << endl;\n    cout << minimumPushes(input4) << endl;\n    cout << minimumPushes(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###countTestedDevices.cpp", "source_code_str": "    int countTestedDevices(vector<int>& batteryPercentages) {\n        int n = batteryPercentages.size();\n        int need = 0;\n        for (int i = 0; i < n; i++) {\n            if (batteryPercentages[i] > 0) {\n                need++;\n                for (int j = i + 1; j < n; j++) {\n                    batteryPercentages[j] = max(batteryPercentages[j] - 1, 0);\n                }\n            }\n        }\n        return need;\n    }", "source_code_block": "", "target_Lan": "java###countTestedDevices_Test.java", "reference_code": "    public static int countTestedDevices(int[] batteryPercentages) {\n        int n = batteryPercentages.length;\n        int need = 0;\n        for (int i = 0; i < n; i++) {\n            if (batteryPercentages[i] > 0) {\n                need++;\n                for (int j = i + 1; j < n; j++) {\n                    batteryPercentages[j] = Math.max(batteryPercentages[j] - 1, 0);\n                }\n            }\n        }\n        return need;\n    }", "target_method_signature": "countTestedDevices", "source_method_signature": "countTestedDevices", "target_allMS": "    public static int countTestedDevices(int[] batteryPercentages) {", "source_allMS": "    int countTestedDevices(vector<int>& batteryPercentages) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class countTestedDevices_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countTestedDevices(new int[] {}));\n        System.out.println(countTestedDevices(new int[] {0, 0, 0}));\n        System.out.println(countTestedDevices(new int[] {10, 20, 0, 5}));\n        System.out.println(countTestedDevices(new int[] {7, 3, 0, 2, 6}));\n        System.out.println(countTestedDevices(new int[] {5, 10, 15}));\n    }\n}", "all_input_output_value": "\ninput1: batteryPercentages=[]\noutput1: 0\n--------\ninput2: batteryPercentages=[0, 0, 0]\noutput2: 0\n--------\ninput3: batteryPercentages=[10, 20, 0, 5]\noutput3: 3\n--------\ninput4: batteryPercentages=[7, 3, 0, 2, 6]\noutput4: 3\n--------\ninput5: batteryPercentages=[5, 10, 15]\noutput5: 3\n", "input_output_value": ["\ninput1: batteryPercentages=[]\noutput1: 0\n", "\ninput2: batteryPercentages=[0, 0, 0]\noutput2: 0\n", "\ninput3: batteryPercentages=[10, 20, 0, 5]\noutput3: 3\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    vector<int> input2 = {0, 0, 0};\n    vector<int> input3 = {10, 20, 0, 5};\n    vector<int> input4 = {7, 3, 0, 2, 6};\n    vector<int> input5 = {5, 10, 15};\n\n    cout << countTestedDevices(input1) << endl;\n    cout << countTestedDevices(input2) << endl;\n    cout << countTestedDevices(input3) << endl;\n    cout << countTestedDevices(input4) << endl;\n    cout << countTestedDevices(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###frequency.cpp", "source_code_str": "    vector<int> frequency(int n, vector<int> &a){\n        vector<int>ans(n);\n        unordered_map<int,int>mp;\n        for(int i=n-1;i>-1;i--)\n        {\n            mp[a[i]]++;\n            ans[i]=mp[a[i]];\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###frequency_Test.java", "reference_code": "    public static int[] frequency(int n,int a[]) {\n        HashMap<Integer,Integer> hm=new HashMap<>();\n        int ans[]=new int[n];\n        for(int i:a){\n            hm.put(i,hm.getOrDefault(i,0)+1);\n        }\n        for(int i=0;i<n;i++){\n            ans[i]=hm.get(a[i]);\n            hm.put(a[i],hm.get(a[i])-1);\n        }\n        return ans;\n    }", "target_method_signature": "frequency", "source_method_signature": "frequency", "target_allMS": "    public static int[] frequency(int n,int a[]) {", "source_allMS": "    vector<int> frequency(int n, vector<int> &a){", "source_import": "#include <iostream>\n#include <vector>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\npublic class frequency_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Input 1: n=0, a=[]\n        int[] result1 = frequency(0, new int[]{});\n        System.out.println(java.util.Arrays.toString(result1)); // Expect []\n\n        // Test Input 2: n=1, a=[5]\n        int[] result2 = frequency(1, new int[]{5});\n        System.out.println(java.util.Arrays.toString(result2)); // Expect [1]\n\n        // Test Input 3: n=5, a=[1, 2, 3, 1, 2]\n        int[] result3 = frequency(5, new int[]{1, 2, 3, 1, 2});\n        System.out.println(java.util.Arrays.toString(result3)); // Expect [2, 2, 1, 2, 2]\n\n        // Test Input 4: n=6, a=[7, 7, 7, 8, 9, 9]\n        int[] result4 = frequency(6, new int[]{7, 7, 7, 8, 9, 9});\n        System.out.println(java.util.Arrays.toString(result4)); // Expect [3, 3, 3, 1, 2, 2]\n\n        // Test Input 5: n=4, a=[10, 10, 10, 10]\n        int[] result5 = frequency(4, new int[]{10, 10, 10, 10});\n        System.out.println(java.util.Arrays.toString(result5)); // Expect [4, 4, 4, 4]\n    }\n}", "all_input_output_value": "\ninput1: n=0, a=[]\noutput1: []\n--------\ninput2: n=1, a=[5]\noutput2: [1]\n--------\ninput3: n=5, a=[1, 2, 3, 1, 2]\noutput3: [2, 2, 1, 1, 1]\n--------\ninput4: n=6, a=[7, 7, 7, 8, 9, 9]\noutput4: [3, 2, 1, 1, 2, 1]\n--------\ninput5: n=4, a=[10, 10, 10, 10]\noutput5: [4, 3, 2, 1]\n", "input_output_value": ["\ninput1: n=0, a=[]\noutput1: []\n", "\ninput2: n=1, a=[5]\noutput2: [1]\n", "\ninput3: n=5, a=[1, 2, 3, 1, 2]\noutput3: [2, 2, 1, 1, 1]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<int> a1 = {};\n    vector<int> result1 = frequency(0, a1);\n    for(int freq : result1) cout << freq << \" \";\n    cout << endl;\n\n    vector<int> a2 = {5};\n    vector<int> result2 = frequency(1, a2);\n    for(int freq : result2) cout << freq << \" \";\n    cout << endl;\n\n    vector<int> a3 = {1, 2, 3, 1, 2};\n    vector<int> result3 = frequency(5, a3);\n    for(int freq : result3) cout << freq << \" \";\n    cout << endl;\n\n    vector<int> a4 = {7, 7, 7, 8, 9, 9};\n    vector<int> result4 = frequency(6, a4);\n    for(int freq : result4) cout << freq << \" \";\n    cout << endl;\n\n    vector<int> a5 = {10, 10, 10, 10};\n    vector<int> result5 = frequency(4, a5);\n    for(int freq : result5) cout << freq << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###collectingCoins.cpp", "source_code_str": "    int collectingCoins(int N, std::vector<std::vector<int>>& Coins)\n    {\n        \n        \n        unordered_map<int, int> hor,ver,diaa,diab;\n        int m = 0;\n        \n        for (auto& el : Coins)\n        {\n            \n            int a = el[0];\n            int b = el[1];\n            \n            \n            hor[a]++;\n            ver[b]++;\n            diaa[a + b]++;\n            diab[a - b]++;\n            \n            m = max(m, hor[a]);\n            m = max(m, ver[b]);\n            m = max(m, diaa[a + b]);\n            m = max(m, diab[a - b]);\n        }\n        \n        return m;\n    }", "source_code_block": "", "target_Lan": "java###collectingCoins_Test.java", "reference_code": "    public static int collectingCoins(int N, int[][] Coins) {\n        Map<Integer, Integer> hor = new HashMap<>(); \n        Map<Integer, Integer> ver = new HashMap<>(); \n        Map<Integer, Integer> diaa = new HashMap<>(); \n        Map<Integer, Integer> diab = new HashMap<>(); \n        int m = 0; \n            \n            for (int[] el : Coins) {\n                int a = el[0], b = el[1];\n                hor.put(a, hor.getOrDefault(a, 0) + 1); \n                ver.put(b, ver.getOrDefault(b, 0) + 1); \n                diaa.put(a + b, diaa.getOrDefault(a + b, 0) + 1); \n                diab.put(a - b, diab.getOrDefault(a - b, 0) + 1); \n                \n                m = Math.max(m, hor.get(a));\n                m = Math.max(m, ver.get(b));\n                m = Math.max(m, diaa.get(a + b));\n                m = Math.max(m, diab.get(a - b));\n            }\n            return m; \n    }", "target_method_signature": "collectingCoins", "source_method_signature": "collectingCoins", "target_allMS": "    public static int collectingCoins(int N, int[][] Coins) {", "source_allMS": "    int collectingCoins(int N, std::vector<std::vector<int>>& Coins)", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class collectingCoins_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(collectingCoins(0, new int[0][0]));\n        System.out.println(collectingCoins(5, new int[][]{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}}));\n        System.out.println(collectingCoins(5, new int[][]{{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}));\n        System.out.println(collectingCoins(3, new int[][]{{1, 1}, {2, 2}, {3, 3}}));\n        System.out.println(collectingCoins(4, new int[][]{{1, -1}, {2, 1}, {-1, 2}, {-2, -2}}));\n    }\n}", "all_input_output_value": "\ninput1: N=0, Coins=new int[0][0]\noutput1: 0\n--------\ninput2: N=5, Coins=new int[][]{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}}\noutput2: 5\n--------\ninput3: N=5, Coins=new int[][]{{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}\noutput3: 5\n--------\ninput4: N=3, Coins=new int[][]{{1, 1}, {2, 2}, {3, 3}}\noutput4: 3\n--------\ninput5: N=4, Coins=new int[][]{{1, -1}, {2, 1}, {-1, 2}, {-2, -2}}\noutput5: 1\n", "input_output_value": ["\ninput1: N=0, Coins=new int[0][0]\noutput1: 0\n", "\ninput2: N=5, Coins=new int[][]{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}}\noutput2: 5\n", "\ninput3: N=5, Coins=new int[][]{{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}\noutput3: 5\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<vector<int>> coins1; // 0 coins\n    cout << collectingCoins(0, coins1) << endl;\n\n    vector<vector<int>> coins2 = {{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}}; // all coins on the same row\n    cout << collectingCoins(5, coins2) << endl;\n\n    vector<vector<int>> coins3 = {{1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}}; // all coins on the same column\n    cout << collectingCoins(5, coins3) << endl;\n\n    vector<vector<int>> coins4 = {{1, 1}, {2, 2}, {3, 3}}; // diagonal coins\n    cout << collectingCoins(3, coins4) << endl;\n\n    vector<vector<int>> coins5 = {{1, -1}, {2, 1}, {-1, 2}, {-2, -2}}; // mixed coordinates\n    cout << collectingCoins(4, coins5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###trafficLights.cpp", "source_code_str": "    string trafficLights(int n, int q, vector<vector<int>>& queries) {\n        \n        vector<int> darr(n + 1, 0);\n        for (vector<int>& Q : queries) {\n            int a = Q[0];\n            int b = Q[1];\n            darr[a - 1]++;\n            darr[b]--;\n        }\n        partial_sum(darr.begin(), darr.end(), darr.begin());\n        string result = \"\";\n        for (int i = 0; i < n; i++) {\n            int X = darr[i] % 3;\n            if (X == 0)\n                result += \"R\";\n            else if (X == 1)\n                result += \"Y\";\n            else if (X == 2)\n                result += \"G\";\n        }\n        return result;\n    }", "source_code_block": "", "target_Lan": "java###trafficLights_Test.java", "reference_code": "    public static String trafficLights(int n, int q, int[][] queries) {\n        int[] darr = new int[n + 1];\n        for (int[] Q : queries) {\n            int a = Q[0];\n            int b = Q[1];\n            darr[a - 1]++;\n            darr[b]--;\n        }\n        Arrays.parallelPrefix(darr, (A, B) -> A + B);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int X = darr[i] % 3;\n            if (X == 0)\n                sb.append(\"R\");\n            else if (X == 1)\n                sb.append(\"Y\");\n            else if (X == 2)\n                sb.append(\"G\");\n        }\n        return sb.toString();\n    }", "target_method_signature": "trafficLights", "source_method_signature": "trafficLights", "target_allMS": "    public static String trafficLights(int n, int q, int[][] queries) {", "source_allMS": "    string trafficLights(int n, int q, vector<vector<int>>& queries) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class trafficLights_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(trafficLights(1, 1, new int[][]{{1, 1}}));        // Single light, toggled on.\n        System.out.println(trafficLights(3, 1, new int[][]{{1, 3}}));        // Three lights, all turned on once.\n        System.out.println(trafficLights(5, 2, new int[][]{{1, 3}, {2, 5}})); // Five lights, two operations affecting overlaps.\n        System.out.println(trafficLights(4, 0, new int[][]{}));               // Four lights, no operations - test initial states.\n        System.out.println(trafficLights(6, 3, new int[][]{{1, 2}, {2, 4}, {1, 1}})); // Six lights with multiple overlapping operations.\n    }\n}", "all_input_output_value": "\ninput1: n=1, q=1, queries=[[1, 1]]\noutput1: Y\n--------\ninput2: n=3, q=1, queries=[[1, 3]]\noutput2: YYY\n--------\ninput3: n=5, q=2, queries=[[1, 3], [2, 5]]\noutput3: YGGYY\n--------\ninput4: n=4, q=0, queries=[]\noutput4: RRRR\n--------\ninput5: n=6, q=3, queries=[[1, 2], [2, 4], [1, 1]]\noutput5: GGYYRR\n", "input_output_value": ["\ninput1: n=1, q=1, queries=[[1, 1]]\noutput1: Y\n", "\ninput2: n=3, q=1, queries=[[1, 3]]\noutput2: YYY\n", "\ninput3: n=5, q=2, queries=[[1, 3], [2, 5]]\noutput3: YGGYY\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n// TOFILL\nint main() {\n    // Test input 1\n    vector<vector<int>> queries1 = {{1, 1}};\n    cout << trafficLights(1, 1, queries1) << endl;\n\n    // Test input 2\n    vector<vector<int>> queries2 = {{1, 3}};\n    cout << trafficLights(3, 1, queries2) << endl;\n\n    // Test input 3\n    vector<vector<int>> queries3 = {{1, 3}, {2, 5}};\n    cout << trafficLights(5, 2, queries3) << endl;\n\n    // Test input 4\n    vector<vector<int>> queries4 = {};\n    cout << trafficLights(4, 0, queries4) << endl;\n\n    // Test input 5\n    vector<vector<int>> queries5 = {{1, 2}, {2, 4}, {1, 1}};\n    cout << trafficLights(6, 3, queries5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###BeautifulBits.cpp", "source_code_str": "    vector<int> BeautifulBits(int n, vector<int> &arr, int q,\n                              vector<vector<int> > &queries) {\n        vector<vector<long long> > pref(n + 1, vector<long long>(32, 0));\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 32; j++) {\n                pref[i][j] = pref[i - 1][j] + ((arr[i - 1] >> j) & 1);\n            }\n        }\n        vector<int> ans(q, 0);\n        for (int i = 0; i < q; i++) {\n            for (int j = 0; j < 32; j++) {\n                if (pref[queries[i][1]][j] - pref[queries[i][0] - 1][j] != 0) {\n                    ans[i] += 1 << j;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###BeautifulBits_Test.java", "reference_code": "    public static ArrayList<Integer> BeautifulBits(int n, int[] arr, int q,\n                                                   int[][] queries) {\n        long[][] pref = new long[n + 1][32];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 32; j++) {\n                pref[i][j] = pref[i - 1][j] + ((arr[i - 1] >> j) & 1);\n            }\n        }\n        ArrayList<Integer> ans = new ArrayList<>(Collections.nCopies(q, 0));\n        for (int i = 0; i < q; i++) {\n            for (int j = 0; j < 32; j++) {\n                if (pref[queries[i][1]][j] - pref[queries[i][0] - 1][j] != 0) {\n                    ans.set(i, ans.get(i) + (1 << j));\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "BeautifulBits", "source_method_signature": "BeautifulBits", "target_allMS": "    public static ArrayList<Integer> BeautifulBits(int n, int[] arr, int q,", "source_allMS": "    vector<int> BeautifulBits(int n, vector<int> &arr, int q,", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\npublic class BeautifulBits_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test case 1\n        int n1 = 1;\n        int[] arr1 = {1};\n        int q1 = 1;\n        int[][] queries1 = {{1, 1}};\n        System.out.println(BeautifulBits(n1, arr1, q1, queries1));\n\n        // Test case 2\n        int n2 = 5;\n        int[] arr2 = {1, 2, 3, 4, 5};\n        int q2 = 2;\n        int[][] queries2 = {{1, 5}, {2, 4}};\n        System.out.println(BeautifulBits(n2, arr2, q2, queries2));\n\n        // Test case 3\n        int n3 = 0;\n        int[] arr3 = {};\n        int q3 = 0;\n        int[][] queries3 = {};\n        System.out.println(BeautifulBits(n3, arr3, q3, queries3));\n\n        // Test case 4\n        int n4 = 5;\n        int[] arr4 = {0, 0, 0, 0, 0};\n        int q4 = 1;\n        int[][] queries4 = {{1, 5}};\n        System.out.println(BeautifulBits(n4, arr4, q4, queries4));\n\n        // Test case 5\n        int n5 = 5;\n        int[] arr5 = {1, 2, 4, 8, 16};\n        int q5 = 1;\n        int[][] queries5 = {{1, 5}};\n        System.out.println(BeautifulBits(n5, arr5, q5, queries5));\n    }\n}", "all_input_output_value": "\ninput1: n=1, arr={1}, q=1, queries={{1, 1}}\noutput1: [1]\n--------\ninput2: n=5, arr={1, 2, 3, 4, 5}, q=2, queries={{1, 5}, {2, 4}}\noutput2: [7, 7]\n--------\ninput3: n=0, arr={}, q=0, queries={}\noutput3: []\n--------\ninput4: n=5, arr={0, 0, 0, 0, 0}, q=1, queries={{1, 5}}\noutput4: [0]\n--------\ninput5: n=5, arr={1, 2, 4, 8, 16}, q=1, queries={{1, 5}}\noutput5: [31]\n", "input_output_value": ["\ninput1: n=1, arr={1}, q=1, queries={{1, 1}}\noutput1: [1]\n", "\ninput2: n=5, arr={1, 2, 3, 4, 5}, q=2, queries={{1, 5}, {2, 4}}\noutput2: [7, 7]\n", "\ninput3: n=0, arr={}, q=0, queries={}\noutput3: []\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    // Test Input 1\n    int n1 = 1;\n    vector<int> arr1 = {1};\n    int q1 = 1;\n    vector<vector<int>> queries1 = {{1, 1}};\n    vector<int> result1 = BeautifulBits(n1, arr1, q1, queries1);\n    for(int res : result1) cout << res << \" \";\n    cout << endl;\n\n    // Test Input 2\n    int n2 = 5;\n    vector<int> arr2 = {1, 2, 3, 4, 5};\n    int q2 = 2;\n    vector<vector<int>> queries2 = {{1, 5}, {2, 4}};\n    vector<int> result2 = BeautifulBits(n2, arr2, q2, queries2);\n    for(int res : result2) cout << res << \" \";\n    cout << endl;\n\n    // Test Input 3\n    int n3 = 0;\n    vector<int> arr3 = {};\n    int q3 = 0;\n    vector<vector<int>> queries3 = {};\n    vector<int> result3 = BeautifulBits(n3, arr3, q3, queries3);\n    for(int res : result3) cout << res << \" \";\n    cout << endl;\n\n    // Test Input 4\n    int n4 = 5;\n    vector<int> arr4 = {0, 0, 0, 0, 0};\n    int q4 = 1;\n    vector<vector<int>> queries4 = {{1, 5}};\n    vector<int> result4 = BeautifulBits(n4, arr4, q4, queries4);\n    for(int res : result4) cout << res << \" \";\n    cout << endl;\n\n    // Test Input 5\n    int n5 = 5;\n    vector<int> arr5 = {1, 2, 4, 8, 16};\n    int q5 = 1;\n    vector<vector<int>> queries5 = {{1, 5}};\n    vector<int> result5 = BeautifulBits(n5, arr5, q5, queries5);\n    for(int res : result5) cout << res << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###MaximumEnergy.cpp", "source_code_str": "    int MaximumEnergy(int N, vector<int> &E, int K, vector<int> &P) {\n        \n        sort(P.begin(),P.end());\n        long long mod = 1e9+7;\n        vector<int> ps(N+1);\n        long long ans = 0;\n        long long s = 0;\n        for(int i=0;i<N;i++){\n            s+=E[i];\n            s%=mod;\n            ps[i+1] = s;\n        }\n        for(int i=0;i<K/2;i++){\n            long long a = ps[P[i]];\n            long long b = ps[P[K-i-1]+1];\n            ans+=(b-a+mod);\n            ans%=mod;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###MaximumEnergy_Test.java", "reference_code": "    public static int MaximumEnergy(int N, int[] E, int K, int[] P) \n    {\n        Arrays.sort(P);\n        long mod = 1000000007;\n        long[] ps = new long[N + 1];\n        long ans = 0;\n        long s = 0;\n        for (int i = 0; i < N; i++) \n        {\n            s += E[i];\n            s %= mod;\n            ps[i + 1] =  s;\n        }\n        for (int i = 0; i < K / 2; i++) {\n            long a = ps[P[i]];\n            long b = ps[P[K - i - 1] + 1];\n            ans += (b - a + mod) % mod;\n            ans %= mod;\n        }\n        return (int) ans;\n    }", "target_method_signature": "MaximumEnergy", "source_method_signature": "MaximumEnergy", "target_allMS": "    public static int MaximumEnergy(int N, int[] E, int K, int[] P) ", "source_allMS": "    int MaximumEnergy(int N, vector<int> &E, int K, vector<int> &P) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class MaximumEnergy_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(MaximumEnergy(5, new int[]{1, 2, 3, 4, 5}, 4, new int[]{0, 1, 3, 4})); // Test input 1\n        System.out.println(MaximumEnergy(0, new int[]{}, 0, new int[]{})); // Test input 4\n        System.out.println(MaximumEnergy(5, new int[]{10, 20, 30, 40, 50}, 2, new int[]{1, 3})); // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: N=5, E=[1, 2, 3, 4, 5], K=4, P=[0, 1, 3, 4]\noutput1: 24\n--------\ninput2: N=0, E=[], K=0, P=[]\noutput2: 0\n--------\ninput3: N=5, E=[10, 20, 30, 40, 50], K=2, P=[1, 3]\noutput3: 90\n", "input_output_value": ["\ninput1: N=5, E=[1, 2, 3, 4, 5], K=4, P=[0, 1, 3, 4]\noutput1: 24\n", "\ninput2: N=0, E=[], K=0, P=[]\noutput2: 0\n", "\ninput3: N=5, E=[10, 20, 30, 40, 50], K=2, P=[1, 3]\noutput3: 90\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> E1 = {1, 2, 3, 4, 5};\n    vector<int> P1 = {0, 1, 3, 4};\n    cout << MaximumEnergy(5, E1, 4, P1) << endl;\n\n    vector<int> E2 = {};\n    vector<int> P2 = {};\n    cout << MaximumEnergy(0, E2, 0, P2) << endl;\n\n    vector<int> E3 = {10, 20, 30, 40, 50};\n    vector<int> P3 = {1, 3};\n    cout << MaximumEnergy(5, E3, 2, P3) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxScoreSubseq.cpp", "source_code_str": "    int maxScoreSubseq(int n, vector<int> &arr) {\n        unordered_map<int,int>mp;\n        int ma=INT_MIN;\n        for (int i=0;i<n;i++){\n            if (arr[i]>=0)mp[arr[i]-i]+=arr[i];\n            ma=max(ma,arr[i]);\n        }\n        int ele=INT_MIN;\n        for (auto j:mp) ele=max(ele,j.second);\n        return max(ele,ma);\n    }", "source_code_block": "", "target_Lan": "java###maxScoreSubseq_Test.java", "reference_code": "    public static int maxScoreSubseq(int n, int[] arr) {\n        \n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        int ma = Integer.MIN_VALUE;\n        \n        for(int i = 0; i < n; i++) {\n            \n            if(arr[i] >= 0) \n                map.put(arr[i] - i, map.getOrDefault(arr[i] - i, 0) + arr[i]);\n            \n            ma = Math.max(ma, arr[i]);\n        }\n        \n        int ele = Integer.MIN_VALUE;\n        \n        for(int j : map.values()){\n            ele = Math.max(ele, j);\n}\n        \n        return Math.max(ele, ma);\n    }", "target_method_signature": "maxScoreSubseq", "source_method_signature": "maxScoreSubseq", "target_allMS": "    public static int maxScoreSubseq(int n, int[] arr) {", "source_allMS": "    int maxScoreSubseq(int n, vector<int> &arr) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\npublic class maxScoreSubseq_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxScoreSubseq(0, new int[] {}));\n        System.out.println(maxScoreSubseq(1, new int[] {5}));\n        System.out.println(maxScoreSubseq(3, new int[] {-3, -1, -2}));\n        System.out.println(maxScoreSubseq(5, new int[] {1, 2, 3, 4, 5}));\n        System.out.println(maxScoreSubseq(5, new int[] {5, 10, -1, 15, 5}));\n    }\n}", "all_input_output_value": "\ninput1: n=0, arr=[]\noutput1: -2147483648\n--------\ninput2: n=1, arr=[5]\noutput2: 5\n--------\ninput3: n=3, arr=[-3, -1, -2]\noutput3: -1\n--------\ninput4: n=5, arr=[1, 2, 3, 4, 5]\noutput4: 15\n--------\ninput5: n=5, arr=[5, 10, -1, 15, 5]\noutput5: 15\n", "input_output_value": ["\ninput1: n=0, arr=[]\noutput1: -2147483648\n", "\ninput2: n=1, arr=[5]\noutput2: 5\n", "\ninput3: n=3, arr=[-3, -1, -2]\noutput3: -1\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\n// TOFILL\nint main() {\n    vector<int> arr1 = {};\n    cout << \"Result for input(n=0, arr=[]): \" << maxScoreSubseq(0, arr1) << endl;\n\n    vector<int> arr2 = {5};\n    cout << \"Result for input(n=1, arr=[5]): \" << maxScoreSubseq(1, arr2) << endl;\n    \n    vector<int> arr3 = {-3, -1, -2};\n    cout << \"Result for input(n=3, arr=[-3, -1, -2]): \" << maxScoreSubseq(3, arr3) << endl;\n\n    vector<int> arr4 = {1, 2, 3, 4, 5};\n    cout << \"Result for input(n=5, arr=[1, 2, 3, 4, 5]): \" << maxScoreSubseq(5, arr4) << endl;\n\n    vector<int> arr5 = {5, 10, -1, 15, 5};\n    cout << \"Result for input(n=5, arr=[5, 10, -1, 15, 5]): \" << maxScoreSubseq(5, arr5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumCost.cpp", "source_code_str": "    int minimumCost(vector<int> &nums) {\n        sort(nums.begin() + 1, nums.end());\n        return accumulate(nums.begin(), nums.begin() + 3, 0);\n    }", "source_code_block": "", "target_Lan": "java###minimumCost_Test.java", "reference_code": "    public static int minimumCost(int[] nums) {\n        Arrays.sort(nums, 1, nums.length);\n        return nums[0] + nums[1] + nums[2];\n    }", "target_method_signature": "minimumCost", "source_method_signature": "minimumCost", "target_allMS": "    public static int minimumCost(int[] nums) {", "source_allMS": "    int minimumCost(vector<int> &nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumCost_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumCost(new int[]{1, 5, 3})); // Test input 3\n        System.out.println(minimumCost(new int[]{2, 6, 2, 8, 3})); // Test input 4\n        System.out.println(minimumCost(new int[]{0, 0, 0, 0, 0})); // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 5, 3]\noutput1: 9\n--------\ninput2: nums=[2, 6, 2, 8, 3]\noutput2: 7\n--------\ninput3: nums=[0, 0, 0, 0, 0]\noutput3: 0\n", "input_output_value": ["\ninput1: nums=[1, 5, 3]\noutput1: 9\n", "\ninput2: nums=[2, 6, 2, 8, 3]\noutput2: 7\n", "\ninput3: nums=[0, 0, 0, 0, 0]\noutput3: 0\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 5, 3};\n    vector<int> input2 = {2, 6, 2, 8, 3};\n    vector<int> input3 = {0, 0, 0, 0, 0};\n    \n    cout << minimumCost(input1) << endl;\n    cout << minimumCost(input2) << endl;\n    cout << minimumCost(input3) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimumLevels.cpp", "source_code_str": "    int minimumLevels(vector<int> &possible) {\n        \n        int n = possible.size();\n        int s = accumulate(possible.begin(), possible.end(), 0) * 2 - n;\n        int pre = 0;\n        for (int i = 0; i < n - 1; i++) {\n            pre += possible[i] ? 2 : -2;\n            if (pre > s) {\n                return i + 1;\n            }\n        }\n        return -1;\n    }", "source_code_block": "", "target_Lan": "java###minimumLevels_Test.java", "reference_code": "    public static int minimumLevels(int[] possible) {\n        \n        int n = possible.length;\n        int s = 0;\n        for (int x : possible) {\n            s += x;\n        }\n        s = s * 2 - n;\n        int pre = 0;\n        for (int i = 0; i < n - 1; i++) {\n            pre += possible[i] == 1 ? 2 : -2;\n            if (pre > s) {\n                return i + 1;\n            }\n        }\n        return -1;\n    }", "target_method_signature": "minimumLevels", "source_method_signature": "minimumLevels", "target_allMS": "    public static int minimumLevels(int[] possible) {", "source_allMS": "    int minimumLevels(vector<int> &possible) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimumLevels_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumLevels(new int[]{1, 1, 1, 1}));      // Test input 1\n        System.out.println(minimumLevels(new int[]{1, 2, 3, 4}));      // Test input 2\n        System.out.println(minimumLevels(new int[]{0, 0, 0, 0}));      // Test input 3\n        System.out.println(minimumLevels(new int[]{1, 1, 1, 1, 1}));   // Test input 4\n        System.out.println(minimumLevels(new int[]{2, 1, 2, 1, 2}));   // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: possible=[1, 1, 1, 1]\noutput1: 3\n--------\ninput2: possible=[1, 2, 3, 4]\noutput2: -1\n--------\ninput3: possible=[0, 0, 0, 0]\noutput3: 1\n--------\ninput4: possible=[1, 1, 1, 1, 1]\noutput4: 3\n--------\ninput5: possible=[2, 1, 2, 1, 2]\noutput5: -1\n", "input_output_value": ["\ninput1: possible=[1, 1, 1, 1]\noutput1: 3\n", "\ninput2: possible=[1, 2, 3, 4]\noutput2: -1\n", "\ninput3: possible=[0, 0, 0, 0]\noutput3: 1\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <numeric>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 1, 1, 1};\n    vector<int> input2 = {1, 2, 3, 4};\n    vector<int> input3 = {0, 0, 0, 0};\n    vector<int> input4 = {1, 1, 1, 1, 1};\n    vector<int> input5 = {2, 1, 2, 1, 2};\n\n    cout << minimumLevels(input1) << endl;\n    cout << minimumLevels(input2) << endl;\n    cout << minimumLevels(input3) << endl;\n    cout << minimumLevels(input4) << endl;\n    cout << minimumLevels(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###findMinimumTime.cpp", "source_code_str": "    int findMinimumTime(vector<vector<int>>& tasks) {\n        int n = tasks.size();\n        sort(tasks.begin(), tasks.end(), [&](const vector<int> &t1, const vector<int> &t2) -> bool {\n            return t1[1] < t2[1];\n        });\n        vector<int> run(tasks[n - 1][1] + 1);\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            int start = tasks[i][0], end = tasks[i][1], duration = tasks[i][2];\n            duration -= accumulate(run.begin() + start, run.begin() + end + 1, 0);\n            res += max(duration, 0);\n            for (int j = end; j >= 0 && duration > 0; j--) {\n                if (run[j] == 0) {\n                    duration--;\n                    run[j] = 1;\n                }\n            }\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###findMinimumTime_Test.java", "reference_code": "    public static int findMinimumTime(int[][] tasks) {\n        int n = tasks.length;\n        Arrays.sort(tasks, (a, b) -> a[1] - b[1]);\n        int[] run = new int[tasks[n - 1][1] + 1];\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            int start = tasks[i][0], end = tasks[i][1], duration = tasks[i][2];\n            for (int j = start; j <= end; j++) {\n                duration -= run[j];\n            }\n            res += Math.max(duration, 0);\n            for (int j = end; j >= 0 && duration > 0; j--) {\n                if (run[j] == 0) {\n                    duration--;\n                    run[j] = 1;\n                }\n            }\n        }\n        return res;\n    }", "target_method_signature": "findMinimumTime", "source_method_signature": "findMinimumTime", "target_allMS": "    public static int findMinimumTime(int[][] tasks) {", "source_allMS": "    int findMinimumTime(vector<vector<int>>& tasks) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findMinimumTime_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findMinimumTime(new int[][]{{0, 2, 1}}));  // Single task that can complete within its duration\n        System.out.println(findMinimumTime(new int[][]{{0, 2, 2}, {1, 3, 1}}));  // Overlapping tasks needing careful scheduling\n        System.out.println(findMinimumTime(new int[][]{{0, 2, 0}, {1, 3, 1}}));  // One task with zero duration\n        System.out.println(findMinimumTime(new int[][]{{0, 5, -1}}));  // A task with negative duration\n    }\n}", "all_input_output_value": "\ninput1: tasks=[[0, 2, 1]]\noutput1: 1\n--------\ninput2: tasks=[[0, 2, 2], [1, 3, 1]]\noutput2: 2\n--------\ninput3: tasks=[[0, 2, 0], [1, 3, 1]]\noutput3: 1\n--------\ninput4: tasks=[[0, 5, -1]]\noutput4: 0\n", "input_output_value": ["\ninput1: tasks=[[0, 2, 1]]\noutput1: 1\n", "\ninput2: tasks=[[0, 2, 2], [1, 3, 1]]\noutput2: 2\n", "\ninput3: tasks=[[0, 2, 0], [1, 3, 1]]\noutput3: 1\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n// TOFILL\nint main() {\n    vector<vector<int>> tasks1 = {{0, 2, 1}};\n    vector<vector<int>> tasks2 = {{0, 2, 2}, {1, 3, 1}};\n    vector<vector<int>> tasks3 = {{0, 2, 0}, {1, 3, 1}};\n    vector<vector<int>> tasks4 = {{0, 5, -1}};\n\n    cout << findMinimumTime(tasks1) << endl;\n    cout << findMinimumTime(tasks2) << endl;\n    cout << findMinimumTime(tasks3) << endl;\n    cout << findMinimumTime(tasks4) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###bobHappiness.cpp", "source_code_str": "    int bobHappiness(int n, int k, int q, vector<vector<int>> &students,\n                     vector<vector<int>> &queries) {\n        set<int> set1, set2;\n        for (auto &a : students) {\n            set1.insert(a[0]);\n            set2.insert(a[1]);\n        }\n        map<int, int> map1, map2;\n        int idx1 = 1, idx2 = 1;\n        while (!set1.empty()) {\n            map1[*set1.begin()] = idx1++;\n            set1.erase(set1.begin());\n            map2[*set2.begin()] = idx2++;\n            set2.erase(set2.begin());\n        }\n        vector<vector<int>> pre(n, vector<int>(n, 0));\n        for (int i = 0; i < n; ++i) {\n            pre[map1[students[i][0]] - 1][map2[students[i][1]] - 1]++;\n        }\n        vector<vector<int>> Arr(n + 1, vector<int>(n + 1, 0));\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (pre[i - 1][j - 1] == 0) {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] - Arr[i - 1][j - 1];\n                } else {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] + 1 - Arr[i - 1][j - 1];\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < q; ++i) {\n            int X = queries[i][0], Y = queries[i][1];\n            X--;\n            Y--;\n            int a = map1[students[Y][0]];\n            int b = map2[students[Y][1]];\n            int c = map1[students[X][0]], d = map2[students[X][1]];\n            swap(a, c);\n            int people = Arr[c][d] + Arr[a - 1][b - 1] - Arr[a - 1][d] - Arr[c][b - 1];\n            people -= 2;\n            if (people > k) {\n                \n            } else {\n                sum++;\n            }\n        }\n        return sum;\n    }", "source_code_block": "", "target_Lan": "java###bobHappiness_Test.java", "reference_code": "    public static int bobHappiness(int n, int k, int q, int[][] students,\n                                   int[][] queries) {\n        TreeSet<Integer> set1 = new TreeSet<>();\n        TreeSet<Integer> set2 = new TreeSet<>();\n        for (int[] a : students) {\n            set1.add(a[0]);\n            set2.add(a[1]);\n        }\n        Map<Integer, Integer> map1 = new HashMap<>();\n        Map<Integer, Integer> map2 = new HashMap<>();\n        int idx1 = 1, idx2 = 1;\n        while (!set1.isEmpty()) {\n            map1.put(set1.pollFirst(), idx1++);\n            map2.put(set2.pollFirst(), idx2++);\n        }\n        int[][] pre = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            pre[map1.get(students[i][0]) - 1][map2.get(students[i][1]) - 1]++;\n        }\n        int[][] Arr = new int[n + 1][n + 1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (pre[i - 1][j - 1] == 0) {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] - Arr[i - 1][j - 1];\n                } else {\n                    Arr[i][j] = Arr[i - 1][j] + Arr[i][j - 1] + 1 - Arr[i - 1][j - 1];\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < q; i++) {\n            int X = queries[i][0], Y = queries[i][1];\n            X--;\n            Y--;\n            int a = map1.get(students[Y][0]);\n            int b = map2.get(students[Y][1]);\n            int c = map1.get(students[X][0]), d = map2.get(students[X][1]);\n            int temp = a;\n            a = c;\n            c = temp;\n            int people = Arr[c][d] + Arr[a - 1][b - 1] - Arr[a - 1][d] - Arr[c][b - 1];\n            people -= 2;\n            if (people > k) {\n                \n            } else {\n                sum++;\n            }\n        }\n        return sum;\n    }", "target_method_signature": "bobHappiness", "source_method_signature": "bobHappiness", "target_allMS": "    public static int bobHappiness(int n, int k, int q, int[][] students,", "source_allMS": "    int bobHappiness(int n, int k, int q, vector<vector<int>> &students,", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class bobHappiness_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Input 1\n        int n1 = 0, k1 = 1, q1 = 0;\n        int[][] students1 = new int[0][0];\n        int[][] queries1 = new int[0][0];\n        System.out.println(bobHappiness(n1, k1, q1, students1, queries1));\n\n        // Test Input 2\n        int n2 = 1, k2 = 1, q2 = 1;\n        int[][] students2 = {{3, 2}};\n        int[][] queries2 = {{1, 1}};\n        System.out.println(bobHappiness(n2, k2, q2, students2, queries2));\n\n        // Test Input 3\n        int n3 = 3, k3 = 2, q3 = 2;\n        int[][] students3 = {{1, 2}, {2, 2}, {1, 3}};\n        int[][] queries3 = {{1, 2}, {2, 3}};\n        System.out.println(bobHappiness(n3, k3, q3, students3, queries3));\n\n        // Test Input 4\n        int n4 = 3, k4 = 1, q4 = 2;\n        int[][] students4 = {{1, 1}, {2, 2}, {3, 3}};\n        int[][] queries4 = {{1, 2}, {2, 3}};\n        System.out.println(bobHappiness(n4, k4, q4, students4, queries4));\n\n        // Test Input 5\n        int n5 = 4, k5 = 2, q5 = 1;\n        int[][] students5 = {{1, 1}, {1, 2}, {1, 3}, {1, 4}};\n        int[][] queries5 = {{1, 3}};\n    }\n}", "all_input_output_value": "\ninput1: n=0, k=1, q=0, students=[], queries=[]\noutput1: 0\n--------\ninput2: n=1, k=1, q=1, students=[[3, 2]], queries=[[1, 1]]\noutput2: 1\n--------\ninput3: n=3, k=2, q=2, students=[[1, 2], [2, 2], [1, 3]], queries=[[1, 2], [2, 3]]\noutput3: 2\n--------\ninput4: n=3, k=1, q=2, students=[[1, 1], [2, 2], [3, 3]], queries=[[1, 2], [2, 3]]\noutput4: 2\n", "input_output_value": ["\ninput1: n=0, k=1, q=0, students=[], queries=[]\noutput1: 0\n", "\ninput2: n=1, k=1, q=1, students=[[3, 2]], queries=[[1, 1]]\noutput2: 1\n", "\ninput3: n=3, k=2, q=2, students=[[1, 2], [2, 2], [1, 3]], queries=[[1, 2], [2, 3]]\noutput3: 2\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <set>\n#include <map>\n// TOFILL\nint main() {\n    vector<vector<int>> students1 = {};\n    vector<vector<int>> queries1 = {};\n    cout << bobHappiness(0, 1, 0, students1, queries1) << endl;\n\n    vector<vector<int>> students2 = {{3, 2}};\n    vector<vector<int>> queries2 = {{1, 1}};\n    cout << bobHappiness(1, 1, 1, students2, queries2) << endl;\n\n    vector<vector<int>> students3 = {{1, 2}, {2, 2}, {1, 3}};\n    vector<vector<int>> queries3 = {{1, 2}, {2, 3}};\n    cout << bobHappiness(3, 2, 2, students3, queries3) << endl;\n\n    vector<vector<int>> students4 = {{1, 1}, {2, 2}, {3, 3}};\n    vector<vector<int>> queries4 = {{1, 2}, {2, 3}};\n    cout << bobHappiness(3, 1, 2, students4, queries4) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumPrimeDifference.cpp", "source_code_str": "    int maximumPrimeDifference(vector<int>& nums) {\n        unordered_set<int> primes = {\n            2, 3, 5, 7, 11,\n            13, 17, 19, 23, 29,\n            31, 37, 41, 43, 47,\n            53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97\n        };\n        int n = nums.size();\n        int first = -1, ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (primes.count(nums[i])) {\n                if (first != -1) {\n                    ans = max(ans, i - first);\n                }\n                else {\n                    first = i;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maximumPrimeDifference_Test.java", "reference_code": "    public static int maximumPrimeDifference(int[] nums) {\n        Set<Integer> primes = new HashSet<>(Arrays.asList(\n            2, 3, 5, 7, 11,\n            13, 17, 19, 23, 29,\n            31, 37, 41, 43, 47,\n            53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97\n        ));\n        int n = nums.length;\n        int first = -1, ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (primes.contains(nums[i])) {\n                if (first != -1) {\n                    ans = Math.max(ans, i - first);\n                } else {\n                    first = i;\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "maximumPrimeDifference", "source_method_signature": "maximumPrimeDifference", "target_allMS": "    public static int maximumPrimeDifference(int[] nums) {", "source_allMS": "    int maximumPrimeDifference(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class maximumPrimeDifference_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumPrimeDifference(new int[]{1, 4, 6, 8}));               // Expect 0\n        System.out.println(maximumPrimeDifference(new int[]{2, 4, 5, 8, 11, 12}));       // Expect 2\n        System.out.println(maximumPrimeDifference(new int[]{3}));                        // Expect 0\n        System.out.println(maximumPrimeDifference(new int[]{1, 2, 3, 4, 7}));            // Expect 4\n        System.out.println(maximumPrimeDifference(new int[]{4, 6, 8, 10, 12}));          // Expect 0\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 4, 6, 8]\noutput1: 0\n--------\ninput2: nums=[2, 4, 5, 8, 11, 12]\noutput2: 4\n--------\ninput3: nums=[3]\noutput3: 0\n--------\ninput4: nums=[1, 2, 3, 4, 7]\noutput4: 3\n--------\ninput5: nums=[4, 6, 8, 10, 12]\noutput5: 0\n", "input_output_value": ["\ninput1: nums=[1, 4, 6, 8]\noutput1: 0\n", "\ninput2: nums=[2, 4, 5, 8, 11, 12]\noutput2: 4\n", "\ninput3: nums=[3]\noutput3: 0\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 4, 6, 8};\n    vector<int> input2 = {2, 4, 5, 8, 11, 12};\n    vector<int> input3 = {3};\n    vector<int> input4 = {1, 2, 3, 4, 7};\n    vector<int> input5 = {4, 6, 8, 10, 12};\n    \n    cout << maximumPrimeDifference(input1) << endl;\n    cout << maximumPrimeDifference(input2) << endl;\n    cout << maximumPrimeDifference(input3) << endl;\n    cout << maximumPrimeDifference(input4) << endl;\n    cout << maximumPrimeDifference(input5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###HeightTower.cpp", "source_code_str": "    int HeightTower(int n, int k, vector<int>& a) {\n        \n        stack<int> st;\n        int totalHeight = 0;\n        int i = 0;\n        \n        for (int j = 0; j < n; j++) {\n            totalHeight += a[j];\n            st.push(a[j]);\n            \n            if (totalHeight > k) {\n                \n                int removeBoxes = i + 1;\n                while (removeBoxes > 0 && !st.empty()) {\n                    totalHeight -= st.top();\n                    st.pop();\n                    removeBoxes--;\n                }\n                i++;\n            }\n        }\n        \n        return totalHeight;\n    }", "source_code_block": "", "target_Lan": "java###HeightTower_Test.java", "reference_code": "    public static int HeightTower(int n, int k, int[] arr) {\n        \n        Stack<Integer> st = new Stack<>();\n        \n        int totalHeight = 0;\n        \n        int i = 0;\n        \n        for (int j = 0; j < n; j++) {\n            totalHeight += arr[j];\n            st.push(arr[j]);\n            \n            if (totalHeight > k) {\n                int removeBoxes = i + 1;\n                \n                while (removeBoxes > 0 && !st.empty()) {\n                    totalHeight -= st.pop();\n                    removeBoxes--;\n                }\n                i++;\n            }\n        }\n        \n        return totalHeight;\n    }", "target_method_signature": "HeightTower", "source_method_signature": "HeightTower", "target_allMS": "    public static int HeightTower(int n, int k, int[] arr) {", "source_allMS": "    int HeightTower(int n, int k, vector<int>& a) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Stack;\npublic class HeightTower_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(HeightTower(3, 15, new int[]{5, 5, 5}));    // Example 2: exactly fits\n        System.out.println(HeightTower(0, 10, new int[]{}));           // Example 3: edge case with no boxes\n        System.out.println(HeightTower(4, 25, new int[]{10, 5, 8, 7})); // Example 4: should pop boxes to reduce\n        System.out.println(HeightTower(3, 0, new int[]{1, 1, 1}));    // Example 5: height exceeds immediately\n    }\n}", "all_input_output_value": "\ninput1: n=3, k=15, arr=[5, 5, 5]\noutput1: 15\n--------\ninput2: n=0, k=10, arr=[]\noutput2: 0\n--------\ninput3: n=4, k=25, arr=[10, 5, 8, 7]\noutput3: 23\n--------\ninput4: n=3, k=0, arr=[1, 1, 1]\noutput4: 0\n", "input_output_value": ["\ninput1: n=3, k=15, arr=[5, 5, 5]\noutput1: 15\n", "\ninput2: n=0, k=10, arr=[]\noutput2: 0\n", "\ninput3: n=4, k=25, arr=[10, 5, 8, 7]\noutput3: 23\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stack>\n// TOFILL\nint main() {\n    vector<int> arr1 = {5, 5, 5};\n    cout << HeightTower(3, 15, arr1) << endl; // Expected output: 5\n\n    vector<int> arr2 = {};\n    cout << HeightTower(0, 10, arr2) << endl; // Expected output: 0\n\n    vector<int> arr3 = {10, 5, 8, 7};\n    cout << HeightTower(4, 25, arr3) << endl; // Expected output: 10\n\n    vector<int> arr4 = {1, 1, 1};\n    cout << HeightTower(3, 0, arr4) << endl; // Expected output: 0\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###paintWalls.cpp", "source_code_str": "    int paintWalls(vector<int>& cost, vector<int>& time) {\n        int n = cost.size();\n        vector<int> f(n * 2 + 1, INT_MAX / 2);\n        f[n] = 0;\n        for (int i = 0; i < n; ++i) {\n            vector<int> g(n * 2 + 1, INT_MAX / 2);\n            for (int j = 0; j <= n * 2; ++j) {\n                \n                g[min(j + time[i], n * 2)] = min(g[min(j + time[i], n * 2)], f[j] + cost[i]);\n                \n                if (j > 0) {\n                    g[j - 1] = min(g[j - 1], f[j]);\n                }\n            }\n            f = move(g);\n        }\n        return *min_element(f.begin() + n, f.end());\n    }", "source_code_block": "", "target_Lan": "java###paintWalls_Test.java", "reference_code": "    public static int paintWalls(int[] cost, int[] time) {\n        int n = cost.length;\n        int[] f = new int[n * 2 + 1];\n        Arrays.fill(f, Integer.MAX_VALUE / 2);\n        f[n] = 0;\n        for (int i = 0; i < n; ++i) {\n            int[] g = new int[n * 2 + 1];\n            Arrays.fill(g, Integer.MAX_VALUE / 2);\n            for (int j = 0; j <= n * 2; ++j) {\n                \n                g[Math.min(j + time[i], n * 2)] = Math.min(g[Math.min(j + time[i], n * 2)], f[j] + cost[i]);\n                \n                if (j > 0) {\n                    g[j - 1] = Math.min(g[j - 1], f[j]);\n                }\n            }\n            f = g;\n        }\n        int ans = f[n];\n        for (int i = n + 1; i <= n * 2; i++) {\n            ans = Math.min(ans, f[i]);\n        }\n        return ans;\n    }", "target_method_signature": "paintWalls", "source_method_signature": "paintWalls", "target_allMS": "    public static int paintWalls(int[] cost, int[] time) {", "source_allMS": "    int paintWalls(vector<int>& cost, vector<int>& time) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class paintWalls_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test Input 1: Edge case with no walls to paint\n        int[] cost1 = {};\n        int[] time1 = {};\n        System.out.println(paintWalls(cost1, time1));\n\n        // Test Input 2: Basic case\n        int[] cost2 = {5, 10, 15};\n        int[] time2 = {1, 2, 3};\n        System.out.println(paintWalls(cost2, time2));\n\n        // Test Input 3: All zero time\n        int[] cost3 = {1, 2, 3};\n        int[] time3 = {0, 0, 0};\n        System.out.println(paintWalls(cost3, time3));\n\n        // Test Input 4: Higher costs and mixed times\n        int[] cost4 = {100, 200, 300};\n        int[] time4 = {2, 1, 2};\n        System.out.println(paintWalls(cost4, time4));\n\n        // Test Input 5: Higher times and few costs\n        int[] cost5 = {10, 20};\n        int[] time5 = {3, 4};\n        System.out.println(paintWalls(cost5, time5));\n    }\n}", "all_input_output_value": "\ninput1: cost=[], time=[]\noutput1: 0\n--------\ninput2: cost=[5, 10, 15], time=[1, 2, 3]\noutput2: 10\n--------\ninput3: cost=[1, 2, 3], time=[0, 0, 0]\noutput3: 6\n--------\ninput4: cost=[100, 200, 300], time=[2, 1, 2]\noutput4: 100\n--------\ninput5: cost=[10, 20], time=[3, 4]\noutput5: 10\n", "input_output_value": ["\ninput1: cost=[], time=[]\noutput1: 0\n", "\ninput2: cost=[5, 10, 15], time=[1, 2, 3]\noutput2: 10\n", "\ninput3: cost=[1, 2, 3], time=[0, 0, 0]\noutput3: 6\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n// TOFILL\nint main() {\n    vector<int> cost1 = {};\n    vector<int> time1 = {};\n    cout << paintWalls(cost1, time1) << endl;\n\n    vector<int> cost2 = {5, 10, 15};\n    vector<int> time2 = {1, 2, 3};\n    cout << paintWalls(cost2, time2) << endl;\n\n    vector<int> cost3 = {1, 2, 3};\n    vector<int> time3 = {0, 0, 0};\n    cout << paintWalls(cost3, time3) << endl;\n\n    vector<int> cost4 = {100, 200, 300};\n    vector<int> time4 = {2, 1, 2};\n    cout << paintWalls(cost4, time4) << endl;\n\n    vector<int> cost5 = {10, 20};\n    vector<int> time5 = {3, 4};\n    cout << paintWalls(cost5, time5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###stoneGameVI.cpp", "source_code_str": "    int stoneGameVI(vector<int>& aliceValues, vector<int>& bobValues) {\n        int n = aliceValues.size();\n        vector<tuple<int, int, int>> values;\n        for (int i = 0; i < aliceValues.size(); i++) {\n            values.emplace_back(aliceValues[i] + bobValues[i], aliceValues[i], bobValues[i]);\n        }\n        sort(values.begin(), values.end(), [](tuple<int, int, int> &a, tuple<int, int, int> &b) {\n            return get<0>(a) > get<0>(b);\n        });\n        int aliceSum = 0, bobSum = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                aliceSum += get<1>(values[i]);\n            } else {\n                bobSum += get<2>(values[i]);\n            }\n        }\n        if (aliceSum > bobSum) {\n            return 1;\n        } else if (aliceSum == bobSum) {\n            return 0;\n        } else {\n            return -1;\n        }\n    }", "source_code_block": "", "target_Lan": "java###stoneGameVI_Test.java", "reference_code": "    public static int stoneGameVI(int[] aliceValues, int[] bobValues) {\n        int n = aliceValues.length;\n        int[][] values = new int[n][3];\n        for (int i = 0; i < n; i++) {\n            values[i][0] = aliceValues[i] + bobValues[i];\n            values[i][1] = aliceValues[i];\n            values[i][2] = bobValues[i];\n        }\n        Arrays.sort(values, (a, b) -> b[0] - a[0]);\n        int aliceSum = 0, bobSum = 0;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                aliceSum += values[i][1];\n            } else {\n                bobSum += values[i][2];\n            }\n        }\n        if (aliceSum > bobSum) {\n            return 1;\n        } else if (aliceSum == bobSum) {\n            return 0;\n        } else {\n            return -1;\n        }\n    }", "target_method_signature": "stoneGameVI", "source_method_signature": "stoneGameVI", "target_allMS": "    public static int stoneGameVI(int[] aliceValues, int[] bobValues) {", "source_allMS": "    int stoneGameVI(vector<int>& aliceValues, vector<int>& bobValues) {", "source_import": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\nusing namespace std;", "target_import": "import java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.Arrays;\nimport java.util.Arrays;\npublic class stoneGameVI_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1: Testing with empty arrays\n        int[] aliceValues1 = {};\n        int[] bobValues1 = {};\n        System.out.println(stoneGameVI(aliceValues1, bobValues1)); // Expected: 0(tie)\n\n        // Test input 2: Testing a case where Alice wins\n        int[] aliceValues2 = {1, 2};\n        int[] bobValues2 = {2, 1};\n        System.out.println(stoneGameVI(aliceValues2, bobValues2)); // Expected: 1(Alice wins)\n\n        // Test input 3: Testing a case where Alice and Bob tie\n        int[] aliceValues3 = {1, 2};\n        int[] bobValues3 = {1, 2};\n        System.out.println(stoneGameVI(aliceValues3, bobValues3)); // Expected: 0(tie)\n\n        // Test input 4: Testing with negative and positive values\n        int[] aliceValues4 = {5, -3};\n        int[] bobValues4 = {-1, 10};\n        System.out.println(stoneGameVI(aliceValues4, bobValues4)); // Expected: -1(Bob wins)\n\n        // Test input 5: Testing with larger values where Bob wins\n        int[] aliceValues5 = {1000, 2000, 3000};\n        int[] bobValues5 = {3000, 2000, 1000};\n        System.out.println(stoneGameVI(aliceValues5, bobValues5)); // Expected: -1(Bob wins)\n    }\n}", "input_output_value": ["\ninput1: aliceValues=[], bobValues=[]\noutput1: 0 (tie)\n", "\ninput2: aliceValues=[1, 2], bobValues=[2, 1]\noutput2: 1 (Alice wins)\n", "\ninput3: aliceValues=[1, 2], bobValues=[1, 2]\noutput3: 0 (tie)\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> aliceValues1 = {};\n    vector<int> bobValues1 = {};\n    cout << stoneGameVI(aliceValues1, bobValues1) << endl;\n\n    vector<int> aliceValues2 = {1, 2};\n    vector<int> bobValues2 = {2, 1};\n    cout << stoneGameVI(aliceValues2, bobValues2) << endl;\n\n    vector<int> aliceValues3 = {1, 2};\n    vector<int> bobValues3 = {1, 2};\n    cout << stoneGameVI(aliceValues3, bobValues3) << endl;\n\n    vector<int> aliceValues4 = {5, -3};\n    vector<int> bobValues4 = {-1, 10};\n    cout << stoneGameVI(aliceValues4, bobValues4) << endl;\n\n    vector<int> aliceValues5 = {1000, 2000, 3000};\n    vector<int> bobValues5 = {3000, 2000, 1000};\n    cout << stoneGameVI(aliceValues5, bobValues5) << endl;\n\n    return 0;\n}", "TAG": "Success", "all_input_output_value": "\ninput1: aliceValues=[], bobValues=[]\noutput1: 0 (tie)\n--------\ninput2: aliceValues=[1, 2], bobValues=[2, 1]\noutput2: 1 (Alice wins)\n--------\ninput3: aliceValues=[1, 2], bobValues=[1, 2]\noutput3: 0 (tie)\n--------\ninput4: aliceValues=[5, -3], bobValues=[-1, 10]\noutput4: -1 (Bob wins)\n--------\ninput5: aliceValues=[1000, 2000, 3000], bobValues=[3000, 2000, 1000]\noutput5: -1 (Bob wins)\n"}
{"source_Lan": "cpp###minimumAddedCoins.cpp", "source_code_str": "int minimumAddedCoins(vector<int>& coins, int target) {\n        sort(coins.begin(), coins.end());\n        int ans = 0;\n        int x = 1;\n        int length = coins.size(), index = 0;\n        while (x <= target) {\n            if (index < length && coins[index] <= x) {\n                x += coins[index];\n                index++;\n            } else {\n                x <<= 1;\n                ans++;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minimumAddedCoins_Test.java", "reference_code": "public static int minimumAddedCoins(int[] coins, int target) {\n        Arrays.sort(coins);\n        int ans = 0;\n        int x = 1;\n        int length = coins.length, index = 0;\n        while (x <= target) {\n            if (index < length && coins[index] <= x) {\n                x += coins[index];\n                index++;\n            } else {\n                x *= 2;\n                ans++;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "minimumAddedCoins", "source_method_signature": "minimumAddedCoins", "source_allMS": "int minimumAddedCoins(vector<int>& coins, int target) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minimumAddedCoins_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimumAddedCoins(new int[]{}, 10)); // Test case 1\n        System.out.println(minimumAddedCoins(new int[]{1, 2, 5}, 10)); // Test case 2\n        System.out.println(minimumAddedCoins(new int[]{2, 4, 8}, 30)); // Test case 3\n        System.out.println(minimumAddedCoins(new int[]{1, 3, 4, 5}, 11)); // Test case 4\n        System.out.println(minimumAddedCoins(new int[]{5}, 20)); // Test case 5\n    }\n}", "all_input_output_value": "\ninput1: coins=[], target=10\noutput1: 4\n--------\ninput2: coins=[1, 2, 5], target=10\noutput2: 1\n--------\ninput3: coins=[2, 4, 8], target=30\noutput3: 2\n--------\ninput4: coins=[1, 3, 4, 5], target=11\noutput4: 1\n--------\ninput5: coins=[5], target=20\noutput5: 4\n", "target_allMS": "public static int minimumAddedCoins(int[] coins, int target) {", "input_output_value": ["\ninput1: coins=[], target=10\noutput1: 4\n", "\ninput2: coins=[1, 2, 5], target=10\noutput2: 1\n", "\ninput3: coins=[2, 4, 8], target=30\noutput3: 2\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> coins1 = {};\n    int target1 = 10;\n    cout << minimumAddedCoins(coins1, target1) << endl;\n\n    vector<int> coins2 = {1, 2, 5};\n    int target2 = 10;\n    cout << minimumAddedCoins(coins2, target2) << endl;\n\n    vector<int> coins3 = {2, 4, 8};\n    int target3 = 30;\n    cout << minimumAddedCoins(coins3, target3) << endl;\n\n    vector<int> coins4 = {1, 3, 4, 5};\n    int target4 = 11;\n    cout << minimumAddedCoins(coins4, target4) << endl;\n\n    vector<int> coins5 = {5};\n    int target5 = 20;\n    cout << minimumAddedCoins(coins5, target5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###secondGreaterElement.cpp", "source_code_str": "vector<int> secondGreaterElement(vector<int>& nums) {\n        vector<int> res(nums.size(), -1);\n        stack<int> st;\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;\n        for (int i = 0; i < nums.size(); ++i) {\n            while (!q.empty() && q.top().first < nums[i]) {\n                res[q.top().second] = nums[i];\n                q.pop();\n            }\n            while (!st.empty() && nums[st.top()] < nums[i]) {\n                q.push({nums[st.top()], st.top()});\n                st.pop();\n            }\n            st.push(i);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###secondGreaterElement_Test.java", "reference_code": "    public static int[] secondGreaterElement(int[] nums) {\n        int[] res = new int[nums.length];\n        Arrays.fill(res, -1);\n        Deque<Integer> stack = new ArrayDeque<Integer>();\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n        for (int i = 0; i < nums.length; ++i) {\n            while (!pq.isEmpty() && pq.peek()[0] < nums[i]) {\n                res[pq.poll()[1]] = nums[i];\n            }\n            while (!stack.isEmpty() && nums[stack.peek()] < nums[i]) {\n                pq.offer(new int[]{nums[stack.peek()], stack.peek()});\n                stack.pop();\n            }\n            stack.push(i);\n        }\n        return res;\n    }", "target_method_signature": "secondGreaterElement", "source_method_signature": "secondGreaterElement", "source_allMS": "vector<int> secondGreaterElement(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <utility>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.PriorityQueue;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.PriorityQueue;\nimport java.util.Arrays;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.PriorityQueue;\npublic class secondGreaterElement_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{})));                // Edge case: Empty array\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{1})));              // Edge case: Single element\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{1, 2, 3, 4})));     // All increasing\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{4, 3, 2, 1})));     // All decreasing\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{2, 2, 2, 2})));     // All same\n        System.out.println(Arrays.toString(secondGreaterElement(new int[]{1, 5, 2, 6, 3})));  // Mix with second greater elements\n    }\n}", "all_input_output_value": "\ninput1: nums=[]\noutput1: []\n--------\ninput2: nums=[1]\noutput2: [-1]\n--------\ninput3: nums=[1, 2, 3, 4]\noutput3: [3, 4, -1, -1]\n--------\ninput4: nums=[4, 3, 2, 1]\noutput4: [-1, -1, -1, -1]\n--------\ninput5: nums=[2, 2, 2, 2]\noutput5: [-1, -1, -1, -1]\n--------\ninput6: nums=[1, 5, 2, 6, 3]\noutput6: [2, -1, 3, -1, -1]\n", "target_allMS": "    public static int[] secondGreaterElement(int[] nums) {", "input_output_value": ["\ninput1: nums=[]\noutput1: []\n", "\ninput2: nums=[1]\noutput2: [-1]\n", "\ninput3: nums=[1, 2, 3, 4]\noutput3: [3, 4, -1, -1]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <utility>\n#include <iostream>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <utility>\n// TOFILL\nint main() {\n    vector<int> result;\n\n    vector<int> input1 = {};\n    result = secondGreaterElement(input1);\n    for(int num : result) cout << num << \" \";\n    cout << endl;\n\n    vector<int> input2 = {1};\n    result = secondGreaterElement(input2);\n    for(int num : result) cout << num << \" \";\n    cout << endl;\n\n    vector<int> input3 = {1, 2, 3, 4};\n    result = secondGreaterElement(input3);\n    for(int num : result) cout << num << \" \";\n    cout << endl;\n\n    vector<int> input4 = {4, 3, 2, 1};\n    result = secondGreaterElement(input4);\n    for(int num : result) cout << num << \" \";\n    cout << endl;\n\n    vector<int> input5 = {2, 2, 2, 2};\n    result = secondGreaterElement(input5);\n    for(int num : result) cout << num << \" \";\n    cout << endl;\n\n    vector<int> input6 = {1, 5, 2, 6, 3};\n    result = secondGreaterElement(input6);\n    for(int num : result) cout << num << \" \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minDeletion.cpp", "source_code_str": "int minDeletion(vector<int>& nums) {\n        int n = nums.size();\n        int ans = 0;\n        bool check = true;\n        for (int i = 0; i + 1 < n; ++i) {\n            if (nums[i] == nums[i + 1] && check) {\n                ++ans;\n            }\n            else {\n                check = !check;\n            }\n        }\n        if ((n - ans) % 2 != 0) {\n            ++ans;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minDeletion_Test.java", "reference_code": "public static int minDeletion(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        boolean check = true;\n        for (int i = 0; i + 1 < n; ++i) {\n            if (nums[i] == nums[i + 1] && check) {\n                ++ans;\n            } else {\n                check = !check;\n            }\n        }\n        if ((n - ans) % 2 != 0) {\n            ++ans;\n        }\n        return ans;\n    }", "target_method_signature": "minDeletion", "source_method_signature": "minDeletion", "source_allMS": "int minDeletion(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minDeletion_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minDeletion(new int[]{1, 2, 3, 4, 5}));          // Case with no adjacent duplicates\n        System.out.println(minDeletion(new int[]{1, 1, 2, 2, 3, 3}));       // Case with adjacent duplicates\n        System.out.println(minDeletion(new int[]{1, 2, 2, 3, 3, 3, 4}));    // Odd-length with duplicates\n        System.out.println(minDeletion(new int[]{}));                        // Empty array case\n        System.out.println(minDeletion(new int[]{5, 5, 5, 5}));             // All duplicates case\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3, 4, 5]\noutput1: 1\n--------\ninput2: nums=[1, 1, 2, 2, 3, 3]\noutput2: 2\n--------\ninput3: nums=[1, 2, 2, 3, 3, 3, 4]\noutput3: 1\n--------\ninput4: nums=[]\noutput4: 0\n--------\ninput5: nums=[5, 5, 5, 5]\noutput5: 4\n", "target_allMS": "public static int minDeletion(int[] nums) {", "input_output_value": ["\ninput1: nums=[1, 2, 3, 4, 5]\noutput1: 1\n", "\ninput2: nums=[1, 1, 2, 2, 3, 3]\noutput2: 2\n", "\ninput3: nums=[1, 2, 2, 3, 3, 3, 4]\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 2, 3, 4, 5};\n    vector<int> input2 = {1, 1, 2, 2, 3, 3};\n    vector<int> input3 = {1, 2, 2, 3, 3, 3, 4};\n    vector<int> input4 = {};\n    vector<int> input5 = {5, 5, 5, 5};\n    \n    cout << minDeletion(input1) << endl;\n    cout << minDeletion(input2) << endl;\n    cout << minDeletion(input3) << endl;\n    cout << minDeletion(input4) << endl;\n    cout << minDeletion(input5) << endl;\n}"}
{"source_Lan": "cpp###maximizeSum.cpp", "source_code_str": "int maximizeSum(vector<int>& nums, int k) {\n        int m = *max_element(nums.begin(), nums.end());\n        return (2 * m + k - 1) * k / 2;\n    }", "source_code_block": "", "target_Lan": "java###maximizeSum_Test.java", "reference_code": "public static int maximizeSum(int[] nums, int k) {\n        int m = Arrays.stream(nums).max().getAsInt();\n        return (2 * m + k - 1) * k / 2;\n    }", "target_method_signature": "maximizeSum", "source_method_signature": "maximizeSum", "source_allMS": "int maximizeSum(vector<int>& nums, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class maximizeSum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximizeSum(new int[]{3}, 2));       // Input 2\n        System.out.println(maximizeSum(new int[]{-1, -2, -3, -4}, 3)); // Input 3\n        System.out.println(maximizeSum(new int[]{1, -1, 2, 3}, 4));    // Input 4\n        System.out.println(maximizeSum(new int[]{1, 2, 3, 4}, 10));   // Input 5\n    }\n}", "all_input_output_value": "\ninput1: nums=[3], k=2\noutput1: 7\n--------\ninput2: nums=[-1, -2, -3, -4], k=3\noutput2: 0\n--------\ninput3: nums=[1, -1, 2, 3], k=4\noutput3: 18\n--------\ninput4: nums=[1, 2, 3, 4], k=10\noutput4: 85\n", "target_allMS": "public static int maximizeSum(int[] nums, int k) {", "input_output_value": ["\ninput1: nums=[3], k=2\noutput1: 7\n", "\ninput2: nums=[-1, -2, -3, -4], k=3\noutput2: 0\n", "\ninput3: nums=[1, -1, 2, 3], k=4\noutput3: 18\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> input1 = {3};\n    int k1 = 2;\n    cout << maximizeSum(input1, k1) << endl;\n\n    vector<int> input2 = {-1, -2, -3, -4};\n    int k2 = 3;\n    cout << maximizeSum(input2, k2) << endl;\n\n    vector<int> input3 = {1, -1, 2, 3};\n    int k3 = 4;\n    cout << maximizeSum(input3, k3) << endl;\n\n    vector<int> input4 = {1, 2, 3, 4};\n    int k4 = 10;\n    cout << maximizeSum(input4, k4) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###vowelStrings.cpp", "source_code_str": "int vowelStrings(vector<string>& words, int left, int right) {\n        unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n        int ans = 0;\n        for (int i = left; i <= right; ++i) {\n            const string& word = words[i];\n            if (vowels.count(word[0]) && vowels.count(word.back())) {\n                ++ans;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###vowelStrings_Test.java", "reference_code": "public static int vowelStrings(String[] words, int left, int right) {\n        Set<Character> vowels = new HashSet<Character>() {{\n            add('a');\n            add('e');\n            add('i');\n            add('o');\n            add('u');\n        }};\n        int ans = 0;\n        for (int i = left; i <= right; ++i) {\n            String word = words[i];\n            if (vowels.contains(word.charAt(0)) && vowels.contains(word.charAt(word.length() - 1))) {\n                ++ans;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "vowelStrings", "source_method_signature": "vowelStrings", "source_allMS": "int vowelStrings(vector<string>& words, int left, int right) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Set;\npublic class vowelStrings_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(vowelStrings(new String[]{\"cat\", \"dog\", \"bat\"}, 0, 2)); // Test input 2\n        System.out.println(vowelStrings(new String[]{\"apple\", \"banana\", \"orange\"}, 0, 2)); // Test input 3\n        System.out.println(vowelStrings(new String[]{\"a\", \"b\", \"i\", \"j\", \"u\"}, 1, 3)); // Test input 4\n        System.out.println(vowelStrings(new String[]{\"ex\", \"on\", \"up\"}, 0, 2)); // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: words=[\"cat\", \"dog\", \"bat\"], left=0, right=2\noutput1: 0\n--------\ninput2: words=[\"apple\", \"banana\", \"orange\"], left=0, right=2\noutput2: 2\n--------\ninput3: words=[\"a\", \"b\", \"i\", \"j\", \"u\"], left=1, right=3\noutput3: 1\n--------\ninput4: words=[\"ex\", \"on\", \"up\"], left=0, right=2\noutput4: 0\n", "target_allMS": "public static int vowelStrings(String[] words, int left, int right) {", "input_output_value": ["\ninput1: words=[\"cat\", \"dog\", \"bat\"], left=0, right=2\noutput1: 0\n", "\ninput2: words=[\"apple\", \"banana\", \"orange\"], left=0, right=2\noutput2: 2\n", "\ninput3: words=[\"a\", \"b\", \"i\", \"j\", \"u\"], left=1, right=3\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n// TOFILL\nint main() {\n    vector<string> words1 = {\"cat\", \"dog\", \"bat\"};\n    cout << vowelStrings(words1, 0, 2) << endl;\n\n    vector<string> words2 = {\"apple\", \"banana\", \"orange\"};\n    cout << vowelStrings(words2, 0, 2) << endl;\n\n    vector<string> words3 = {\"a\", \"b\", \"i\", \"j\", \"u\"};\n    cout << vowelStrings(words3, 1, 3) << endl;\n\n    vector<string> words4 = {\"ex\", \"on\", \"up\"};\n    cout << vowelStrings(words4, 0, 2) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###topStudents.cpp", "source_code_str": "vector<int> topStudents(vector<string>& positive_feedback, vector<string>& negative_feedback, vector<string>& report, vector<int>& student_id, int k) {\n        unordered_map<std::string, int> words;\n        for (const auto& word : positive_feedback) {\n            words[word] = 3;\n        }\n        for (const auto& word : negative_feedback) {\n            words[word] = -1;\n        }\n        vector<vector<int>> A;\n        for (int i = 0; i < report.size(); i++) {\n            stringstream ss; \n            string w;\n            int score = 0;\n            ss << report[i];\n            while (ss >> w) {\n                if (words.count(w)) {\n                    score += words[w];\n                }\n            }\n            A.push_back({-score, student_id[i]});\n        }\n        sort(A.begin(), A.end());\n        vector<int> top_k;\n        for (int i = 0; i < k; i++) {\n            top_k.push_back(A[i][1]);\n        }\n        return top_k;\n    }", "source_code_block": "", "target_Lan": "java###topStudents_Test.java", "reference_code": "public static List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {\n        Map<String, Integer> words = new HashMap<>();\n        for (String word : positive_feedback) {\n            words.put(word, 3);\n        }\n        for (String word : negative_feedback) {\n            words.put(word, -1);\n        }\n        int n = report.length;\n        int[] scores = new int[n];\n        int[][] A = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            int score = 0;\n            for (String word : report[i].split(\" \")) {\n                score += words.getOrDefault(word, 0);\n            }\n            A[i] = new int[]{-score, student_id[i]};\n        }\n        Arrays.sort(A, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n        List<Integer> topK = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            topK.add(A[i][1]);\n        }\n        return topK;\n    }", "target_method_signature": "topStudents", "source_method_signature": "topStudents", "source_allMS": "vector<int> topStudents(vector<string>& positive_feedback, vector<string>& negative_feedback, vector<string>& report, vector<int>& student_id, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <sstream>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.*;\npublic class topStudents_Test {\n// TOFILL\n    public static void main(String[] args) {\n        String[] positive_feedback1 = {\"great\", \"excellent\"};\n        String[] negative_feedback1 = {\"poor\", \"bad\"};\n        String[] report1 = {\"great work\", \"excellent performance\", \"poor job\", \"good effort\"};\n        int[] student_id1 = {1, 2, 3, 4};\n        int k1 = 2;\n        System.out.println(topStudents(positive_feedback1, negative_feedback1, report1, student_id1, k1));\n\n        String[] positive_feedback2 = {\"awesome\"};\n        String[] negative_feedback2 = {\"terrible\"};\n        String[] report2 = {\"awesome task\", \"terrible error\", \"good\"};\n        int[] student_id2 = {5, 6, 7};\n        int k2 = 1;\n        System.out.println(topStudents(positive_feedback2, negative_feedback2, report2, student_id2, k2));\n\n        String[] positive_feedback3 = {\"superb\"};\n        String[] negative_feedback3 = {\"subpar\"};\n        String[] report3 = {\"superb detail\", \"bad quality\", \"average effort\"};\n        int[] student_id3 = {8, 9, 10};\n        int k3 = 3;\n        System.out.println(topStudents(positive_feedback3, negative_feedback3, report3, student_id3, k3));\n\n        String[] positive_feedback4 = {\"amazing\", \"outstanding\"};\n        String[] negative_feedback4 = {\"mediocre\"};\n        String[] report4 = {\"mediocre work\", \"amazing results\", \"outstanding performance\", \"mediocre effort\"};\n        int[] student_id4 = {11, 12, 13, 14};\n        int k4 = 2;\n        System.out.println(topStudents(positive_feedback4, negative_feedback4, report4, student_id4, k4));\n\n        String[] positive_feedback5 = {\"fantastic\"};\n        String[] negative_feedback5 = {\"awful\"};\n        String[] report5 = {\"fantastic job\", \"excellent\", \"awful mistake\"};\n        int[] student_id5 = {15, 16, 17};\n        int k5 = 4;\n    }\n}", "all_input_output_value": "\ninput1: positive_feedback=[\"great\", \"excellent\"], negative_feedback=[\"poor\", \"bad\"], report=[\"great work\", \"excellent performance\", \"poor job\", \"good effort\"], student_id=[1, 2, 3, 4], k=2\noutput1: [1, 2]\n--------\ninput2: positive_feedback=[\"awesome\"], negative_feedback=[\"terrible\"], report=[\"awesome task\", \"terrible error\", \"good\"], student_id=[5, 6, 7], k=1\noutput2: [5]\n--------\ninput3: positive_feedback=[\"superb\"], negative_feedback=[\"subpar\"], report=[\"superb detail\", \"bad quality\", \"average effort\"], student_id=[8, 9, 10], k=3\noutput3: [8, 9, 10]\n--------\ninput4: positive_feedback=[\"amazing\", \"outstanding\"], negative_feedback=[\"mediocre\"], report=[\"mediocre work\", \"amazing results\", \"outstanding performance\", \"mediocre effort\"], student_id=[11, 12, 13, 14], k=2\noutput4: [12, 13]\n", "target_allMS": "public static List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {", "input_output_value": ["\ninput1: positive_feedback=[\"great\", \"excellent\"], negative_feedback=[\"poor\", \"bad\"], report=[\"great work\", \"excellent performance\", \"poor job\", \"good effort\"], student_id=[1, 2, 3, 4], k=2\noutput1: [1, 2]\n", "\ninput2: positive_feedback=[\"awesome\"], negative_feedback=[\"terrible\"], report=[\"awesome task\", \"terrible error\", \"good\"], student_id=[5, 6, 7], k=1\noutput2: [5]\n", "\ninput3: positive_feedback=[\"superb\"], negative_feedback=[\"subpar\"], report=[\"superb detail\", \"bad quality\", \"average effort\"], student_id=[8, 9, 10], k=3\noutput3: [8, 9, 10]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <sstream>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <sstream>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<string> positive_feedback1 = {\"great\", \"excellent\"};\n    vector<string> negative_feedback1 = {\"poor\", \"bad\"};\n    vector<string> report1 = {\"great work\", \"excellent performance\", \"poor job\", \"good effort\"};\n    vector<int> student_id1 = {1, 2, 3, 4};\n    int k1 = 2;\n\n    vector<int> top1 = topStudents(positive_feedback1, negative_feedback1, report1, student_id1, k1);\n    for(int id : top1) {\n        cout << id << \" \";\n    }\n    cout << endl;\n\n    vector<string> positive_feedback2 = {\"awesome\"};\n    vector<string> negative_feedback2 = {\"terrible\"};\n    vector<string> report2 = {\"awesome task\", \"terrible error\", \"good\"};\n    vector<int> student_id2 = {5, 6, 7};\n    int k2 = 1;\n\n    vector<int> top2 = topStudents(positive_feedback2, negative_feedback2, report2, student_id2, k2);\n    for(int id : top2) {\n        cout << id << \" \";\n    }\n    cout << endl;\n\n    vector<string> positive_feedback3 = {\"superb\"};\n    vector<string> negative_feedback3 = {\"subpar\"};\n    vector<string> report3 = {\"superb detail\", \"bad quality\", \"average effort\"};\n    vector<int> student_id3 = {8, 9, 10};\n    int k3 = 3;\n\n    vector<int> top3 = topStudents(positive_feedback3, negative_feedback3, report3, student_id3, k3);\n    for(int id : top3) {\n        cout << id << \" \";\n    }\n    cout << endl;\n\n    vector<string> positive_feedback4 = {\"amazing\", \"outstanding\"};\n    vector<string> negative_feedback4 = {\"mediocre\"};\n    vector<string> report4 = {\"mediocre work\", \"amazing results\", \"outstanding performance\", \"mediocre effort\"};\n    vector<int> student_id4 = {11, 12, 13, 14};\n    int k4 = 2;\n\n    vector<int> top4 = topStudents(positive_feedback4, negative_feedback4, report4, student_id4, k4);\n    for(int id : top4) {\n        cout << id << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###passThePillow.cpp", "source_code_str": "    int passThePillow(int n, int time) {\n        time %= (n - 1) * 2;\n        return time < n ? time + 1 : n * 2 - time - 1;\n    }", "source_code_block": "", "target_Lan": "java###passThePillow_Test.java", "reference_code": "public static int passThePillow(int n, int time) {\n        time %= (n - 1) * 2;\n        return time < n ? time + 1 : n * 2 - time - 1;\n    }", "target_method_signature": "passThePillow", "source_method_signature": "passThePillow", "source_allMS": "    int passThePillow(int n, int time) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class passThePillow_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(passThePillow(2, 1));\n        System.out.println(passThePillow(3, 5));\n        System.out.println(passThePillow(5, 10));\n        System.out.println(passThePillow(4, 15));\n    }\n}", "all_input_output_value": "\ninput1: n=2, time=1\noutput1: 2\n--------\ninput2: n=3, time=5\noutput2: 2\n--------\ninput3: n=5, time=10\noutput3: 3\n--------\ninput4: n=4, time=15\noutput4: 4\n", "target_allMS": "public static int passThePillow(int n, int time) {", "input_output_value": ["\ninput1: n=2, time=1\noutput1: 2\n", "\ninput2: n=3, time=5\noutput2: 2\n", "\ninput3: n=5, time=10\noutput3: 3\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <iostream>\n// TOFILL\nint main() {\n    cout << passThePillow(2, 1) << endl;\n    cout << passThePillow(3, 5) << endl;\n    cout << passThePillow(5, 10) << endl;\n    cout << passThePillow(4, 15) << endl;\n}"}
{"source_Lan": "cpp###collectTheCoins.cpp", "source_code_str": "int collectTheCoins(vector<int>& coins, vector<vector<int>>& edges) {\n        int n = coins.size();\n        vector<vector<int>> g(n);\n        vector<int> degree(n);\n        for (const auto& edge: edges) {\n            int x = edge[0], y = edge[1];\n            g[x].push_back(y);\n            g[y].push_back(x);\n            ++degree[x];\n            ++degree[y];\n        }\n        int rest = n;\n        {\n            \n            queue<int> q;\n            for (int i = 0; i < n; ++i) {\n                if (degree[i] == 1 && !coins[i]) {\n                    q.push(i);\n                }\n            }\n            while (!q.empty()) {\n                int u = q.front();\n                --degree[u];\n                q.pop();\n                --rest;\n                for (int v: g[u]) {\n                    --degree[v];\n                    if (degree[v] == 1 && !coins[v]) {\n                        q.push(v);\n                    }\n                }\n            }\n        }\n        {\n            \n            for (int _ = 0; _ < 2; ++_) {\n                queue<int> q;\n                for (int i = 0; i < n; ++i) {\n                    if (degree[i] == 1) {\n                        q.push(i);\n                    }\n                }\n                while (!q.empty()) {\n                    int u = q.front();\n                    --degree[u];\n                    q.pop();\n                    --rest;\n                    for (int v: g[u]) {\n                        --degree[v];\n                    }\n                }\n            }\n        }\n        return rest == 0 ? 0 : (rest - 1) * 2;\n    }", "source_code_block": "", "target_Lan": "java###collectTheCoins_Test.java", "reference_code": "public static int collectTheCoins(int[] coins, int[][] edges) {\n        int n = coins.length;\n        List<Integer>[] g = new List[n];\n        for (int i = 0; i < n; ++i) {\n            g[i] = new ArrayList<Integer>();\n        }\n        int[] degree = new int[n];\n        for (int[] edge : edges) {\n            int x = edge[0], y = edge[1];\n            g[x].add(y);\n            g[y].add(x);\n            ++degree[x];\n            ++degree[y];\n        }\n        int rest = n;\n        \n        Queue<Integer> queue = new ArrayDeque<Integer>();\n        for (int i = 0; i < n; ++i) {\n            if (degree[i] == 1 && coins[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            --degree[u];\n            --rest;\n            for (int v : g[u]) {\n                --degree[v];\n                if (degree[v] == 1 && coins[v] == 0) {\n                    queue.offer(v);\n                }\n            }\n        }\n        \n        for (int x = 0; x < 2; ++x) {\n            queue = new ArrayDeque<Integer>();\n            for (int i = 0; i < n; ++i) {\n                if (degree[i] == 1) {\n                    queue.offer(i);\n                }\n            }\n            while (!queue.isEmpty()) {\n                int u = queue.poll();\n                --degree[u];\n                --rest;\n                for (int v : g[u]) {\n                    --degree[v];\n                }\n            }\n        }\n        return rest == 0 ? 0 : (rest - 1) * 2;\n    }", "target_method_signature": "collectTheCoins", "source_method_signature": "collectTheCoins", "source_allMS": "int collectTheCoins(vector<int>& coins, vector<vector<int>>& edges) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Queue;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Queue;\nimport java.util.*;\npublic class collectTheCoins_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(collectTheCoins(new int[]{0, 0, 0}, new int[][]{{0, 1}, {1, 2}})); // Test input 1\n        System.out.println(collectTheCoins(new int[]{1, 0, 0, 1}, new int[][]{{0, 1}, {1, 2}, {0, 3}})); // Test input 2\n        System.out.println(collectTheCoins(new int[]{0, 1, 0, 0}, new int[][]{{0, 1}, {0, 2}, {0, 3}})); // Test input 3\n        System.out.println(collectTheCoins(new int[]{1, 1, 1}, new int[][]{{0, 1}, {1, 2}})); // Test input 4\n        System.out.println(collectTheCoins(new int[]{0, 0, 0, 0, 1}, new int[][]{{0, 1}, {0, 2}, {0, 3}, {0, 4}})); // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: coins=[0, 0, 0], edges=[[0, 1], [1, 2]]\noutput1: 0\n--------\ninput2: coins=[1, 0, 0, 1], edges=[[0, 1], [1, 2], [0, 3]]\noutput2: 0\n--------\ninput3: coins=[0, 1, 0, 0], edges=[[0, 1], [0, 2], [0, 3]]\noutput3: 0\n--------\ninput4: coins=[1, 1, 1], edges=[[0, 1], [1, 2]]\noutput4: 0\n--------\ninput5: coins=[0, 0, 0, 0, 1], edges=[[0, 1], [0, 2], [0, 3], [0, 4]]\noutput5: 0\n", "target_allMS": "public static int collectTheCoins(int[] coins, int[][] edges) {", "input_output_value": ["\ninput1: coins=[0, 0, 0], edges=[[0, 1], [1, 2]]\noutput1: 0\n", "\ninput2: coins=[1, 0, 0, 1], edges=[[0, 1], [1, 2], [0, 3]]\noutput2: 0\n", "\ninput3: coins=[0, 1, 0, 0], edges=[[0, 1], [0, 2], [0, 3]]\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <iostream>\n#include <vector>\n#include <queue>\n// TOFILL\nint main() {\n    vector<int> input1_coins = {0, 0, 0};\n    vector<vector<int>> input1_edges = {{0, 1}, {1, 2}};\n    cout << collectTheCoins(input1_coins, input1_edges) << endl;\n\n    vector<int> input2_coins = {1, 0, 0, 1};\n    vector<vector<int>> input2_edges = {{0, 1}, {1, 2}, {0, 3}};\n    cout << collectTheCoins(input2_coins, input2_edges) << endl;\n\n    vector<int> input3_coins = {0, 1, 0, 0};\n    vector<vector<int>> input3_edges = {{0, 1}, {0, 2}, {0, 3}};\n    cout << collectTheCoins(input3_coins, input3_edges) << endl;\n\n    vector<int> input4_coins = {1, 1, 1};\n    vector<vector<int>> input4_edges = {{0, 1}, {1, 2}};\n    cout << collectTheCoins(input4_coins, input4_edges) << endl;\n\n    vector<int> input5_coins = {0, 0, 0, 0, 1};\n    vector<vector<int>> input5_edges = {{0, 1}, {0, 2}, {0, 3}, {0, 4}};\n    cout << collectTheCoins(input5_coins, input5_edges) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###findDelayedArrivalTime.cpp", "source_code_str": "    int findDelayedArrivalTime(int arrivalTime, int delayedTime) {\n        return (arrivalTime + delayedTime) % 24;\n    }", "source_code_block": "", "target_Lan": "java###findDelayedArrivalTime_Test.java", "reference_code": "public static int findDelayedArrivalTime(int arrivalTime, int delayedTime) {\n        return (arrivalTime + delayedTime) % 24;\n    }", "target_method_signature": "findDelayedArrivalTime", "source_method_signature": "findDelayedArrivalTime", "source_allMS": "    int findDelayedArrivalTime(int arrivalTime, int delayedTime) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.*;\npublic class findDelayedArrivalTime_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findDelayedArrivalTime(10, 5));   // Normal case: 10 + 5 = 15\n        System.out.println(findDelayedArrivalTime(23, 2));   // Boundary condition: 23 + 2 = 1(next day)\n        System.out.println(findDelayedArrivalTime(1, 24));   // Overflow: 1 + 24 = 1(full cycle)\n        System.out.println(findDelayedArrivalTime(0, -1));   // Underflow: 0 +(-1) = 23(previous day)\n        System.out.println(findDelayedArrivalTime(15, 0));   // No delay: 15 + 0 = 15\n    }\n}", "all_input_output_value": "\ninput1: arrivalTime=10, delayedTime=5\noutput1: 15\n--------\ninput2: arrivalTime=23, delayedTime=2\noutput2: 1\n--------\ninput3: arrivalTime=1, delayedTime=24\noutput3: 1\n--------\ninput4: arrivalTime=0, delayedTime=-1\noutput4: -1\n--------\ninput5: arrivalTime=15, delayedTime=0\noutput5: 15\n", "target_allMS": "public static int findDelayedArrivalTime(int arrivalTime, int delayedTime) {", "input_output_value": ["\ninput1: arrivalTime=10, delayedTime=5\noutput1: 15\n", "\ninput2: arrivalTime=23, delayedTime=2\noutput2: 1\n", "\ninput3: arrivalTime=1, delayedTime=24\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <iostream>\n// TOFILL\nint main() {\n    cout << findDelayedArrivalTime(10, 5) << endl;  // Test input 1\n    cout << findDelayedArrivalTime(23, 2) << endl;  // Test input 2\n    cout << findDelayedArrivalTime(1, 24) << endl;  // Test input 3\n    cout << findDelayedArrivalTime(0, -1) << endl;  // Test input 4\n    cout << findDelayedArrivalTime(15, 0) << endl;  // Test input 5\n}"}
{"source_Lan": "cpp###checkIfPrerequisite.cpp", "source_code_str": "vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {\n        vector<vector<int>> g(numCourses);\n        vector<int> indgree(numCourses, 0);\n        vector<vector<bool>> isPre(numCourses, vector<bool>(numCourses, false));\n        for (auto& p : prerequisites) {\n            ++indgree[p[1]];\n            g[p[0]].push_back(p[1]);\n        }\n        queue<int> q;\n        for (int i = 0; i < numCourses; ++i) {\n            if (indgree[i] == 0) {\n                q.push(i);\n            }\n        }\n        while (!q.empty()) {\n            auto cur = q.front();\n            q.pop();\n            for (auto& ne : g[cur]) {\n                isPre[cur][ne] = true;\n                for (int i = 0; i < numCourses; ++i) {\n                    isPre[i][ne] = isPre[i][ne] | isPre[i][cur];\n                }\n                --indgree[ne];\n                if (indgree[ne] == 0) {\n                    q.push(ne);\n                }\n            }\n        }\n        vector<bool> res;\n        for (auto& query : queries) {\n            res.push_back(isPre[query[0]][query[1]]);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###checkIfPrerequisite_Test.java", "reference_code": "    public static List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {\n        List<Integer>[] g = new List[numCourses];\n        for (int i = 0; i < numCourses; i++) {\n            g[i] = new ArrayList<Integer>();\n        }\n        int[] indgree = new int[numCourses];\n        boolean[][] isPre = new boolean[numCourses][numCourses];\n        for (int[] p : prerequisites) {\n            ++indgree[p[1]];\n            g[p[0]].add(p[1]);\n        }\n        Queue<Integer> queue = new ArrayDeque<Integer>();\n        for (int i = 0; i < numCourses; ++i) {\n            if (indgree[i] == 0) {\n                queue.offer(i);\n            }\n        }\n        while (!queue.isEmpty()) {\n            int cur = queue.poll();\n            for (int ne : g[cur]) {\n                isPre[cur][ne] = true;\n                for (int i = 0; i < numCourses; ++i) {\n                    isPre[i][ne] = isPre[i][ne] | isPre[i][cur];\n                }\n                --indgree[ne];\n                if (indgree[ne] == 0) {\n                    queue.offer(ne);\n                }\n            }\n        }\n        List<Boolean> res = new ArrayList<Boolean>();\n        for (int[] query : queries) {\n            res.add(isPre[query[0]][query[1]]);\n        }\n        return res;\n    }", "target_method_signature": "checkIfPrerequisite", "source_method_signature": "checkIfPrerequisite", "source_allMS": "vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n    // Test Input 5(for simplicity, using only a representative number of courses and queries)", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Queue;\nimport java.util.ArrayDeque;\npublic class checkIfPrerequisite_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1\n        int numCourses1 = 4;\n        int[][] prerequisites1 = {{1, 0}, {2, 1}, {3, 2}};\n        int[][] queries1 = {{0, 1}, {1, 2}, {2, 3}, {0, 3}, {3, 0}};\n        System.out.println(checkIfPrerequisite(numCourses1, prerequisites1, queries1));\n\n        // Test input 2\n        int numCourses2 = 3;\n        int[][] prerequisites2 = {{0, 1}};\n        int[][] queries2 = {{0, 1}, {1, 0}, {0, 2}, {2, 1}, {1, 2}};\n        System.out.println(checkIfPrerequisite(numCourses2, prerequisites2, queries2));\n\n        // Test input 3\n        int numCourses3 = 5;\n        int[][] prerequisites3 = {{0, 1}, {0, 2}, {2, 3}, {1, 3}, {3, 4}};\n        int[][] queries3 = {{0, 3}, {1, 4}, {4, 0}, {2, 0}, {3, 1}};\n        System.out.println(checkIfPrerequisite(numCourses3, prerequisites3, queries3));\n\n        // Test input 4\n        int numCourses4 = 2;\n        int[][] prerequisites4 = {};\n        int[][] queries4 = {{0, 1}, {1, 0}};\n        System.out.println(checkIfPrerequisite(numCourses4, prerequisites4, queries4));\n\n        // Test input 5\n        int numCourses5 = 0;\n        int[][] prerequisites5 = {};\n        int[][] queries5 = {};\n        System.out.println(checkIfPrerequisite(numCourses5, prerequisites5, queries5));\n    }\n}", "all_input_output_value": "\ninput1: numCourses=4, prerequisites=[[1, 0], [2, 1], [3, 2]], queries=[[0, 1], [1, 2], [2, 3], [0, 3], [3, 0]]\noutput1: [false, false, false, false, true]\n--------\ninput2: numCourses=3, prerequisites=[[0, 1]], queries=[[0, 1], [1, 0], [0, 2], [2, 1], [1, 2]]\noutput2: [true, false, false, false, false]\n--------\ninput3: numCourses=5, prerequisites=[[0, 1], [0, 2], [2, 3], [1, 3], [3, 4]], queries=[[0, 3], [1, 4], [4, 0], [2, 0], [3, 1]]\noutput3: [true, true, false, false, false]\n--------\ninput4: numCourses=2, prerequisites=[], queries=[[0, 1], [1, 0]]\noutput4: [false, false]\n--------\ninput5: numCourses=0, prerequisites=[], queries=[]\noutput5: []\n", "target_allMS": "    public static List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {", "input_output_value": ["\ninput1: numCourses=4, prerequisites=[[1, 0], [2, 1], [3, 2]], queries=[[0, 1], [1, 2], [2, 3], [0, 3], [3, 0]]\noutput1: [false, false, false, false, true]\n", "\ninput2: numCourses=3, prerequisites=[[0, 1]], queries=[[0, 1], [1, 0], [0, 2], [2, 1], [1, 2]]\noutput2: [true, false, false, false, false]\n", "\ninput3: numCourses=5, prerequisites=[[0, 1], [0, 2], [2, 3], [1, 3], [3, 4]], queries=[[0, 3], [1, 4], [4, 0], [2, 0], [3, 1]]\noutput3: [true, true, false, false, false]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n    // Test Input 5(for simplicity, using only a representative number of courses and queries)\n#include <iostream>\n#include <vector>\n#include <queue>\n// TOFILL\nint main() {\n    vector<vector<int>> prerequisites1 = {{1, 0}, {2, 1}, {3, 2}};\n    vector<vector<int>> queries1 = {{0, 1}, {1, 2}, {2, 3}, {0, 3}, {3, 0}};\n    vector<bool> result1 = checkIfPrerequisite(4, prerequisites1, queries1);\n    for(bool b : result1) cout << b << \" \";\n    cout << endl;\n\n    vector<vector<int>> prerequisites2 = {{0, 1}};\n    vector<vector<int>> queries2 = {{0, 1}, {1, 0}, {0, 2}, {2, 1}, {1, 2}};\n    vector<bool> result2 = checkIfPrerequisite(3, prerequisites2, queries2);\n    for(bool b : result2) cout << b << \" \";\n    cout << endl;\n\n    vector<vector<int>> prerequisites3 = {{0, 1}, {0, 2}, {2, 3}, {1, 3}, {3, 4}};\n    vector<vector<int>> queries3 = {{0, 3}, {1, 4}, {4, 0}, {2, 0}, {3, 1}};\n    vector<bool> result3 = checkIfPrerequisite(5, prerequisites3, queries3);\n    for(bool b : result3) cout << b << \" \";\n    cout << endl;\n\n    vector<vector<int>> prerequisites4 = {};\n    vector<vector<int>> queries4 = {{0, 1}, {1, 0}};\n    vector<bool> result4 = checkIfPrerequisite(2, prerequisites4, queries4);\n    for(bool b : result4) cout << b << \" \";\n    cout << endl;\n\n    vector<vector<int>> prerequisites5 = {};\n    vector<vector<int>> queries5 = {};\n    vector<bool> result5 = checkIfPrerequisite(0, prerequisites5, queries5);\n    for(bool b : result5) cout << b << \" \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###numFactoredBinaryTrees.cpp", "source_code_str": "int numFactoredBinaryTrees(vector<int>& arr) {\n        sort(arr.begin(), arr.end());\n        int n = arr.size();\n        vector<long long> dp(n);\n        long long res = 0, mod = 1e9 + 7;\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            for (int left = 0, right = i - 1; left <= right; left++) {\n                while (right >= left && (long long)arr[left] * arr[right] > arr[i]) {\n                    right--;\n                }\n                if (right >= left && (long long)arr[left] * arr[right] == arr[i]) {\n                    if (right != left) {\n                        dp[i] = (dp[i] + dp[left] * dp[right] * 2) % mod;\n                    } else {\n                        dp[i] = (dp[i] + dp[left] * dp[right]) % mod;\n                    }\n                }\n            }\n            res = (res + dp[i]) % mod;\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###numFactoredBinaryTrees_Test.java", "reference_code": "public static int numFactoredBinaryTrees(int[] arr) {\n        Arrays.sort(arr);\n        int n = arr.length;\n        long[] dp = new long[n];\n        long res = 0, mod = 1000000007;\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            for (int left = 0, right = i - 1; left <= right; left++) {\n                while (right >= left && (long) arr[left] * arr[right] > arr[i]) {\n                    right--;\n                }\n                if (right >= left && (long) arr[left] * arr[right] == arr[i]) {\n                    if (right != left) {\n                        dp[i] = (dp[i] + dp[left] * dp[right] * 2) % mod;\n                    } else {\n                        dp[i] = (dp[i] + dp[left] * dp[right]) % mod;\n                    }\n                }\n            }\n            res = (res + dp[i]) % mod;\n        }\n        return (int) res;\n    }", "target_method_signature": "numFactoredBinaryTrees", "source_method_signature": "numFactoredBinaryTrees", "source_allMS": "int numFactoredBinaryTrees(vector<int>& arr) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class numFactoredBinaryTrees_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] testInput1 = {};\n        int[] testInput2 = {2, 4, 8};\n        int[] testInput3 = {3, 9, 27};\n        int[] testInput4 = {1, 2, 4, 8};\n        int[] testInput5 = {10, 20, 100};\n        \n        System.out.println(numFactoredBinaryTrees(testInput1)); // Expecting: 1\n        System.out.println(numFactoredBinaryTrees(testInput2)); // Expecting: 7\n        System.out.println(numFactoredBinaryTrees(testInput3)); // Expecting: 5\n        System.out.println(numFactoredBinaryTrees(testInput4)); // Expecting: 15\n        System.out.println(numFactoredBinaryTrees(testInput5)); // Expecting: 3\n    }\n}", "all_input_output_value": "\ninput1: arr=[]\noutput1: 0\n--------\ninput2: arr=[2, 4, 8]\noutput2: 8\n--------\ninput3: arr=[3, 9, 27]\noutput3: 8\n--------\ninput4: arr=[1, 2, 4, 8]\noutput4: 9\n--------\ninput5: arr=[10, 20, 100]\noutput5: 4\n", "target_allMS": "public static int numFactoredBinaryTrees(int[] arr) {", "input_output_value": ["\ninput1: arr=[]\noutput1: 0\n", "\ninput2: arr=[2, 4, 8]\noutput2: 8\n", "\ninput3: arr=[3, 9, 27]\noutput3: 8\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    vector<int> input2 = {2, 4, 8};\n    vector<int> input3 = {3, 9, 27};\n    vector<int> input4 = {1, 2, 4, 8};\n    vector<int> input5 = {10, 20, 100};\n    \n    cout << numFactoredBinaryTrees(input1) << endl;  // Test input 1\n    cout << numFactoredBinaryTrees(input2) << endl;  // Test input 2\n    cout << numFactoredBinaryTrees(input3) << endl;  // Test input 3\n    cout << numFactoredBinaryTrees(input4) << endl;  // Test input 4\n    cout << numFactoredBinaryTrees(input5) << endl;  // Test input 5\n}"}
{"source_Lan": "cpp###maxAbsoluteSum.cpp", "source_code_str": "int maxAbsoluteSum(vector<int>& nums) {\n        int positiveMax = 0, negativeMin = 0;\n        int positiveSum = 0, negativeSum = 0;\n        for (int num : nums) {\n            positiveSum += num;\n            positiveMax = max(positiveMax, positiveSum);\n            positiveSum = max(0, positiveSum);\n            negativeSum += num;\n            negativeMin = min(negativeMin, negativeSum);\n            negativeSum = min(0, negativeSum);\n        }\n        return max(positiveMax, -negativeMin);\n    }", "source_code_block": "", "target_Lan": "java###maxAbsoluteSum_Test.java", "reference_code": "public static int maxAbsoluteSum(int[] nums) {\n        int positiveMax = 0, negativeMin = 0;\n        int positiveSum = 0, negativeSum = 0;\n        for (int num : nums) {\n            positiveSum += num;\n            positiveMax = Math.max(positiveMax, positiveSum);\n            positiveSum = Math.max(0, positiveSum);\n            negativeSum += num;\n            negativeMin = Math.min(negativeMin, negativeSum);\n            negativeSum = Math.min(0, negativeSum);\n        }\n        return Math.max(positiveMax, -negativeMin);\n    }", "target_method_signature": "maxAbsoluteSum", "source_method_signature": "maxAbsoluteSum", "source_allMS": "int maxAbsoluteSum(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class maxAbsoluteSum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxAbsoluteSum(new int[]{})); // input1: []\n        System.out.println(maxAbsoluteSum(new int[]{1, 2, -3, 4, -1})); // input2: [1, 2, -3, 4, -1]\n        System.out.println(maxAbsoluteSum(new int[]{-5, -2, -3, -1})); // input3: [-5, -2, -3, -1]\n        System.out.println(maxAbsoluteSum(new int[]{3, 5, 0, -2, 1})); // input4: [3, 5, 0, -2, 1]\n        System.out.println(maxAbsoluteSum(new int[]{0, 0, 0, 0})); // input5: [0, 0, 0, 0]\n    }\n}", "all_input_output_value": "\ninput1: nums=[]\noutput1: 0\n--------\ninput2: nums=[1, 2, -3, 4, -1]\noutput2: 4\n--------\ninput3: nums=[-5, -2, -3, -1]\noutput3: 11\n--------\ninput4: nums=[3, 5, 0, -2, 1]\noutput4: 8\n--------\ninput5: nums=[0, 0, 0, 0]\noutput5: 0\n", "target_allMS": "public static int maxAbsoluteSum(int[] nums) {", "input_output_value": ["\ninput1: nums=[]\noutput1: 0\n", "\ninput2: nums=[1, 2, -3, 4, -1]\noutput2: 4\n", "\ninput3: nums=[-5, -2, -3, -1]\noutput3: 11\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> test1 = {};\n    vector<int> test2 = {1, 2, -3, 4, -1};\n    vector<int> test3 = {-5, -2, -3, -1};\n    vector<int> test4 = {3, 5, 0, -2, 1};\n    vector<int> test5 = {0, 0, 0, 0};\n\n    cout << maxAbsoluteSum(test1) << endl; // Test input 1\n    cout << maxAbsoluteSum(test2) << endl; // Test input 2\n    cout << maxAbsoluteSum(test3) << endl; // Test input 3\n    cout << maxAbsoluteSum(test4) << endl; // Test input 4\n    cout << maxAbsoluteSum(test5) << endl; // Test input 5\n    \n    return 0;\n}"}
{"source_Lan": "cpp###countOfPairs.cpp", "source_code_str": "int countOfPairs(vector<int>& nums) {\n        const int MOD = 1e9 + 7;\n        int m = nums.size();\n        int n = *max_element(nums.begin(), nums.end());\n        vector<int> f(n + 1);\n        \n        for (int v = 0; v <= nums[0]; ++v)\n            f[v] = 1;\n        vector<int> preSums;\n        \n        for (int i = 1; i <= m; ++i) {\n            \n            preSums.clear();\n            int preSum = 0;\n            for(int v : f){\n                preSum += v;\n                preSum %= MOD; \n                preSums.push_back(preSum);\n            }\n            \n            if (i == m) return preSums.back();\n            \n            for (int j = 0; j <= nums[i]; ++j) {\n                int ceil = min(j, nums[i-1] - nums[i] + j);\n                if (ceil >= 0)\n                    f[j] = preSums[ceil];\n                else \n                    f[j] = 0;\n            }\n            for (int j = nums[i] + 1; j < f.size(); ++j) {\n                f[j] = 0;\n            }\n        }\n        \n        return 0;\n    }", "source_code_block": "", "target_Lan": "java###countOfPairs_Test.java", "reference_code": "public static int countOfPairs(int[] nums) {\n        final int MOD = (int)(1e9 + 7);\n        int m = nums.length;\n        int n = Arrays.stream(nums).max().getAsInt();\n        int[] f = new int[n + 1];\n        \n        for (int v = 0; v <= nums[0]; ++v) f[v] = 1;\n        List<Integer> preSums = new ArrayList<>();\n        \n        for (int i = 1; i <= m; ++i) {\n            \n            preSums.clear();\n            int preSum = 0;\n            for(int v : f){\n                preSum += v;\n                preSum %= MOD; \n                preSums.add(preSum);\n            }\n            \n            if (i == m) return preSums.get(preSums.size() - 1);\n            \n            for (int j = 0; j <= nums[i]; ++j) {\n                int ceil = Math.min(j, nums[i-1] - nums[i] + j);\n                if (ceil >= 0)\n                    f[j] = preSums.get(ceil);\n                else \n                    f[j] = 0;\n            }\n            for (int j = nums[i] + 1; j < f.length; ++j) {\n                f[j] = 0;\n            }\n        }\n        \n        return 0;\n    }", "target_method_signature": "countOfPairs", "source_method_signature": "countOfPairs", "source_allMS": "int countOfPairs(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.*;\npublic class countOfPairs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(countOfPairs(new int[]{0}));           // Test input: nums=[0]\n        System.out.println(countOfPairs(new int[]{1, 2}));        // Test input: nums=[1, 2]\n        System.out.println(countOfPairs(new int[]{3, 3, 3}));     // Test input: nums=[3, 3, 3]\n        System.out.println(countOfPairs(new int[]{0, 1, 2, 3, 4})); // Test input: nums=[0, 1, 2, 3, 4]\n    }\n}", "all_input_output_value": "\ninput1: nums=[0]\noutput1: 1\n--------\ninput2: nums=[1, 2]\noutput2: 3\n--------\ninput3: nums=[3, 3, 3]\noutput3: 20\n--------\ninput4: nums=[0, 1, 2, 3, 4]\noutput4: 1\n", "target_allMS": "public static int countOfPairs(int[] nums) {", "input_output_value": ["\ninput1: nums=[0]\noutput1: 1\n", "\ninput2: nums=[1, 2]\noutput2: 3\n", "\ninput3: nums=[3, 3, 3]\noutput3: 20\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> input1 = {0};\n    vector<int> input2 = {1, 2};\n    vector<int> input3 = {3, 3, 3};\n    vector<int> input4 = {0, 1, 2, 3, 4};\n\n    cout << countOfPairs(input1) << endl;\n    cout << countOfPairs(input2) << endl;\n    cout << countOfPairs(input3) << endl;\n    cout << countOfPairs(input4) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###winningPlayerCount.cpp", "source_code_str": "int winningPlayerCount(int n, vector<vector<int>>& pick) {\n        vector<array<int, 11>> cnts(n);\n        for (auto& p : pick) {\n            cnts[p[0]][p[1]]++;\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int c : cnts[i]) {\n                if (c > i) {\n                    ans++;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###winningPlayerCount_Test.java", "reference_code": "public static int winningPlayerCount(int n, int[][] pick) {\n        int[][] cnts = new int[n][11];\n        for (int[] p : pick) {\n            cnts[p[0]][p[1]]++;\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int c : cnts[i]) {\n                if (c > i) {\n                    ans++;\n                    break;\n                }\n            }\n        }\n        return ans;\n    }", "target_method_signature": "winningPlayerCount", "source_method_signature": "winningPlayerCount", "source_allMS": "int winningPlayerCount(int n, vector<vector<int>>& pick) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <array>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class winningPlayerCount_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(winningPlayerCount(3, new int[][]{{0,0},{1,0},{2,0}})); \n        System.out.println(winningPlayerCount(3, new int[][]{{0,1},{1,1},{2,1}})); \n        System.out.println(winningPlayerCount(5, new int[][]{{0,1},{1,2},{2,3},{3,2},{4,3}})); \n        System.out.println(winningPlayerCount(4, new int[][]{{0,2},{1,3},{2,1},{3,0}})); \n        System.out.println(winningPlayerCount(6, new int[][]{{0,1},{1,1},{2,1},{2,10},{3,1},{4,0},{5,5}})); \n    }\n}", "all_input_output_value": "\ninput1: n=3, pick={{0,0},{1,0},{2,0}}\noutput1: 1\n--------\ninput2: n=3, pick={{0,1},{1,1},{2,1}}\noutput2: 1\n--------\ninput3: n=5, pick={{0,1},{1,2},{2,3},{3,2},{4,3}}\noutput3: 1\n--------\ninput4: n=4, pick={{0,2},{1,3},{2,1},{3,0}}\noutput4: 1\n--------\ninput5: n=6, pick={{0,1},{1,1},{2,1},{2,10},{3,1},{4,0},{5,5}}\noutput5: 1\n", "target_allMS": "public static int winningPlayerCount(int n, int[][] pick) {", "input_output_value": ["\ninput1: n=3, pick={{0,0},{1,0},{2,0}}\noutput1: 1\n", "\ninput2: n=3, pick={{0,1},{1,1},{2,1}}\noutput2: 1\n", "\ninput3: n=5, pick={{0,1},{1,2},{2,3},{3,2},{4,3}}\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <array>\n#include <iostream>\n#include <vector>\n#include <array>\n// TOFILL\nint main() {\n    vector<vector<int>> pick1 = {{0,0},{1,0},{2,0}};\n    vector<vector<int>> pick2 = {{0,1},{1,1},{2,1}};\n    vector<vector<int>> pick3 = {{0,1},{1,2},{2,3},{3,2},{4,3}};\n    vector<vector<int>> pick4 = {{0,2},{1,3},{2,1},{3,0}};\n    vector<vector<int>> pick5 = {{0,1},{1,1},{2,1},{2,10},{3,1},{4,0},{5,5}};\n\n    cout << winningPlayerCount(3, pick1) << endl;\n    cout << winningPlayerCount(3, pick2) << endl;\n    cout << winningPlayerCount(5, pick3) << endl;\n    cout << winningPlayerCount(4, pick4) << endl;\n    cout << winningPlayerCount(6, pick5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###mostFrequent.cpp", "source_code_str": "int mostFrequent(int n, vector<int> &a){\n    map<int,int> m;\n    for(int i:a)m[i]++;\n    int mx=0;\n    for(auto i:m)mx=max(mx,i.second);\n    int ans=-1;\n    for(auto i:m)if(mx==i.second)ans=i.first;\n    return ans;\n}", "source_code_block": "", "target_Lan": "java###mostFrequent_Test.java", "reference_code": "public static int mostFrequent(int a[], int n)\n    {\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        for(int i=0;i<n;i++)\n        {\n            if(mp.containsKey(a[i]))\n                mp.put(a[i], mp.get(a[i])+1);\n            else\n                mp.put(a[i],1);\n        }\n        int ans=-1,res=0;\n        for(Entry<Integer,Integer> val : mp.entrySet())\n            res=Math.max(res,val.getValue());\n        for(Entry<Integer,Integer> val : mp.entrySet())\n        {\n            if (val.getValue()==res&&val.getKey()>ans)\n                ans=val.getKey();\n        }\n        return ans;\n    }", "target_method_signature": "mostFrequent", "source_method_signature": "mostFrequent", "source_allMS": "int mostFrequent(int n, vector<int> &a){", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <map>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map.Entry;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map.Entry;\nimport java.util.HashMap;\nimport java.util.Map.Entry;\npublic class mostFrequent_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(mostFrequent(new int[]{1}, 1)); // Test input 1\n        System.out.println(mostFrequent(new int[]{2, 2, 2}, 3)); // Test input 2\n        System.out.println(mostFrequent(new int[]{1, 2, 3, 4}, 4)); // Test input 3\n        System.out.println(mostFrequent(new int[]{1, 1, 2, 2, 3}, 5)); // Test input 4\n        System.out.println(mostFrequent(new int[]{}, 0)); // Test input 5\n    }\n}", "all_input_output_value": "\ninput1: a={1}, n=1\noutput1: 1\n--------\ninput2: a={2, 2, 2}, n=3\noutput2: 2\n--------\ninput3: a={1, 2, 3, 4}, n=4\noutput3: 4\n--------\ninput4: a={1, 1, 2, 2, 3}, n=5\noutput4: 2\n--------\ninput5: a={}, n=0\noutput5: -1\n", "target_allMS": "public static int mostFrequent(int a[], int n)", "input_output_value": ["\ninput1: a={1}, n=1\noutput1: 1\n", "\ninput2: a={2, 2, 2}, n=3\noutput2: 2\n", "\ninput3: a={1, 2, 3, 4}, n=4\noutput3: 4\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <map>\n#include <iostream>\n#include <vector>\n#include <map>\n// TOFILL\nint main() {\n    vector<int> input1 = {1};\n    vector<int> input2 = {2, 2, 2};\n    vector<int> input3 = {1, 2, 3, 4};\n    vector<int> input4 = {1, 1, 2, 2, 3};\n    vector<int> input5 = {};\n    \n    cout << mostFrequent(1, input1) << endl; // Testing input 1\n    cout << mostFrequent(3, input2) << endl; // Testing input 2\n    cout << mostFrequent(4, input3) << endl; // Testing input 3\n    cout << mostFrequent(5, input4) << endl; // Testing input 4\n    cout << mostFrequent(0, input5) << endl; // Testing input 5\n}"}
{"source_Lan": "cpp###minDifference.cpp", "source_code_str": "int minDifference(int n, vector<int> &arr, int x) {\n        \n        int ans=n+1;\n        for(int i=0;i<n-1;i++){\n            for(int j=i+1;j<n;j++){\n                if((arr[i]^arr[j]) <= x){\n                    ans = min(ans, j-i);\n                }\n            }\n        }\n        return (ans == n+1 ? -1 : ans);\n    }", "source_code_block": "", "target_Lan": "java###minDifference_Test.java", "reference_code": "public static int minDifference(int n, int[] arr, int x) {\n        int ans = n + 1;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if ((arr[i] ^ arr[j]) <= x) {\n                    ans = Math.min(ans, j - i);\n                }\n            }\n        }\n        return (ans == n + 1) ? -1 : ans;\n    }", "target_method_signature": "minDifference", "source_method_signature": "minDifference", "source_allMS": "int minDifference(int n, vector<int> &arr, int x) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class minDifference_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minDifference(2, new int[]{1, 2}, 1)); // Output: -1\n        System.out.println(minDifference(3, new int[]{1, 2, 3}, 2)); // Output: 1\n        System.out.println(minDifference(4, new int[]{1, 1, 1, 1}, 0)); // Output: 1\n        System.out.println(minDifference(5, new int[]{5, 1, 2, 3, 4}, 5)); // Output: 1\n        System.out.println(minDifference(3, new int[]{1, 3, 2}, 2)); // Output: 1\n    }\n}", "all_input_output_value": "\ninput1: n=2, arr=[1, 2], x=1\noutput1: -1\n--------\ninput2: n=3, arr=[1, 2, 3], x=2\noutput2: 1\n--------\ninput3: n=4, arr=[1, 1, 1, 1], x=0\noutput3: 1\n--------\ninput4: n=5, arr=[5, 1, 2, 3, 4], x=5\noutput4: 1\n--------\ninput5: n=3, arr=[1, 3, 2], x=2\noutput5: 1\n", "target_allMS": "public static int minDifference(int n, int[] arr, int x) {", "input_output_value": ["\ninput1: n=2, arr=[1, 2], x=1\noutput1: -1\n", "\ninput2: n=3, arr=[1, 2, 3], x=2\noutput2: 1\n", "\ninput3: n=4, arr=[1, 1, 1, 1], x=0\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> arr1 = {1, 2};\n    cout << minDifference(2, arr1, 1) << endl;\n    \n    vector<int> arr2 = {1, 2, 3};\n    cout << minDifference(3, arr2, 2) << endl;\n    \n    vector<int> arr3 = {1, 1, 1, 1};\n    cout << minDifference(4, arr3, 0) << endl;\n    \n    vector<int> arr4 = {5, 1, 2, 3, 4};\n    cout << minDifference(5, arr4, 5) << endl;\n    \n    vector<int> arr5 = {1, 3, 2};\n    cout << minDifference(3, arr5, 2) << endl;\n}"}
{"source_Lan": "cpp###geeklandElections.cpp", "source_code_str": "    bool geeklandElections(int n, int k, string &s) {\n        int votes = 0;\n        for (int i = 0; i < n; i++)\n            votes += (s[i] == '1');\n        return (votes + k) > (n - (votes + k));\n    }", "source_code_block": "", "target_Lan": "java###geeklandElections_Test.java", "reference_code": "    public static boolean geeklandElections(int n, int k, String s) {\n        int votes = 0;\n        for (int i = 0; i < n; i++)\n            if (s.charAt(i) == '1') votes++;\n        return (votes + k) > (n - (votes + k));\n    }", "target_method_signature": "geeklandElections", "source_method_signature": "geeklandElections", "target_allMS": "    public static boolean geeklandElections(int n, int k, String s) {", "source_allMS": "    bool geeklandElections(int n, int k, string &s) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class geeklandElections_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(geeklandElections(0, 0, \"\"));\n    System.out.println(geeklandElections(1, 1, \"1\"));\n    System.out.println(geeklandElections(2, 1, \"01\"));\n    System.out.println(geeklandElections(3, 2, \"101\"));\n    System.out.println(geeklandElections(4, 1, \"0110\"));\n}\n}", "all_input_output_value": "\ninput1: n=0, k=0, s=\"\"\noutput1: false\n--------\ninput2: n=1, k=1, s=\"1\"\noutput2: true\n--------\ninput3: n=2, k=1, s=\"01\"\noutput3: true\n--------\ninput4: n=3, k=2, s=\"101\"\noutput4: true\n--------\ninput5: n=4, k=1, s=\"0110\"\noutput5: true\n", "input_output_value": ["\ninput1: n=0, k=0, s=\"\"\noutput1: false\n", "\ninput2: n=1, k=1, s=\"1\"\noutput2: true\n", "\ninput3: n=2, k=1, s=\"01\"\noutput3: true\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    int n, k;\n    string s;\n\n    n = 0, k = 0, s = \"\";\n    cout << geeklandElections(n, k, s) << endl;\n\n    n = 1, k = 1, s = \"1\";\n    cout << geeklandElections(n, k, s) << endl;\n\n    n = 2, k = 1, s = \"01\";\n    cout << geeklandElections(n, k, s) << endl;\n\n    n = 3, k = 2, s = \"101\";\n    cout << geeklandElections(n, k, s) << endl;\n\n    n = 4, k = 1, s = \"0110\";\n    cout << geeklandElections(n, k, s) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimizeArr.cpp", "source_code_str": "    int minimizeArr(int n, vector<int>&arr){\n        int mi=INT_MAX;\n        for (auto j:arr) mi=min(mi,j);\n        int ct=0;\n        for (auto j:arr){\n            if (j==mi)ct+=1;\n        }\n        if (ct==1) return 1;\n        for (auto j:arr){\n            if (j%mi!=0) return 1;\n        }\n        return ceil((float)ct / 2);\n    }", "source_code_block": "", "target_Lan": "java###minimizeArr_Test.java", "reference_code": "    public static int minimizeArr(int n, int[] arr) {\n        \n        int mi = Arrays.stream(arr).min().getAsInt();\n        int ct = 0;\n        \n        for (int j : arr) {\n            if (j == mi) ct++;\n        }\n        \n        if (ct == 1) return 1;\n        \n        for (int j : arr) {\n            if (j % mi != 0) return 1;\n        }\n        \n        return (int)Math.ceil((float)ct / 2);\n    }", "target_method_signature": "minimizeArr", "source_method_signature": "minimizeArr", "target_allMS": "    public static int minimizeArr(int n, int[] arr) {", "source_allMS": "    int minimizeArr(int n, vector<int>&arr){", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimizeArr_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] arr1 = {2, 4, 6, 8, 10};\n        int[] arr2 = {3, 6, 9, 12};\n        int[] arr3 = {4, 8, 12};\n        int[] arr4 = {6, 12};\n        int[] arr5 = {12};\n\n        System.out.println(minimizeArr(arr1.length, arr1));\n        System.out.println(minimizeArr(arr2.length, arr2));\n        System.out.println(minimizeArr(arr3.length, arr3));\n        System.out.println(minimizeArr(arr4.length, arr4));\n        System.out.println(minimizeArr(arr5.length, arr5));\n    }\n}", "all_input_output_value": "\ninput1: arr={2, 4, 6, 8, 10}\noutput1: 1\n--------\ninput2: arr={3, 6, 9, 12}\noutput2: 1\n--------\ninput3: arr={4, 8, 12}\noutput3: 1\n--------\ninput4: arr={6, 12}\noutput4: 1\n--------\ninput5: arr={12}\noutput5: 1\n", "input_output_value": ["\ninput1: arr={2, 4, 6, 8, 10}\noutput1: 1\n", "\ninput2: arr={3, 6, 9, 12}\noutput2: 1\n", "\ninput3: arr={4, 8, 12}\noutput3: 1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <climits>\n#include <cmath>\n// TOFILL\nint main() {\n    vector<int> arr1 = {2, 4, 6, 8, 10};\n    cout << minimizeArr(arr1.size(), arr1) << endl;\n\n    vector<int> arr2 = {3, 6, 9, 12};\n    cout << minimizeArr(arr2.size(), arr2) << endl;\n\n    vector<int> arr3 = {4, 8, 12};\n    cout << minimizeArr(arr3.size(), arr3) << endl;\n\n    vector<int> arr4 = {6, 12};\n    cout << minimizeArr(arr4.size(), arr4) << endl;\n\n    vector<int> arr5 = {12};\n    cout << minimizeArr(arr5.size(), arr5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###resultArray.cpp", "source_code_str": "    vector<int> resultArray(vector<int> &nums) {\n        vector<int> a{nums[0]}, b{nums[1]};\n        for (int i = 2; i < nums.size(); i++) {\n            (a.back() > b.back() ? a : b).push_back(nums[i]);\n        }\n        a.insert(a.end(), b.begin(), b.end());\n        return a;\n    }", "source_code_block": "", "target_Lan": "java###resultArray_Test.java", "reference_code": "    public static int[] resultArray(int[] nums) {\n        int n = nums.length;\n        List<Integer> a = new ArrayList<>();\n        List<Integer> b = new ArrayList<>();\n        a.add(nums[0]);\n        b.add(nums[1]);\n        for (int i = 2; i < n; i++) {\n            if (a.get(a.size() - 1) > b.get(b.size() - 1)) {\n                a.add(nums[i]);\n            } else {\n                b.add(nums[i]);\n            }\n        }\n        a.addAll(b);\n        for (int i = 0; i < n; i++) {\n            nums[i] = a.get(i);\n        }\n        return nums;\n    }", "target_method_signature": "resultArray", "source_method_signature": "resultArray", "target_allMS": "    public static int[] resultArray(int[] nums) {", "source_allMS": "    vector<int> resultArray(vector<int> &nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class resultArray_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(Arrays.toString(resultArray(new int[]{1, 2, 3, 4, 5})));\n        System.out.println(Arrays.toString(resultArray(new int[]{5, 4, 3, 2, 1})));\n        System.out.println(Arrays.toString(resultArray(new int[]{1, 1, 1, 1, 1})));\n        System.out.println(Arrays.toString(resultArray(new int[]{-1, -2, -3, -4, -5})));\n        System.out.println(Arrays.toString(resultArray(new int[]{10, 20, 30, 40, 50})));\n    }\n}", "all_input_output_value": "\ninput1: nums={1, 2, 3, 4, 5}\noutput1: [1, 2, 3, 4, 5]\n--------\ninput2: nums={5, 4, 3, 2, 1}\noutput2: [5, 3, 1, 4, 2]\n--------\ninput3: nums={1, 1, 1, 1, 1}\noutput3: [1, 1, 1, 1, 1]\n--------\ninput4: nums={-1, -2, -3, -4, -5}\noutput4: [-1, -3, -5, -2, -4]\n--------\ninput5: nums={10, 20, 30, 40, 50}\noutput5: [10, 20, 30, 40, 50]\n", "input_output_value": ["\ninput1: nums={1, 2, 3, 4, 5}\noutput1: [1, 2, 3, 4, 5]\n", "\ninput2: nums={5, 4, 3, 2, 1}\noutput2: [5, 3, 1, 4, 2]\n", "\ninput3: nums={1, 1, 1, 1, 1}\noutput3: [1, 1, 1, 1, 1]\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> nums1 = {1, 2, 3, 4, 5};\n    vector<int> nums2 = {5, 4, 3, 2, 1};\n    vector<int> nums3 = {1, 1, 1, 1, 1};\n    vector<int> nums4 = {-1, -2, -3, -4, -5};\n    vector<int> nums5 = {10, 20, 30, 40, 50};\n\n    vector<int> result1 = resultArray(nums1);\n    for(int i : result1) {\n        cout << i << \" \";\n    }\n    cout << endl;\n\n    vector<int> result2 = resultArray(nums2);\n    for(int i : result2) {\n        cout << i << \" \";\n    }\n    cout << endl;\n\n    vector<int> result3 = resultArray(nums3);\n    for(int i : result3) {\n        cout << i << \" \";\n    }\n    cout << endl;\n\n    vector<int> result4 = resultArray(nums4);\n    for(int i : result4) {\n        cout << i << \" \";\n    }\n    cout << endl;\n\n    vector<int> result5 = resultArray(nums5);\n    for(int i : result5) {\n        cout << i << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###findKOr.cpp", "source_code_str": "    int findKOr(vector<int>& nums, int k) {\n        int ans = 0;\n        for (int i = 0; i < 31; ++i) {\n            int cnt = 0;\n            for (int num: nums) {\n                if ((num >> i) & 1) {\n                    ++cnt;\n                }\n            }\n            if (cnt >= k) {\n                ans |= 1 << i;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###findKOr_Test.java", "reference_code": "    public static int findKOr(int[] nums, int k) {\n        int ans = 0;\n        for (int i = 0; i < 31; ++i) {\n            int cnt = 0;\n            for (int num : nums) {\n                if (((num >> i) & 1) != 0) {\n                    ++cnt;\n                }\n            }\n            if (cnt >= k) {\n                ans |= 1 << i;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "findKOr", "source_method_signature": "findKOr", "target_allMS": "    public static int findKOr(int[] nums, int k) {", "source_allMS": "    int findKOr(vector<int>& nums, int k) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class findKOr_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(findKOr(new int[]{0}, 1));\n        System.out.println(findKOr(new int[]{1, 2, 3, 4, 5}, 3));\n        System.out.println(findKOr(new int[]{-1, -2, -3, -4, -5}, 2));\n        System.out.println(findKOr(new int[]{10, 20, 30, 40, 50}, 4));\n        System.out.println(findKOr(new int[]{5, 10, 15, 20, 25}, 5));\n    }\n}", "all_input_output_value": "\ninput1: nums={0}, k=1\noutput1: 0\n--------\ninput2: nums={1, 2, 3, 4, 5}, k=3\noutput2: 1\n--------\ninput3: nums={-1, -2, -3, -4, -5}, k=2\noutput3: 2147483647\n--------\ninput4: nums={10, 20, 30, 40, 50}, k=4\noutput4: 0\n--------\ninput5: nums={5, 10, 15, 20, 25}, k=5\noutput5: 0\n", "input_output_value": ["\ninput1: nums={0}, k=1\noutput1: 0\n", "\ninput2: nums={1, 2, 3, 4, 5}, k=3\noutput2: 1\n", "\ninput3: nums={-1, -2, -3, -4, -5}, k=2\noutput3: 2147483647\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> nums1 = {0};\n    cout << findKOr(nums1, 1) << endl;\n\n    vector<int> nums2 = {1, 2, 3, 4, 5};\n    cout << findKOr(nums2, 3) << endl;\n\n    vector<int> nums3 = {-1, -2, -3, -4, -5};\n    cout << findKOr(nums3, 2) << endl;\n\n    vector<int> nums4 = {10, 20, 30, 40, 50};\n    cout << findKOr(nums4, 4) << endl;\n\n    vector<int> nums5 = {5, 10, 15, 20, 25};\n    cout << findKOr(nums5, 5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumSumOfHeights.cpp", "source_code_str": "    long long maximumSumOfHeights(vector<int>& maxHeights) {\n        int n = maxHeights.size();\n        long long res = 0;\n        for (int i = 0; i < n; i++) {\n            int pre = maxHeights[i];\n            long long sum = pre;\n            for (int j = i - 1; j >= 0; j--) {\n                pre = min(pre, maxHeights[j]);\n                sum += pre;\n            }\n            int suf = maxHeights[i];\n            for (int j = i + 1; j < n; j++) {\n                suf = min(suf, maxHeights[j]);\n                sum += suf;\n            }\n            res = max(res, sum);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###maximumSumOfHeights_Test.java", "reference_code": "    public static long maximumSumOfHeights(List<Integer> maxHeights) {\n        int n = maxHeights.size();\n        long res = 0;\n        for (int i = 0; i < n; i++) {\n            int pre = maxHeights.get(i);\n            long sum = pre;\n            for (int j = i - 1; j >= 0; j--) {\n                pre = Math.min(pre, maxHeights.get(j));\n                sum += pre;\n            }\n            int suf = maxHeights.get(i);\n            for (int j = i + 1; j < n; j++) {\n                suf = Math.min(suf, maxHeights.get(j));\n                sum += suf;\n            }\n            res = Math.max(res, sum);\n        }\n        return res;\n    }", "target_method_signature": "maximumSumOfHeights", "source_method_signature": "maximumSumOfHeights", "target_allMS": "    public static long maximumSumOfHeights(List<Integer> maxHeights) {", "source_allMS": "    long long maximumSumOfHeights(vector<int>& maxHeights) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class maximumSumOfHeights_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumSumOfHeights(Arrays.asList(1, 2, 3, 4, 5)));\n        System.out.println(maximumSumOfHeights(Arrays.asList(5, 4, 3, 2, 1)));\n        System.out.println(maximumSumOfHeights(Arrays.asList(1, 1, 1, 1, 1)));\n        System.out.println(maximumSumOfHeights(Arrays.asList(100, 200, 300, 400, 500)));\n        System.out.println(maximumSumOfHeights(Arrays.asList(50, 40, 30, 20, 10)));\n    }\n}", "all_input_output_value": "\ninput1: maxHeights=[1, 2, 3, 4, 5]\noutput1: 15\n--------\ninput2: maxHeights=[5, 4, 3, 2, 1]\noutput2: 15\n--------\ninput3: maxHeights=[1, 1, 1, 1, 1]\noutput3: 5\n--------\ninput4: maxHeights=[100, 200, 300, 400, 500]\noutput4: 1500\n--------\ninput5: maxHeights=[50, 40, 30, 20, 10]\noutput5: 150\n", "input_output_value": ["\ninput1: maxHeights=[1, 2, 3, 4, 5]\noutput1: 15\n", "\ninput2: maxHeights=[5, 4, 3, 2, 1]\noutput2: 15\n", "\ninput3: maxHeights=[1, 1, 1, 1, 1]\noutput3: 5\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> maxHeights1 = {1, 2, 3, 4, 5};\n    cout << maximumSumOfHeights(maxHeights1) << endl;\n\n    vector<int> maxHeights2 = {5, 4, 3, 2, 1};\n    cout << maximumSumOfHeights(maxHeights2) << endl;\n\n    vector<int> maxHeights3 = {1, 1, 1, 1, 1};\n    cout << maximumSumOfHeights(maxHeights3) << endl;\n\n    vector<int> maxHeights4 = {100, 200, 300, 400, 500};\n    cout << maximumSumOfHeights(maxHeights4) << endl;\n\n    vector<int> maxHeights5 = {50, 40, 30, 20, 10};\n    cout << maximumSumOfHeights(maxHeights5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###candyShop2.cpp", "source_code_str": "    int candyShop2(int n, vector<int> &candies) {\n        int answer = 0;\n        unordered_map<int, int> m;\n        for(auto i : candies){\n            if(m.find(i) == m.end()){\n                answer += i;\n                m[i] = 1;\n            }\n        }\n        return answer;\n    }", "source_code_block": "", "target_Lan": "java###candyShop2_Test.java", "reference_code": "    public static int candyShop2(int n, int[] candies) {\n        int ans = 0;\n        Set<Integer> hs = new HashSet<>();\n        for(int x : candies)\n            if(hs.add(x))\n                ans += x;\n        return ans;\n    }", "target_method_signature": "candyShop2", "source_method_signature": "candyShop2", "target_allMS": "    public static int candyShop2(int n, int[] candies) {", "source_allMS": "    int candyShop2(int n, vector<int> &candies) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class candyShop2_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(candyShop2(0, new int[]{}));\n        System.out.println(candyShop2(1, new int[]{1}));\n        System.out.println(candyShop2(2, new int[]{1, 2}));\n        System.out.println(candyShop2(3, new int[]{1, 1, 2}));\n        System.out.println(candyShop2(4, new int[]{1, 2, 3, 4}));\n    }\n}", "all_input_output_value": "\n\ninput1: n=0, candies={}\noutput1: 0\n--------\ninput2: n=1, candies={1}\noutput2: 1\n--------\ninput3: n=2, candies={1, 2}\noutput3: 3\n--------\ninput4: n=3, candies={1, 1, 2}\noutput4: 3\n--------\ninput5: n=4, candies={1, 2, 3, 4}\noutput5: 10\n", "input_output_value": ["\n\ninput1: n=0, candies={}\noutput1: 0\n", "\ninput2: n=1, candies={1}\noutput2: 1\n", "\ninput3: n=2, candies={1, 2}\noutput3: 3\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<int> candies1 = {};\n    cout << candyShop2(0, candies1) << endl;\n\n    vector<int> candies2 = {1};\n    cout << candyShop2(1, candies2) << endl;\n\n    vector<int> candies3 = {1, 2};\n    cout << candyShop2(2, candies3) << endl;\n\n    vector<int> candies4 = {1, 1, 2};\n    cout << candyShop2(3, candies4) << endl;\n\n    vector<int> candies5 = {1, 2, 3, 4};\n    cout << candyShop2(4, candies5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minOPs.cpp", "source_code_str": "    int minOPs(int n, vector<int> &A)\n    {\n        map<int,int> m;\n        for(auto it:A) m[it]++;\n        vector<int> v;\n        for(auto it:m) v.push_back(it.second);\n        sort(v.begin(),v.end());\n        int sum=0;\n        for(int i=v.size()-1;i>=0;i--)\n        {\n          sum+=v[i];\n          if(sum>(n/2)) return v.size()-1-i;\n        }\n    }", "source_code_block": "", "target_Lan": "java###minOPs_Test.java", "reference_code": "    public static int minOPs(int n, int[] A) {\n        Map<Integer, Integer> m = new HashMap<>();\n        for (int it : A) {\n            m.put(it, m.getOrDefault(it, 0) + 1);\n        }\n        int[] v = new int[m.size()];\n        int index = 0;\n        for (int value : m.values()) {\n            v[index++] = value;\n        }\n        Arrays.sort(v);\n        int sum = 0;\n        for (int i = v.length - 1; i >= 0; i--) {\n            sum += v[i];\n            if (sum > (n / 2)) {\n                return v.length - 1 - i;\n            }\n        }\n        return 0; \n    }", "target_method_signature": "minOPs", "source_method_signature": "minOPs", "target_allMS": "    public static int minOPs(int n, int[] A) {", "source_allMS": "    int minOPs(int n, vector<int> &A)", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Arrays;\npublic class minOPs_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minOPs(5, new int[]{1, 2, 3, 4, 5}));\n        System.out.println(minOPs(10, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));\n        System.out.println(minOPs(7, new int[]{1, 2, 3, 4, 5, 6, 7}));\n        System.out.println(minOPs(15, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}));\n        System.out.println(minOPs(10, new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));\n    }\n}", "all_input_output_value": "\ninput1: n=5, A={1, 2, 3, 4, 5}\noutput1: 2\n--------\ninput2: n=10, A={1, 1, 1, 1, 1, 1, 1, 1, 1, 1}\noutput2: 0\n--------\ninput3: n=7, A={1, 2, 3, 4, 5, 6, 7}\noutput3: 3\n--------\ninput4: n=15, A={1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\noutput4: 7\n--------\ninput5: n=10, A={1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\noutput5: 5\n", "input_output_value": ["\ninput1: n=5, A={1, 2, 3, 4, 5}\noutput1: 2\n", "\ninput2: n=10, A={1, 1, 1, 1, 1, 1, 1, 1, 1, 1}\noutput2: 0\n", "\ninput3: n=7, A={1, 2, 3, 4, 5, 6, 7}\noutput3: 3\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n// TOFILL\nint main() {\n    int n1 = 5;\n    vector<int> A1 = {1, 2, 3, 4, 5};\n    cout << minOPs(n1, A1) << endl;\n\n    int n2 = 10;\n    vector<int> A2 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\n    cout << minOPs(n2, A2) << endl;\n\n    int n3 = 7;\n    vector<int> A3 = {1, 2, 3, 4, 5, 6, 7};\n    cout << minOPs(n3, A3) << endl;\n\n    int n4 = 15;\n    vector<int> A4 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\n    cout << minOPs(n4, A4) << endl;\n\n    int n5 = 10;\n    vector<int> A5 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    cout << minOPs(n5, A5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###consecutiveVal.cpp", "source_code_str": "    string consecutiveVal(int n, vector<int> &a) {\n        \n        string result = \"\";\n        unordered_map<int, bool> mp;\n        for (int i = 0; i < n; i++) {\n            mp[a[i]] = true;\n        }\n        for (int i = 0; i < n; i++) {\n            if (mp[a[i] - 1] == true || mp[a[i] + 1] == true) {\n                result += '1';\n            } else\n                result += '0';\n        }\n        return result;\n    }", "source_code_block": "", "target_Lan": "java###consecutiveVal_Test.java", "reference_code": "    public static String consecutiveVal(int n, List<Integer> a) {\n        StringBuilder result = new StringBuilder();\n        Map<Integer, Boolean> mp = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            mp.put(a.get(i), true);\n        }\n        for (int i = 0; i < n; i++) {\n            if (Boolean.TRUE.equals(mp.get(a.get(i) - 1)) ||\n                Boolean.TRUE.equals(mp.get(a.get(i) + 1))) {\n                result.append('1');\n            } else {\n                result.append('0');\n            }\n        }\n        return result.toString();\n    }", "target_method_signature": "consecutiveVal", "source_method_signature": "consecutiveVal", "target_allMS": "    public static String consecutiveVal(int n, List<Integer> a) {", "source_allMS": "    string consecutiveVal(int n, vector<int> &a) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\npublic class consecutiveVal_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(consecutiveVal(0, new ArrayList<>()));\n        System.out.println(consecutiveVal(1, Arrays.asList(1)));\n        System.out.println(consecutiveVal(2, Arrays.asList(1, 2)));\n        System.out.println(consecutiveVal(3, Arrays.asList(1, 2, 3)));\n        System.out.println(consecutiveVal(4, Arrays.asList(1, 2, 3, 4)));\n    }\n}", "all_input_output_value": "\ninput1: n=0, a=[]\noutput1: 0\n--------\ninput2: n=1, a=[1]\noutput2: 11\n--------\ninput3: n=2, a=[1, 2]\noutput3: 111\n--------\ninput4: n=3, a=[1, 2, 3]\noutput4: 1111\n--------\ninput5: n=4, a=[1, 2, 3, 4]\noutput5: 11111\n", "input_output_value": ["\ninput1: n=0, a=[]\noutput1: 0\n", "\ninput2: n=1, a=[1]\noutput2: 11\n", "\ninput3: n=2, a=[1, 2]\noutput3: 111\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    int n = 0;\n    vector<int> a = {};\n    cout << consecutiveVal(n, a) << endl;\n\n    n = 1;\n    a = {1};\n    cout << consecutiveVal(n, a) << endl;\n\n    n = 2;\n    a = {1, 2};\n    cout << consecutiveVal(n, a) << endl;\n\n    n = 3;\n    a = {1, 2, 3};\n    cout << consecutiveVal(n, a) << endl;\n\n    n = 4;\n    a = {1, 2, 3, 4};\n    cout << consecutiveVal(n, a) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maxFrequencyElements.cpp", "source_code_str": "    int maxFrequencyElements(vector<int> &nums) {\n        int ans = 0, maxCnt = 0;\n        unordered_map<int, int> cnt;\n        for (int x : nums) {\n            int c = ++cnt[x];\n            if (c > maxCnt) {\n                maxCnt = ans = c;\n            } else if (c == maxCnt) {\n                ans += c;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###maxFrequencyElements_Test.java", "reference_code": "    public static int maxFrequencyElements(int[] nums) {\n        int ans = 0, maxCnt = 0;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        for (int x : nums) {\n            int c = cnt.merge(x, 1, Integer::sum);\n            if (c > maxCnt) {\n                maxCnt = ans = c;\n            } else if (c == maxCnt) {\n                ans += c;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "maxFrequencyElements", "source_method_signature": "maxFrequencyElements", "target_allMS": "    public static int maxFrequencyElements(int[] nums) {", "source_allMS": "    int maxFrequencyElements(vector<int> &nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maxFrequencyElements_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maxFrequencyElements(new int[]{1,2,3,4,5}));\n        System.out.println(maxFrequencyElements(new int[]{1,1,1,1,1}));\n        System.out.println(maxFrequencyElements(new int[]{1,2,2,3,3,3,4,4,4,4,5,5,5,5,5}));\n        System.out.println(maxFrequencyElements(new int[]{10,20,30,40,50}));\n        System.out.println(maxFrequencyElements(new int[]{1,1,2,2,3,3,4,4,5,5,6,6,7,7}));\n    }\n}", "all_input_output_value": "\ninput1: nums={1,2,3,4,5}\noutput1: 5\n--------\ninput2: nums={1,1,1,1,1}\noutput2: 5\n--------\ninput3: nums={1,2,2,3,3,3,4,4,4,4,5,5,5,5,5}\noutput3: 5\n--------\ninput4: nums={10,20,30,40,50}\noutput4: 5\n--------\ninput5: nums={1,1,2,2,3,3,4,4,5,5,6,6,7,7}\noutput5: 14\n", "input_output_value": ["\ninput1: nums={1,2,3,4,5}\noutput1: 5\n", "\ninput2: nums={1,1,1,1,1}\noutput2: 5\n", "\ninput3: nums={1,2,2,3,3,3,4,4,4,4,5,5,5,5,5}\noutput3: 5\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n// TOFILL\nint main() {\n    vector<int> nums1 = {1,2,3,4,5};\n    cout << maxFrequencyElements(nums1) << endl;\n\n    vector<int> nums2 = {1,1,1,1,1};\n    cout << maxFrequencyElements(nums2) << endl;\n\n    vector<int> nums3 = {1,2,2,3,3,3,4,4,4,4,5,5,5,5,5};\n    cout << maxFrequencyElements(nums3) << endl;\n\n    vector<int> nums4 = {10,20,30,40,50};\n    cout << maxFrequencyElements(nums4) << endl;\n\n    vector<int> nums5 = {1,1,2,2,3,3,4,4,5,5,6,6,7,7};\n    cout << maxFrequencyElements(nums5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumBeauty.cpp", "source_code_str": "    int maximumBeauty(vector<int>& nums, int k) {\n        int res = 0, n = nums.size();\n        sort(nums.begin(), nums.end());\n        for (int i = 0, j = 0; i < n; i++) {\n            while (nums[i] - 2 * k > nums[j]) {\n                j++;\n            }\n            res = max(res, i - j + 1);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###maximumBeauty_Test.java", "reference_code": "    public static int maximumBeauty(int[] nums, int k) {\n        int res = 0, n = nums.length;\n        Arrays.sort(nums);\n        for (int i = 0, j = 0; i < n; i++) {\n            while (nums[i] - 2 * k > nums[j]) {\n                j++;\n            }\n            res = Math.max(res, i - j + 1);\n        }\n        return res;\n    }", "target_method_signature": "maximumBeauty", "source_method_signature": "maximumBeauty", "target_allMS": "    public static int maximumBeauty(int[] nums, int k) {", "source_allMS": "    int maximumBeauty(vector<int>& nums, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class maximumBeauty_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(maximumBeauty(new int[]{1, 2, 3, 4, 5}, 1));\n        System.out.println(maximumBeauty(new int[]{5, 4, 3, 2, 1}, 2));\n        System.out.println(maximumBeauty(new int[]{1, 1, 1, 1, 1}, 0));\n        System.out.println(maximumBeauty(new int[]{-1, -2, -3, -4, -5}, 2));\n        System.out.println(maximumBeauty(new int[]{100, 200, 300, 400, 500}, 50));\n    }\n}", "all_input_output_value": "\ninput1: nums=[1, 2, 3, 4, 5], k=1\noutput1: 3\n--------\ninput2: nums=[5, 4, 3, 2, 1], k=2\noutput2: 5\n--------\ninput3: nums=[1, 1, 1, 1, 1], k=0\noutput3: 5\n--------\ninput4: nums=[-1, -2, -3, -4, -5], k=2\noutput4: 5\n--------\ninput5: nums=[100, 200, 300, 400, 500], k=50\noutput5: 2\n", "input_output_value": ["\ninput1: nums=[1, 2, 3, 4, 5], k=1\noutput1: 3\n", "\ninput2: nums=[5, 4, 3, 2, 1], k=2\noutput2: 5\n", "\ninput3: nums=[1, 1, 1, 1, 1], k=0\noutput3: 5\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> nums1 = {1, 2, 3, 4, 5};\n    cout << maximumBeauty(nums1, 1) << endl;\n\n    vector<int> nums2 = {5, 4, 3, 2, 1};\n    cout << maximumBeauty(nums2, 2) << endl;\n\n    vector<int> nums3 = {1, 1, 1, 1, 1};\n    cout << maximumBeauty(nums3, 0) << endl;\n\n    vector<int> nums4 = {-1, -2, -3, -4, -5};\n    cout << maximumBeauty(nums4, 2) << endl;\n\n    vector<int> nums5 = {100, 200, 300, 400, 500};\n    cout << maximumBeauty(nums5, 50) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minimizeArrayScore.cpp", "source_code_str": "    int minimizeArrayScore(int n, vector<int> &arr) {\n        int ans =INT_MIN;\n        sort(arr.begin(),arr.end());\n        int l=0;\n        int r=n-1;\n        while (l<r){\n            ans=max(ans,arr[l]+arr[r]);\n            l+=1;\n            r-=1;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minimizeArrayScore_Test.java", "reference_code": "    public static int minimizeArrayScore(int n, int[] arr) {\n        Arrays.sort(arr);\n        int max = Integer.MIN_VALUE;\n        int low = 0, high = n - 1;\n        while(low < high)\n            max = Math.max(max, arr[high--] + arr[low++]);\n        return max;\n    }", "target_method_signature": "minimizeArrayScore", "source_method_signature": "minimizeArrayScore", "target_allMS": "    public static int minimizeArrayScore(int n, int[] arr) {", "source_allMS": "    int minimizeArrayScore(int n, vector<int> &arr) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minimizeArrayScore_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minimizeArrayScore(0, new int[]{}));\n        System.out.println(minimizeArrayScore(1, new int[]{1}));\n        System.out.println(minimizeArrayScore(2, new int[]{1,2}));\n        System.out.println(minimizeArrayScore(3, new int[]{1,2,3}));\n        System.out.println(minimizeArrayScore(4, new int[]{1,2,3,4}));\n    }\n}", "all_input_output_value": "\ninput1: n=0, arr={}\noutput1: -2147483648\n--------\ninput2: n=1, arr={1}\noutput2: -2147483648\n--------\ninput3: n=2, arr={1,2}\noutput3: 3\n--------\ninput4: n=3, arr={1,2,3}\noutput4: 4\n--------\ninput5: n=4, arr={1,2,3,4}\noutput5: 5\n", "input_output_value": ["\ninput1: n=0, arr={}\noutput1: -2147483648\n", "\ninput2: n=1, arr={1}\noutput2: -2147483648\n", "\ninput3: n=2, arr={1,2}\noutput3: 3\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n// TOFILL\nint main() {\n    int n;\n    vector<int> arr;\n\n    n = 0;\n    arr = {};\n    cout << minimizeArrayScore(n, arr) << endl;\n\n    n = 1;\n    arr = {1};\n    cout << minimizeArrayScore(n, arr) << endl;\n\n    n = 2;\n    arr = {1,2};\n    cout << minimizeArrayScore(n, arr) << endl;\n\n    n = 3;\n    arr = {1,2,3};\n    cout << minimizeArrayScore(n, arr) << endl;\n\n    n = 4;\n    arr = {1,2,3,4};\n    cout << minimizeArrayScore(n, arr) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###maximumSum.cpp", "source_code_str": "int maximumSum(vector<int>& nums) {\n        unordered_map<int, int> dict;\n        int res = -1;\n        for (int i : nums) {\n            int digitsSum = 0;\n            int temp = i;\n            while (temp > 0) {\n                digitsSum += temp % 10;\n                temp /= 10;\n            }\n            if (dict.count(digitsSum)) {\n                res = max(res, dict[digitsSum] + i);\n                dict[digitsSum] = max(dict[digitsSum], i);\n            } else {\n                dict[digitsSum] = i;\n            }\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###maximumSum_Test.java", "reference_code": "public static int maximumSum(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        int res = -1;\n        for (int i : nums) {\n            int digitsSum = 0;\n            int temp = i;\n            while (temp > 0) {\n                digitsSum += temp % 10;\n                temp /= 10;\n            }\n            if (map.containsKey(digitsSum)) {\n                res = Math.max(res, map.get(digitsSum) + i);\n                map.put(digitsSum, Math.max(map.get(digitsSum), i));\n            } else {\n                map.put(digitsSum, i);\n            }\n        }\n        return res;\n    }", "target_method_signature": "maximumSum", "source_method_signature": "maximumSum", "source_allMS": "int maximumSum(vector<int>& nums) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <unordered_map>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Map;\npublic class maximumSum_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] nums1 = {1, 2, 3, 4, 5};\n        int[] nums2 = {10, 20, 30, 40, 50};\n        int[] nums3 = {100, 200, 300, 400, 500};\n        int[] nums4 = {1000, 2000, 3000, 4000, 5000};\n        int[] nums5 = {10000, 20000, 30000, 40000, 50000};\n\n        System.out.println(maximumSum(nums1));\n        System.out.println(maximumSum(nums2));\n        System.out.println(maximumSum(nums3));\n        System.out.println(maximumSum(nums4));\n        System.out.println(maximumSum(nums5));\n    }\n}", "all_input_output_value": "\ninput1: nums1={1, 2, 3, 4, 5}\noutput1: -1\n--------\ninput2: nums2={10, 20, 30, 40, 50}\noutput2: -1\n--------\ninput3: nums3={100, 200, 300, 400, 500}\noutput3: -1\n--------\ninput4: nums4={1000, 2000, 3000, 4000, 5000}\noutput4: -1\n--------\ninput5: nums5={10000, 20000, 30000, 40000, 50000}\noutput5: -1\n", "target_allMS": "public static int maximumSum(int[] nums) {", "input_output_value": ["\ninput1: nums1={1, 2, 3, 4, 5}\noutput1: -1\n", "\ninput2: nums2={10, 20, 30, 40, 50}\noutput2: -1\n", "\ninput3: nums3={100, 200, 300, 400, 500}\noutput3: -1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> nums1 = {1, 2, 3, 4, 5};\n    vector<int> nums2 = {10, 20, 30, 40, 50};\n    vector<int> nums3 = {100, 200, 300, 400, 500};\n    vector<int> nums4 = {1000, 2000, 3000, 4000, 5000};\n    vector<int> nums5 = {10000, 20000, 30000, 40000, 50000};\n\n    cout << maximumSum(nums1) << endl;\n    cout << maximumSum(nums2) << endl;\n    cout << maximumSum(nums3) << endl;\n    cout << maximumSum(nums4) << endl;\n    cout << maximumSum(nums5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###maxDistToClosest.cpp", "source_code_str": "int maxDistToClosest(vector<int>& seats) {\n        int res = 0;\n        int l = 0;\n        while (l < seats.size() && seats[l] == 0) {\n            ++l;\n        }\n        res = max(res, l);\n        while (l < seats.size()) {\n            int r = l + 1;\n            while (r < seats.size() && seats[r] == 0) {\n                ++r;\n            }\n            if (r == seats.size()) {\n                res = max(res, r - l - 1);\n            } else {\n                res = max(res, (r - l) / 2);\n            }\n            l = r;\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "java###maxDistToClosest_Test.java", "reference_code": "public static int maxDistToClosest(int[] seats) {\n        int res = 0;\n        int l = 0;\n        while (l < seats.length && seats[l] == 0) {\n            ++l;\n        }\n        res = Math.max(res, l);\n        while (l < seats.length) {\n            int r = l + 1;\n            while (r < seats.length && seats[r] == 0) {\n                ++r;\n            }\n            if (r == seats.length) {\n                res = Math.max(res, r - l - 1);\n            } else {\n                res = Math.max(res, (r - l) / 2);\n            }\n            l = r;\n        }\n        return res;\n    }", "target_method_signature": "maxDistToClosest", "source_method_signature": "maxDistToClosest", "source_allMS": "int maxDistToClosest(vector<int>& seats) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\nimport java.util.Arrays;\npublic class maxDistToClosest_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] seats1 = {1,0,0,0,1,0,1};\n        int[] seats2 = new int[300];\n        Arrays.fill(seats2, 0);\n\n        System.out.println(maxDistToClosest(seats1));\n        System.out.println(maxDistToClosest(seats2));\n    }\n}", "all_input_output_value": "\ninput1: seats={1,0,0,0,1,0,1}\noutput1: 2\n--------\ninput2: seats=new int[300]\noutput2: 300\n", "target_allMS": "public static int maxDistToClosest(int[] seats) {", "input_output_value": ["\ninput1: seats={1,0,0,0,1,0,1}\noutput1: 2\n", "\ninput2: seats=new int[300]\noutput2: 300\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> seats1 = {1,0,0,0,1,0,1};\n    cout << maxDistToClosest(seats1) << endl;\n\n    vector<int> seats2(300, 0);\n    cout << maxDistToClosest(seats2) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###getMax.cpp", "source_code_str": "    int getMax(int x) {\n        \n        bool flag = false;\n        int prev = -1;\n        int cnt = 0;\n        for (int i = 30; i >= 0; i--) {\n            if (cnt >= 2)\n                break;\n            if (flag == false and (x & (1 << i)) > 0) {\n                flag = true;\n                continue;\n            }\n            if (flag) {\n                if ((x & (1 << i)) == 0 and prev == -1) {\n                    prev = i;\n                    x |= (1 << i);\n                    cnt++;\n                }\n                if ((x & (1 << i)) == 0 and prev - i > 1) {\n                    x |= (1 << i);\n                    cnt++;\n                }\n            }\n        }\n        return x;\n    }", "source_code_block": "", "target_Lan": "java###getMax_Test.java", "reference_code": "public static int getMax(int x) {\n        \n        boolean flag = false;\n        int prev = -1;\n        int cnt = 0;\n        for (int i = 30; i >= 0; i--) {\n            if (cnt >= 2) break;\n            if (!flag && (x & (1 << i)) > 0) {\n                flag = true;\n                continue;\n            }\n            if (flag) {\n                if ((x & (1 << i)) == 0 && prev == -1) {\n                    prev = i;\n                    x |= (1 << i);\n                    cnt++;\n                }\n                if ((x & (1 << i)) == 0 && prev - i > 1) {\n                    x |= (1 << i);\n                    cnt++;\n                }\n            }\n        }\n        return x;\n    }", "target_method_signature": "getMax", "source_method_signature": "getMax", "source_allMS": "    int getMax(int x) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.*;\n\npublic class getMax_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(getMax(0));\n        System.out.println(getMax(1));\n        System.out.println(getMax(2));\n        System.out.println(getMax(3));\n        System.out.println(getMax(4));\n    }\n}", "all_input_output_value": "\ninput1: x=0\noutput1: 0\n--------\ninput2: x=1\noutput2: 1\n--------\ninput3: x=2\noutput3: 3\n--------\ninput4: x=3\noutput4: 3\n--------\ninput5: x=4\noutput5: 6\n", "target_allMS": "public static int getMax(int x) {", "input_output_value": ["\ninput1: x=0\noutput1: 0\n", "\ninput2: x=1\noutput2: 1\n", "\ninput3: x=2\noutput3: 3\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <iostream>\n// TOFILL\nint main() {\n    cout << getMax(0) << endl;\n    cout << getMax(1) << endl;\n    cout << getMax(2) << endl;\n    cout << getMax(3) << endl;\n    cout << getMax(4) << endl;\n}"}
{"source_Lan": "cpp###getCount.cpp", "source_code_str": "long long getCount(int n, vector<int> &arr, int a, int b) {\n        \n        int ans=0;\n        for(int i=0;i<n;i++){\n            for(int j=i;j<n;j++){\n                bool flag=false;\n                for(int k=i;k<=j;k++){\n                    for(int l=k+1;l<=j;l++){\n                        if(arr[k]+arr[l]<a || arr[k]+arr[l]>b)\n                        flag=true;\n                    }\n                }\n                if(flag==false)  ans++;\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###getCount_Test.java", "reference_code": "    public static long getCount(int n, int[] arr, int a, int b) {\n        \n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                boolean flag = false;\n                for (int k = i; k <= j; k++) {\n                    for (int l = k + 1; l <= j; l++) {\n                        if (arr[k] + arr[l] < a || arr[k] + arr[l] > b) {\n                            flag = true;\n                        }\n                    }\n                }\n                if (!flag) ans++;\n            }\n        }\n        return ans;\n    }", "target_method_signature": "getCount", "source_method_signature": "getCount", "source_allMS": "long long getCount(int n, vector<int> &arr, int a, int b) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\n\npublic class getCount_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(getCount(0, new int[]{}, 0, 0));\n    System.out.println(getCount(1, new int[]{10}, 5, 15));\n    System.out.println(getCount(2, new int[]{10, 20}, 5, 35));\n    System.out.println(getCount(3, new int[]{10, 20, 30}, 5, 45));\n    System.out.println(getCount(4, new int[]{10, 20, 30, 40}, 5, 55));\n}\n}", "all_input_output_value": "\ninput1: n=0, arr={}, a=0, b=0\noutput1: 0\n--------\ninput2: n=1, arr={10}, a=5, b=15\noutput2: 1\n--------\ninput3: n=2, arr={10, 20}, a=5, b=35\noutput3: 3\n--------\ninput4: n=3, arr={10, 20, 30}, a=5, b=45\noutput4: 4\n--------\ninput5: n=4, arr={10, 20, 30, 40}, a=5, b=55\noutput5: 7\n", "target_allMS": "    public static long getCount(int n, int[] arr, int a, int b) {", "input_output_value": ["\ninput1: n=0, arr={}, a=0, b=0\noutput1: 0\n", "\ninput2: n=1, arr={10}, a=5, b=15\noutput2: 1\n", "\ninput3: n=2, arr={10, 20}, a=5, b=35\noutput3: 3\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> arr1 = {};\n    cout << getCount(0, arr1, 0, 0) << endl;\n\n    vector<int> arr2 = {10};\n    cout << getCount(1, arr2, 5, 15) << endl;\n\n    vector<int> arr3 = {10, 20};\n    cout << getCount(2, arr3, 5, 35) << endl;\n\n    vector<int> arr4 = {10, 20, 30};\n    cout << getCount(3, arr4, 5, 45) << endl;\n\n    vector<int> arr5 = {10, 20, 30, 40};\n    cout << getCount(4, arr5, 5, 55) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###countSeniors.cpp", "source_code_str": "int countSeniors(vector<string>& details) {\n        int count = 0;\n        for (string & info : details) {\n            if (stoi(info.substr(11, 2)) > 60) {\n                count++;\n            }\n        }\n        return count;\n    }", "source_code_block": "", "target_Lan": "java###countSeniors_Test.java", "reference_code": "public static int countSeniors(String[] details) {\n        int count = 0;\n        for (String info : details) {\n            if (Integer.parseInt(info.substring(11, 13)) > 60) {\n                count++;\n            }\n        }\n        return count;\n    }", "target_method_signature": "countSeniors", "source_method_signature": "countSeniors", "source_allMS": "int countSeniors(vector<string>& details) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>", "target_import": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\n\npublic class countSeniors_Test {\n// TOFILL\npublic static void main(String[] args) {\n    System.out.println(countSeniors(new String[]{\"123#123456789#A\", \"123#123456789#B\", \"123#123456789#C\"}));\n    System.out.println(countSeniors(new String[]{\"123#600000000#A\", \"123#600000000#B\", \"123#600000000#C\"}));\n    System.out.println(countSeniors(new String[]{\"123#700000000#A\", \"123#700000000#B\", \"123#700000000#C\"}));\n    System.out.println(countSeniors(new String[]{\"123#123456789#A\", \"123#600000000#B\", \"123#700000000#C\"}));\n}\n}", "all_input_output_value": "\ninput1: details={\"123#123456789#A\", \"123#123456789#B\", \"123#123456789#C\"}\noutput1: 3\n--------\ninput2: details={\"123#600000000#A\", \"123#600000000#B\", \"123#600000000#C\"}\noutput2: 0\n--------\ninput3: details={\"123#700000000#A\", \"123#700000000#B\", \"123#700000000#C\"}\noutput3: 0\n--------\ninput4: details={\"123#123456789#A\", \"123#600000000#B\", \"123#700000000#C\"}\noutput4: 1\n", "target_allMS": "public static int countSeniors(String[] details) {", "input_output_value": ["\ninput1: details={\"123#123456789#A\", \"123#123456789#B\", \"123#123456789#C\"}\noutput1: 3\n", "\ninput2: details={\"123#600000000#A\", \"123#600000000#B\", \"123#600000000#C\"}\noutput2: 0\n", "\ninput3: details={\"123#700000000#A\", \"123#700000000#B\", \"123#700000000#C\"}\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<string> details1 = {\"123#123456789#A\", \"123#123456789#B\", \"123#123456789#C\"};\n    cout << countSeniors(details1) << endl;\n\n    vector<string> details2 = {\"123#600000000#A\", \"123#600000000#B\", \"123#600000000#C\"};\n    cout << countSeniors(details2) << endl;\n\n    vector<string> details3 = {\"123#700000000#A\", \"123#700000000#B\", \"123#700000000#C\"};\n    cout << countSeniors(details3) << endl;\n\n    vector<string> details4 = {\"123#123456789#A\", \"123#600000000#B\", \"123#700000000#C\"};\n    cout << countSeniors(details4) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###numberOfChild.cpp", "source_code_str": "   int numberOfChild(int n, int k) {\n       int a = k / (n - 1), b = k % (n - 1);\n       return (a & 1) == 0 ? b : n - 1 - b;\n   }", "source_code_block": "", "target_Lan": "java###numberOfChild_Test.java", "reference_code": "    public static int numberOfChild(int n, int k) {\n        int ans=0;\n        for(int neg=-1;k!=0;k--){\n            if(ans==0||ans==n-1){neg*=-1;}\n            ans+=neg;\n        }\n        return ans;\n    }", "target_method_signature": "numberOfChild", "source_method_signature": "numberOfChild", "target_allMS": "    public static int numberOfChild(int n, int k) {", "source_allMS": "   int numberOfChild(int n, int k) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class numberOfChild_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(numberOfChild(5, 0)); // Expected output: 0\n        System.out.println(numberOfChild(7, 1)); // Expected output: 1\n        System.out.println(numberOfChild(8, 5)); // Expected output: 1\n        System.out.println(numberOfChild(6, 3)); // Expected output: 3\n        System.out.println(numberOfChild(10, 10)); // Expected output: 0\n    }\n}", "all_input_output_value": "\ninput1: n=5, k=0\noutput1: 0\n--------\ninput2: n=7, k=1\noutput2: 1\n--------\ninput3: n=8, k=5\noutput3: 5\n--------\ninput4: n=6, k=3\noutput4: 3\n--------\ninput5: n=10, k=10\noutput5: 8\n", "input_output_value": ["\ninput1: n=5, k=0\noutput1: 0\n", "\ninput2: n=7, k=1\noutput2: 1\n", "\ninput3: n=8, k=5\noutput3: 5\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << numberOfChild(5, 0) << endl;\n    cout << numberOfChild(7, 1) << endl;\n    cout << numberOfChild(8, 5) << endl;\n    cout << numberOfChild(6, 3) << endl;\n    cout << numberOfChild(10, 10) << endl;\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minOperations.cpp", "source_code_str": "    int minOperations(vector<int>& nums) {\n        int n = nums.size();\n        int ans = 0;\n        for (int i = 0; i < n - 2; i++) {\n            if (nums[i] == 0) {\n                nums[i + 1] ^= 1;\n                nums[i + 2] ^= 1;\n                ans++;\n            }\n        }\n        return nums[n - 2] && nums[n - 1] ? ans : -1;\n    }", "source_code_block": "", "target_Lan": "java###minOperations_Test.java", "reference_code": "    public static int minOperations(int[] nums) {\n        int n = nums.length;\n        int ans = 0;\n        for (int i = 0; i < n - 2; i++) {\n            if (nums[i] == 0) {\n                nums[i + 1] ^= 1;\n                nums[i + 2] ^= 1;\n                ans++;\n            }\n        }\n        return nums[n - 2] != 0 && nums[n - 1] != 0 ? ans : -1;\n    }", "target_method_signature": "minOperations", "source_method_signature": "minOperations", "target_allMS": "    public static int minOperations(int[] nums) {", "source_allMS": "    int minOperations(vector<int>& nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\nimport java.util.Arrays;\npublic class minOperations_Test {\n// TOFILL\n    public static void main(String[] args) {\n        int[] test1 = {1, 1, 1};\n        int[] test2 = {0, 0, 0};\n        int[] test3 = {1, 0, 0, 1};\n        int[] test4 = {0, 1, 0, 1, 0, 1};\n        int[] test5 = {1, 1, 0};\n\n        System.out.println(minOperations(test1));\n        System.out.println(minOperations(test2));\n        System.out.println(minOperations(test3));\n        System.out.println(minOperations(test4));\n        System.out.println(minOperations(test5));\n    }\n}", "all_input_output_value": "\ninput1: nums = {1, 1, 1}\noutput1: 0\n--------\ninput2: nums = {0, 0, 0}\noutput2: 1\n--------\ninput3: nums = {1, 0, 0, 1}\noutput3: -1\n--------\ninput4: nums = {0, 1, 0, 1, 0, 1}\noutput4: 3\n--------\ninput5: nums = {1, 1, 0}\noutput5: -1\n", "input_output_value": ["\ninput1: nums = {1, 1, 1}\noutput1: 0\n", "\ninput2: nums = {0, 0, 0}\noutput2: 1\n", "\ninput3: nums = {1, 0, 0, 1}\noutput3: -1\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 1, 1};\n    vector<int> input2 = {0, 0, 0};\n    vector<int> input3 = {1, 0, 0, 1};\n    vector<int> input4 = {0, 1, 0, 1, 0, 1};\n    vector<int> input5 = {1, 1, 0};\n    \n    cout << minOperations(input1) << endl;\n    cout << minOperations(input2) << endl;\n    cout << minOperations(input3) << endl;\n    cout << minOperations(input4) << endl;\n    cout << minOperations(input5) << endl;\n    \n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minEnd.cpp", "source_code_str": "    long long minEnd(int n, int x) {\n        n--; \n        long long ans = x;\n        int i = 0, j = 0;\n        while (n >> j) {\n            \n            if ((ans >> i & 1) == 0) {\n                \n                ans |= (long long) (n >> j & 1) << i;\n                j++;\n            }\n            i++;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "java###minEnd_Test.java", "reference_code": "    public static long minEnd(int n, int x) {\n        n--; \n        long ans = x;\n        int i = 0, j = 0;\n        while ((n >> j) > 0) {\n            \n            if ((ans >> i & 1) == 0) {\n                \n                ans |= (long) (n >> j & 1) << i;\n                j++;\n            }\n            i++;\n        }\n        return ans;\n    }", "target_method_signature": "minEnd", "source_method_signature": "minEnd", "target_allMS": "    public static long minEnd(int n, int x) {", "source_allMS": "    long long minEnd(int n, int x) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "import java.util.*;\nimport java.lang.*;", "commentTag": "//", "target_code_shell": "import java.util.*;\nimport java.lang.*;\n\npublic class minEnd_Test {\n// TOFILL\n    public static void main(String[] args) {\n        System.out.println(minEnd(1, 0));   // Output for input1\n        System.out.println(minEnd(2, 1));   // Output for input2\n        System.out.println(minEnd(15, 8));  // Output for input3\n        System.out.println(minEnd(4, 3));   // Output for input4\n        System.out.println(minEnd(1, 1));   // Output for input5\n    }\n}", "all_input_output_value": "\ninput1: n=1, x=0\noutput1: 0\n--------\ninput2: n=2, x=1\noutput2: 3\n--------\ninput3: n=15, x=8\noutput3: 30\n--------\ninput4: n=4, x=3\noutput4: 15\n--------\ninput5: n=1, x=1\noutput5: 1\n", "input_output_value": ["\ninput1: n=1, x=0\noutput1: 0\n", "\ninput2: n=2, x=1\noutput2: 3\n", "\ninput3: n=15, x=8\noutput3: 30\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << minEnd(1, 0) << endl;\n    cout << minEnd(2, 1) << endl;\n    cout << minEnd(15, 8) << endl;\n    cout << minEnd(4, 3) << endl;\n    cout << minEnd(1, 1) << endl;\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###giveGem.cpp", "source_code_str": "int giveGem(vector<int>& gem, vector<vector<int>>& operations) {\n        for (auto &operation : operations) {\n            int x = operation[0], y = operation[1];\n            int number = gem[x] / 2;\n            gem[x] -= number;\n            gem[y] += number;\n        }\n        int mn = *min_element(gem.begin(), gem.end());\n        int mx = *max_element(gem.begin(), gem.end());\n        return mx - mn;\n    }", "source_code_block": "", "target_Lan": "java###giveGem_Test.java", "reference_code": "public static int giveGem(int[] gem, int[][] operations) {\n        for (int[] operation : operations) {\n            int x = operation[0], y = operation[1];\n            int number = gem[x] / 2;\n            gem[x] -= number;\n            gem[y] += number;\n        }\n        int mn = gem[0], mx = gem[0];\n        for (int number : gem) {\n            mn = Math.min(number, mn);\n            mx = Math.max(number, mx);\n        }\n        return mx - mn;\n    }", "target_method_signature": "giveGem", "source_method_signature": "giveGem", "source_allMS": "int giveGem(vector<int>& gem, vector<vector<int>>& operations) {", "source_import": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;", "target_import": "", "commentTag": "//", "target_code_shell": "import java.util.Arrays;\npublic class giveGem_Test {\n// TOFILL\n    public static void main(String[] args) {\n        // Test input 1\n        int[] gem1 = {10, 20, 30};\n        int[][] operations1 = {{0, 1}, {1, 2}};\n        System.out.println(giveGem(gem1, operations1));\n\n        // Test input 2\n        int[] gem2 = {50, 50, 50, 50};\n        int[][] operations2 = {{0, 1}, {1, 2}, {2, 3}};\n        System.out.println(giveGem(gem2, operations2));\n\n        // Test input 3\n        int[] gem3 = {0, 0, 0, 0};\n        int[][] operations3 = {{0, 1}, {1, 2}, {2, 0}};\n        System.out.println(giveGem(gem3, operations3));\n\n        // Test input 4\n        int[] gem4 = {5};\n        int[][] operations4 = {}; // No operations\n        System.out.println(giveGem(gem4, operations4));\n\n        // Test input 5\n        int[] gem5 = {100, 200, 300, 400};\n        int[][] operations5 = {{0, 3}, {1, 3}, {2, 3}};\n        System.out.println(giveGem(gem5, operations5));\n    }\n}", "all_input_output_value": "\ninput1: gem={10, 20, 30}, operations={{0, 1}, {1, 2}}\noutput1: 37\n--------\ninput2: gem={50, 50, 50, 50}, operations={{0, 1}, {1, 2}, {2, 3}}\noutput2: 68\n--------\ninput3: gem={0, 0, 0, 0}, operations={{0, 1}, {1, 2}, {2, 0}}\noutput3: 0\n--------\ninput4: gem={5}, operations={}\noutput4: 0\n--------\ninput5: gem={100, 200, 300, 400}, operations={{0, 3}, {1, 3}, {2, 3}}\noutput5: 650\n", "target_allMS": "public static int giveGem(int[] gem, int[][] operations) {", "input_output_value": ["\ninput1: gem={10, 20, 30}, operations={{0, 1}, {1, 2}}\noutput1: 37\n", "\ninput2: gem={50, 50, 50, 50}, operations={{0, 1}, {1, 2}, {2, 3}}\noutput2: 68\n", "\ninput3: gem={0, 0, 0, 0}, operations={{0, 1}, {1, 2}, {2, 0}}\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> gem1 = {10, 20, 30};\n    vector<vector<int>> operations1 = {{0, 1}, {1, 2}};\n    cout << giveGem(gem1, operations1) << endl;\n\n    vector<int> gem2 = {50, 50, 50, 50};\n    vector<vector<int>> operations2 = {{0, 1}, {1, 2}, {2, 3}};\n    cout << giveGem(gem2, operations2) << endl;\n    \n    vector<int> gem3 = {0, 0, 0, 0};\n    vector<vector<int>> operations3 = {{0, 1}, {1, 2}, {2, 0}};\n    cout << giveGem(gem3, operations3) << endl;\n    \n    vector<int> gem4 = {5};\n    vector<vector<int>> operations4 = {};\n    cout << giveGem(gem4, operations4) << endl;\n\n    vector<int> gem5 = {100, 200, 300, 400};\n    vector<vector<int>> operations5 = {{0, 3}, {1, 3}, {2, 3}};\n    cout << giveGem(gem5, operations5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###MaxDiff.cpp", "source_code_str": "    int MaxDiff(vector<int> &A, int n) {\n        vector<int> mx(1001, -1), mn(1001, n + 1);\n        for (int i = 0; i < n; i++) {\n            mx[A[i]] = max(mx[A[i]], i);\n            mn[A[i]] = min(mn[A[i]], i);\n        }\n        int ans = -1;\n        for (int i = 1; i <= 1000; i++) {\n            for (int j = i; j <= 1000; j++) {\n                int era = __gcd(i, j);\n                if (era != 1)\n                    continue;\n                if (mx[i] != -1 && mx[j] != -1) {\n                    ans = max(ans, abs(mx[i] - mn[j]));\n                    ans = max(ans, abs(mx[j] - mn[i]));\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "python###MaxDiff.py", "reference_code": "def MaxDiff(A: List[int],n: int) -> int:\n    # Initialize the mx and mn lists with default values\n    mx = [-1] * 1001\n    mn = [n + 1] * 1001\n    # Populate mx and mn based on the indices in A\n    for i in range(n):\n        mx[A[i]] = max(mx[A[i]], i)\n        mn[A[i]] = min(mn[A[i]], i)\n    ans = -1\n    # Calculate the maximum difference where the GCD is 1\n    for i in range(1, 1001):\n        for j in range(i, 1001):\n            era = gcd(i, j)\n            if era != 1:\n                continue\n            if mx[i] != -1 and mx[j] != -1:\n                ans = max(ans, abs(mx[i] - mn[j]))\n                ans = max(ans, abs(mx[j] - mn[i]))\n    return ans", "target_method_signature": "MaxDiff", "source_method_signature": "MaxDiff", "target_allMS": "def MaxDiff(A: List[int], n: int) -> int:", "source_allMS": "    int MaxDiff(vector<int> &A, int n) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "from typing import List\nfrom math import gcd", "commentTag": "#", "target_code_shell": "from typing import List\nfrom math import gcd\nfrom typing import List\nfrom math import gcd\n# TOFILL\nif __name__ == \"__main__\":\n    print(MaxDiff([1, 2, 3, 4, 5], 5))\n    print(MaxDiff([1, 1, 1, 1, 1], 5))\n    print(MaxDiff([2, 2, 2, 2, 2], 5))\n    print(MaxDiff([1000, 999, 20, 1000, 5], 5))\n    print(MaxDiff([10, 50, 100, 250, 500], 5))\n    print(MaxDiff([3, 5, 7, 9, 11], 5))\n    print(MaxDiff([6, 6, 12, 18, 24], 5))\n    print(MaxDiff([15, 25, 35, 5, 5], 5))\n    print(MaxDiff([], 0))\n    print(MaxDiff([1]*1000, 1000))", "all_input_output_value": "\ninput1: A=[1, 2, 3, 4, 5], n=5\noutput1: 4\n--------\ninput2: A=[1, 1, 1, 1, 1], n=5\noutput2: 4\n--------\ninput3: A=[2, 2, 2, 2, 2], n=5\noutput3: -1\n--------\ninput4: A=[1000, 999, 20, 1000, 5], n=5\noutput4: 3\n--------\ninput5: A=[10, 50, 100, 250, 500], n=5\noutput5: -1\n--------\ninput6: A=[3, 5, 7, 9, 11], n=5\noutput6: 4\n--------\ninput7: A=[6, 6, 12, 18, 24], n=5\noutput7: -1\n--------\ninput8: A=[15, 25, 35, 5, 5], n=5\noutput8: -1\n--------\ninput9: A=[], n=0\noutput9: -1\n--------\ninput10: A=[1]*1000, n=1000\noutput10: 999\n", "input_output_value": ["\ninput1: A=[1, 2, 3, 4, 5], n=5\noutput1: 4\n", "\ninput2: A=[1, 1, 1, 1, 1], n=5\noutput2: 4\n", "\ninput3: A=[2, 2, 2, 2, 2], n=5\noutput3: -1\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> input1 = {1, 2, 3, 4, 5};\n    cout << MaxDiff(input1, 5) << endl;\n    \n    vector<int> input2 = {1, 1, 1, 1, 1};\n    cout << MaxDiff(input2, 5) << endl;\n\n    vector<int> input3 = {2, 2, 2, 2, 2};\n    cout << MaxDiff(input3, 5) << endl;\n\n    vector<int> input4 = {1000, 999, 20, 1000, 5};\n    cout << MaxDiff(input4, 5) << endl;\n\n    vector<int> input5 = {10, 50, 100, 250, 500};\n    cout << MaxDiff(input5, 5) << endl;\n\n    vector<int> input6 = {3, 5, 7, 9, 11};\n    cout << MaxDiff(input6, 5) << endl;\n\n    vector<int> input7 = {6, 6, 12, 18, 24};\n    cout << MaxDiff(input7, 5) << endl;\n\n    vector<int> input8 = {15, 25, 35, 5, 5};\n    cout << MaxDiff(input8, 5) << endl;\n\n    vector<int> input9 = {};\n    cout << MaxDiff(input9, 0) << endl;\n\n    vector<int> input10(1000, 1);\n    cout << MaxDiff(input10, 1000) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###findFun.cpp", "source_code_str": "    int findFun(int n){\n        int mod=1000000007;\n        vector<long long>dp={2,5,9,7};\n        if (n<=3) return dp[n];\n        long long p1=2;\n        long long p2=5;\n        long long p3=9;\n        long long p4=7;\n        for (int i=4;i<=n;i++){\n            if (i%2==0){\n                int a=(p3*(i-2))%mod;\n                int b=(p1*(i-4))%mod;\n                int ele=(a+b)%mod;\n                p1=p2;\n                p2=p3;\n                p3=p4;\n                p4=ele;\n            }\n            else{\n                int a=(p4*(i-1))%mod;\n                int b=(p2*(i-3))%mod;\n                int ele=(a+b)%mod;\n                p1=p2;\n                p2=p3;\n                p3=p4;\n                p4=ele;\n            }\n        }\n        return p4;\n    }", "source_code_block": "", "target_Lan": "python###findFun.py", "reference_code": "def findFun( n : int) -> int:\n    dp = [2,5,9,7]\n    if n<=3:\n        return dp[n]\n    mod = 10**9+7\n    for i in range(4,n+1):\n        if i&1==0:\n            z = dp[2]*(i-2) + dp[0]*(i-4)\n        else:\n            z = dp[3]*(i-1) + dp[1]*(i-3)\n        z = z%mod  \n        dp[0] = dp[1]\n        dp[1] = dp[2]\n        dp[2] = dp[3]\n        dp[3] = z\n    return dp[-1]", "target_method_signature": "findFun", "source_method_signature": "findFun", "target_allMS": "def findFun( n : int) -> int:", "source_allMS": "    int findFun(int n){", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "", "commentTag": "#", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    test_inputs = [0, 1, 2, 3, 4, 5, 6, 10, 15, 20]\n    for n in test_inputs:\n        print(findFun(n))", "all_input_output_value": "\ninput1: n=0\noutput1: 2\n--------\ninput2: n=1\noutput2: 5\n--------\ninput3: n=2\noutput3: 9\n--------\ninput4: n=3\noutput4: 7\n--------\ninput5: n=4\noutput5: 18\n--------\ninput6: n=5\noutput6: 90\n--------\ninput7: n=6\noutput7: 90\n--------\ninput8: n=10\noutput8: 5436\n--------\ninput9: n=15\noutput9: 11427120\n--------\ninput10: n=20\noutput10: 666733323\n", "input_output_value": ["\ninput1: n=0\noutput1: 2\n", "\ninput2: n=1\noutput2: 5\n", "\ninput3: n=2\noutput3: 9\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    cout << findFun(0) << endl;\n    cout << findFun(1) << endl;\n    cout << findFun(2) << endl;\n    cout << findFun(3) << endl;\n    cout << findFun(4) << endl;\n    cout << findFun(5) << endl;\n    cout << findFun(6) << endl;\n    cout << findFun(10) << endl;\n    cout << findFun(15) << endl;\n    cout << findFun(20) << endl;\n}", "TAG": "Success"}
{"source_Lan": "cpp###numberOfStableArrays.cpp", "source_code_str": "int numberOfStableArrays(int zero, int one, int limit) {\n        vector<vector<vector<long long>>> dp(zero + 1, vector<vector<long long>>(one + 1, vector<long long>(2)));\n        long long mod = 1e9 + 7;\n        for (int i = 0; i <= min(zero, limit); i++) {\n            dp[i][0][0] = 1;\n        }\n        for (int j = 0; j <= min(one, limit); j++) {\n            dp[0][j][1] = 1;\n        }\n        for (int i = 1; i <= zero; i++) {\n            for (int j = 1; j <= one; j++) {\n                if (i > limit) {\n                    dp[i][j][0] = dp[i - 1][j][0] + dp[i - 1][j][1] - dp[i - limit - 1][j][1];\n                } else {\n                    dp[i][j][0] = dp[i - 1][j][0] + dp[i - 1][j][1];\n                }\n                dp[i][j][0] = (dp[i][j][0] % mod + mod) % mod;\n                if (j > limit) {\n                    dp[i][j][1] = dp[i][j - 1][1] + dp[i][j - 1][0] - dp[i][j - limit - 1][0];\n                } else {\n                    dp[i][j][1] = dp[i][j - 1][1] + dp[i][j - 1][0];\n                }\n                dp[i][j][1] = (dp[i][j][1] % mod + mod) % mod;\n            }\n        }\n        return (dp[zero][one][0] + dp[zero][one][1]) % mod;\n    }", "source_code_block": "", "target_Lan": "python###numberOfStableArrays.py", "reference_code": "def numberOfStableArrays( zero: int, one: int, limit: int) -> int:\n        dp = [[[0, 0] for _ in range(one + 1)] for _ in range(zero + 1)]\n        mod = int(1e9 + 7)\n        for i in range(min(zero, limit) + 1):\n            dp[i][0][0] = 1\n        for j in range(min(one, limit) + 1):\n            dp[0][j][1] = 1\n        for i in range(1, zero + 1):\n            for j in range(1, one + 1):\n                if i > limit:\n                    dp[i][j][0] = dp[i - 1][j][0] + dp[i - 1][j][1] - dp[i - limit - 1][j][1]\n                else:\n                    dp[i][j][0] = dp[i - 1][j][0] + dp[i - 1][j][1]\n                dp[i][j][0] = (dp[i][j][0] % mod + mod) % mod\n                if j > limit:\n                    dp[i][j][1] = dp[i][j - 1][1] + dp[i][j - 1][0] - dp[i][j - limit - 1][0]\n                else:\n                    dp[i][j][1] = dp[i][j - 1][1] + dp[i][j - 1][0]\n                dp[i][j][1] = (dp[i][j][1] % mod + mod) % mod\n        return (dp[zero][one][0] + dp[zero][one][1]) % mod\n", "target_method_signature": "numberOfStableArrays", "source_method_signature": "numberOfStableArrays", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <vector>\nusing namespace std;", "target_import": "", "commentTag": "", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(numberOfStableArrays(0, 0, 0))\n    print(numberOfStableArrays(0, 10, 5))\n    print(numberOfStableArrays(10, 0, 5))\n    print(numberOfStableArrays(5, 5, 0))\n    print(numberOfStableArrays(10, 5, 10))\n    print(numberOfStableArrays(10, 10, 1))\n    print(numberOfStableArrays(15, 15, 15))\n    print(numberOfStableArrays(5, 20, 8))\n    print(numberOfStableArrays(20, 5, 10))\n    print(numberOfStableArrays(10, 10, 100))", "all_input_output_value": "\ninput1: numberOfStableArrays(0, 0, 0)\noutput1: 2\n--------\ninput2: numberOfStableArrays(0, 10, 5)\noutput2: 0\n--------\ninput3: numberOfStableArrays(10, 0, 5)\noutput3: 0\n--------\ninput4: numberOfStableArrays(5, 5, 0)\noutput4: 0\n--------\ninput5: numberOfStableArrays(10, 5, 10)\noutput5: 3003\n--------\ninput6: numberOfStableArrays(10, 10, 1)\noutput6: 2\n--------\ninput7: numberOfStableArrays(15, 15, 15)\noutput7: 155117520\n--------\ninput8: numberOfStableArrays(5, 20, 8)\noutput8: 27237\n--------\ninput9: numberOfStableArrays(20, 5, 10)\noutput9: 41118\n--------\ninput10: numberOfStableArrays(10, 10, 100)\noutput10: 184756\n", "input_output_value": ["\ninput1: numberOfStableArrays(0, 0, 0)\noutput1: 2\n", "\ninput2: numberOfStableArrays(0, 10, 5)\noutput2: 0\n", "\ninput3: numberOfStableArrays(10, 0, 5)\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    cout << numberOfStableArrays(0, 0, 0) << endl;\n    cout << numberOfStableArrays(0, 10, 5) << endl;\n    cout << numberOfStableArrays(10, 0, 5) << endl;\n    cout << numberOfStableArrays(5, 5, 0) << endl;\n    cout << numberOfStableArrays(10, 5, 10) << endl;\n    cout << numberOfStableArrays(10, 10, 1) << endl;\n    cout << numberOfStableArrays(15, 15, 15) << endl;\n    cout << numberOfStableArrays(5, 20, 8) << endl;\n    cout << numberOfStableArrays(20, 5, 10) << endl;\n    cout << numberOfStableArrays(10, 10, 100) << endl;\n}"}
{"source_Lan": "cpp###maxmiumScore.cpp", "source_code_str": "int maxmiumScore(vector<int>& cards, int cnt) {\n        sort(cards.begin(), cards.end());\n        \n        int ans = 0;\n        int tmp = 0;\n        int odd, even = -1;\n        int end = cards.size() - cnt;\n        for (int i = cards.size() - 1; i >= end; i--) {\n            tmp += cards[i];\n            if (cards[i] & 1) {\n                odd = cards[i];\n            } else {\n                even = cards[i];\n            }\n        }\n\n        if (!(tmp & 1)) {\n            return tmp;\n        }\n\n        for (int i = cards.size() - cnt - 1; i >= 0; i--) {\n            if (cards[i] & 1) {\n                if (even != -1) {\n                    ans = max(ans, tmp - even + cards[i]);\n                }\n            } else {\n                if (odd != -1) {\n                    ans = max(ans, tmp - odd + cards[i]);\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "python###maxmiumScore.py", "reference_code": "def maxmiumScore( cards: List[int], cnt: int) -> int:\n        cards.sort(reverse=True)\n        ans = 0\n        tmp = 0\n        odd = even = -1\n        end = len(cards) - cnt\n        for i in range(cnt):\n            tmp += cards[i]\n            if cards[i] % 2 == 1:\n                odd = cards[i]\n            else:\n                even = cards[i]\n        if tmp % 2 == 0:\n            return tmp\n        for i in range(cnt, len(cards)):\n            if cards[i] % 2 == 1:\n                if even != -1:\n                    ans = max(ans, tmp - even + cards[i])\n            else:\n                if odd != -1:\n                    ans = max(ans, tmp - odd + cards[i])\n\n        return ans", "target_method_signature": "maxmiumScore", "source_method_signature": "maxmiumScore", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <vector>\n#include <algorithm> // for sort and max\nusing namespace std;", "target_import": "from typing import List", "commentTag": "", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(maxmiumScore([], 0))                       # Input 1\n    print(maxmiumScore([1, 2, 3, 4, 5], 5))         # Input 2\n    print(maxmiumScore([1, 1, 1, 1, 1], 5))         # Input 3\n    print(maxmiumScore([2, 4, 6, 8, 10], 5))        # Input 4\n    print(maxmiumScore([1, 3, 5, 7, 9, 11], 3))     # Input 5\n    print(maxmiumScore([-1, -2, -3, -4, -5], 3))    # Input 6\n    print(maxmiumScore([10, 9, 8, 7, 6], 2))        # Input 7\n    print(maxmiumScore([0, 1, 2, 3, 4, 5], 4))      # Input 8\n    print(maxmiumScore([2, 3, 6, 1, 7, 5], 4))      # Input 9\n    print(maxmiumScore([1, 8], 1))                   # Input 10", "all_input_output_value": "\ninput1: [], k=0\noutput1: 0\n--------\ninput2: [1, 2, 3, 4, 5], k=5\noutput2: 0\n--------\ninput3: [1, 1, 1, 1, 1], k=5\noutput3: 0\n--------\ninput4: [2, 4, 6, 8, 10], k=5\noutput4: 30\n--------\ninput5: [1, 3, 5, 7, 9, 11], k=3\noutput5: 0\n--------\ninput6: [-1, -2, -3, -4, -5], k=3\noutput6: -6\n--------\ninput7: [10, 9, 8, 7, 6], k=2\noutput7: 18\n--------\ninput8: [0, 1, 2, 3, 4, 5], k=4\noutput8: 14\n--------\ninput9: [2, 3, 6, 1, 7, 5], k=4\noutput9: 20\n--------\ninput10: [1, 8], k=1\noutput10: 8\n", "input_output_value": ["\ninput1: [], k=0\noutput1: 0\n", "\ninput2: [1, 2, 3, 4, 5], k=5\noutput2: 0\n", "\ninput3: [1, 1, 1, 1, 1], k=5\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <algorithm> // for sort and max\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    cout << maxmiumScore(input1, 0) << endl;\n\n    vector<int> input2 = {1, 2, 3, 4, 5};\n    cout << maxmiumScore(input2, 5) << endl;\n\n    vector<int> input3 = {1, 1, 1, 1, 1};\n    cout << maxmiumScore(input3, 5) << endl;\n\n    vector<int> input4 = {2, 4, 6, 8, 10};\n    cout << maxmiumScore(input4, 5) << endl;\n\n    vector<int> input5 = {1, 3, 5, 7, 9, 11};\n    cout << maxmiumScore(input5, 3) << endl;\n\n    vector<int> input6 = {-1, -2, -3, -4, -5};\n    cout << maxmiumScore(input6, 3) << endl;\n\n    vector<int> input7 = {10, 9, 8, 7, 6};\n    cout << maxmiumScore(input7, 2) << endl;\n\n    vector<int> input8 = {0, 1, 2, 3, 4, 5};\n    cout << maxmiumScore(input8, 4) << endl;\n\n    vector<int> input9 = {2, 3, 6, 1, 7, 5};\n    cout << maxmiumScore(input9, 4) << endl;\n\n    vector<int> input10 = {1, 8};\n    cout << maxmiumScore(input10, 1) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minRectanglesToCoverPoints.cpp", "source_code_str": "int minRectanglesToCoverPoints(vector<vector<int>>& points, int w) {\n        sort(points.begin(), points.end());\n        int res = 0;\n        int bound = -1;\n        for (auto &p : points) {\n            if (p[0] > bound) {\n                bound = p[0] + w;\n                res++;\n            }\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "python###minRectanglesToCoverPoints.py", "reference_code": "def minRectanglesToCoverPoints( points: List[List[int]], w: int) -> int:\n        points.sort()\n        res = 0\n        bound = -1\n        for p in points:\n            if p[0] > bound:\n                bound = p[0] + w\n                res += 1\n        return res\n", "target_method_signature": "minRectanglesToCoverPoints", "source_method_signature": "minRectanglesToCoverPoints", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;", "target_import": "from typing import List", "commentTag": "", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minRectanglesToCoverPoints([[1, 1], [2, 2], [3, 3]], 2))\n    print(minRectanglesToCoverPoints([[1, 1], [2, 1], [3, 1]], 3))\n    print(minRectanglesToCoverPoints([[1, 1], [5, 1], [10, 1]], 3))\n    print(minRectanglesToCoverPoints([[1, 1], [1, 1], [1, 1]], 1))\n    print(minRectanglesToCoverPoints([[0, 0], [-1, -1], [-2, -2]], 2))\n    print(minRectanglesToCoverPoints([[1, 1], [2, 2]], 1))\n    print(minRectanglesToCoverPoints([[3, 1], [4, 1], [5, 1], [6, 1]], 1))\n    print(minRectanglesToCoverPoints([[0, 0], [1, 1], [3, 3]], 1))\n    print(minRectanglesToCoverPoints([[0, 0], [2, 2], [4, 4]], 5))\n    print(minRectanglesToCoverPoints([[5, 5], [6, 6], [7, 7], [8, 8]], 10))", "all_input_output_value": "\ninput1: [[1, 1], [2, 2], [3, 3]], n=2\noutput1: 1\n--------\ninput2: [[1, 1], [2, 1], [3, 1]], n=3\noutput2: 1\n--------\ninput3: [[1, 1], [5, 1], [10, 1]], n=3\noutput3: 3\n--------\ninput4: [[1, 1], [1, 1], [1, 1]], n=1\noutput4: 1\n--------\ninput5: [[0, 0], [-1, -1], [-2, -2]], n=2\noutput5: 1\n--------\ninput6: [[1, 1], [2, 2]], n=1\noutput6: 1\n--------\ninput7: [[3, 1], [4, 1], [5, 1], [6, 1]], n=1\noutput7: 2\n--------\ninput8: [[0, 0], [1, 1], [3, 3]], n=1\noutput8: 2\n--------\ninput9: [[0, 0], [2, 2], [4, 4]], n=5\noutput9: 1\n--------\ninput10: [[5, 5], [6, 6], [7, 7], [8, 8]], n=10\noutput10: 1\n", "input_output_value": ["\ninput1: [[1, 1], [2, 2], [3, 3]], n=2\noutput1: 1\n", "\ninput2: [[1, 1], [2, 1], [3, 1]], n=3\noutput2: 1\n", "\ninput3: [[1, 1], [5, 1], [10, 1]], n=3\noutput3: 3\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<vector<int>> input1 = {{1, 1}, {2, 2}, {3, 3}};\n    cout << minRectanglesToCoverPoints(input1, 2) << endl;\n    \n    vector<vector<int>> input2 = {{1, 1}, {2, 1}, {3, 1}};\n    cout << minRectanglesToCoverPoints(input2, 3) << endl;\n    \n    vector<vector<int>> input3 = {{1, 1}, {5, 1}, {10, 1}};\n    cout << minRectanglesToCoverPoints(input3, 3) << endl;\n\n    vector<vector<int>> input4 = {{1, 1}, {1, 1}, {1, 1}};\n    cout << minRectanglesToCoverPoints(input4, 1) << endl;\n\n    vector<vector<int>> input5 = {{0, 0}, {-1, -1}, {-2, -2}};\n    cout << minRectanglesToCoverPoints(input5, 2) << endl;\n\n    vector<vector<int>> input6 = {{1, 1}, {2, 2}};\n    cout << minRectanglesToCoverPoints(input6, 1) << endl;\n\n    vector<vector<int>> input7 = {{3, 1}, {4, 1}, {5, 1}, {6, 1}};\n    cout << minRectanglesToCoverPoints(input7, 1) << endl;\n\n    vector<vector<int>> input8 = {{0, 0}, {1, 1}, {3, 3}};\n    cout << minRectanglesToCoverPoints(input8, 1) << endl;\n\n    vector<vector<int>> input9 = {{0, 0}, {2, 2}, {4, 4}};\n    cout << minRectanglesToCoverPoints(input9, 5) << endl;\n\n    vector<vector<int>> input10 = {{5, 5}, {6, 6}, {7, 7}, {8, 8}};\n    cout << minRectanglesToCoverPoints(input10, 10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###getSmallestString2.cpp", "source_code_str": "string getSmallestString2(string s, int k) {\n        for (int i = 0; i < s.size(); ++i) {\n            int dis = min(s[i] - 'a', 'z' - s[i] + 1);\n            if (dis <= k) {\n                s[i] = 'a';\n                k -= dis;\n            }\n            else {\n                s[i] -= k;\n                break;\n            }\n        }\n        return s;\n    }", "source_code_block": "", "target_Lan": "python###getSmallestString2.py", "reference_code": "def getSmallestString2( s: str, k: int) -> str:\n        ans = list(s)\n        for i, ch in enumerate(s):\n            dis = min(ord(s[i]) - ord('a'), ord('z') - ord(s[i]) + 1)\n            if dis <= k:\n                ans[i] = 'a'\n                k -= dis\n            else:\n                ans[i] = chr(ord(ans[i]) - k)\n                break\n        return \"\".join(ans)", "target_method_signature": "getSmallestString2", "source_method_signature": "getSmallestString2", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;", "target_import": "", "commentTag": "", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(getSmallestString2(\"abcd\", 2))\n    print(getSmallestString2(\"xyz\", 3))\n    print(getSmallestString2(\"a\"*100, 5))\n    print(getSmallestString2(\"abcde\", 0))\n    print(getSmallestString2(\"xyz\", 1))\n    print(getSmallestString2(\"aba\", 10))\n    print(getSmallestString2(\"azby\", 5))\n    print(getSmallestString2(\"helloworld\", 20))\n    print(getSmallestString2(\"zxy\", 2))\n    print(getSmallestString2(\"a\", 1))", "all_input_output_value": "\ninput1: s=\"abcd\", k=2\noutput1: aabd\n--------\ninput2: s=\"xyz\", k=3\noutput2: ayz\n--------\ninput3: s=\"a\"*100, k=5\noutput3: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n--------\ninput4: s=\"abcde\", k=0\noutput4: abcde\n--------\ninput5: s=\"xyz\", k=1\noutput5: wyz\n--------\ninput6: s=\"aba\", k=10\noutput6: aaa\n--------\ninput7: s=\"azby\", k=5\noutput7: aaaa\n--------\ninput8: s=\"helloworld\", k=20\noutput8: aacloworld\n--------\ninput9: s=\"zxy\", k=2\noutput9: awy\n--------\ninput10: s=\"a\", k=1\noutput10: a\n", "input_output_value": ["\ninput1: s=\"abcd\", k=2\noutput1: aabd\n", "\ninput2: s=\"xyz\", k=3\noutput2: ayz\n", "\ninput3: s=\"a\"*100, k=5\noutput3: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << getSmallestString2(\"abcd\", 2) << endl;\n    cout << getSmallestString2(\"xyz\", 3) << endl;\n    cout << getSmallestString2(string(100, 'a'), 5) << endl;\n    cout << getSmallestString2(\"abcde\", 0) << endl;\n    cout << getSmallestString2(\"xyz\", 1) << endl;\n    cout << getSmallestString2(\"aba\", 10) << endl;\n    cout << getSmallestString2(\"azby\", 5) << endl;\n    cout << getSmallestString2(\"helloworld\", 20) << endl;\n    cout << getSmallestString2(\"zxy\", 2) << endl;\n    cout << getSmallestString2(\"a\", 1) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minimumOperations.cpp", "source_code_str": "int minimumOperations(string num) {\n        int n = num.length();\n        bool find0 = false, find5 = false;\n        for (int i = n - 1; i >= 0; --i) {\n            if (num[i] == '0' || num[i] == '5') {\n                if (find0) {\n                    return n - i - 2;\n                }\n                if (num[i] == '0') {\n                    find0 = true;\n                } else {\n                    find5 = true;\n                }\n            } else if (num[i] == '2' || num[i] == '7') {\n                if (find5) {\n                    return n - i - 2;\n                }\n            }\n        }\n        if (find0) {\n            return n - 1;\n        }\n        return n;\n    }", "source_code_block": "", "target_Lan": "python###minimumOperations.py", "reference_code": " def minimumOperations( num: str) -> int:\n        n = len(num)\n        find0 = find5 = False\n        for i in range(n - 1, -1, -1):\n            if num[i] in ['0', '5']:\n                if find0:\n                    return n - i - 2\n                if num[i] == '0':\n                    find0 = True\n                else:\n                    find5 = True\n            elif num[i] in ['2', '7']:\n                if find5:\n                    return n - i - 2\n        if find0:\n            return n - 1\n        return n", "target_method_signature": "minimumOperations", "source_method_signature": "minimumOperations", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <string>\nusing namespace std;", "target_import": "", "commentTag": "", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    test_inputs = [\n        \"000\",        # All zeros, should return n-1 (which is 2)\n        \"555\",        # All fives, should return n-1 (which is 2)\n        \"257\",        # Contains '2' and '5', should return n-2 (which is 1)\n        \"170\",        # Contains '0', should return n-1 (which is 2)\n        \"123456\",     # Does not contain '0', '5', '2', or '7', should return n (which is 6)\n        \"25\",         # Contains '2', should return n-1 (which is 1)\n        \"70\",         # Contains '0', should return n-1 (which is 1)\n        \"975\",        # Contains '5', should return n-2 (which is 1)\n        \"22\",         # Contains '2' only, should return n-1 (which is 1)\n        \"1230\"        # Contains '0', should return n-1 (which is 3)\n    ]\n    for input_str in test_inputs:\n        print(minimumOperations(input_str))", "all_input_output_value": "\ninput1: a=\"000\"\noutput1: 0\n--------\ninput2: a=\"555\"\noutput2: 3\n--------\ninput3: a=\"257\"\noutput3: 1\n--------\ninput4: a=\"170\"\noutput4: 2\n--------\ninput5: a=\"123456\"\noutput5: 3\n--------\ninput6: a=\"25\"\noutput6: 0\n--------\ninput7: a=\"70\"\noutput7: 1\n--------\ninput8: a=\"975\"\noutput8: 0\n--------\ninput9: a=\"22\"\noutput9: 2\n--------\ninput10: a=\"1230\"\noutput10: 3\n", "input_output_value": ["\ninput1: a=\"000\"\noutput1: 0\n", "\ninput2: a=\"555\"\noutput2: 3\n", "\ninput3: a=\"257\"\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <string>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << minimumOperations(\"000\") << endl;\n    cout << minimumOperations(\"555\") << endl;\n    cout << minimumOperations(\"257\") << endl;\n    cout << minimumOperations(\"170\") << endl;\n    cout << minimumOperations(\"123456\") << endl;\n    cout << minimumOperations(\"25\") << endl;\n    cout << minimumOperations(\"70\") << endl;\n    cout << minimumOperations(\"975\") << endl;\n    cout << minimumOperations(\"22\") << endl;\n    cout << minimumOperations(\"1230\") << endl;\n}"}
{"source_Lan": "cpp###relocateMarbles.cpp", "source_code_str": "vector<int> relocateMarbles(vector<int>& nums, vector<int>& moveFrom, vector<int>& moveTo) {\n        vector<int> ans;\n        unordered_map<int, bool> mp;\n\n        for (int i = 0; i < nums.size(); i++) {\n            mp[nums[i]] = true;\n        }\n\n        for (int i = 0; i < moveFrom.size(); i++) {\n            mp.erase(moveFrom[i]);\n            mp[moveTo[i]] = true;\n        }\n\n        for (const auto& pair : mp) {\n            ans.push_back(pair.first);\n        }\n        sort(ans.begin(), ans.end());\n        return ans;\n    }", "source_code_block": "", "target_Lan": "python###relocateMarbles.py", "reference_code": "def relocateMarbles( nums: List[int], moveFrom: List[int], moveTo: List[int]) -> List[int]:\n        mp = {}\n        ans = []\n        for num in nums:\n            mp[num] = True\n        for i in range(len(moveFrom)):\n            if moveFrom[i] in mp:\n                del mp[moveFrom[i]]\n            mp[moveTo[i]] = True\n        ans = list(mp.keys())\n        ans.sort()\n        return ans", "target_method_signature": "relocateMarbles", "source_method_signature": "relocateMarbles", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;", "target_import": "from typing import List", "commentTag": "", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(relocateMarbles([1, 2, 3], [1], [4]))          # Basic case with a valid move\n    print(relocateMarbles([1, 2, 3], [2, 3], [5, 6]))  # Multiple removals\n    print(relocateMarbles([7, 8, 9], [10], [11]))       # moveFrom with element not in nums\n    print(relocateMarbles([], [], []))                   # All empty case\n    print(relocateMarbles([5, 5], [5], [10]))           # Handle duplicates in nums\n    print(relocateMarbles([1, 2], [1], [2]))             # moveFrom and moveTo are the same\n    print(relocateMarbles([1, 2, 3], [1, 2, 3], [4, 5, 6])) # All elements removed\n    print(relocateMarbles([1, 2, 3], [], []))             # No moves at all\n    print(relocateMarbles([1, 3, 5], [5], [1]))           # Add back one removed element\n    print(relocateMarbles([6, 7, 8], [6, 7], [6, 8]))   # Removing 6, then adding 8", "all_input_output_value": "\ninput1: nums=[1, 2, 3], moveFrom=[1], moveTo=[4]\noutput1: [2, 3, 4]\n--------\ninput2: nums=[1, 2, 3], moveFrom=[2, 3], moveTo=[5, 6]\noutput2: [1, 5, 6]\n--------\ninput3: nums=[7, 8, 9], moveFrom=[10], moveTo=[11]\noutput3: [7, 8, 9, 11]\n--------\ninput4: nums=[], moveFrom=[], moveTo=[]\noutput4: []\n--------\ninput5: nums=[5, 5], moveFrom=[5], moveTo=[10]\noutput5: [10]\n--------\ninput6: nums=[1, 2], moveFrom=[1], moveTo=[2]\noutput6: [2]\n--------\ninput7: nums=[1, 2, 3], moveFrom=[1, 2, 3], moveTo=[4, 5, 6]\noutput7: [4, 5, 6]\n--------\ninput8: nums=[1, 2, 3], moveFrom=[], moveTo=[]\noutput8: [1, 2, 3]\n--------\ninput9: nums=[1, 3, 5], moveFrom=[5], moveTo=[1]\noutput9: [1, 3]\n--------\ninput10: nums=[6, 7, 8], moveFrom=[6, 7], moveTo=[6, 8]\noutput10: [6, 8]\n", "input_output_value": ["\ninput1: nums=[1, 2, 3], moveFrom=[1], moveTo=[4]\noutput1: [2, 3, 4]\n", "\ninput2: nums=[1, 2, 3], moveFrom=[2, 3], moveTo=[5, 6]\noutput2: [1, 5, 6]\n", "\ninput3: nums=[7, 8, 9], moveFrom=[10], moveTo=[11]\noutput3: [7, 8, 9, 11]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> nums1 = {1, 2, 3}, moveFrom1 = {1}, moveTo1 = {4};\n    vector<int> result1 = relocateMarbles(nums1, moveFrom1, moveTo1);\n    for(int num : result1) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums2 = {1, 2, 3}, moveFrom2 = {2, 3}, moveTo2 = {5, 6};\n    vector<int> result2 = relocateMarbles(nums2, moveFrom2, moveTo2);\n    for(int num : result2) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums3 = {7, 8, 9}, moveFrom3 = {10}, moveTo3 = {11};\n    vector<int> result3 = relocateMarbles(nums3, moveFrom3, moveTo3);\n    for(int num : result3) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums4 = {}, moveFrom4 = {}, moveTo4 = {};\n    vector<int> result4 = relocateMarbles(nums4, moveFrom4, moveTo4);\n    for(int num : result4) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums5 = {5, 5}, moveFrom5 = {5}, moveTo5 = {10};\n    vector<int> result5 = relocateMarbles(nums5, moveFrom5, moveTo5);\n    for(int num : result5) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums6 = {1, 2}, moveFrom6 = {1}, moveTo6 = {2};\n    vector<int> result6 = relocateMarbles(nums6, moveFrom6, moveTo6);\n    for(int num : result6) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums7 = {1, 2, 3}, moveFrom7 = {1, 2, 3}, moveTo7 = {4, 5, 6};\n    vector<int> result7 = relocateMarbles(nums7, moveFrom7, moveTo7);\n    for(int num : result7) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums8 = {1, 2, 3}, moveFrom8 = {}, moveTo8 = {};\n    vector<int> result8 = relocateMarbles(nums8, moveFrom8, moveTo8);\n    for(int num : result8) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums9 = {1, 3, 5}, moveFrom9 = {5}, moveTo9 = {1};\n    vector<int> result9 = relocateMarbles(nums9, moveFrom9, moveTo9);\n    for(int num : result9) cout << num << \" \"; \n    cout << endl;\n\n    vector<int> nums10 = {6, 7, 8}, moveFrom10 = {6, 7}, moveTo10 = {6, 8};\n    vector<int> result10 = relocateMarbles(nums10, moveFrom10, moveTo10);\n    for(int num : result10) cout << num << \" \"; \n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###countKConstraintSubstrings.cpp", "source_code_str": "int countKConstraintSubstrings(string s, int k) {\n        int ans = 0, left = 0, cnt[2]{};\n        for (int i = 0; i < s.length(); i++) {\n            cnt[s[i] & 1]++;\n            while (cnt[0] > k && cnt[1] > k) {\n                cnt[s[left++] & 1]--;\n            }\n            ans += i - left + 1;\n        }\n        return ans;\n    }\n\n", "source_code_block": "", "target_Lan": "python###countKConstraintSubstrings.py", "reference_code": "def countKConstraintSubstrings(s: str, k: int) -> int:\n        ans = left = 0\n        cnt = [0, 0]\n        for i, c in enumerate(s):\n            cnt[ord(c) & 1] += 1\n            while cnt[0] > k and cnt[1] > k:\n                cnt[ord(s[left]) & 1] -= 1\n                left += 1\n            ans += i - left + 1\n        return ans\n\n", "target_method_signature": "countKConstraintSubstrings", "source_method_signature": "countKConstraintSubstrings", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <string>\nusing namespace std;\n\n", "target_import": "\n", "commentTag": "", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(countKConstraintSubstrings(\"a\", 0))        # Single character, edge case for k=0\n    print(countKConstraintSubstrings(\"abc\", 1))      # Mixed characters, limited k\n    print(countKConstraintSubstrings(\"aaabbb\", 2))    # More characters with even distribution to test increase and decrease of left pointer\n    print(countKConstraintSubstrings(\"ababab\", 3))    # All characters alternating, test max k\n    print(countKConstraintSubstrings(\"\", 1))          # Empty string, ensure the function handles it correctly\n    print(countKConstraintSubstrings(\"aabbcc\", 3))    # Multiple even characters\n    print(countKConstraintSubstrings(\"aaa\", 1))       # All the same character with limited k\n    print(countKConstraintSubstrings(\"abcde\", 2))     # All different characters, testing various combinations\n    print(countKConstraintSubstrings(\"aaaaa\", 2))     # More same characters but with limited k\n    print(countKConstraintSubstrings(\"abab\", 0))      # Manages no odd/even characters correctly", "all_input_output_value": "\ninput1: s=\"a\", k=0\noutput1: 1\n--------\ninput2: s=\"abc\", k=1\noutput2: 6\n--------\ninput3: s=\"aaabbb\", k=2\noutput3: 20\n--------\ninput4: s=\"ababab\", k=3\noutput4: 21\n--------\ninput5: s=\"\", k=1\noutput5: 0\n--------\ninput6: s=\"aabbcc\", k=3\noutput6: 21\n--------\ninput7: s=\"aaa\", k=1\noutput7: 6\n--------\ninput8: s=\"abcde\", k=2\noutput8: 15\n--------\ninput9: s=\"aaaaa\", k=2\noutput9: 15\n--------\ninput10: s=\"abab\", k=0\noutput10: 4\n", "input_output_value": ["\ninput1: s=\"a\", k=0\noutput1: 1\n", "\ninput2: s=\"abc\", k=1\noutput2: 6\n", "\ninput3: s=\"aaabbb\", k=2\noutput3: 20\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <string>\nusing namespace std;\n#include <iostream>\n#include <string>\n// TOFILL\nint main() {\n    cout << countKConstraintSubstrings(\"a\", 0) << endl;\n    cout << countKConstraintSubstrings(\"abc\", 1) << endl;\n    cout << countKConstraintSubstrings(\"aaabbb\", 2) << endl;\n    cout << countKConstraintSubstrings(\"ababab\", 3) << endl;\n    cout << countKConstraintSubstrings(\"\", 1) << endl;\n    cout << countKConstraintSubstrings(\"aabbcc\", 3) << endl;\n    cout << countKConstraintSubstrings(\"aaa\", 1) << endl;\n    cout << countKConstraintSubstrings(\"abcde\", 2) << endl;\n    cout << countKConstraintSubstrings(\"aaaaa\", 2) << endl;\n    cout << countKConstraintSubstrings(\"abab\", 0) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###numberOfRightTriangles.cpp", "source_code_str": "long long numberOfRightTriangles(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<int> col(m);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                col[j] += grid[i][j];\n            }\n        }\n        long long res = 0;\n        for (int i = 0; i < n; i++) {\n            int row = accumulate(grid[i].begin(), grid[i].end(), 0);\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    res += (row - 1) * (col[j] - 1);\n                }\n            }\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "python###numberOfRightTriangles.py", "reference_code": "def numberOfRightTriangles( grid: List[List[int]]) -> int:\n        n, m = len(grid), len(grid[0])\n        col = [0] * m\n        for j in range(m):\n            for i in range(n):\n                col[j] += grid[i][j]\n        res = 0\n        for i in range(n):\n            row = sum(grid[i])\n            for j in range(m):\n                if grid[i][j] == 1:\n                    res += (row - 1) * (col[j] - 1)\n        return res", "target_method_signature": "numberOfRightTriangles", "source_method_signature": "numberOfRightTriangles", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <vector>\n#include <numeric> // for accumulate\nusing namespace std;", "target_import": "from typing import List", "commentTag": "", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(numberOfRightTriangles([[0, 0, 0], [0, 0, 0], [0, 0, 0]]))  # All zeros, no right triangles\n    print(numberOfRightTriangles([[1, 1, 0], [0, 1, 1], [1, 0, 1]]))  # Mixed values, potential for right triangles\n    print(numberOfRightTriangles([[1, 1], [1, 1]]))                    # All ones, should maximize the number of right triangles\n    print(numberOfRightTriangles([[0, 1], [0, 1]]))                    # Single column of ones, should yield minimal right triangles\n    print(numberOfRightTriangles([[1, 0], [1, 0], [1, 0]]))            # Single row of ones, should also yield minimal right triangles", "all_input_output_value": "\ninput1: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\noutput1: 0\n--------\ninput2: [[1, 1, 0], [0, 1, 1], [1, 0, 1]]\noutput2: 6\n--------\ninput3: [[1, 1], [1, 1]]\noutput3: 4\n--------\ninput4: [[0, 1], [0, 1]]\noutput4: 0\n--------\ninput5: [[1, 0], [1, 0], [1, 0]]\noutput5: 0\n", "input_output_value": ["\ninput1: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\noutput1: 0\n", "\ninput2: [[1, 1, 0], [0, 1, 1], [1, 0, 1]]\noutput2: 6\n", "\ninput3: [[1, 1], [1, 1]]\noutput3: 4\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <numeric> // for accumulate\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <numeric>\n// TOFILL\nint main() {\n    vector<vector<int>> input1 = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}};\n    vector<vector<int>> input2 = {{1, 1, 0}, {0, 1, 1}, {1, 0, 1}};\n    vector<vector<int>> input3 = {{1, 1}, {1, 1}};\n    vector<vector<int>> input4 = {{0, 1}, {0, 1}};\n    vector<vector<int>> input5 = {{1, 0}, {1, 0}, {1, 0}};\n    \n    cout << numberOfRightTriangles(input1) << endl;\n    cout << numberOfRightTriangles(input2) << endl;\n    cout << numberOfRightTriangles(input3) << endl;\n    cout << numberOfRightTriangles(input4) << endl;\n    cout << numberOfRightTriangles(input5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###findValueOfPartition.cpp", "source_code_str": "int findValueOfPartition(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int res = INT_MAX;\n        for (int i = 1; i < nums.size(); i++) {\n            res = min(res, nums[i] - nums[i - 1]);\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "python###findValueOfPartition.py", "reference_code": "def findValueOfPartition( nums: List[int]) -> int:\n        nums.sort()\n        res = float('inf')\n        for i in range(1, len(nums)):\n            res = min(res, nums[i] - nums[i - 1])\n        return res", "target_method_signature": "findValueOfPartition", "source_method_signature": "findValueOfPartition", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;", "target_import": "from typing import List\nimport sys", "commentTag": "", "target_code_shell": "from typing import List\nimport sys\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(findValueOfPartition([]))              # Edge case: empty list\n    print(findValueOfPartition([5]))             # Edge case: single element\n    print(findValueOfPartition([1, 2, 3, 4, 5])) # Regular case with consecutive numbers\n    print(findValueOfPartition([1, 2, 2, 3, 4])) # Regular case with duplicate\n    print(findValueOfPartition([-5, -1, 0, 1, 2])) # Case with negative and positive numbers", "all_input_output_value": "\ninput1: findValueOfPartition([])\noutput1: inf\n--------\ninput2: findValueOfPartition([5])\noutput2: inf\n--------\ninput3: findValueOfPartition([1, 2, 3, 4, 5])\noutput3: 1\n--------\ninput4: findValueOfPartition([1, 2, 2, 3, 4])\noutput4: 0\n--------\ninput5: findValueOfPartition([-5, -1, 0, 1, 2])\noutput5: 1\n", "input_output_value": ["\ninput1: findValueOfPartition([])\noutput1: inf\n", "\ninput2: findValueOfPartition([5])\noutput2: inf\n", "\ninput3: findValueOfPartition([1, 2, 3, 4, 5])\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n// TOFILL\nint main() {\n    vector<int> input1 = {};\n    vector<int> input2 = {5};\n    vector<int> input3 = {1, 2, 3, 4, 5};\n    vector<int> input4 = {1, 2, 2, 3, 4};\n    vector<int> input5 = {-5, -1, 0, 1, 2};\n\n    cout << findValueOfPartition(input1) << endl;\n    cout << findValueOfPartition(input2) << endl;\n    cout << findValueOfPartition(input3) << endl;\n    cout << findValueOfPartition(input4) << endl;\n    cout << findValueOfPartition(input5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###pickGifts.cpp", "source_code_str": "    long long pickGifts(vector<int>& gifts, int k) {\n        priority_queue<int> q(gifts.begin(), gifts.end());\n        while (k--) {\n            int x = q.top(); \n            q.pop();\n            q.push(int(sqrt(x)));\n        }\n        long long res = 0;\n        while (q.size()) {\n            res += q.top(); \n            q.pop();\n        }\n        return res;\n    }", "source_code_block": "", "target_Lan": "python###pickGifts.py", "reference_code": "def pickGifts( gifts: List[int], k: int) -> int:\n        q = [-gift for gift in gifts]\n        heapify(q)\n        while k:\n            x = heappop(q)\n            heappush(q, -int(sqrt(-x)))\n            k -= 1\n        return -sum(q)", "target_method_signature": "pickGifts", "source_method_signature": "pickGifts", "source_allMS": "    long long pickGifts(vector<int>& gifts, int k) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cmath>", "target_import": "from typing import List\nfrom heapq import heapify, heappop, heappush\nfrom math import sqrt", "commentTag": "#", "target_code_shell": "from typing import List\nfrom heapq import heapify, heappop, heappush\nfrom math import sqrt\nfrom typing import List\nfrom heapq import heapify, heappop, heappush\nfrom math import sqrt\n# TOFILL\nif __name__ == \"__main__\":\n    print(pickGifts([9, 16, 25], 2))\n    print(pickGifts([0, 0, 0], 1))\n    print(pickGifts([100, 400, 250], 3))", "all_input_output_value": "\ninput1: gifts=[9, 16, 25], k=2\noutput1: 18\n--------\ninput2: gifts=[0, 0, 0], k=1\noutput2: 0\n--------\ninput3: gifts=[100, 400, 250], k=3\noutput3: 45\n", "target_allMS": "def pickGifts( gifts: List[int], k: int) -> int:", "input_output_value": ["\ninput1: gifts=[9, 16, 25], k=2\noutput1: 18\n", "\ninput2: gifts=[0, 0, 0], k=1\noutput2: 0\n", "\ninput3: gifts=[100, 400, 250], k=3\noutput3: 45\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cmath>\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cmath>\n// TOFILL\nint main() {\n    vector<int> gifts1 = {9, 16, 25};\n    int k1 = 2;\n    cout << pickGifts(gifts1, k1) << endl;\n\n    vector<int> gifts2 = {0, 0, 0};\n    int k2 = 1;\n    cout << pickGifts(gifts2, k2) << endl;\n\n    vector<int> gifts3 = {100, 400, 250};\n    int k3 = 3;\n    cout << pickGifts(gifts3, k3) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###shortestDistanceAfterQueries2.cpp", "source_code_str": "vector<int> shortestDistanceAfterQueries2(int n, vector<vector<int>>& queries) {\n        vector<int> nxt(n - 1);\n        iota(nxt.begin(), nxt.end(), 1);\n        vector<int> ans(queries.size());\n        int cnt = n - 1;\n        for (int qi = 0; qi < queries.size(); qi++) {\n            int l = queries[qi][0], r = queries[qi][1];\n            if (nxt[l] && nxt[l] < r) {\n                for (int i = nxt[l]; i < r;) {\n                    cnt--;\n                    int tmp = nxt[i];\n                    nxt[i] = 0;\n                    i = tmp;\n                }\n                nxt[l] = r;\n            }\n            ans[qi] = cnt;\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "python###shortestDistanceAfterQueries2.py", "reference_code": "def shortestDistanceAfterQueries2( n: int, queries: List[List[int]]) -> List[int]:\n        ans = []\n        nxt = list(range(1, n))\n        cnt = n - 1\n        for l, r in queries:\n            if 0 < nxt[l] < r:\n                i = nxt[l]\n                while i < r:\n                    cnt -= 1\n                    nxt[i], i = 0, nxt[i]\n                nxt[l] = r\n            ans.append(cnt)\n        return ans", "target_method_signature": "shortestDistanceAfterQueries2", "source_method_signature": "shortestDistanceAfterQueries2", "source_allMS": "vector<int> shortestDistanceAfterQueries2(int n, vector<vector<int>>& queries) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <numeric>", "target_import": "from typing import List", "commentTag": "#", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(shortestDistanceAfterQueries2(5, [[0, 3], [1, 4]]))  # Standard case\n    print(shortestDistanceAfterQueries2(3, [[0, 2], [0, 2]]))  # Duplicate query\n    print(shortestDistanceAfterQueries2(5, [[0, 4], [0, 0], [2, 3]]))  # Edge case with bounds", "all_input_output_value": "\ninput1: n=5, queries=[[0, 3], [1, 4]]\noutput1: [2, 2]\n--------\ninput2: n=3, queries=[[0, 2], [0, 2]]\noutput2: [1, 1]\n--------\ninput3: n=5, queries=[[0, 4], [0, 0], [2, 3]]\noutput3: [1, 1, 1]\n", "target_allMS": "def shortestDistanceAfterQueries2( n: int, queries: List[List[int]]) -> List[int]:", "input_output_value": ["\ninput1: n=5, queries=[[0, 3], [1, 4]]\noutput1: [2, 2]\n", "\ninput2: n=3, queries=[[0, 2], [0, 2]]\noutput2: [1, 1]\n", "\ninput3: n=5, queries=[[0, 4], [0, 0], [2, 3]]\noutput3: [1, 1, 1]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <iostream>\n#include <vector>\n#include <numeric>\n// TOFILL\nint main() {\n    vector<vector<int>> queries1 = {{0, 3}, {1, 4}};\n    vector<int> result1 = shortestDistanceAfterQueries2(5, queries1);\n    for(int val : result1) {\n        cout << val << \" \";\n    }\n    cout << endl;\n    \n    vector<vector<int>> queries2 = {{0, 2}, {0, 2}};\n    vector<int> result2 = shortestDistanceAfterQueries2(3, queries2);\n    for(int val : result2) {\n        cout << val << \" \";\n    }\n    cout << endl;\n\n    vector<vector<int>> queries3 = {{0, 4}, {0, 0}, {2, 3}};\n    vector<int> result3 = shortestDistanceAfterQueries2(5, queries3);\n    for(int val : result3) {\n        cout << val << \" \";\n    }\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###resultsArray.cpp", "source_code_str": "vector<int> resultsArray(vector<int>& nums, int k) {\n        vector<int> ans(nums.size() - k + 1, -1);\n        int cnt = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            cnt = i == 0 || nums[i] == nums[i - 1] + 1 ? cnt + 1 : 1;\n            if (cnt >= k) {\n                ans[i - k + 1] = nums[i];\n            }\n        }\n        return ans;\n    }\n\n", "source_code_block": "", "target_Lan": "python###resultsArray.py", "reference_code": "def resultsArray(nums: List[int], k: int) -> List[int]:\n        ans = [-1] * (len(nums) - k + 1)\n        cnt = 0\n        for i, x in enumerate(nums):\n            cnt = cnt + 1 if i == 0 or x == nums[i - 1] + 1 else 1\n            if cnt >= k:\n                ans[i - k + 1] = x\n        return ans\n\n", "target_method_signature": "resultsArray", "source_method_signature": "resultsArray", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n", "target_import": "from typing import List\n", "commentTag": "", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(resultsArray([1, 2, 3], 2))\n    print(resultsArray([1, 3, 5, 7], 2))\n    print(resultsArray([5, 6, 7, 8, 9], 3))\n    print(resultsArray([10, 11, 12, 13, 15, 16, 17], 3))\n    print(resultsArray([1, 2, 3, 5, 6], 4))", "all_input_output_value": "\ninput1: array=[1, 2, 3], n=2\noutput1: [2, 3]\n--------\ninput2: array=[1, 3, 5, 7], n=2\noutput2: [-1, -1, -1]\n--------\ninput3: array=[5, 6, 7, 8, 9], n=3\noutput3: [7, 8, 9]\n--------\ninput4: array=[10, 11, 12, 13, 15, 16, 17], n=3\noutput4: [12, 13, -1, -1, 17]\n--------\ninput5: array=[1, 2, 3, 5, 6], n=4\noutput5: [-1, -1]\n", "input_output_value": ["\ninput1: array=[1, 2, 3], n=2\noutput1: [2, 3]\n", "\ninput2: array=[1, 3, 5, 7], n=2\noutput2: [-1, -1, -1]\n", "\ninput3: array=[5, 6, 7, 8, 9], n=3\noutput3: [7, 8, 9]\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\nusing namespace std;\n#include <iostream>\n#include <vector>\n// TOFILL\nint main() {\n    vector<int> array1 = {1, 2, 3};\n    int n1 = 2;\n    vector<int> result1 = resultsArray(array1, n1);\n    for(int v : result1) cout << v << \" \";\n    cout << endl;\n\n    vector<int> array2 = {1, 3, 5, 7};\n    int n2 = 2;\n    vector<int> result2 = resultsArray(array2, n2);\n    for(int v : result2) cout << v << \" \";\n    cout << endl;\n\n    vector<int> array3 = {5, 6, 7, 8, 9};\n    int n3 = 3;\n    vector<int> result3 = resultsArray(array3, n3);\n    for(int v : result3) cout << v << \" \";\n    cout << endl;\n\n    vector<int> array4 = {10, 11, 12, 13, 15, 16, 17};\n    int n4 = 3;\n    vector<int> result4 = resultsArray(array4, n4);\n    for(int v : result4) cout << v << \" \";\n    cout << endl;\n\n    vector<int> array5 = {1, 2, 3, 5, 6};\n    int n5 = 4;\n    vector<int> result5 = resultsArray(array5, n5);\n    for(int v : result5) cout << v << \" \";\n    cout << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###countPow.cpp", "source_code_str": "long long countPow(long long x) {\n        long long res = 0;\n        int sum = 0;\n\n        for (int i = 60; i >= 0; i--) {\n            if (1LL << i & x) {\n                res += 1LL * sum * (1LL << i);\n                sum += i;\n                \n                if (i > 0) {\n                    res += 1LL * i * (i - 1) / 2 * (1LL << (i - 1));\n                }\n            }\n        }\n        res += sum;\n        return res;\n    }\n\n", "source_code_block": "", "target_Lan": "python###countPow.py", "reference_code": "def countPow(x):\n    res = 0\n    sum = 0\n\n    for i in range(60, -1, -1):\n        if (1 << i) & x:\n            res += sum * (1 << i)\n            sum += i\n\n            if i > 0:\n                res += i * (i - 1) // 2 * (1 << (i - 1))\n    \n    res += sum\n    return res\n\n", "target_method_signature": "countPow", "source_method_signature": "countPow", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\nusing namespace std;\n", "target_import": "\n", "commentTag": "", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    test_inputs = [0, 1, 2, 3, 15]\n    for input_val in test_inputs:\n        print(countPow(input_val))", "all_input_output_value": "\ninput1: a=0\noutput1: 0\n--------\ninput2: a=1\noutput2: 0\n--------\ninput3: a=2\noutput3: 1\n--------\ninput4: a=3\noutput4: 2\n--------\ninput5: a=15\noutput5: 48\n", "input_output_value": ["\ninput1: a=0\noutput1: 0\n", "\ninput2: a=1\noutput2: 0\n", "\ninput3: a=2\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << countPow(0) << endl;\n    cout << countPow(1) << endl;\n    cout << countPow(2) << endl;\n    cout << countPow(3) << endl;\n    cout << countPow(15) << endl;\n}"}
{"source_Lan": "cpp###CompatibleStrings.cpp", "source_code_str": "    vector<int> CompatibleStrings(int N, vector<string> &A1, vector<string> &A2) {\n        \n        \n        \n        vector<int> ans(N);\n        for(int j=0;j<N;j++){\n            vector<int> v1(26),v2(26);\n            for(auto i:A1[j]){\n                v1[i-'a']++;\n            }\n            for(auto i:A2[j]){\n                v2[i-'a']++;\n            }\n            vector<int> temp;\n            int p = 0;\n            int l = 0;\n            while(l<25){\n                p+=v1[l];\n                if(p<v2[l]){\n                    break;\n                }\n                else{\n                    p-=v2[l];\n                }\n                if(p!=0)\n                temp.push_back(p);\n                l++;\n            }\n            if(l!=25) ans[j]=0;\n            else if(p+v1[l]!=v2[l]) ans[j]=0;\n            else{\n                if(temp.size()==0){\n                    ans[j] = 1;\n                    continue;\n                }\n                int x = temp[0];\n                for(auto i:temp){\n                    x = __gcd(i,x);\n                }\n                if(x==1){\n                    ans[j] = 0;\n                }\n                else{\n                    ans[j] = 1;\n                }\n            }\n        }\n        return ans;\n    }", "source_code_block": "", "target_Lan": "python###CompatibleStrings.py", "reference_code": "def CompatibleStrings( N : int, A1 : List[str], A2 : List[str]) -> List[int]:\n    ans = [0]*N\n    for i in range(N):\n        s1 = A1[i]\n        s2 = A2[i]\n        if len(s1)!=len(s2):\n            continue\n        mp1 = Counter(s1)\n        mp2 = Counter(s2)\n        f = True\n        c2 = 0\n        c3 = 0\n        g = 0\n        r = 0\n        for c in range(97,123):\n            c = chr(c)\n            if mp1[c]==mp2[c]:\n                continue\n            d = abs(mp1[c]-mp2[c])\n            if mp2[c]>mp1[c]:\n                if r<d:\n                    f = False\n                    break\n                else:\n                    r-=d\n            else:\n                r += d\n            g = gcd(g,d)\n            if g==1:\n                f = False\n                break\n        if f:\n            ans[i] = 1\n    return ans", "target_method_signature": "CompatibleStrings", "source_method_signature": "CompatibleStrings", "target_allMS": "def CompatibleStrings( N : int, A1 : List[str], A2 : List[str]) -> List[int]:", "source_allMS": "    vector<int> CompatibleStrings(int N, vector<string> &A1, vector<string> &A2) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "from typing import List\nfrom typing import List\nfrom collections import Counter\nfrom math import gcd", "commentTag": "#", "target_code_shell": "from typing import List\nfrom typing import List\nfrom collections import Counter\nfrom math import gcd\nfrom typing import List\nfrom collections import Counter\nfrom math import gcd\n# TOFILL\nif __name__ == \"__main__\":\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghi']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'jkl']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghj']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghk']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghl']))", "all_input_output_value": "## Python_code\ndef CompatibleStrings( N : int, A1 : List[str], A2 : List[str]) -> List[int]:\n...\nif __name__ == \"__main__\":\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghi']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'jkl']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghj']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghk']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghl']))\n    \n## After running the printed result is as follows\n[1, 1, 1]\n[1, 1, 0]\n[1, 1, 0]\n[1, 1, 0]\n[1, 1, 0]\n\n## Please match the input in Python_code with the printed result. The match result should be wrapped within ``` ```.##\n## Output\n```\ninput1: N=3, A1=['abc', 'def', 'ghi'], A2=['abc', 'def', 'ghi']\noutput1: [1, 1, 1]\n--------\ninput2: N=3, A1=['abc', 'def', 'ghi'], A2=['abc', 'def', 'jkl']\noutput2: [1, 1, 0]\n--------\ninput3: N=3, A1=['abc', 'def', 'ghi'], A2=['abc', 'def', 'ghj']\noutput3: [1, 1, 0]\n--------\ninput4: N=3, A1=['abc', 'def', 'ghi'], A2=['abc', 'def', 'ghk']\noutput4: [1, 1, 0]\n--------\ninput5: N=3, A1=['abc', 'def', 'ghi'], A2=['abc', 'def', 'ghl']\noutput5: [1, 1, 0]\n", "input_output_value": ["## Python_code\ndef CompatibleStrings( N : int, A1 : List[str], A2 : List[str]) -> List[int]:\n...\nif __name__ == \"__main__\":\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghi']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'jkl']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghj']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghk']))\n    print(CompatibleStrings(3, ['abc', 'def', 'ghi'], ['abc', 'def', 'ghl']))\n    \n## After running the printed result is as follows\n[1, 1, 1]\n[1, 1, 0]\n[1, 1, 0]\n[1, 1, 0]\n[1, 1, 0]\n\n## Please match the input in Python_code with the printed result. The match result should be wrapped within ``` ```.##\n## Output\n```\ninput1: N=3, A1=['abc', 'def', 'ghi'], A2=['abc', 'def', 'ghi']\noutput1: [1, 1, 1]\n", "\ninput2: N=3, A1=['abc', 'def', 'ghi'], A2=['abc', 'def', 'jkl']\noutput2: [1, 1, 0]\n", "\ninput3: N=3, A1=['abc', 'def', 'ghi'], A2=['abc', 'def', 'ghj']\noutput3: [1, 1, 0]\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<string> A1 = {\"abc\", \"def\", \"ghi\"};\n    vector<string> A2 = {\"abc\", \"def\", \"ghi\"};\n    vector<int> result = CompatibleStrings(3, A1, A2);\n    for(int i=0; i<result.size(); i++)\n        cout << result[i] << \" \";\n    cout << endl;\n\n    A2 = {\"abc\", \"def\", \"jkl\"};\n    result = CompatibleStrings(3, A1, A2);\n    for(int i=0; i<result.size(); i++)\n        cout << result[i] << \" \";\n    cout << endl;\n\n    A2 = {\"abc\", \"def\", \"ghj\"};\n    result = CompatibleStrings(3, A1, A2);\n    for(int i=0; i<result.size(); i++)\n        cout << result[i] << \" \";\n    cout << endl;\n\n    A2 = {\"abc\", \"def\", \"ghk\"};\n    result = CompatibleStrings(3, A1, A2);\n    for(int i=0; i<result.size(); i++)\n        cout << result[i] << \" \";\n    cout << endl;\n\n    A2 = {\"abc\", \"def\", \"ghl\"};\n    result = CompatibleStrings(3, A1, A2);\n    for(int i=0; i<result.size(); i++)\n        cout << result[i] << \" \";\n    cout << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###createString.cpp", "source_code_str": "    string createString(int n, int k, string s) {\n        string answer = \"\";\n        unordered_map<char, int> m;\n        for(auto i : s){\n            m[i] += 1;\n        }\n        set<pair<char, int>> st;\n        for(auto i : m){\n            st.insert({i.first, i.second});\n        }\n        int curr = 0;\n        while(st.size()){\n            auto largest = st.end();\n            largest--;\n            if(curr == k){\n                if(st.size() == 1){\n                    break;\n                }else{\n                    largest--;\n                }\n                curr = -1;\n            }\n            char now = largest->first;\n            int count = largest->second;\n            st.erase({now, count});\n            count -= 1;\n            if(count){\n                st.insert({now, count});\n                curr += 1;\n            }else{\n                curr = 0;\n            }\n            answer += now;\n        }\n        return answer;\n    }", "source_code_block": "", "target_Lan": "python###createString.py", "reference_code": "def createString( n : int, k : int, s : str) -> str:\n    c=Counter(s)\n    t=[(c[el],el) for el in c]\n    t.sort(key=lambda x:(x[1]))\n    ans=\"\"\n    while t:\n        ca,cb=t.pop()\n        if ca>k:\n            ca-=k\n            ans+=cb*k\n            if len(t)==0:\n                return ans\n            else:\n                da,db=t.pop()\n                if da>1:\n                    ans+=db\n                    t.append((da-1,db))\n                else:\n                    ans+=db\n            t.append((ca,cb))\n        else:\n            ans+=cb*ca\n    return ans", "target_method_signature": "createString", "source_method_signature": "createString", "target_allMS": "def createString( n : int, k : int, s : str) -> str:", "source_allMS": "    string createString(int n, int k, string s) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "from collections import Counter", "commentTag": "#", "target_code_shell": "from collections import Counter\nfrom collections import Counter\n# TOFILL\nif __name__ == \"__main__\":\n    print(createString(5, 2, \"abcab\"))\n    print(createString(10, 3, \"aaabbbccc\"))\n    print(createString(3, 1, \"xyz\"))\n    print(createString(7, 4, \"program\"))\n    print(createString(6, 2, \"banana\"))", "all_input_output_value": "## Python_code\ndef createString( n : int, k : int, s : str) -> str:\n    ...\nif __name__ == \"__main__\":\n    print(createString(5, 2, \"abcab\"))\n    print(createString(10, 3, \"aaabbbccc\"))\n    print(createString(3, 1, \"xyz\"))\n    print(createString(7, 4, \"program\"))\n    print(createString(6, 2, \"banana\"))\n    \n## After running the printed result is as follows\ncbbaa\ncccbbbaaa\nzyx\nrrpomga\nnnbaa\n\n## Please match the input in Python_code with the printed result. The match result should be wrapped within ``` ```.##\n## Output\n```\ninput1: n=5, k=2, s=\"abcab\"\noutput1: \"cbbaa\"\n--------\ninput2: n=10, k=3, s=\"aaabbbccc\"\noutput2: \"cccbbbaaa\"\n--------\ninput3: n=3, k=1, s=\"xyz\"\noutput3: \"zyx\"\n--------\ninput4: n=7, k=4, s=\"program\"\noutput4: \"rrpomga\"\n--------\ninput5: n=6, k=2, s=\"banana\"\noutput5: \"nnbaa\"\n", "input_output_value": ["## Python_code\ndef createString( n : int, k : int, s : str) -> str:\n    ...\nif __name__ == \"__main__\":\n    print(createString(5, 2, \"abcab\"))\n    print(createString(10, 3, \"aaabbbccc\"))\n    print(createString(3, 1, \"xyz\"))\n    print(createString(7, 4, \"program\"))\n    print(createString(6, 2, \"banana\"))\n    \n## After running the printed result is as follows\ncbbaa\ncccbbbaaa\nzyx\nrrpomga\nnnbaa\n\n## Please match the input in Python_code with the printed result. The match result should be wrapped within ``` ```.##\n## Output\n```\ninput1: n=5, k=2, s=\"abcab\"\noutput1: \"cbbaa\"\n", "\ninput2: n=10, k=3, s=\"aaabbbccc\"\noutput2: \"cccbbbaaa\"\n", "\ninput3: n=3, k=1, s=\"xyz\"\noutput3: \"zyx\"\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <set>\n// TOFILL\nint main() {\n    cout << createString(5, 2, \"abcab\") << endl;\n    cout << createString(10, 3, \"aaabbbccc\") << endl;\n    cout << createString(3, 1, \"xyz\") << endl;\n    cout << createString(7, 4, \"program\") << endl;\n    cout << createString(6, 2, \"banana\") << endl;\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###minPathCost.cpp", "source_code_str": "int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& moveCost) {\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> dp(2, vector<int>(n));\n        dp[0] = grid[0];\n        int cur = 0;\n        for (int i = 1; i < m; i++) {\n            int next = 1 - cur;\n            for (int j = 0; j < n; j++) {\n                dp[next][j] = INT_MAX;\n                for (int k = 0; k < n; k++) {\n                    dp[next][j] = min(dp[next][j], dp[cur][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);\n                }\n            }\n            cur = next;\n        }\n        return *min_element(dp[cur].begin(), dp[cur].end());\n    }", "source_code_block": "", "target_Lan": "python###minPathCost.py", "reference_code": "def minPathCost( grid: List[List[int]], moveCost: List[List[int]]) -> int:\n       m, n = len(grid), len(grid[0])\n       dp = grid[0]\n       for i in range(1, len(grid)):\n           dp = [grid[i][j] + min(dp[k] + moveCost[grid[i - 1][k]][j] for k in range(n)) for j in range(n)]\n       return min(dp)", "target_method_signature": "minPathCost", "source_method_signature": "minPathCost", "source_allMS": "int minPathCost(vector<vector<int>>& grid, vector<vector<int>>& moveCost) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>", "target_import": "from typing import List", "commentTag": "#", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minPathCost([[1,1,1],[1,1,1],[1,1,1]], [[1,2,3],[4,5,6],[7,8,9]]))", "all_input_output_value": "\ninput1: grid=[[1,1,1],[1,1,1],[1,1,1]], moveCost=[[1,2,3],[4,5,6],[7,8,9]]\noutput1: 11\n", "target_allMS": "def minPathCost( grid: List[List[int]], moveCost: List[List[int]]) -> int:", "input_output_value": ["\ninput1: grid=[[1,1,1],[1,1,1],[1,1,1]], moveCost=[[1,2,3],[4,5,6],[7,8,9]]\noutput1: 11\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <iostream>\n#include <vector>\n#include <climits>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<vector<int>> grid = {{1,1,1},{1,1,1},{1,1,1}};\n    vector<vector<int>> moveCost = {{1,2,3},{4,5,6},{7,8,9}};\n    cout << minPathCost(grid, moveCost) << endl;\n    return 0;\n}"}
{"source_Lan": "cpp###finalPositionOfSnake.cpp", "source_code_str": "int finalPositionOfSnake(int n, vector<string>& commands) {\n        int i = 0, j = 0;\n        for (auto& s : commands) {\n            switch (s[0]) {\n                case 'U': i--; break;\n                case 'D': i++; break;\n                case 'L': j--; break;\n                default:  j++;\n            }\n        }\n        return i * n + j;\n    }", "source_code_block": "", "target_Lan": "python###finalPositionOfSnake.py", "reference_code": "def finalPositionOfSnake( n: int, commands: List[str]) -> int:\n        i = j = 0\n        for s in commands:\n            if s[0] == 'U': i -= 1\n            elif s[0] == 'D': i += 1\n            elif s[0] == 'L': j -= 1\n            else: j += 1\n        return i * n + j", "target_method_signature": "finalPositionOfSnake", "source_method_signature": "finalPositionOfSnake", "source_allMS": "int finalPositionOfSnake(int n, vector<string>& commands) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>", "target_import": "from typing import List", "commentTag": "#", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(finalPositionOfSnake(0, []))\n    print(finalPositionOfSnake(1, [\"U\"]))\n    print(finalPositionOfSnake(2, [\"D\"]))\n    print(finalPositionOfSnake(3, [\"L\"]))\n    print(finalPositionOfSnake(4, [\"R\"]))", "all_input_output_value": "## Python_code\ndef finalPositionOfSnake( n: int, commands: List[str]) -> int:\n...\nif __name__ == \"__main__\":\n    print(finalPositionOfSnake(0, []))\n    print(finalPositionOfSnake(1, [\"U\"]))\n    print(finalPositionOfSnake(2, [\"D\"]))\n    print(finalPositionOfSnake(3, [\"L\"]))\n    print(finalPositionOfSnake(4, [\"R\"]))\n    \n## After running the printed result is as follows\n0\n-1\n2\n-1\n1\n\n## Please match the input in Python_code with the printed result. The match result should be wrapped within ``` ```.##\n## Output\n```\ninput1: n=0, commands=[]\noutput1: 0\n--------\ninput2: n=1, commands=[\"U\"]\noutput2: -1\n--------\ninput3: n=2, commands=[\"D\"]\noutput3: 2\n--------\ninput4: n=3, commands=[\"L\"]\noutput4: -1\n--------\ninput5: n=4, commands=[\"R\"]\noutput5: 1\n", "target_allMS": "def finalPositionOfSnake( n: int, commands: List[str]) -> int:", "input_output_value": ["## Python_code\ndef finalPositionOfSnake( n: int, commands: List[str]) -> int:\n...\nif __name__ == \"__main__\":\n    print(finalPositionOfSnake(0, []))\n    print(finalPositionOfSnake(1, [\"U\"]))\n    print(finalPositionOfSnake(2, [\"D\"]))\n    print(finalPositionOfSnake(3, [\"L\"]))\n    print(finalPositionOfSnake(4, [\"R\"]))\n    \n## After running the printed result is as follows\n0\n-1\n2\n-1\n1\n\n## Please match the input in Python_code with the printed result. The match result should be wrapped within ``` ```.##\n## Output\n```\ninput1: n=0, commands=[]\noutput1: 0\n", "\ninput2: n=1, commands=[\"U\"]\noutput2: -1\n", "\ninput3: n=2, commands=[\"D\"]\noutput3: 2\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<string> commands1 = {};\n    cout << finalPositionOfSnake(0, commands1) << endl;\n\n    vector<string> commands2 = {\"U\"};\n    cout << finalPositionOfSnake(1, commands2) << endl;\n\n    vector<string> commands3 = {\"D\"};\n    cout << finalPositionOfSnake(2, commands3) << endl;\n\n    vector<string> commands4 = {\"L\"};\n    cout << finalPositionOfSnake(3, commands4) << endl;\n\n    vector<string> commands5 = {\"R\"};\n    cout << finalPositionOfSnake(4, commands5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minimumSubstringsInPartition.cpp", "source_code_str": "\n    int minimumSubstringsInPartition(string s) {\n\tstatic constexpr int inf = 0x3f3f3f3f;\n        int n = s.size();\n        vector<int> d(n + 1, inf);\n        unordered_map<char, int> occ_cnt;\n        d[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            int max_cnt = 0;\n            occ_cnt.clear();\n            for (int j = i; j >= 1; j--) {\n                occ_cnt[s[j - 1]]++;\n                max_cnt = max(max_cnt, occ_cnt[s[j - 1]]);\n                if (max_cnt * occ_cnt.size() == (i - j + 1) && d[j - 1] != inf) {\n                    d[i] = min(d[i], d[j - 1] + 1);\n                }\n            }\n        }\n        return d[n];\n    }", "source_code_block": "", "target_Lan": "python###minimumSubstringsInPartition.py", "reference_code": "def minimumSubstringsInPartition(s: str) -> int:\n        n = len(s)\n        d = [math.inf] * (n + 1)\n        occ_cnt = defaultdict(int)\n        d[0] = 0\n        for i in range(1, n + 1):\n            occ_cnt.clear()\n            max_cnt = 0\n            for j in range(i, 0, -1):\n                occ_cnt[s[j - 1]] += 1\n                max_cnt = max(max_cnt, occ_cnt[s[j - 1]])\n                if max_cnt * len(occ_cnt) == i - j + 1 and d[j - 1] != math.inf:\n                    d[i] = min(d[i], d[j - 1] + 1)\n        return d[n]\n\n", "target_method_signature": "minimumSubstringsInPartition", "source_method_signature": "minimumSubstringsInPartition", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <string>\n#include <algorithm>\nusing namespace std;\n", "target_import": "from collections import defaultdict\nimport math", "commentTag": "", "target_code_shell": "from collections import defaultdict\nimport math\nimport math\nfrom collections import defaultdict\n# TOFILL\nif __name__ == \"__main__\":\n    print(minimumSubstringsInPartition(\"a\"))\n    print(minimumSubstringsInPartition(\"aaa\"))\n    print(minimumSubstringsInPartition(\"abab\"))\n    print(minimumSubstringsInPartition(\"abcabcabcabc\"))\n    print(minimumSubstringsInPartition(\"abcdabcdabcdabcd\"))", "all_input_output_value": "\ninput1: \"a\"\noutput1: 1\n--------\ninput2: \"aaa\"\noutput2: 1\n--------\ninput3: \"abab\"\noutput3: 1\n--------\ninput4: \"abcabcabcabc\"\noutput4: 1\n--------\ninput5: \"abcdabcdabcdabcd\"\noutput5: 1\n", "input_output_value": ["\ninput1: \"a\"\noutput1: 1\n", "\ninput2: \"aaa\"\noutput2: 1\n", "\ninput3: \"abab\"\noutput3: 1\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <string>\n#include <algorithm>\nusing namespace std;\n#include <iostream>\n#include <string>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n// TOFILL\nint main() {\n    cout << minimumSubstringsInPartition(\"a\") << endl;\n    cout << minimumSubstringsInPartition(\"aaa\") << endl;\n    cout << minimumSubstringsInPartition(\"abab\") << endl;\n    cout << minimumSubstringsInPartition(\"abcabcabcabc\") << endl;\n    cout << minimumSubstringsInPartition(\"abcdabcdabcdabcd\") << endl;\n}"}
{"source_Lan": "cpp###pow_mod.cpp", "source_code_str": "int pow_mod(long long x, long long y, int mod) {\n        int res = 1;\n        while (y) {\n            if (y & 1) {\n                res = res * x % mod;\n            }\n            x = x * x % mod;\n            y >>= 1;\n        }\n        return res;\n    }\n\n", "source_code_block": "", "target_Lan": "python###pow_mod.py", "reference_code": "def pow_mod(x, y, mod):\n    res = 1\n    while y:\n        if y & 1:\n            res = res * x % mod\n        x = x * x % mod\n        y >>= 1\n    return res\n\n", "target_method_signature": "pow_mod", "source_method_signature": "pow_mod", "target_allMS": "", "source_allMS": "", "source_import": "#include <iostream>\nusing namespace std;\n", "target_import": "\n", "commentTag": "", "target_code_shell": "# TOFILL\nif __name__ == \"__main__\":\n    print(pow_mod(0, 0, 1))\n    print(pow_mod(1, 1, 1))\n    print(pow_mod(2, 2, 1))\n    print(pow_mod(3, 3, 1))\n    print(pow_mod(4, 4, 1))", "all_input_output_value": "## Python_code\n\ninput1: a=0, b=0, c=1\noutput1: 1\n--------\ninput2: a=1, b=1, c=1\noutput2: 0\n--------\ninput3: a=2, b=2, c=1\noutput3: 0\n--------\ninput4: a=3, b=3, c=1\noutput4: 0\n--------\ninput5: a=4, b=4, c=1\noutput5: 0\n", "input_output_value": ["## Python_code\n\ninput1: a=0, b=0, c=1\noutput1: 1\n", "\ninput2: a=1, b=1, c=1\noutput2: 0\n", "\ninput3: a=2, b=2, c=1\noutput3: 0\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n// TOFILL\nint main() {\n    cout << pow_mod(0, 0, 1) << endl;\n    cout << pow_mod(1, 1, 1) << endl;\n    cout << pow_mod(2, 2, 1) << endl;\n    cout << pow_mod(3, 3, 1) << endl;\n    cout << pow_mod(4, 4, 1) << endl;\n}"}
{"source_Lan": "cpp###getMaxProductivity.cpp", "source_code_str": " int getMaxProductivity(int n, vector<int>& productivity) {\n        int sum = 0;\n        for (int val : productivity) {\n            sum += val;\n        }\n        int halfSum = sum / 2;\n        vector<int> dp(halfSum + 1, 0);\n        dp[0] = 1;\n        for (int prod : productivity) {\n            for (int j = halfSum; j >= prod; j--) {\n                dp[j] = dp[j] || dp[j - prod];\n            }\n        }\n        int maxProductivity = 0;\n        for (int i = 1; i <= halfSum; i++) {\n            if (dp[i]) {\n                maxProductivity = max(maxProductivity, i * (sum - i));\n            }\n        }\n        return maxProductivity;\n    }", "source_code_block": "", "target_Lan": "python###getMaxProductivity.py", "reference_code": "def getMaxProductivity( n: int, productivity: List[int]) -> int:\n        total_sum = sum(productivity)\n        # Initialize dp array with size total_sum + 1\n        dp = [0] * (total_sum + 1)\n        dp[0] = 1\n        # Update the dp array based on the given logic\n        for prod in productivity:\n            for j in range(total_sum, prod - 1, -1):\n                dp[j] = dp[j] or dp[j - prod]\n        # Calculate the maximum productivity\n        max_productivity = 0\n        for i in range(1, total_sum):\n            if dp[i]:\n                max_productivity = max(max_productivity, i * (total_sum - i))\n        return max_productivity", "target_method_signature": "getMaxProductivity", "source_method_signature": "getMaxProductivity", "source_allMS": " int getMaxProductivity(int n, vector<int>& productivity) {", "source_import": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;", "target_import": "from typing import List", "commentTag": "#", "target_code_shell": "from typing import List\nfrom typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(getMaxProductivity(0, []))\n    print(getMaxProductivity(1, [10]))\n    print(getMaxProductivity(2, [10, 20]))\n    print(getMaxProductivity(3, [10, 20, 30]))\n    print(getMaxProductivity(4, [10, 20, 30, 40]))", "all_input_output_value": "\ninput1: n=0, productivity=[]\noutput1: 0\n--------\ninput2: n=1, productivity=[10]\noutput2: 0\n--------\ninput3: n=2, productivity=[10, 20]\noutput3: 200\n--------\ninput4: n=3, productivity=[10, 20, 30]\noutput4: 900\n--------\ninput5: n=4, productivity=[10, 20, 30, 40]\noutput5: 2500\n", "target_allMS": "def getMaxProductivity( n: int, productivity: List[int]) -> int:", "input_output_value": ["\ninput1: n=0, productivity=[]\noutput1: 0\n", "\ninput2: n=1, productivity=[10]\noutput2: 0\n", "\ninput3: n=2, productivity=[10, 20]\noutput3: 200\n"], "TAG": "Success", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> productivity1 = {};\n    cout << getMaxProductivity(0, productivity1) << endl;\n\n    vector<int> productivity2 = {10};\n    cout << getMaxProductivity(1, productivity2) << endl;\n\n    vector<int> productivity3 = {10, 20};\n    cout << getMaxProductivity(2, productivity3) << endl;\n\n    vector<int> productivity4 = {10, 20, 30};\n    cout << getMaxProductivity(3, productivity4) << endl;\n\n    vector<int> productivity5 = {10, 20, 30, 40};\n    cout << getMaxProductivity(4, productivity5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###minOperations2.cpp", "source_code_str": "    int minOperations2(vector<int>& nums) {\n        int n = nums.size();\n        unordered_set<int> cnt(nums.begin(), nums.end());\n        vector<int> sortedUniqueNums(cnt.begin(), cnt.end());\n        sort(sortedUniqueNums.begin(), sortedUniqueNums.end());\n        int res = n, j = 0;\n        for (int i = 0; i < sortedUniqueNums.size(); i++) {\n            int right = sortedUniqueNums[i] + n - 1;\n            while (j < sortedUniqueNums.size() && sortedUniqueNums[j] <= right) {\n                res = min(res, n - (j - i + 1));\n                j++;\n            }\n        }            \n        return res;\n    }", "source_code_block": "", "target_Lan": "python###minOperations2.py", "reference_code": "def minOperations2( nums: List[int]) -> int:\n    n = len(nums)\n    sortedUniqueNums = sorted((set(nums)))\n    res = n\n    j = 0\n    for i, left in enumerate(sortedUniqueNums):\n        right = left + n - 1\n        while j < len(sortedUniqueNums) and sortedUniqueNums[j] <= right:\n            res = min(res, n - (j - i + 1))\n            j += 1\n    return res", "target_method_signature": "minOperations2", "source_method_signature": "minOperations2", "target_allMS": "def minOperations2( nums: List[int]) -> int:", "source_allMS": "    int minOperations2(vector<int>& nums) {", "source_import": "#include <iostream>\nusing namespace std;", "target_import": "", "commentTag": "#", "target_code_shell": "from typing import List\n# TOFILL\nif __name__ == \"__main__\":\n    print(minOperations2([1,2,3,4,5]))\n    print(minOperations2([1,1,1,1,1]))\n    print(minOperations2([1,3,5,7,9]))\n    print(minOperations2([10,20,30,40,50]))\n    print(minOperations2([1,2,3,2,1]))", "all_input_output_value": "\ninput1: nums=[1,2,3,4,5]\noutput1: 0\n--------\ninput2: nums=[1,1,1,1,1]\noutput2: 4\n--------\ninput3: nums=[1,3,5,7,9]\noutput3: 2\n--------\ninput4: nums=[10,20,30,40,50]\noutput4: 4\n--------\ninput5: nums=[1,2,3,2,1]\noutput5: 2\n", "input_output_value": ["\ninput1: nums=[1,2,3,4,5]\noutput1: 0\n", "\ninput2: nums=[1,1,1,1,1]\noutput2: 4\n", "\ninput3: nums=[1,3,5,7,9]\noutput3: 2\n"], "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <algorithm>\n// TOFILL\nint main() {\n    vector<int> nums1 = {1,2,3,4,5};\n    vector<int> nums2 = {1,1,1,1,1};\n    vector<int> nums3 = {1,3,5,7,9};\n    vector<int> nums4 = {10,20,30,40,50};\n    vector<int> nums5 = {1,2,3,2,1};\n\n    cout << minOperations2(nums1) << endl;\n    cout << minOperations2(nums2) << endl;\n    cout << minOperations2(nums3) << endl;\n    cout << minOperations2(nums4) << endl;\n    cout << minOperations2(nums5) << endl;\n\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###firstContact.cpp", "source_code_str": "    long long firstContact(int n, int m) {\n        long long ans = m / __gcd(n, m);\n        ans *= n;\n        return ans;\n    }", "source_code_block": "", "target_Lan": "python###firstContact.py", "reference_code": "def firstContact( n: int, m: int) -> int:\n    #just return the LCM of n and m\n    return (n * m) // gcd(n, m)", "target_method_signature": "firstContact", "source_method_signature": "firstContact", "target_allMS": "def firstContact( n: int, m: int) -> int:", "source_allMS": "    long long firstContact(int n, int m) {", "source_import": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;", "target_import": "from math import gcd", "commentTag": "#", "target_code_shell": "from math import gcd\nfrom math import gcd\n# TOFILL\nif __name__ == \"__main__\":\n    print(firstContact(0, 5))\n    print(firstContact(12, 15))\n    print(firstContact(7, 7))\n    print(firstContact(14, 21))\n    print(firstContact(11, 13))", "all_input_output_value": "\ninput1: n=0, m=5\noutput1: 0\n--------\ninput2: n=12, m=15\noutput2: 60\n--------\ninput3: n=7, m=7\noutput3: 7\n--------\ninput4: n=14, m=21\noutput4: 42\n--------\ninput5: n=11, m=13\noutput5: 143\n", "input_output_value": ["\ninput1: n=0, m=5\noutput1: 0\n", "\ninput2: n=12, m=15\noutput2: 60\n", "\ninput3: n=7, m=7\noutput3: 7\n"], "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <algorithm>  // for __gcd\n// TOFILL\nint main() {\n    cout << firstContact(0, 5) << endl;\n    cout << firstContact(12, 15) << endl;\n    cout << firstContact(7, 7) << endl;\n    cout << firstContact(14, 21) << endl;\n    cout << firstContact(11, 13) << endl;\n    return 0;\n}", "TAG": "Success"}
{"source_Lan": "cpp###Towerheight.cpp", "source_code_str": "    int Towerheight(int n, int k, vector<int>& a) {\n        \n        stack<int> st;\n        int totalHeight = 0;\n        int i = 0;\n        \n        for (int j = 0; j < n; j++) {\n            totalHeight += a[j];\n            st.push(a[j]);\n            \n            if (totalHeight > k) {\n                \n                int removeBoxes = i + 1;\n                while (removeBoxes > 0 && !st.empty()) {\n                    totalHeight -= st.top();\n                    st.pop();\n                    removeBoxes--;\n                }\n                i++;\n            }\n        }\n        \n        return totalHeight;\n    }", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stack>\n// TOFILL\nint main() {\n    vector<int> arr1 = {1};\n    cout << Towerheight(1, 1, arr1) << endl;\n\n    vector<int> arr2 = {1, 3};\n    cout << Towerheight(2, 5, arr2) << endl;\n\n    vector<int> arr3 = {2, 2, 2};\n    cout << Towerheight(3, 5, arr3) << endl;\n\n    vector<int> arr4 = {2, 2, 2, 2, 2};\n    cout << Towerheight(5, 10, arr4) << endl;\n\n    vector<int> arr5 = {1, 2, 3, 4};\n    cout << Towerheight(4, 6, arr5) << endl;\n\n    vector<int> arr6 = {2, 2, 3, 4, 5};\n    cout << Towerheight(5, 8, arr6) << endl;\n\n    vector<int> arr7 = {5, 3, 2, 6};\n    cout << Towerheight(4, 7, arr7) << endl;\n\n    vector<int> arr8 = {1, 1, 1};\n    cout << Towerheight(3, 0, arr8) << endl;\n\n    vector<int> arr9 = {2, 5, 6, 1, 2};\n    cout << Towerheight(5, 10, arr9) << endl;\n\n    vector<int> arr10 = {0, 0, 0};\n    cout << Towerheight(3, 3, arr10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###numberOfSubarrays.cpp", "source_code_str": "    long long numberOfSubarrays(vector<int>& nums) {\n        long long ans = nums.size();\n        stack<pair<int, int>> st;\n        st.emplace(INT_MAX, 0); \n        for (int x : nums) {\n            while (x > st.top().first) {\n                st.pop();\n            }\n            if (x == st.top().first) {\n                ans += st.top().second++;\n            } else {\n                st.emplace(x, 1);\n            }\n        }\n        return ans;\n    }", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stack>\n#include <utility>\n#include <limits.h>\n// TOFILL\nint main() {\n    vector<int> nums1 = {};\n    vector<int> nums2 = {1, 2, 3, 4, 5};\n    vector<int> nums3 = {5, 4, 3, 2, 1};\n    vector<int> nums4 = {1, 1, 1, 1};\n    vector<int> nums5 = {1, 3, 2, 4, 3, 5};\n\n    cout << numberOfSubarrays(nums1) << endl;\n    cout << numberOfSubarrays(nums2) << endl;\n    cout << numberOfSubarrays(nums3) << endl;\n    cout << numberOfSubarrays(nums4) << endl;\n    cout << numberOfSubarrays(nums5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###validPairs.cpp", "source_code_str": "    long long validPairs(int n, vector<int>& val, vector<vector<int>>& edges) {\n        vector<vector<long long>> lift(n + 1, vector<long long>(32, 0));\n        vector<long long> dis(n + 1, 0);\n        vector<long long> dis2(n + 1, 0);\n        vector<vector<vector<long long>>> adj(n + 1);\n        for (auto i : edges) {\n            adj[i[0]].push_back({ i[1], i[2] });\n            adj[i[1]].push_back({ i[0], i[2] });\n        }\n        dis[0] = -1e15;\n        \n        stack<vector<long long>> st;\n        st.push({ 1, 0, 0, 0 }); \n        while (!st.empty()) {\n            auto top = st.top();\n            st.pop();\n            long long i = top[0], par = top[1], d = top[2], d2 = top[3];\n            lift[i][0] = par;\n            dis[i] = d;\n            dis2[i] = d2;\n            for (long long j = 1; j < 32; j++) {\n                lift[i][j] = lift[lift[i][j - 1]][j - 1];\n            }\n            for (auto j : adj[i]) {\n                if (j[0] == par) continue;\n                st.push({ j[0], i, d + j[1], d2 + 1 });\n            }\n        }\n        long long ans = 0;\n        for (long long i = 1; i <= n; i++) {\n            long long v = val[i-1];\n            long long p = i;\n            for (long long j = 31; j >= 0; j--) {\n                if (v >= dis[p] - dis[lift[p][j]]) {\n                    v -= (dis[p] - dis[lift[p][j]]);\n                    p = lift[p][j];\n                }\n            }\n            ans += dis2[i] - dis2[p];\n        }\n        return ans;\n    }", "source_code_shell": "#include <iostream>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <stack>\n// TOFILL\nint main() {\n    vector<int> val1 = {1};\n    vector<vector<int>> edges1 = {};\n    cout << validPairs(1, val1, edges1) << endl;\n\n    vector<int> val2 = {5, 10};\n    vector<vector<int>> edges2 = {{1, 2, 3}};\n    cout << validPairs(2, val2, edges2) << endl;\n\n    vector<int> val3 = {8, 12, 14};\n    vector<vector<int>> edges3 = {{1, 2, 5}, {1, 3, 7}};\n    cout << validPairs(3, val3, edges3) << endl;\n\n    vector<int> val4 = {100, 200, 50, 25};\n    vector<vector<int>> edges4 = {{1, 2, 10}, {2, 3, 20}, {3, 4, 5}};\n    cout << validPairs(4, val4, edges4) << endl;\n\n    vector<int> val5 = {15, 25, 35, 45, 55};\n    vector<vector<int>> edges5 = {{1, 2, 1}, {1, 3, 2}, {2, 4, 3}, {2, 5, 4}};\n    cout << validPairs(5, val5, edges5) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###maxScore2.cpp", "source_code_str": "    int maxScore2(vector<vector<int>>& grid) {\n        int ans = INT_MIN;\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> f(m + 1, vector<int>(n + 1, INT_MAX));\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                int mn = min(f[i + 1][j], f[i][j + 1]);\n                ans = max(ans, grid[i][j] - mn);\n                f[i + 1][j + 1] = min(mn, grid[i][j]);\n            }\n        }\n        return ans;\n    }", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n// TOFILL\nint main() {\n    vector<vector<int>> grid1 = {{1, 2}, {3, 4}};\n    vector<vector<int>> grid2 = {{0, 0}, {0, 0}};\n    vector<vector<int>> grid3 = {{-1, -2}, {-3, -4}};\n    vector<vector<int>> grid4 = {{1, -1}, {2, -2}};\n    vector<vector<int>> grid5 = {{1000, 2000}, {3000, 4000}};\n    vector<vector<int>> grid6 = {{100, -100}, {50, 50}};\n    vector<vector<int>> grid7 = {{5, 10}, {15, 20}};\n    vector<vector<int>> grid8 = {{1, 2, 3, 4, 5}};\n    vector<vector<int>> grid9 = {{0}, {1}, {1}, {1}};\n    vector<vector<int>> grid10 = {{1}};\n    \n    cout << maxScore2(grid1) << endl;\n    cout << maxScore2(grid2) << endl;\n    cout << maxScore2(grid3) << endl;\n    cout << maxScore2(grid4) << endl;\n    cout << maxScore2(grid5) << endl;\n    cout << maxScore2(grid6) << endl;\n    cout << maxScore2(grid7) << endl;\n    cout << maxScore2(grid8) << endl;\n    cout << maxScore2(grid9) << endl;\n    cout << maxScore2(grid10) << endl;\n\n    return 0;\n}"}
{"source_Lan": "cpp###maxPointsInsideSquare.cpp", "source_code_str": "int maxPointsInsideSquare(vector<vector<int>>& points, string s) {\n        vector<int> min1(26, 1000000001);\n        int min2 = 1000000001;\n        int n = s.length();\n        for (int i = 0; i < n; ++i) {\n            int x = points[i][0], y = points[i][1], j = s[i] - 'a';\n            int d = max(abs(x), abs(y));\n            if (d < min1[j]) {\n                min2 = min(min2, min1[j]);\n                min1[j] = d;\n            } else if (d < min2) {\n                min2 = d;\n            }\n        }\n        int res = 0;\n        for (int d : min1) {\n            if (d < min2) {\n                ++res;\n            }\n        }\n        return res;\n    }", "source_code_shell": "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n#include <iostream>\n#include <vector>\n#include <string>\n// TOFILL\nint main() {\n    vector<vector<int>> points1 = {{1, 1}, {2, 2}, {3, 3}};\n    string s1 = \"abc\";\n    cout << maxPointsInsideSquare(points1, s1) << endl;\n\n    vector<vector<int>> points2 = {{-1, -1}, {-2, -3}, {3, 2}};\n    string s2 = \"abc\";\n    cout << maxPointsInsideSquare(points2, s2) << endl;\n\n    vector<vector<int>> points3 = {{0, 0}, {0, 1}, {0, 2}};\n    string s3 = \"aaa\";\n    cout << maxPointsInsideSquare(points3, s3) << endl;\n\n    vector<vector<int>> points4 = {{1, 0}, {0, 1}, {1, 1}};\n    string s4 = \"xyz\";\n    cout << maxPointsInsideSquare(points4, s4) << endl;\n\n    vector<vector<int>> points5 = {{0, 0}, {2, 1}, {1, 2}};\n    string s5 = \"\";\n    cout << maxPointsInsideSquare(points5, s5) << endl;\n\n    vector<vector<int>> points6 = {{0, 0}};\n    string s6 = \"a\";\n    cout << maxPointsInsideSquare(points6, s6) << endl;\n\n    return 0;\n}"}
